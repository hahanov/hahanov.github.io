'use strict';
(function(window) {
    /**
     * @return {undefined}
     */
    function Class() {}
    /** @type {!RegExp} */
    var numberPattern = /xyz/.test(function() {
        xyz;
    }) ? /\b_super\b/ : /.*/;
    /**
     * @param {!Object} obj
     * @return {?}
     */
    Class.extend = function(obj) {
        var parent = this.prototype;
        /** @type {!Object} */
        var properties = Object.create(parent);
        var i;
        for (i in obj) {
            properties[i] = "function" === typeof obj[i] && "function" == typeof parent[i] && numberPattern.test(obj[i]) ? function(name, CropAreaRectangle) {
                return function() {
                    var tmp = this._super;
                    this._super = parent[name];
                    var cssobj = CropAreaRectangle.apply(this, arguments);
                    this._super = tmp;
                    return cssobj;
                };
            }(i, obj[i]) : obj[i];
        }
        /** @type {!Function} */
        obj = "function" === typeof properties.init ? properties.hasOwnProperty("init") ? properties.init : function() {
            parent.init.apply(this, arguments);
        } : function() {};
        /** @type {!Object} */
        obj.prototype = properties;
        /** @type {!Object} */
        properties.constructor = obj;
        /** @type {function(!Object): ?} */
        obj.extend = Class.extend;
        return obj;
    };
    /** @type {function(): undefined} */
    window.Class = Class;
})(this);
(function(V) {
    var Component = Class.extend({
        init: function(name) {
            if (!name.element) {
                throw Error("Element is mandatory");
            }
            this.element = $(name.element);
            this.element.data("instance", this);
            this.selectors = {};
            this.state = {};
            this.defaultOptions = $.extend({}, {
                classNames: {}
            }, this.getOptions());
            this.options = $.extend({}, this.defaultOptions, name.options, this.element.data("component-options"));
            this.initCache();
            this.initState();
            this.bindEvents();
            this.afterInit();
        },
        getOptions: function() {
            return {};
        },
        initCache: function() {},
        initState: function() {},
        bindEvents: function() {},
        afterInit: function() {}
    });
    V.Component = Component;
})(window.app = window.app || {}, jQuery);
! function($) {
    /**
     * @param {!Event} event
     * @param {string} type
     * @return {undefined}
     */
    function simulateMouseEvent(event, type) {
        if (!(1 < event.originalEvent.touches.length)) {
            event.preventDefault();
            var _def = event.originalEvent.changedTouches[0];
            /** @type {(Event|null)} */
            var evt = document.createEvent("MouseEvents");
            evt.initMouseEvent(type, true, true, window, 1, _def.screenX, _def.screenY, _def.clientX, _def.clientY, false, false, false, false, 0, null);
            event.target.dispatchEvent(evt);
        }
    }
    if ($.support.touch = "ontouchend" in document, $.support.touch) {
        var k;
        var mouseProto = $.ui.mouse.prototype;
        var _mouseInit = mouseProto._mouseInit;
        var _mouseDestroy = mouseProto._mouseDestroy;
        /**
         * @param {!Event} event
         * @return {undefined}
         */
        mouseProto._touchStart = function(event) {
            if (!k && this._mouseCapture(event.originalEvent.changedTouches[0])) {
                /** @type {boolean} */
                k = true;
                /** @type {boolean} */
                this._touchMoved = false;
                simulateMouseEvent(event, "mouseover");
                simulateMouseEvent(event, "mousemove");
                simulateMouseEvent(event, "mousedown");
            }
        };
        /**
         * @param {!Event} event
         * @return {undefined}
         */
        mouseProto._touchMove = function(event) {
            if (k) {
                /** @type {boolean} */
                this._touchMoved = true;
                simulateMouseEvent(event, "mousemove");
            }
        };
        /**
         * @param {!Event} event
         * @return {undefined}
         */
        mouseProto._touchEnd = function(event) {
            if (k) {
                simulateMouseEvent(event, "mouseup");
                simulateMouseEvent(event, "mouseout");
                if (!this._touchMoved) {
                    simulateMouseEvent(event, "click");
                }
                /** @type {boolean} */
                k = false;
            }
        };
        /**
         * @return {undefined}
         */
        mouseProto._mouseInit = function() {
            this.element.bind({
                touchstart: $.proxy(this, "_touchStart"),
                touchmove: $.proxy(this, "_touchMove"),
                touchend: $.proxy(this, "_touchEnd")
            });
            _mouseInit.call(this);
        };
        /**
         * @return {undefined}
         */
        mouseProto._mouseDestroy = function() {
            this.element.unbind({
                touchstart: $.proxy(this, "_touchStart"),
                touchmove: $.proxy(this, "_touchMove"),
                touchend: $.proxy(this, "_touchEnd")
            });
            _mouseDestroy.call(this);
        };
    }
}(jQuery);
(function() {
    /**
     * @param {number} dir
     * @return {?}
     */
    function createReduce(dir) {
        return function(obj, name, initialMemo, idx) {
            name = fn(name, idx, 4);
            var keys = !isArrayLike(obj) && _.keys(obj);
            var length = (keys || obj).length;
            /** @type {number} */
            var index = 0 < dir ? 0 : length - 1;
            if (3 > arguments.length) {
                initialMemo = obj[keys ? keys[index] : index];
                index = index + dir;
            }
            /** @type {!Function} */
            var iteratee = name;
            var memo = initialMemo;
            for (; 0 <= index && length > index; index = index + dir) {
                var currentKey = keys ? keys[index] : index;
                memo = iteratee(memo, obj[currentKey], currentKey, obj);
            }
            return memo;
        };
    }
    /**
     * @param {number} dir
     * @return {?}
     */
    function createPredicateIndexFinder(dir) {
        return function(obj, predicate, value) {
            predicate = cb(predicate, value);
            value = map(obj);
            /** @type {number} */
            var index = 0 < dir ? 0 : value - 1;
            for (; 0 <= index && value > index; index = index + dir) {
                if (predicate(obj[index], index, obj)) {
                    return index;
                }
            }
            return -1;
        };
    }
    /**
     * @param {number} dir
     * @param {?} predicateFind
     * @param {number} sortedIndex
     * @return {?}
     */
    function createIndexFinder(dir, predicateFind, sortedIndex) {
        return function(array, value, index) {
            /** @type {number} */
            var i = 0;
            var length = map(array);
            if ("number" == typeof index) {
                if (0 < dir) {
                    /** @type {number} */
                    i = 0 <= index ? index : Math.max(index + length, i);
                } else {
                    length = 0 <= index ? Math.min(index + 1, length) : index + length + 1;
                }
            } else {
                if (sortedIndex && index && length) {
                    return index = sortedIndex(array, value), array[index] === value ? index : -1;
                }
            }
            if (value !== value) {
                return index = predicateFind(slice.call(array, i, length), _.isNaN), 0 <= index ? index + i : -1;
            }
            /** @type {number} */
            index = 0 < dir ? i : length - 1;
            for (; 0 <= index && length > index; index = index + dir) {
                if (array[index] === value) {
                    return index;
                }
            }
            return -1;
        };
    }
    /**
     * @param {!Object} obj
     * @param {!Array} keys
     * @return {undefined}
     */
    function collectNonEnumProps(obj, keys) {
        /** @type {number} */
        var i = props.length;
        var constructor = obj.constructor;
        constructor = _.isFunction(constructor) && constructor.prototype || ObjProto;
        /** @type {string} */
        var prop = "constructor";
        if (_.has(obj, prop) && !_.contains(keys, prop)) {
            keys.push(prop);
        }
        for (; i--;) {
            /** @type {string} */
            prop = props[i];
            if (prop in obj && obj[prop] !== constructor[prop] && !_.contains(keys, prop)) {
                keys.push(prop);
            }
        }
    }
    var root = this;
    var previousUnderscore = root._;
    var ArrayProto = Array.prototype;
    var ObjProto = Object.prototype;
    /** @type {function(this:IArrayLike<T>, ...T): number} */
    var push = ArrayProto.push;
    /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
    var slice = ArrayProto.slice;
    /** @type {function(this:*): string} */
    var toString = ObjProto.toString;
    /** @type {function(this:Object, *): boolean} */
    var hasOwnProperty = ObjProto.hasOwnProperty;
    /** @type {function(*): boolean} */
    var escapeMap = Array.isArray;
    /** @type {function(!Object): !Array<string>} */
    var nativeKeys = Object.keys;
    /** @type {function(this:!Function, (Object|null|undefined), ...*): !Function} */
    var nativeBind = Function.prototype.bind;
    /** @type {function((Object|null), (Object|null)=): !Object} */
    var create = Object.create;
    /**
     * @return {undefined}
     */
    var Config = function() {};
    /**
     * @param {!Object} obj
     * @return {?}
     */
    var _ = function(obj) {
        return obj instanceof _ ? obj : this instanceof _ ? void(this._wrapped = obj) : new _(obj);
    };
    if ("undefined" != typeof exports) {
        if ("undefined" != typeof module && module.exports) {
            /** @type {function(!Object): ?} */
            exports = module.exports = _;
        }
        /** @type {function(!Object): ?} */
        exports._ = _;
    } else {
        /** @type {function(!Object): ?} */
        root._ = _;
    }
    /** @type {string} */
    _.VERSION = "1.8.3";
    /**
     * @param {!Function} path
     * @param {?} obj
     * @param {number} a
     * @return {?}
     */
    var fn = function(path, obj, a) {
        if (void 0 === obj) {
            return path;
        }
        switch (null == a ? 3 : a) {
            case 1:
                return function(h) {
                    return path.call(obj, h);
                };
            case 2:
                return function(h, d) {
                    return path.call(obj, h, d);
                };
            case 3:
                return function(h, d, l) {
                    return path.call(obj, h, d, l);
                };
            case 4:
                return function(h, d, l, startAngle) {
                    return path.call(obj, h, d, l, startAngle);
                };
        }
        return function() {
            return path.apply(obj, arguments);
        };
    };
    /**
     * @param {!Function} data
     * @param {!Object} id
     * @param {number} e
     * @return {?}
     */
    var cb = function(data, id, e) {
        return null == data ? _.identity : _.isFunction(data) ? fn(data, id, e) : _.isObject(data) ? _.matcher(data) : _.property(data);
    };
    /**
     * @param {!Function} value
     * @param {!Object} obj
     * @return {?}
     */
    _.iteratee = function(value, obj) {
        return cb(value, obj, 1 / 0);
    };
    /**
     * @param {!Function} keysFunc
     * @param {boolean} undefinedOnly
     * @return {?}
     */
    var createAssigner = function(keysFunc, undefinedOnly) {
        return function(obj) {
            /** @type {number} */
            var length = arguments.length;
            if (2 > length || null == obj) {
                return obj;
            }
            /** @type {number} */
            var index = 1;
            for (; length > index; index++) {
                var source = arguments[index];
                var keys = keysFunc(source);
                var i = keys.length;
                /** @type {number} */
                var l = 0;
                for (; i > l; l++) {
                    var k = keys[l];
                    if (!(undefinedOnly && void 0 !== obj[k])) {
                        obj[k] = source[k];
                    }
                }
            }
            return obj;
        };
    };
    /**
     * @param {!Object} config
     * @return {?}
     */
    var clone = function(config) {
        if (!_.isObject(config)) {
            return {};
        }
        if (create) {
            return create(config);
        }
        /** @type {!Object} */
        Config.prototype = config;
        config = new Config;
        return Config.prototype = null, config;
    };
    /**
     * @param {(!Function|string)} key
     * @return {?}
     */
    var createEscaper = function(key) {
        return function(array) {
            return null == array ? void 0 : array[key];
        };
    };
    /** @type {number} */
    var v = Math.pow(2, 53) - 1;
    var map = createEscaper("length");
    /**
     * @param {number} value
     * @return {?}
     */
    var isArrayLike = function(value) {
        value = map(value);
        return "number" == typeof value && 0 <= value && v >= value;
    };
    /** @type {function(!Array, !Function, number): ?} */
    _.each = _.forEach = function(obj, next, i) {
        next = fn(next, i);
        var length;
        if (isArrayLike(obj)) {
            /** @type {number} */
            i = 0;
            length = obj.length;
            for (; length > i; i++) {
                next(obj[i], i, obj);
            }
        } else {
            var keys = _.keys(obj);
            /** @type {number} */
            i = 0;
            length = keys.length;
            for (; length > i; i++) {
                next(obj[keys[i]], keys[i], obj);
            }
        }
        return obj;
    };
    /** @type {function(!Object, !Function, !Array): ?} */
    _.map = _.collect = function(obj, iteratee, keys) {
        iteratee = cb(iteratee, keys);
        keys = !isArrayLike(obj) && _.keys(obj);
        var length = (keys || obj).length;
        /** @type {!Array} */
        var results = Array(length);
        /** @type {number} */
        var index = 0;
        for (; length > index; index++) {
            var currentKey = keys ? keys[index] : index;
            results[index] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
    };
    _.reduce = _.foldl = _.inject = createReduce(1);
    _.reduceRight = _.foldr = createReduce(-1);
    /** @type {function(!Array, !Function, !Array): ?} */
    _.find = _.detect = function(obj, predicate, context) {
        var xhrModelLoadingAttribute;
        return xhrModelLoadingAttribute = isArrayLike(obj) ? _.findIndex(obj, predicate, context) : _.findKey(obj, predicate, context), void 0 !== xhrModelLoadingAttribute && -1 !== xhrModelLoadingAttribute ? obj[xhrModelLoadingAttribute] : void 0;
    };
    /** @type {function(!Object, !Function, !Object): ?} */
    _.filter = _.select = function(a, c, data) {
        /** @type {!Array} */
        var t_chksum = [];
        return c = cb(c, data), _.each(a, function(r, result, runjs) {
            if (c(r, result, runjs)) {
                t_chksum.push(r);
            }
        }), t_chksum;
    };
    /**
     * @param {!Object} type
     * @param {!Object} e
     * @param {string} data
     * @return {?}
     */
    _.reject = function(type, e, data) {
        return _.filter(type, _.negate(cb(e)), data);
    };
    /** @type {function(!Object, !Function, !Array): ?} */
    _.every = _.all = function(array, callback, context) {
        callback = cb(callback, context);
        context = !isArrayLike(array) && _.keys(array);
        var current = (context || array).length;
        /** @type {number} */
        var target = 0;
        for (; current > target; target++) {
            var key = context ? context[target] : target;
            if (!callback(array[key], key, array)) {
                return false;
            }
        }
        return true;
    };
    /** @type {function(!Object, !Function, !Array): ?} */
    _.some = _.any = function(array, callback, context) {
        callback = cb(callback, context);
        context = !isArrayLike(array) && _.keys(array);
        var current = (context || array).length;
        /** @type {number} */
        var target = 0;
        for (; current > target; target++) {
            var key = context ? context[target] : target;
            if (callback(array[key], key, array)) {
                return true;
            }
        }
        return false;
    };
    /** @type {function(!Array, ?, number, boolean): ?} */
    _.contains = _.includes = _.include = function(value, name, callback, url) {
        return isArrayLike(value) || (value = _.values(value)), ("number" != typeof callback || url) && (callback = 0), 0 <= _.indexOf(value, name, callback);
    };
    /**
     * @param {!Object} b
     * @param {?} c
     * @return {?}
     */
    _.invoke = function(b, c) {
        /** @type {!Array<?>}/ */
        var to = slice.call(arguments, 2);
        var s = _.isFunction(c);
        return _.map(b, function(item) {
            var copy = s ? c : item[c];
            return null == copy ? copy : copy.apply(item, to);
        });
    };
    /**
     * @param {!Object} array
     * @param {?} key
     * @return {?}
     */
    _.pluck = function(array, key) {
        return _.map(array, _.property(key));
    };
    /**
     * @param {undefined} array
     * @param {string} filter
     * @return {?}
     */
    _.where = function(array, filter) {
        return _.filter(array, _.matcher(filter));
    };
    /**
     * @param {!Array} obj
     * @param {string} attrs
     * @return {?}
     */
    _.findWhere = function(obj, attrs) {
        return _.find(obj, _.matcher(attrs));
    };
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @param {string} x
     * @return {?}
     */
    _.max = function(name, value, x) {
        var k;
        /** @type {number} */
        var z = -1 / 0;
        /** @type {number} */
        var bestsize = -1 / 0;
        if (null == value && null != name) {
            name = isArrayLike(name) ? name : _.values(name);
            /** @type {number} */
            var i = 0;
            var n = name.length;
            for (; n > i; i++) {
                x = name[i];
                if (x > z) {
                    /** @type {string} */
                    z = x;
                }
            }
        } else {
            value = cb(value, x);
            _.each(name, function(x, key, data) {
                k = value(x, key, data);
                if (k > bestsize || k === -1 / 0 && z === -1 / 0) {
                    /** @type {string} */
                    z = x;
                    bestsize = k;
                }
            });
        }
        return z;
    };
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @param {string} a
     * @return {?}
     */
    _.min = function(name, value, a) {
        var result;
        /** @type {number} */
        var b = 1 / 0;
        /** @type {number} */
        var temp = 1 / 0;
        if (null == value && null != name) {
            name = isArrayLike(name) ? name : _.values(name);
            /** @type {number} */
            var i = 0;
            var length = name.length;
            for (; length > i; i++) {
                a = name[i];
                if (b > a) {
                    /** @type {string} */
                    b = a;
                }
            }
        } else {
            value = cb(value, a);
            _.each(name, function(B, name, data) {
                result = value(B, name, data);
                if (temp > result || 1 / 0 === result && 1 / 0 === b) {
                    /** @type {string} */
                    b = B;
                    temp = result;
                }
            });
        }
        return b;
    };
    /**
     * @param {number} obj
     * @return {?}
     */
    _.shuffle = function(obj) {
        var self = isArrayLike(obj) ? obj : _.values(obj);
        var index = self.length;
        /** @type {!Array} */
        var data = Array(index);
        /** @type {number} */
        var key = 0;
        for (; index > key; key++) {
            obj = _.random(0, key);
            if (obj !== key) {
                data[key] = data[obj];
            }
            data[obj] = self[key];
        }
        return data;
    };
    /**
     * @param {number} obj
     * @param {!Object} n
     * @param {boolean} a
     * @return {?}
     */
    _.sample = function(obj, n, a) {
        return null == n || a ? (isArrayLike(obj) || (obj = _.values(obj)), obj[_.random(obj.length - 1)]) : _.shuffle(obj).slice(0, Math.max(0, n));
    };
    /**
     * @param {!Object} obj
     * @param {!Function} iteratee
     * @param {!Object} context
     * @return {?}
     */
    _.sortBy = function(obj, iteratee, context) {
        return iteratee = cb(iteratee, context), _.pluck(_.map(obj, function(value, index, array) {
            return {
                value: value,
                index: index,
                criteria: iteratee(value, index, array)
            };
        }).sort(function(b, a) {
            var bc = b.criteria;
            var ac = a.criteria;
            if (bc !== ac) {
                if (bc > ac || void 0 === bc) {
                    return 1;
                }
                if (ac > bc || void 0 === ac) {
                    return -1;
                }
            }
            return b.index - a.index;
        }), "value");
    };
    /**
     * @param {!Function} cb
     * @return {?}
     */
    var group = function(cb) {
        return function(array, iteratee, context) {
            var additiveNodes = {};
            return iteratee = cb(iteratee, context), _.each(array, function(obj, value) {
                value = iteratee(obj, value, array);
                cb(additiveNodes, obj, value);
            }), additiveNodes;
        };
    };
    _.groupBy = group(function(aliases, c, key) {
        if (_.has(aliases, key)) {
            aliases[key].push(c);
        } else {
            /** @type {!Array} */
            aliases[key] = [c];
        }
    });
    _.indexBy = group(function(b, n, p) {
        b[p] = n;
    });
    _.countBy = group(function(b, canCreateDiscussions, paramName) {
        if (_.has(b, paramName)) {
            b[paramName]++;
        } else {
            /** @type {number} */
            b[paramName] = 1;
        }
    });
    /**
     * @param {!Array} object
     * @return {?}
     */
    _.toArray = function(object) {
        return object ? _.isArray(object) ? slice.call(object) : isArrayLike(object) ? _.map(object, _.identity) : _.values(object) : [];
    };
    /**
     * @param {!Object} name
     * @return {?}
     */
    _.size = function(name) {
        return null == name ? 0 : isArrayLike(name) ? name.length : _.keys(name).length;
    };
    /**
     * @param {undefined} a
     * @param {!Function} f
     * @param {!Object} data
     * @return {?}
     */
    _.partition = function(a, f, data) {
        f = cb(f, data);
        /** @type {!Array} */
        var passed = [];
        /** @type {!Array} */
        var failed = [];
        return _.each(a, function(x, wholeDoc, was_new) {
            (f(x, wholeDoc, was_new) ? passed : failed).push(x);
        }), [passed, failed];
    };
    /** @type {function(string, string, boolean): ?} */
    _.first = _.head = _.take = function(array, n, guard) {
        return null == array ? void 0 : null == n || guard ? array[0] : _.initial(array, array.length - n);
    };
    /**
     * @param {string} array
     * @param {number} n
     * @param {boolean} guard
     * @return {?}
     */
    _.initial = function(array, n, guard) {
        return slice.call(array, 0, Math.max(0, array.length - (null == n || guard ? 1 : n)));
    };
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @param {string} a
     * @return {?}
     */
    _.last = function(name, value, a) {
        return null == name ? void 0 : null == value || a ? name[name.length - 1] : _.rest(name, Math.max(0, name.length - value));
    };
    /** @type {function(!Object, number, boolean): ?} */
    _.rest = _.tail = _.drop = function(names, index, guard) {
        return slice.call(names, null == index || guard ? 1 : index);
    };
    /**
     * @param {undefined} input
     * @return {?}
     */
    _.compact = function(input) {
        return _.filter(input, _.identity);
    };
    /**
     * @param {!Array} array
     * @param {boolean} shallow
     * @param {boolean} strict
     * @param {number} index
     * @return {?}
     */
    var flatten = function(array, shallow, strict, index) {
        /** @type {!Array} */
        var result = [];
        /** @type {number} */
        var i = 0;
        index = index || 0;
        var length = map(array);
        for (; length > index; index++) {
            var value = array[index];
            if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
                if (!shallow) {
                    value = flatten(value, shallow, strict);
                }
                /** @type {number} */
                var j = 0;
                var valLength = value.length;
                result.length += valLength;
                for (; valLength > j;) {
                    result[i++] = value[j++];
                }
            } else {
                if (!strict) {
                    result[i++] = value;
                }
            }
        }
        return result;
    };
    /**
     * @param {!Array} array
     * @param {boolean} shallow
     * @return {?}
     */
    _.flatten = function(array, shallow) {
        return flatten(array, shallow, false);
    };
    /**
     * @param {undefined} array
     * @return {?}
     */
    _.without = function(array) {
        return _.difference(array, slice.call(arguments, 1));
    };
    /** @type {function(!NodeList, !Object, !Object, !Object): ?} */
    _.uniq = _.unique = function(array, isSorted, iteratee, context) {
        if (!_.isBoolean(isSorted)) {
            /** @type {!Object} */
            context = iteratee;
            /** @type {!Object} */
            iteratee = isSorted;
            /** @type {boolean} */
            isSorted = false;
        }
        if (null != iteratee) {
            iteratee = cb(iteratee, context);
        }
        /** @type {!Array} */
        context = [];
        /** @type {!Array} */
        var found = [];
        /** @type {number} */
        var i = 0;
        var sz = map(array);
        for (; sz > i; i++) {
            var value = array[i];
            var key = iteratee ? iteratee(value, i, array) : value;
            if (isSorted) {
                if (!(i && found === key)) {
                    context.push(value);
                }
                found = key;
            } else {
                if (iteratee) {
                    if (!_.contains(found, key)) {
                        found.push(key);
                        context.push(value);
                    }
                } else {
                    if (!_.contains(context, value)) {
                        context.push(value);
                    }
                }
            }
        }
        return context;
    };
    /**
     * @return {?}
     */
    _.union = function() {
        return _.uniq(flatten(arguments, true, true));
    };
    /**
     * @param {!NodeList} array
     * @return {?}
     */
    _.intersection = function(array) {
        /** @type {!Array} */
        var result = [];
        /** @type {number} */
        var max = arguments.length;
        /** @type {number} */
        var j = 0;
        var length = map(array);
        for (; length > j; j++) {
            var value = array[j];
            if (!_.contains(result, value)) {
                /** @type {number} */
                var i = 1;
                for (; max > i && _.contains(arguments[i], value); i++) {}
                if (i === max) {
                    result.push(value);
                }
            }
        }
        return result;
    };
    /**
     * @param {!Object} a
     * @return {?}
     */
    _.difference = function(a) {
        var extensions = flatten(arguments, true, true, 1);
        return _.filter(a, function(otherName) {
            return !_.contains(extensions, otherName);
        });
    };
    /**
     * @return {?}
     */
    _.zip = function() {
        return _.unzip(arguments);
    };
    /**
     * @param {!Object} array
     * @return {?}
     */
    _.unzip = function(array) {
        var length = array && _.max(array, map).length || 0;
        /** @type {!Array} */
        var result = Array(length);
        /** @type {number} */
        var index = 0;
        for (; length > index; index++) {
            result[index] = _.pluck(array, index);
        }
        return result;
    };
    /**
     * @param {!NodeList} array
     * @param {!NodeList} vals
     * @return {?}
     */
    _.object = function(array, vals) {
        var o = {};
        /** @type {number} */
        var i = 0;
        var sz = map(array);
        for (; sz > i; i++) {
            if (vals) {
                o[array[i]] = vals[i];
            } else {
                o[array[i][0]] = array[i][1];
            }
        }
        return o;
    };
    _.findIndex = createPredicateIndexFinder(1);
    _.findLastIndex = createPredicateIndexFinder(-1);
    /**
     * @param {!NodeList} array
     * @param {?} value
     * @param {!Function} iteratee
     * @param {number} context
     * @return {?}
     */
    _.sortedIndex = function(array, value, iteratee, context) {
        iteratee = cb(iteratee, context, 1);
        value = iteratee(value);
        /** @type {number} */
        context = 0;
        var offset = map(array);
        for (; offset > context;) {
            /** @type {number} */
            var i = Math.floor((context + offset) / 2);
            if (iteratee(array[i]) < value) {
                /** @type {number} */
                context = i + 1;
            } else {
                /** @type {number} */
                offset = i;
            }
        }
        return context;
    };
    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
    /**
     * @param {number} x
     * @param {number} val
     * @param {number} r
     * @return {?}
     */
    _.range = function(x, val, r) {
        if (null == val) {
            val = x || 0;
            /** @type {number} */
            x = 0;
        }
        r = r || 1;
        /** @type {number} */
        val = Math.max(Math.ceil((val - x) / r), 0);
        /** @type {!Array} */
        var a = Array(val);
        /** @type {number} */
        var i = 0;
        for (; val > i; i++, x = x + r) {
            /** @type {number} */
            a[i] = x;
        }
        return a;
    };
    /**
     * @param {!Function} b
     * @param {!Function} a
     * @param {string} s
     * @param {!Object} o
     * @param {!Array} options
     * @return {?}
     */
    var extend = function(b, a, s, o, options) {
        if (!(o instanceof a)) {
            return b.apply(s, options);
        }
        a = clone(b.prototype);
        b = b.apply(a, options);
        return _.isObject(b) ? b : a;
    };
    /**
     * @param {!Object} type
     * @param {string=} name
     * @return {function(...?): ?}
     */
    _.bind = function(type, name) {
        if (nativeBind && type.bind === nativeBind) {
            return nativeBind.apply(type, slice.call(arguments, 1));
        }
        if (!_.isFunction(type)) {
            throw new TypeError("Bind must be called on a function");
        }
        /** @type {!Array<?>} */
        var headArgs = slice.call(arguments, 2);
        /**
         * @return {?}
         */
        var fn = function() {
            return extend(type, fn, name, this, headArgs.concat(slice.call(arguments)));
        };
        return fn;
    };
    /**
     * @param {!Function} params
     * @return {?}
     */
    _.partial = function(params) {
        /** @type {!Array<?>} */
        var args = slice.call(arguments, 1);
        /**
         * @return {?}
         */
        var fn = function() {
            /** @type {number} */
            var position = 0;
            /** @type {number} */
            var n = args.length;
            /** @type {!Array} */
            var a = Array(n);
            /** @type {number} */
            var i = 0;
            for (; n > i; i++) {
                a[i] = args[i] === _ ? arguments[position++] : args[i];
            }
            for (; position < arguments.length;) {
                a.push(arguments[position++]);
            }
            return extend(params, fn, this, this, a);
        };
        return fn;
    };
    /**
     * @param {string} obj
     * @return {?}
     */
    _.bindAll = function(obj) {
        var i;
        var f;
        /** @type {number} */
        var length = arguments.length;
        if (1 >= length) {
            throw Error("bindAll must be passed function names");
        }
        /** @type {number} */
        i = 1;
        for (; length > i; i++) {
            f = arguments[i];
            obj[f] = _.bind(obj[f], obj);
        }
        return obj;
    };
    /**
     * @param {!Function} fn
     * @param {!Function} hasher
     * @return {?}
     */
    _.memoize = function(fn, hasher) {
        /**
         * @param {string} key
         * @return {?}
         */
        var memoize = function(key) {
            var cache = memoize.cache;
            /** @type {string} */
            var address = "" + (hasher ? hasher.apply(this, arguments) : key);
            return _.has(cache, address) || (cache[address] = fn.apply(this, arguments)), cache[address];
        };
        return memoize.cache = {}, memoize;
    };
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @return {?}
     */
    _.delay = function(name, value) {
        /** @type {!Array<?>} */
        var arr = slice.call(arguments, 2);
        return setTimeout(function() {
            return name.apply(null, arr);
        }, value);
    };
    _.defer = _.partial(_.delay, _, 1);
    /**
     * @param {!Function} type
     * @param {number} limit
     * @param {number} options
     * @return {?}
     */
    _.throttle = function(type, limit, options) {
        var last;
        var e;
        var changed;
        /** @type {null} */
        var timeoutId = null;
        /** @type {number} */
        var page = 0;
        if (!options) {
            options = {};
        }
        /**
         * @return {undefined}
         */
        var later = function() {
            /** @type {number} */
            page = false === options.leading ? 0 : _.now();
            /** @type {null} */
            timeoutId = null;
            changed = type.apply(last, e);
            if (!timeoutId) {
                /** @type {null} */
                last = e = null;
            }
        };
        return function() {
            /** @type {number} */
            var pageCount = _.now();
            if (!(page || false !== options.leading)) {
                /** @type {number} */
                page = pageCount;
            }
            /** @type {number} */
            var remaining = limit - (pageCount - page);
            return last = this, e = arguments, 0 >= remaining || remaining > limit ? (timeoutId && (clearTimeout(timeoutId), timeoutId = null), page = pageCount, changed = type.apply(last, e), timeoutId || (last = e = null)) : timeoutId || false === options.trailing || (timeoutId = setTimeout(later, remaining)), changed;
        };
    };
    /**
     * @param {!Function} d
     * @param {number} time
     * @param {boolean} immediate
     * @return {?}
     */
    _.debounce = function(d, time, immediate) {
        var timeoutId;
        var args;
        var opts;
        var c;
        var maskset;
        /**
         * @return {undefined}
         */
        var delayed = function() {
            /** @type {number} */
            var t = _.now() - c;
            if (time > t && 0 <= t) {
                /** @type {number} */
                timeoutId = setTimeout(delayed, time - t);
            } else {
                /** @type {null} */
                timeoutId = null;
                if (!immediate) {
                    maskset = d.apply(opts, args);
                    if (!timeoutId) {
                        /** @type {null} */
                        opts = args = null;
                    }
                }
            }
        };
        return function() {
            opts = this;
            /** @type {!Arguments} */
            args = arguments;
            /** @type {number} */
            c = _.now();
            var callNow = immediate && !timeoutId;
            return timeoutId || (timeoutId = setTimeout(delayed, time)), callNow && (maskset = d.apply(opts, args), opts = args = null), maskset;
        };
    };
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @return {?}
     */
    _.wrap = function(name, value) {
        return _.partial(value, name);
    };
    /**
     * @param {!Function} predicate
     * @return {?}
     */
    _.negate = function(predicate) {
        return function() {
            return !predicate.apply(this, arguments);
        };
    };
    /**
     * @return {?}
     */
    _.compose = function() {
        /** @type {!Arguments} */
        var callbacks = arguments;
        /** @type {number} */
        var i = callbacks.length - 1;
        return function() {
            /** @type {number} */
            var id = i;
            var result = callbacks[i].apply(this, arguments);
            for (; id--;) {
                result = callbacks[id].call(this, result);
            }
            return result;
        };
    };
    /**
     * @param {string} data
     * @param {!Function} f
     * @return {?}
     */
    _.after = function(data, f) {
        return function() {
            return 1 > --data ? f.apply(this, arguments) : void 0;
        };
    };
    /**
     * @param {?} callback
     * @param {(!Function|number)} when
     * @return {?}
     */
    _.before = function(callback, when) {
        var _ref12;
        return function() {
            return 0 < --callback && (_ref12 = when.apply(this, arguments)), 1 >= callback && (when = null), _ref12;
        };
    };
    _.once = _.partial(_.before, 2);
    /** @type {boolean} */
    var result = !{
        toString: null
    }.propertyIsEnumerable("toString");
    /** @type {!Array<string>} */
    var props = "valueOf isPrototypeOf toString propertyIsEnumerable hasOwnProperty toLocaleString".split(" ");
    /**
     * @param {!Object} name
     * @return {?}
     */
    _.keys = function(name) {
        if (!_.isObject(name)) {
            return [];
        }
        if (nativeKeys) {
            return nativeKeys(name);
        }
        /** @type {!Array} */
        var keys = [];
        var key;
        for (key in name) {
            if (_.has(name, key)) {
                keys.push(key);
            }
        }
        return result && collectNonEnumProps(name, keys), keys;
    };
    /**
     * @param {!Object} obj
     * @return {?}
     */
    _.allKeys = function(obj) {
        if (!_.isObject(obj)) {
            return [];
        }
        /** @type {!Array} */
        var keys = [];
        var key;
        for (key in obj) {
            keys.push(key);
        }
        return result && collectNonEnumProps(obj, keys), keys;
    };
    /**
     * @param {!Object} value
     * @return {?}
     */
    _.values = function(value) {
        var keys = _.keys(value);
        var length = keys.length;
        /** @type {!Array} */
        var result = Array(length);
        /** @type {number} */
        var i = 0;
        for (; length > i; i++) {
            result[i] = value[keys[i]];
        }
        return result;
    };
    /**
     * @param {undefined} obj
     * @param {!Function} iteratee
     * @param {string} i
     * @return {?}
     */
    _.mapObject = function(obj, iteratee, i) {
        iteratee = cb(iteratee, i);
        var item = _.keys(obj);
        var itemLen = item.length;
        var results = {};
        /** @type {number} */
        var type = 0;
        for (; itemLen > type; type++) {
            i = item[type];
            results[i] = iteratee(obj[i], i, obj);
        }
        return results;
    };
    /**
     * @param {undefined} table
     * @return {?}
     */
    _.pairs = function(table) {
        var names = _.keys(table);
        var length = names.length;
        /** @type {!Array} */
        var pairs = Array(length);
        /** @type {number} */
        var i = 0;
        for (; length > i; i++) {
            /** @type {!Array} */
            pairs[i] = [names[i], table[names[i]]];
        }
        return pairs;
    };
    /**
     * @param {!Object} map
     * @return {?}
     */
    _.invert = function(map) {
        var res = {};
        var values = _.keys(map);
        /** @type {number} */
        var i = 0;
        var l = values.length;
        for (; l > i; i++) {
            res[map[values[i]]] = values[i];
        }
        return res;
    };
    /** @type {function(string): ?} */
    _.functions = _.methods = function(o) {
        /** @type {!Array} */
        var tobesorted = [];
        var name;
        for (name in o) {
            if (_.isFunction(o[name])) {
                tobesorted.push(name);
            }
        }
        return tobesorted.sort();
    };
    _.extend = createAssigner(_.allKeys);
    _.extendOwn = _.assign = createAssigner(_.keys);
    /**
     * @param {!Object} object
     * @param {!Function} predicate
     * @param {!Array} context
     * @return {?}
     */
    _.findKey = function(object, predicate, context) {
        predicate = cb(predicate, context);
        var key;
        context = _.keys(object);
        /** @type {number} */
        var guid = 0;
        var img = context.length;
        for (; img > guid; guid++) {
            if (key = context[guid], predicate(object[key], key, object)) {
                return key;
            }
        }
    };
    /**
     * @param {string} e
     * @param {!Function} value
     * @param {?} ctx
     * @return {?}
     */
    _.pick = function(e, value, ctx) {
        var f;
        var data;
        var seed = {};
        /** @type {string} */
        var obj = e;
        if (null == obj) {
            return seed;
        }
        if (_.isFunction(value)) {
            data = _.allKeys(obj);
            f = fn(value, ctx);
        } else {
            data = flatten(arguments, false, false, 1);
            /**
             * @param {?} cf
             * @param {(number|string)} name
             * @param {!Object} main
             * @return {?}
             */
            f = function(cf, name, main) {
                return name in main;
            };
            /** @type {!Object} */
            obj = Object(obj);
        }
        /** @type {number} */
        var x = 0;
        var y = data.length;
        for (; y > x; x++) {
            var i = data[x];
            var value = obj[i];
            if (f(value, i, obj)) {
                seed[i] = value;
            }
        }
        return seed;
    };
    /**
     * @param {string} value
     * @param {!Function} iteratee
     * @param {?} context
     * @return {?}
     */
    _.omit = function(value, iteratee, context) {
        if (_.isFunction(iteratee)) {
            iteratee = _.negate(iteratee);
        } else {
            var type = _.map(flatten(arguments, false, false, 1), String);
            /**
             * @param {?} context
             * @param {?} obj
             * @return {?}
             */
            iteratee = function(context, obj) {
                return !_.contains(type, obj);
            };
        }
        return _.pick(value, iteratee, context);
    };
    _.defaults = createAssigner(_.allKeys, true);
    /**
     * @param {!Object} data
     * @param {string} model
     * @return {?}
     */
    _.create = function(data, model) {
        data = clone(data);
        return model && _.extendOwn(data, model), data;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    _.clone = function(value) {
        return _.isObject(value) ? _.isArray(value) ? value.slice() : _.extend({}, value) : value;
    };
    /**
     * @param {?} value
     * @param {?} interceptor
     * @return {?}
     */
    _.tap = function(value, interceptor) {
        return interceptor(value), value;
    };
    /**
     * @param {!Object} obj
     * @param {!Object} source
     * @return {?}
     */
    _.isMatch = function(obj, source) {
        var args = _.keys(source);
        var l = args.length;
        if (null == obj) {
            return !l;
        }
        /** @type {!Object} */
        obj = Object(obj);
        /** @type {number} */
        var i = 0;
        for (; l > i; i++) {
            var key = args[i];
            if (source[key] !== obj[key] || !(key in obj)) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param {?} a
     * @param {!Object} b
     * @param {!Array} aStack
     * @param {!Array} bStack
     * @return {?}
     */
    var eq = function(a, b, aStack, bStack) {
        if (a === b) {
            return 0 !== a || 1 / a === 1 / b;
        }
        if (null == a || null == b) {
            return a === b;
        }
        if (a instanceof _) {
            a = a._wrapped;
        }
        if (b instanceof _) {
            b = b._wrapped;
        }
        /** @type {string} */
        var array = toString.call(a);
        if (array !== toString.call(b)) {
            return false;
        }
        switch (array) {
            case "[object RegExp]":
            case "[object String]":
                return "" + a == "" + b;
            case "[object Number]":
                return +a !== +a ? +b !== +b : 0 === +a ? 1 / +a === 1 / b : +a === +b;
            case "[object Date]":
            case "[object Boolean]":
                return +a === +b;
        }
        /** @type {boolean} */
        array = "[object Array]" === array;
        if (!array) {
            if ("object" != typeof a || "object" != typeof b) {
                return false;
            }
            var length = a.constructor;
            var bCtor = b.constructor;
            if (length !== bCtor && !(_.isFunction(length) && length instanceof length && _.isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {
                return false;
            }
        }
        aStack = aStack || [];
        bStack = bStack || [];
        length = aStack.length;
        for (; length--;) {
            if (aStack[length] === a) {
                return bStack[length] === b;
            }
        }
        if (aStack.push(a), bStack.push(b), array) {
            if (length = a.length, length !== b.length) {
                return false;
            }
            for (; length--;) {
                if (!eq(a[length], b[length], aStack, bStack)) {
                    return false;
                }
            }
        } else {
            var key;
            array = _.keys(a);
            if (length = array.length, _.keys(b).length !== length) {
                return false;
            }
            for (; length--;) {
                if (key = array[length], !_.has(b, key) || !eq(a[key], b[key], aStack, bStack)) {
                    return false;
                }
            }
        }
        return aStack.pop(), bStack.pop(), true;
    };
    /**
     * @param {?} a
     * @param {!Object} b
     * @return {?}
     */
    _.isEqual = function(a, b) {
        return eq(a, b);
    };
    /**
     * @param {!Object} value
     * @return {?}
     */
    _.isEmpty = function(value) {
        return null == value ? true : isArrayLike(value) && (_.isArray(value) || _.isString(value) || _.isArguments(value)) ? 0 === value.length : 0 === _.keys(value).length;
    };
    /**
     * @param {!Object} thingy
     * @return {?}
     */
    _.isElement = function(thingy) {
        return !(!thingy || 1 !== thingy.nodeType);
    };
    /** @type {function(*): boolean} */
    _.isArray = escapeMap || function(array) {
        return "[object Array]" === toString.call(array);
    };
    /**
     * @param {!Function} val
     * @return {?}
     */
    _.isObject = function(val) {
        /** @type {string} */
        var type = typeof val;
        return "function" === type || "object" === type && !!val;
    };
    _.each("Arguments Function String Number Date RegExp Error".split(" "), function(name) {
        /**
         * @param {?} checkSet
         * @return {?}
         */
        _["is" + name] = function(checkSet) {
            return toString.call(checkSet) === "[object " + name + "]";
        };
    });
    if (!_.isArguments(arguments)) {
        /**
         * @param {!Object} value
         * @return {?}
         */
        _.isArguments = function(value) {
            return _.has(value, "callee");
        };
    }
    if ("function" != typeof /./ && "object" != typeof Int8Array) {
        /**
         * @param {!Function} value
         * @return {?}
         */
        _.isFunction = function(value) {
            return "function" == typeof value || false;
        };
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    _.isFinite = function(obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    _.isNaN = function(obj) {
        return _.isNumber(obj) && obj !== +obj;
    };
    /**
     * @param {boolean} obj
     * @return {?}
     */
    _.isBoolean = function(obj) {
        return true === obj || false === obj || "[object Boolean]" === toString.call(obj);
    };
    /**
     * @param {!Object} val
     * @return {?}
     */
    _.isNull = function(val) {
        return null === val;
    };
    /**
     * @param {!Array} val
     * @return {?}
     */
    _.isUndefined = function(val) {
        return void 0 === val;
    };
    /**
     * @param {!Object} obj
     * @param {string} key
     * @return {?}
     */
    _.has = function(obj, key) {
        return null != obj && hasOwnProperty.call(obj, key);
    };
    /**
     * @return {?}
     */
    _.noConflict = function() {
        return root._ = previousUnderscore, this;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    _.identity = function(value) {
        return value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    _.constant = function(value) {
        return function() {
            return value;
        };
    };
    /**
     * @return {undefined}
     */
    _.noop = function() {};
    /** @type {function((!Function|string)): ?} */
    _.property = createEscaper;
    /**
     * @param {string} data
     * @return {?}
     */
    _.propertyOf = function(data) {
        return null == data ? function() {} : function(unbracketed) {
            return data[unbracketed];
        };
    };
    /** @type {function(string): ?} */
    _.matcher = _.matches = function(attrs) {
        return attrs = _.extendOwn({}, attrs),
            function(ignores) {
                return _.isMatch(ignores, attrs);
            };
    };
    /**
     * @param {undefined} n
     * @param {!Function} value
     * @param {number} d
     * @return {?}
     */
    _.times = function(n, value, d) {
        /** @type {!Array} */
        var res = Array(Math.max(0, n));
        value = fn(value, d, 1);
        /** @type {number} */
        d = 0;
        for (; n > d; d++) {
            res[d] = value(d);
        }
        return res;
    };
    /**
     * @param {number} n
     * @param {number} o
     * @return {?}
     */
    _.random = function(n, o) {
        return null == o && (o = n, n = 0), n + Math.floor(Math.random() * (o - n + 1));
    };
    /** @type {function(): number} */
    _.now = Date.now || function() {
        return (new Date).getTime();
    };
    escapeMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
    };
    createAssigner = _.invert(escapeMap);
    /**
     * @param {!Object} map
     * @return {?}
     */
    createEscaper = function(map) {
        /**
         * @param {string} match
         * @return {?}
         */
        var escaper = function(match) {
            return map[match];
        };
        /** @type {string} */
        var source = "(?:" + _.keys(map).join("|") + ")";
        /** @type {!RegExp} */
        var testRegexp = RegExp(source);
        /** @type {!RegExp} */
        var replaceRegexp = RegExp(source, "g");
        return function(string) {
            return string = null == string ? "" : "" + string, testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
        };
    };
    _.escape = createEscaper(escapeMap);
    _.unescape = createEscaper(createAssigner);
    /**
     * @param {!Object} obj
     * @param {?} fn
     * @param {!Object} scope
     * @return {?}
     */
    _.result = function(obj, fn, scope) {
        fn = null == obj ? void 0 : obj[fn];
        return void 0 === fn && (fn = scope), _.isFunction(fn) ? fn.call(obj) : fn;
    };
    /** @type {number} */
    var idCounter = 0;
    /**
     * @param {string} prefix
     * @return {?}
     */
    _.uniqueId = function(prefix) {
        /** @type {string} */
        var id = ++idCounter + "";
        return prefix ? prefix + id : id;
    };
    _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    /** @type {!RegExp} */
    var noMatch = /(.)^/;
    var special_chars = {
        "'": "'",
        "\\": "\\",
        "\r": "r",
        "\n": "n",
        "\u2028": "u2028",
        "\u2029": "u2029"
    };
    /** @type {!RegExp} */
    var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
    /**
     * @param {?} chr
     * @return {?}
     */
    var escapeChar = function(chr) {
        return "\\" + special_chars[chr];
    };
    /**
     * @param {string} b
     * @param {!Object} c
     * @param {!Object} o
     * @return {?}
     */
    _.template = function(b, c, o) {
        if (!c && o) {
            /** @type {!Object} */
            c = o;
        }
        c = _.defaults({}, c, _.templateSettings);
        /** @type {!RegExp} */
        o = RegExp([(c.escape || noMatch).source, (c.interpolate || noMatch).source, (c.evaluate || noMatch).source].join("|") + "|$", "g");
        /** @type {number} */
        var p = 0;
        /** @type {string} */
        var source = "__p+='";
        b.replace(o, function(s, opt_hasNoResults, opt_isExperimentalRule, interpolateValue, M) {
            return source = source + b.slice(p, M).replace(escapeRegExp, escapeChar), p = M + s.length, opt_hasNoResults ? source = source + ("'+\n((__t=(" + opt_hasNoResults + "))==null?'':_.escape(__t))+\n'") : opt_isExperimentalRule ? source = source + ("'+\n((__t=(" + opt_isExperimentalRule + "))==null?'':__t)+\n'") : interpolateValue && (source = source + ("';\n" + interpolateValue + "\n__p+='")), s;
        });
        source = source + "';\n";
        if (!c.variable) {
            /** @type {string} */
            source = "with(obj||{}){\n" + source + "}\n";
        }
        /** @type {string} */
        source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
        try {
            /** @type {!Function} */
            var render = new Function(c.variable || "obj", "_", source);
        } catch (e) {
            throw e.source = source, e;
        }
        /**
         * @param {?} x
         * @return {?}
         */
        o = function(x) {
            return render.call(this, x, _);
        };
        return o.source = "function(" + (c.variable || "obj") + "){\n" + source + "}", o;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    _.chain = function(value) {
        value = _(value);
        return value._chain = true, value;
    };
    /**
     * @param {?} instance
     * @param {!Object} obj
     * @return {?}
     */
    var chainResult = function(instance, obj) {
        return instance._chain ? _(obj).chain() : obj;
    };
    /**
     * @param {!Function} obj
     * @return {undefined}
     */
    _.mixin = function(obj) {
        _.each(_.functions(obj), function(name) {
            var h = _[name] = obj[name];
            /**
             * @return {?}
             */
            _.prototype[name] = function() {
                /** @type {!Array} */
                var args = [this._wrapped];
                return push.apply(args, arguments), chainResult(this, h.apply(_, args));
            };
        });
    };
    _.mixin(_);
    _.each("pop push reverse shift sort splice unshift".split(" "), function(name) {
        var method = ArrayProto[name];
        /**
         * @return {?}
         */
        _.prototype[name] = function() {
            var obj = this._wrapped;
            return method.apply(obj, arguments), "shift" !== name && "splice" !== name || 0 !== obj.length || delete obj[0], chainResult(this, obj);
        };
    });
    _.each(["concat", "join", "slice"], function(name) {
        var method = ArrayProto[name];
        /**
         * @return {?}
         */
        _.prototype[name] = function() {
            return chainResult(this, method.apply(this._wrapped, arguments));
        };
    });
    /**
     * @return {?}
     */
    _.prototype.value = function() {
        return this._wrapped;
    };
    /** @type {function(): ?} */
    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
    /**
     * @return {?}
     */
    _.prototype.toString = function() {
        return "" + this._wrapped;
    };
    if ("function" == typeof define && define.amd) {
        define("underscore", [], function() {
            return _;
        });
    }
}).call(this);
var MODETECT = MODETECT || {};
MODETECT.device = function() {
    /**
     * @param {!RegExp} keys
     * @param {string} key
     * @return {?}
     */
    function _testIt(keys, key) {
        return keys.test(window.navigator[key]);
    }
    /**
     * @param {!Object} c
     * @param {!Object} t
     * @param {string} f
     * @return {?}
     */
    function callback(c, t, f) {
        c = c.exec(window.navigator.userAgent);
        if (null === c) {
            return false;
        }
        /** @type {number} */
        c = parseInt(c[1], 10);
        return "match" === f && c === t ? true : "greaterThan" === f && c > t ? true : "lessThan" === f && c < t ? true : false;
    }
    /**
     * @param {?} expr
     * @param {string} text
     * @return {?}
     */
    function filter(expr, text) {
        return callback(/Android\s(\d+\.\d+)/i, expr, text);
    }
    var device = {
        phone: false,
        tablet: false
    };
    /** @type {boolean} */
    device.iphone = _testIt(/iPhone/i, "platform") || _testIt(/iPhone/i, "userAgent") ? true : false;
    if (device.iphone) {
        /** @type {boolean} */
        device.phone = true;
    }
    /** @type {boolean} */
    device.ipad = _testIt(/iPad/i, "platform") || _testIt(/iPad/i, "userAgent") ? true : false;
    if (device.ipad) {
        /** @type {boolean} */
        device.tablet = true;
    }
    /** @type {boolean} */
    device.ipod = _testIt(/iPod/i, "platform") || _testIt(/iPod/i, "userAgent") ? true : false;
    if (device.ipod) {
        /** @type {boolean} */
        device.phone = true;
    }
    device.android = _testIt(/Android/i, "userAgent");
    if (device.android) {
        if (filter(3, "match")) {
            /** @type {boolean} */
            device.tablet = true;
        } else {
            if (_testIt(/Mobile/i, "userAgent")) {
                /** @type {boolean} */
                device.phone = true;
            } else {
                /** @type {boolean} */
                device.tablet = true;
            }
        }
    }
    /** @type {boolean} */
    device.blackberry = _testIt(/Blackberry/i, "userAgent") && _testIt(/Mobile/i, "userAgent") ? true : false;
    if (device.blackberry) {
        /** @type {boolean} */
        device.phone = true;
    }
    device.blackberryplaybook = _testIt(/RIM\sTablet/i, "userAgent");
    if (device.blackberryplaybook) {
        /** @type {boolean} */
        device.tablet = true;
    }
    device.windowsphone = _testIt(/Windows\sPhone/i, "userAgent");
    if (device.windowsphone) {
        /** @type {boolean} */
        device.phone = true;
    }
    device.kindlefire = _testIt(/Silk/i, "userAgent");
    if (device.kindlefire) {
        /** @type {boolean} */
        device.tablet = true;
    }
    /** @type {boolean} */
    device.othermobile = device.phone || device.tablet || device.ipod ? false : 320 >= Math.min(screen.width, screen.height) / ("devicePixelRatio" in window ? window.devicePixelRatio : 1) ? true : false;
    if (device.othermobile) {
        /** @type {boolean} */
        device.phone = true;
    }
    /** @type {boolean} */
    device.desktop = device.phone || device.tablet || device.ipod ? false : true;
    /**
     * @param {!Object} text
     * @param {string} obj
     * @return {?}
     */
    device.testIOSVersion = function(text, obj) {
        return callback(/OS (\d+)_(\d+)_?(\d+)?/, text, obj);
    };
    /** @type {function(?, string): ?} */
    device.testAndroidVersion = filter;
    return device;
}();
if ("object" !== typeof JSON) {
    JSON = {};
}
(function() {
    /**
     * @param {number} y1
     * @return {?}
     */
    function b$jscomp$138(y1) {
        return 10 > y1 ? "0" + y1 : y1;
    }
    /**
     * @param {string} s
     * @return {?}
     */
    function c$jscomp$100(s) {
        /** @type {number} */
        g$jscomp$21.lastIndex = 0;
        return g$jscomp$21.test(s) ? '"' + s.replace(g$jscomp$21, function(p) {
            var type = l$jscomp$14[p];
            return "string" === typeof type ? type : "\\u" + ("0000" + p.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + s + '"';
    }
    /**
     * @param {number} key
     * @param {string} result
     * @return {?}
     */
    function k$jscomp$12(key, result) {
        var val;
        var position;
        var file = f$jscomp$33;
        var log;
        var value = result[key];
        if (value && "object" === typeof value && "function" === typeof value.toJSON) {
            value = value.toJSON(key);
        }
        if ("function" === typeof m$jscomp$9) {
            value = m$jscomp$9.call(result, key, value);
        }
        switch (typeof value) {
            case "string":
                return c$jscomp$100(value);
            case "number":
                return isFinite(value) ? String(value) : "null";
            case "boolean":
            case "null":
                return String(value);
            case "object":
                if (!value) {
                    return "null";
                }
                f$jscomp$33 = f$jscomp$33 + e$jscomp$51;
                /** @type {!Array} */
                log = [];
                if ("[object Array]" === Object.prototype.toString.apply(value)) {
                    position = value.length;
                    /** @type {number} */
                    key = 0;
                    for (; key < position; key = key + 1) {
                        log[key] = k$jscomp$12(key, value) || "null";
                    }
                    /** @type {string} */
                    result = 0 === log.length ? "[]" : f$jscomp$33 ? "[\n" + f$jscomp$33 + log.join(",\n" + f$jscomp$33) + "\n" + file + "]" : "[" + log.join(",") + "]";
                    f$jscomp$33 = file;
                    return result;
                }
                if (m$jscomp$9 && "object" === typeof m$jscomp$9) {
                    position = m$jscomp$9.length;
                    /** @type {number} */
                    key = 0;
                    for (; key < position; key = key + 1) {
                        if ("string" === typeof m$jscomp$9[key]) {
                            val = m$jscomp$9[key];
                            if (result = k$jscomp$12(val, value)) {
                                log.push(c$jscomp$100(val) + (f$jscomp$33 ? ": " : ":") + result);
                            }
                        }
                    }
                } else {
                    for (val in value) {
                        if (Object.prototype.hasOwnProperty.call(value, val) && (result = k$jscomp$12(val, value))) {
                            log.push(c$jscomp$100(val) + (f$jscomp$33 ? ": " : ":") + result);
                        }
                    }
                }
                /** @type {string} */
                result = 0 === log.length ? "{}" : f$jscomp$33 ? "{\n" + f$jscomp$33 + log.join(",\n" + f$jscomp$33) + "\n" + file + "}" : "{" + log.join(",") + "}";
                f$jscomp$33 = file;
                return result;
        }
    }
    if ("function" !== typeof Date.prototype.toJSON) {
        /**
         * @param {*=} p0
         * @return {string}
         */
        Date.prototype.toJSON = function() {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + b$jscomp$138(this.getUTCMonth() + 1) + "-" + b$jscomp$138(this.getUTCDate()) + "T" + b$jscomp$138(this.getUTCHours()) + ":" + b$jscomp$138(this.getUTCMinutes()) + ":" + b$jscomp$138(this.getUTCSeconds()) + "Z" : null;
        };
        /** @type {function(this:Boolean, string=): *} */
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function() {
            return this.valueOf();
        };
    }
    /** @type {!RegExp} */
    var d$jscomp$59 = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    /** @type {!RegExp} */
    var g$jscomp$21 = /[\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    var f$jscomp$33;
    var e$jscomp$51;
    var l$jscomp$14 = {
        "\b": "\\b",
        "\t": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    };
    var m$jscomp$9;
    if ("function" !== typeof JSON.stringify) {
        /**
         * @param {*} data
         * @param {(Array<string>|function(string, *): *|null)=} obj
         * @param {(number|string)=} a
         * @return {string}
         */
        JSON.stringify = function(data, obj, a) {
            var d;
            /** @type {string} */
            e$jscomp$51 = f$jscomp$33 = "";
            if ("number" === typeof a) {
                /** @type {number} */
                d = 0;
                for (; d < a; d = d + 1) {
                    /** @type {string} */
                    e$jscomp$51 = e$jscomp$51 + " ";
                }
            } else {
                if ("string" === typeof a) {
                    /** @type {string} */
                    e$jscomp$51 = a;
                }
            }
            if ((m$jscomp$9 = obj) && "function" !== typeof obj && ("object" !== typeof obj || "number" !== typeof obj.length)) {
                throw Error("JSON.stringify");
            }
            return k$jscomp$12("", {
                "": data
            });
        };
    }
    if ("function" !== typeof JSON.parse) {
        /**
         * @param {string} b$jscomp$144
         * @param {function(string, *): *=} c$jscomp$103
         * @return {*}
         */
        JSON.parse = function(b$jscomp$144, c$jscomp$103) {
            /**
             * @param {!Object} data
             * @param {string} id
             * @return {?}
             */
            function e$jscomp$52(data, id) {
                var i;
                var d;
                var a = data[id];
                if (a && "object" === typeof a) {
                    for (i in a) {
                        if (Object.prototype.hasOwnProperty.call(a, i)) {
                            d = e$jscomp$52(a, i);
                            if (void 0 !== d) {
                                a[i] = d;
                            } else {
                                delete a[i];
                            }
                        }
                    }
                }
                return c$jscomp$103.call(data, id, a);
            }
            /** @type {string} */
            b$jscomp$144 = String(b$jscomp$144);
            /** @type {number} */
            d$jscomp$59.lastIndex = 0;
            if (d$jscomp$59.test(b$jscomp$144)) {
                /** @type {string} */
                b$jscomp$144 = b$jscomp$144.replace(d$jscomp$59, function(strUtf8) {
                    return "\\u" + ("0000" + strUtf8.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if (/^[\],:{}\s]*$/.test(b$jscomp$144.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                return b$jscomp$144 = eval("(" + b$jscomp$144 + ")"), "function" === typeof c$jscomp$103 ? e$jscomp$52({
                    "": b$jscomp$144
                }, "") : b$jscomp$144;
            }
            throw new SyntaxError("JSON.parse");
        };
    }
})();
/** @type {number} */
var hexcase = 0;
/** @type {string} */
var b64pad = "=";
/** @type {number} */
var chrsz = 8;
/**
 * @param {string} s
 * @return {?}
 */
function hex_md5(s) {
    return binl2hex(core_md5(str2binl(s), s.length * chrsz));
}
/**
 * @param {string} s
 * @return {?}
 */
function b64_md5(s) {
    return binl2b64(core_md5(str2binl(s), s.length * chrsz));
}
/**
 * @param {string} s
 * @return {?}
 */
function str_md5(s) {
    return binl2str(core_md5(str2binl(s), s.length * chrsz));
}
/**
 * @param {!Array} key
 * @param {string} data
 * @return {?}
 */
function hex_hmac_md5(key, data) {
    return binl2hex(core_hmac_md5(key, data));
}
/**
 * @param {!Array} key
 * @param {string} data
 * @return {?}
 */
function b64_hmac_md5(key, data) {
    return binl2b64(core_hmac_md5(key, data));
}
/**
 * @param {!Array} key
 * @param {string} data
 * @return {?}
 */
function str_hmac_md5(key, data) {
    return binl2str(core_hmac_md5(key, data));
}
/**
 * @return {?}
 */
function md5_vm_test() {
    return "900150983cd24fb0d6963f7d28e17f72" == hex_md5("abc");
}
/**
 * @param {!Object} x
 * @param {number} c
 * @return {?}
 */
function core_md5(x, c) {
    x[c >> 5] |= 128 << c % 32;
    /** @type {number} */
    x[(c + 64 >>> 9 << 4) + 14] = c;
    /** @type {number} */
    c = 1732584193;
    /** @type {number} */
    var b = -271733879;
    /** @type {number} */
    var d = -1732584194;
    /** @type {number} */
    var a = 271733878;
    /** @type {number} */
    var i = 0;
    for (; i < x.length; i = i + 16) {
        /** @type {number} */
        var oldc = c;
        var oldb = b;
        var oldd = d;
        var olda = a;
        c = md5_ff(c, b, d, a, x[i + 0], 7, -680876936);
        a = md5_ff(a, c, b, d, x[i + 1], 12, -389564586);
        d = md5_ff(d, a, c, b, x[i + 2], 17, 606105819);
        b = md5_ff(b, d, a, c, x[i + 3], 22, -1044525330);
        c = md5_ff(c, b, d, a, x[i + 4], 7, -176418897);
        a = md5_ff(a, c, b, d, x[i + 5], 12, 1200080426);
        d = md5_ff(d, a, c, b, x[i + 6], 17, -1473231341);
        b = md5_ff(b, d, a, c, x[i + 7], 22, -45705983);
        c = md5_ff(c, b, d, a, x[i + 8], 7, 1770035416);
        a = md5_ff(a, c, b, d, x[i + 9], 12, -1958414417);
        d = md5_ff(d, a, c, b, x[i + 10], 17, -42063);
        b = md5_ff(b, d, a, c, x[i + 11], 22, -1990404162);
        c = md5_ff(c, b, d, a, x[i + 12], 7, 1804603682);
        a = md5_ff(a, c, b, d, x[i + 13], 12, -40341101);
        d = md5_ff(d, a, c, b, x[i + 14], 17, -1502002290);
        b = md5_ff(b, d, a, c, x[i + 15], 22, 1236535329);
        c = md5_gg(c, b, d, a, x[i + 1], 5, -165796510);
        a = md5_gg(a, c, b, d, x[i + 6], 9, -1069501632);
        d = md5_gg(d, a, c, b, x[i + 11], 14, 643717713);
        b = md5_gg(b, d, a, c, x[i + 0], 20, -373897302);
        c = md5_gg(c, b, d, a, x[i + 5], 5, -701558691);
        a = md5_gg(a, c, b, d, x[i + 10], 9, 38016083);
        d = md5_gg(d, a, c, b, x[i + 15], 14, -660478335);
        b = md5_gg(b, d, a, c, x[i + 4], 20, -405537848);
        c = md5_gg(c, b, d, a, x[i + 9], 5, 568446438);
        a = md5_gg(a, c, b, d, x[i + 14], 9, -1019803690);
        d = md5_gg(d, a, c, b, x[i + 3], 14, -187363961);
        b = md5_gg(b, d, a, c, x[i + 8], 20, 1163531501);
        c = md5_gg(c, b, d, a, x[i + 13], 5, -1444681467);
        a = md5_gg(a, c, b, d, x[i + 2], 9, -51403784);
        d = md5_gg(d, a, c, b, x[i + 7], 14, 1735328473);
        b = md5_gg(b, d, a, c, x[i + 12], 20, -1926607734);
        c = md5_hh(c, b, d, a, x[i + 5], 4, -378558);
        a = md5_hh(a, c, b, d, x[i + 8], 11, -2022574463);
        d = md5_hh(d, a, c, b, x[i + 11], 16, 1839030562);
        b = md5_hh(b, d, a, c, x[i + 14], 23, -35309556);
        c = md5_hh(c, b, d, a, x[i + 1], 4, -1530992060);
        a = md5_hh(a, c, b, d, x[i + 4], 11, 1272893353);
        d = md5_hh(d, a, c, b, x[i + 7], 16, -155497632);
        b = md5_hh(b, d, a, c, x[i + 10], 23, -1094730640);
        c = md5_hh(c, b, d, a, x[i + 13], 4, 681279174);
        a = md5_hh(a, c, b, d, x[i + 0], 11, -358537222);
        d = md5_hh(d, a, c, b, x[i + 3], 16, -722521979);
        b = md5_hh(b, d, a, c, x[i + 6], 23, 76029189);
        c = md5_hh(c, b, d, a, x[i + 9], 4, -640364487);
        a = md5_hh(a, c, b, d, x[i + 12], 11, -421815835);
        d = md5_hh(d, a, c, b, x[i + 15], 16, 530742520);
        b = md5_hh(b, d, a, c, x[i + 2], 23, -995338651);
        c = md5_ii(c, b, d, a, x[i + 0], 6, -198630844);
        a = md5_ii(a, c, b, d, x[i + 7], 10, 1126891415);
        d = md5_ii(d, a, c, b, x[i + 14], 15, -1416354905);
        b = md5_ii(b, d, a, c, x[i + 5], 21, -57434055);
        c = md5_ii(c, b, d, a, x[i + 12], 6, 1700485571);
        a = md5_ii(a, c, b, d, x[i + 3], 10, -1894986606);
        d = md5_ii(d, a, c, b, x[i + 10], 15, -1051523);
        b = md5_ii(b, d, a, c, x[i + 1], 21, -2054922799);
        c = md5_ii(c, b, d, a, x[i + 8], 6, 1873313359);
        a = md5_ii(a, c, b, d, x[i + 15], 10, -30611744);
        d = md5_ii(d, a, c, b, x[i + 6], 15, -1560198380);
        b = md5_ii(b, d, a, c, x[i + 13], 21, 1309151649);
        c = md5_ii(c, b, d, a, x[i + 4], 6, -145523070);
        a = md5_ii(a, c, b, d, x[i + 11], 10, -1120210379);
        d = md5_ii(d, a, c, b, x[i + 2], 15, 718787259);
        b = md5_ii(b, d, a, c, x[i + 9], 21, -343485551);
        c = safe_add(c, oldc);
        b = safe_add(b, oldb);
        d = safe_add(d, oldd);
        a = safe_add(a, olda);
    }
    return [c, b, d, a];
}
/**
 * @param {number} q
 * @param {number} a
 * @param {number} b
 * @param {number} x
 * @param {number} s
 * @param {number} t
 * @return {?}
 */
function md5_cmn(q, a, b, x, s, t) {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}
/**
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {number} d
 * @param {undefined} x
 * @param {number} s
 * @param {number} t
 * @return {?}
 */
function md5_ff(a, b, c, d, x, s, t) {
    return md5_cmn(b & c | ~b & d, a, b, x, s, t);
}
/**
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {number} d
 * @param {undefined} x
 * @param {number} s
 * @param {number} t
 * @return {?}
 */
function md5_gg(a, b, c, d, x, s, t) {
    return md5_cmn(b & d | c & ~d, a, b, x, s, t);
}
/**
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {number} d
 * @param {undefined} x
 * @param {number} s
 * @param {number} t
 * @return {?}
 */
function md5_hh(a, b, c, d, x, s, t) {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
/**
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {number} d
 * @param {undefined} x
 * @param {number} s
 * @param {number} t
 * @return {?}
 */
function md5_ii(a, b, c, d, x, s, t) {
    return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
}
/**
 * @param {!Array} data
 * @param {string} key
 * @return {?}
 */
function core_hmac_md5(data, key) {
    var bkey = str2binl(data);
    if (16 < bkey.length) {
        bkey = core_md5(bkey, data.length * chrsz);
    }
    /** @type {!Array} */
    var ipad = Array(16);
    /** @type {!Array} */
    data = Array(16);
    /** @type {number} */
    var i = 0;
    for (; 16 > i; i++) {
        /** @type {number} */
        ipad[i] = bkey[i] ^ 909522486;
        /** @type {number} */
        data[i] = bkey[i] ^ 1549556828;
    }
    key = core_md5(ipad.concat(str2binl(key)), 512 + key.length * chrsz);
    return core_md5(data.concat(key), 640);
}
/**
 * @param {number} x
 * @param {number} y
 * @return {?}
 */
function safe_add(x, y) {
    /** @type {number} */
    var k = (x & 65535) + (y & 65535);
    return (x >> 16) + (y >> 16) + (k >> 16) << 16 | k & 65535;
}
/**
 * @param {number} num
 * @param {number} cnt
 * @return {?}
 */
function bit_rol(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
}
/**
 * @param {string} str
 * @return {?}
 */
function str2binl(str) {
    /** @type {!Array} */
    var bin = [];
    /** @type {number} */
    var mask = (1 << chrsz) - 1;
    /** @type {number} */
    var i = 0;
    for (; i < str.length * chrsz; i = i + chrsz) {
        bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << i % 32;
    }
    return bin;
}
/**
 * @param {!Object} bin
 * @return {?}
 */
function binl2str(bin) {
    /** @type {string} */
    var str = "";
    /** @type {number} */
    var mask = (1 << chrsz) - 1;
    /** @type {number} */
    var i = 0;
    for (; i < 32 * bin.length; i = i + chrsz) {
        /** @type {string} */
        str = str + String.fromCharCode(bin[i >> 5] >>> i % 32 & mask);
    }
    return str;
}
/**
 * @param {!Object} binarray
 * @return {?}
 */
function binl2hex(binarray) {
    /** @type {string} */
    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
    /** @type {string} */
    var str = "";
    /** @type {number} */
    var i = 0;
    for (; i < 4 * binarray.length; i++) {
        /** @type {string} */
        str = str + (hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 15) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 15));
    }
    return str;
}
/**
 * @param {!Object} binarray
 * @return {?}
 */
function binl2b64(binarray) {
    /** @type {string} */
    var str = "";
    /** @type {number} */
    var i = 0;
    for (; i < 4 * binarray.length; i = i + 3) {
        /** @type {number} */
        var d = (binarray[i >> 2] >> i % 4 * 8 & 255) << 16 | (binarray[i + 1 >> 2] >> (i + 1) % 4 * 8 & 255) << 8 | binarray[i + 2 >> 2] >> (i + 2) % 4 * 8 & 255;
        /** @type {number} */
        var j = 0;
        for (; 4 > j; j++) {
            str = 8 * i + 6 * j > 32 * binarray.length ? str + b64pad : str + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(d >> 6 * (3 - j) & 63);
        }
    }
    return str;
}
var Base64 = {
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    encode: function(input) {
        /** @type {string} */
        var output = "";
        var enc4;
        var aStatedRank;
        var normalized_images;
        var enc1;
        var enc2;
        var enc3;
        /** @type {number} */
        var i = 0;
        input = Base64._utf8_encode(input);
        for (; i < input.length;) {
            enc4 = input.charCodeAt(i++);
            aStatedRank = input.charCodeAt(i++);
            normalized_images = input.charCodeAt(i++);
            /** @type {number} */
            enc1 = enc4 >> 2;
            /** @type {number} */
            enc4 = (enc4 & 3) << 4 | aStatedRank >> 4;
            /** @type {number} */
            enc2 = (aStatedRank & 15) << 2 | normalized_images >> 6;
            /** @type {number} */
            enc3 = normalized_images & 63;
            if (isNaN(aStatedRank)) {
                /** @type {number} */
                enc2 = enc3 = 64;
            } else {
                if (isNaN(normalized_images)) {
                    /** @type {number} */
                    enc3 = 64;
                }
            }
            output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc4) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3);
        }
        return output;
    },
    decode: function(b) {
        /** @type {string} */
        var output = "";
        var c2;
        var c3;
        var o;
        var f;
        var n;
        /** @type {number} */
        var ib = 0;
        b = b.replace(/[^A-Za-z0-9\+\/=]/g, "");
        for (; ib < b.length;) {
            c2 = this._keyStr.indexOf(b.charAt(ib++));
            c3 = this._keyStr.indexOf(b.charAt(ib++));
            f = this._keyStr.indexOf(b.charAt(ib++));
            n = this._keyStr.indexOf(b.charAt(ib++));
            /** @type {number} */
            c2 = c2 << 2 | c3 >> 4;
            /** @type {number} */
            c3 = (c3 & 15) << 4 | f >> 2;
            /** @type {number} */
            o = (f & 3) << 6 | n;
            /** @type {string} */
            output = output + String.fromCharCode(c2);
            if (64 != f) {
                /** @type {string} */
                output = output + String.fromCharCode(c3);
            }
            if (64 != n) {
                /** @type {string} */
                output = output + String.fromCharCode(o);
            }
        }
        return output = Base64._utf8_decode(output);
    },
    _utf8_encode: function(string) {
        string = string.replace(/\r\n/g, "\n");
        /** @type {string} */
        var utftext = "";
        /** @type {number} */
        var i = 0;
        for (; i < string.length; i++) {
            var c = string.charCodeAt(i);
            if (128 > c) {
                /** @type {string} */
                utftext = utftext + String.fromCharCode(c);
            } else {
                if (127 < c && 2048 > c) {
                    /** @type {string} */
                    utftext = utftext + String.fromCharCode(c >> 6 | 192);
                } else {
                    /** @type {string} */
                    utftext = utftext + String.fromCharCode(c >> 12 | 224);
                    /** @type {string} */
                    utftext = utftext + String.fromCharCode(c >> 6 & 63 | 128);
                }
                /** @type {string} */
                utftext = utftext + String.fromCharCode(c & 63 | 128);
            }
        }
        return utftext;
    },
    _utf8_decode: function(utftext) {
        /** @type {string} */
        var string = "";
        /** @type {number} */
        var i = 0;
        var c;
        /** @type {number} */
        c1 = c2 = 0;
        for (; i < utftext.length;) {
            c = utftext.charCodeAt(i);
            if (128 > c) {
                /** @type {string} */
                string = string + String.fromCharCode(c);
                i++;
            } else {
                if (191 < c && 224 > c) {
                    c2 = utftext.charCodeAt(i + 1);
                    /** @type {string} */
                    string = string + String.fromCharCode((c & 31) << 6 | c2 & 63);
                    /** @type {number} */
                    i = i + 2;
                } else {
                    c2 = utftext.charCodeAt(i + 1);
                    c3 = utftext.charCodeAt(i + 2);
                    /** @type {string} */
                    string = string + String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
                    /** @type {number} */
                    i = i + 3;
                }
            }
        }
        return string;
    }
};
if ("undefined" !== typeof module && module.exports) {
    module.exports = {
        hex_md5: hex_md5,
        b64_md5: b64_md5,
        str_md5: str_md5,
        hex_hmac_md5: hex_hmac_md5,
        b64_hmac_md5: b64_hmac_md5,
        str_hmac_md5: str_hmac_md5
    };
}
(function($) {
    /**
     * @param {?} settings
     * @return {?}
     */
    $.fn.touchwipe = function(settings) {
        var config = {
            min_move_x: 20,
            min_move_y: 20,
            wipeLeft: function(e) {},
            wipeRight: function(e) {},
            wipeUp: function(e) {},
            wipeDown: function(e) {},
            preventDefaultEvents: true,
            isMSPointerEvents: !!window.navigator.msPointerEnabled
        };
        /** @type {string} */
        var type = config.isMSPointerEvents ? "MSPointerMove" : "touchmove";
        /** @type {string} */
        var eventName = config.isMSPointerEvents ? "MSPointerDown" : "touchstart";
        if (settings) {
            $.extend(config, settings);
        }
        this.each(function() {
            /**
             * @return {undefined}
             */
            function cancelTouch() {
                this.removeEventListener(type, onTouchMove);
                /** @type {null} */
                x = null;
                /** @type {boolean} */
                n = false;
            }
            /**
             * @param {!Object} e
             * @return {undefined}
             */
            function onTouchMove(e) {
                if (config.preventDefaultEvents) {
                    e.preventDefault();
                }
                if (n) {
                    var i;
                    if (config.isMSPointerEvents) {
                        /** @type {!Object} */
                        i = e;
                    } else {
                        if (1 !== e.touches.length) {
                            return;
                        }
                        i = e.touches[0];
                    }
                    /** @type {number} */
                    var dx = x - i.pageX;
                    /** @type {number} */
                    i = y - i.pageY;
                    if (Math.abs(dx) >= config.min_move_x) {
                        cancelTouch();
                        if (0 < dx) {
                            config.wipeLeft(e);
                        } else {
                            config.wipeRight(e);
                        }
                    } else {
                        if (Math.abs(i) >= config.min_move_y) {
                            cancelTouch();
                            if (0 < i) {
                                config.wipeDown(e);
                            } else {
                                config.wipeUp(e);
                            }
                        }
                    }
                }
            }
            /**
             * @param {!Object} event
             * @return {undefined}
             */
            function onTouchStart(event) {
                if (!config.isMSPointerEvents) {
                    if (1 !== event.touches.length) {
                        return;
                    }
                    event = event.touches[0];
                }
                x = event.pageX;
                y = event.pageY;
                /** @type {boolean} */
                n = true;
                this.addEventListener(type, onTouchMove, false);
            }
            var x;
            var y;
            /** @type {boolean} */
            var n = false;
            if ("ontouchstart" in window || config.isMSPointerEvents) {
                this.addEventListener(eventName, onTouchStart, false);
            }
        });
        return this;
    };
})(jQuery);
(function() {
    /** @type {function(this:(IArrayLike<T>|string), T, number=): number} */
    var __indexOf = [].indexOf || function(value) {
        /** @type {number} */
        var i = 0;
        var l = this.length;
        for (; i < l; i++) {
            if (i in this && this[i] === value) {
                return i;
            }
        }
        return -1;
    };
    /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
    var slice = [].slice;
    (function(window, factory) {
        return "function" === typeof define && define.amd ? define("waypoints", ["jquery"], function(jQuery) {
            return factory(jQuery, window);
        }) : factory(window.jQuery, window);
    })(this, function($, window) {
        var $window;
        var Context;
        var Waypoint;
        var allWaypoints;
        var contextCounter;
        var args;
        var n;
        var jQMethods;
        var methods;
        var waypointCounter;
        $window = $(window);
        /** @type {boolean} */
        n = 0 <= __indexOf.call(window, "ontouchstart");
        allWaypoints = {
            horizontal: {},
            vertical: {}
        };
        /** @type {number} */
        contextCounter = 1;
        args = {};
        /** @type {number} */
        waypointCounter = 1;
        Context = function() {
            /**
             * @param {!Object} $element
             * @return {undefined}
             */
            function Context($element) {
                var _this = this;
                /** @type {!Object} */
                this.$element = $element;
                this.element = $element[0];
                /** @type {boolean} */
                this.didScroll = this.didResize = false;
                /** @type {string} */
                this.id = "context" + contextCounter++;
                this.oldScroll = {
                    x: $element.scrollLeft(),
                    y: $element.scrollTop()
                };
                this.waypoints = {
                    horizontal: {},
                    vertical: {}
                };
                $element.data("waypoints-context-id", this.id);
                args[this.id] = this;
                $element.bind("scroll.waypoints", function() {
                    if (!_this.didScroll && !n) {
                        return _this.didScroll = true, window.setTimeout(function() {
                            _this.doScroll();
                            return _this.didScroll = false;
                        }, $.waypoints.settings.scrollThrottle);
                    }
                });
                $element.bind("resize.waypoints", function() {
                    if (!_this.didResize) {
                        return _this.didResize = true, window.setTimeout(function() {
                            $.waypoints("refresh");
                            return _this.didResize = false;
                        }, $.waypoints.settings.resizeThrottle);
                    }
                });
            }
            /**
             * @return {?}
             */
            Context.prototype.doScroll = function() {
                var axes;
                var _this = this;
                axes = {
                    horizontal: {
                        newScroll: this.$element.scrollLeft(),
                        oldScroll: this.oldScroll.x,
                        forward: "right",
                        backward: "left"
                    },
                    vertical: {
                        newScroll: this.$element.scrollTop(),
                        oldScroll: this.oldScroll.y,
                        forward: "down",
                        backward: "up"
                    }
                };
                if (!(!n || axes.vertical.oldScroll && axes.vertical.newScroll)) {
                    $.waypoints("refresh");
                }
                $.each(axes, function(aKey, axis) {
                    var m1;
                    var f;
                    var g;
                    /** @type {!Array} */
                    g = [];
                    m1 = (f = axis.newScroll > axis.oldScroll) ? axis.forward : axis.backward;
                    $.each(_this.waypoints[aKey], function(b, map) {
                        var _ref;
                        var _ref1;
                        if (axis.oldScroll < (_ref = map.offset) && _ref <= axis.newScroll || axis.newScroll < (_ref1 = map.offset) && _ref1 <= axis.oldScroll) {
                            return g.push(map);
                        }
                    });
                    g.sort(function(a, b) {
                        return a.offset - b.offset;
                    });
                    if (!f) {
                        g.reverse();
                    }
                    return $.each(g, function(i, c) {
                        if (c.options.continuous || i === g.length - 1) {
                            return c.trigger([m1]);
                        }
                    });
                });
                return this.oldScroll = {
                    x: axes.horizontal.newScroll,
                    y: axes.vertical.newScroll
                };
            };
            /**
             * @return {?}
             */
            Context.prototype.refresh = function() {
                var direction;
                var isWin;
                var _this = this;
                isWin = $.isWindow(this.element);
                direction = this.$element.offset();
                this.doScroll();
                direction = {
                    horizontal: {
                        contextOffset: isWin ? 0 : direction.left,
                        contextScroll: isWin ? 0 : this.oldScroll.x,
                        contextDimension: this.$element.width(),
                        oldScroll: this.oldScroll.x,
                        forward: "right",
                        backward: "left",
                        offsetProp: "left"
                    },
                    vertical: {
                        contextOffset: isWin ? 0 : direction.top,
                        contextScroll: isWin ? 0 : this.oldScroll.y,
                        contextDimension: isWin ? $.waypoints("viewportHeight") : this.$element.height(),
                        oldScroll: this.oldScroll.y,
                        forward: "down",
                        backward: "up",
                        offsetProp: "top"
                    }
                };
                return $.each(direction, function(aKey, axis) {
                    return $.each(_this.waypoints[aKey], function(adjustment, waypoint) {
                        var elementOffset;
                        var oldOffset;
                        var _ref;
                        var _ref1;
                        adjustment = waypoint.options.offset;
                        oldOffset = waypoint.offset;
                        elementOffset = $.isWindow(waypoint.element) ? 0 : waypoint.$element.offset()[axis.offsetProp];
                        if ($.isFunction(adjustment)) {
                            adjustment = adjustment.apply(waypoint.element);
                        } else {
                            if ("string" === typeof adjustment) {
                                /** @type {number} */
                                adjustment = parseFloat(adjustment);
                                if (-1 < waypoint.options.offset.indexOf("%")) {
                                    /** @type {number} */
                                    adjustment = Math.ceil(axis.contextDimension * adjustment / 100);
                                }
                            }
                        }
                        /** @type {number} */
                        waypoint.offset = elementOffset - axis.contextOffset + axis.contextScroll - adjustment;
                        if ((!waypoint.options.onlyOnScroll || null == oldOffset) && waypoint.enabled) {
                            if (null !== oldOffset && oldOffset < (_ref = axis.oldScroll) && _ref <= waypoint.offset) {
                                return waypoint.trigger([axis.backward]);
                            }
                            if (null !== oldOffset && oldOffset > (_ref1 = axis.oldScroll) && _ref1 >= waypoint.offset || null === oldOffset && axis.oldScroll >= waypoint.offset) {
                                return waypoint.trigger([axis.forward]);
                            }
                        }
                    });
                });
            };
            /**
             * @return {?}
             */
            Context.prototype.checkEmpty = function() {
                if ($.isEmptyObject(this.waypoints.horizontal) && $.isEmptyObject(this.waypoints.vertical)) {
                    return this.$element.unbind("resize.waypoints scroll.waypoints"), delete args[this.id];
                }
            };
            return Context;
        }();
        Waypoint = function() {
            /**
             * @param {!Object} $element
             * @param {!Object} context
             * @param {!Object} options
             * @return {undefined}
             */
            function Waypoint($element, context, options) {
                var siteOptions;
                options = $.extend({}, $.fn.waypoint.defaults, options);
                if ("bottom-in-view" === options.offset) {
                    /**
                     * @return {?}
                     */
                    options.offset = function() {
                        var contextHeight;
                        contextHeight = $.waypoints("viewportHeight");
                        if (!$.isWindow(context.element)) {
                            contextHeight = context.$element.height();
                        }
                        return contextHeight - $(this).outerHeight();
                    };
                }
                /** @type {!Object} */
                this.$element = $element;
                this.element = $element[0];
                /** @type {string} */
                this.axis = options.horizontal ? "horizontal" : "vertical";
                this.callback = options.handler;
                /** @type {!Object} */
                this.context = context;
                this.enabled = options.enabled;
                /** @type {string} */
                this.id = "waypoints" + waypointCounter++;
                /** @type {null} */
                this.offset = null;
                /** @type {!Object} */
                this.options = options;
                context.waypoints[this.axis][this.id] = this;
                allWaypoints[this.axis][this.id] = this;
                options = null != (siteOptions = $element.data("waypoints-waypoint-ids")) ? siteOptions : [];
                options.push(this.id);
                $element.data("waypoints-waypoint-ids", options);
            }
            /**
             * @param {string} event
             * @return {?}
             */
            Waypoint.prototype.trigger = function(event) {
                if (this.enabled && (null != this.callback && this.callback.apply(this.element, event), this.options.triggerOnce)) {
                    return this.destroy();
                }
            };
            /**
             * @return {?}
             */
            Waypoint.prototype.disable = function() {
                return this.enabled = false;
            };
            /**
             * @return {?}
             */
            Waypoint.prototype.enable = function() {
                this.context.refresh();
                return this.enabled = true;
            };
            /**
             * @return {?}
             */
            Waypoint.prototype.destroy = function() {
                delete allWaypoints[this.axis][this.id];
                delete this.context.waypoints[this.axis][this.id];
                return this.context.checkEmpty();
            };
            /**
             * @param {?} element
             * @return {?}
             */
            Waypoint.getWaypointsByElement = function(element) {
                var subwikiListsCache;
                element = $(element).data("waypoints-waypoint-ids");
                if (!element) {
                    return [];
                }
                subwikiListsCache = $.extend({}, allWaypoints.horizontal, allWaypoints.vertical);
                return $.map(element, function(wikiId) {
                    return subwikiListsCache[wikiId];
                });
            };
            return Waypoint;
        }();
        methods = {
            init: function(name, value) {
                if (null == value) {
                    value = {};
                }
                if (null == value.handler) {
                    /** @type {!Object} */
                    value.handler = name;
                }
                this.each(function() {
                    var $this;
                    var context;
                    var contextElement;
                    $this = $(this);
                    contextElement = null != (context = value.context) ? context : $.fn.waypoint.defaults.context;
                    if (!$.isWindow(contextElement)) {
                        contextElement = $this.closest(contextElement);
                    }
                    contextElement = $(contextElement);
                    if (!(context = args[contextElement.data("waypoints-context-id")])) {
                        context = new Context(contextElement);
                    }
                    return new Waypoint($this, context, value);
                });
                $.waypoints("refresh");
                return this;
            },
            disable: function() {
                return methods._invoke(this, "disable");
            },
            enable: function() {
                return methods._invoke(this, "enable");
            },
            destroy: function() {
                return methods._invoke(this, "destroy");
            },
            prev: function(elem, query) {
                return methods._traverse.call(this, elem, query, function(buf, groupSize, zeros) {
                    if (0 < groupSize) {
                        return buf.push(zeros[groupSize - 1]);
                    }
                });
            },
            next: function(_list, cb) {
                return methods._traverse.call(this, _list, cb, function(b, canCreateDiscussions, locs) {
                    if (canCreateDiscussions < locs.length - 1) {
                        return b.push(locs[canCreateDiscussions + 1]);
                    }
                });
            },
            _traverse: function(axis, selector, push) {
                var node;
                var waypoints;
                if (null == axis) {
                    /** @type {string} */
                    axis = "vertical";
                }
                if (null == selector) {
                    /** @type {!Object} */
                    selector = window;
                }
                waypoints = jQMethods.aggregate(selector);
                /** @type {!Array} */
                node = [];
                this.each(function() {
                    var MIN_PRECISION;
                    MIN_PRECISION = $.inArray(this, waypoints[axis]);
                    return push(node, MIN_PRECISION, waypoints[axis]);
                });
                return this.pushStack(node);
            },
            _invoke: function(fn, type) {
                fn.each(function() {
                    var b;
                    b = Waypoint.getWaypointsByElement(this);
                    return $.each(b, function(b, toolTipTexts) {
                        toolTipTexts[type]();
                        return true;
                    });
                });
                return this;
            }
        };
        /**
         * @return {?}
         */
        $.fn.waypoint = function() {
            var value;
            var method;
            method = arguments[0];
            /** @type {!Array<?>} */
            value = 2 <= arguments.length ? slice.call(arguments, 1) : [];
            return methods[method] ? methods[method].apply(this, value) : $.isFunction(method) ? methods.init.apply(this, arguments) : $.isPlainObject(method) ? methods.init.apply(this, [null, method]) : method ? $.error("The " + method + " method does not exist in jQuery Waypoints.") : $.error("jQuery Waypoints needs a callback function or handler option.");
        };
        $.fn.waypoint.defaults = {
            context: window,
            continuous: true,
            enabled: true,
            horizontal: false,
            offset: 0,
            triggerOnce: false
        };
        jQMethods = {
            refresh: function() {
                return $.each(args, function(b, latestService) {
                    return latestService.refresh();
                });
            },
            viewportHeight: function() {
                var positionOut;
                return null != (positionOut = window.innerHeight) ? positionOut : $window.height();
            },
            aggregate: function(selector) {
                var collection;
                var axes;
                var options;
                collection = allWaypoints;
                if (selector) {
                    collection = null != (options = args[$(selector).data("waypoints-context-id")]) ? options.waypoints : void 0;
                }
                if (!collection) {
                    return [];
                }
                axes = {
                    horizontal: [],
                    vertical: []
                };
                $.each(axes, function(axis, value) {
                    $.each(collection[axis], function(b, c) {
                        return value.push(c);
                    });
                    value.sort(function(a, b) {
                        return a.offset - b.offset;
                    });
                    axes[axis] = $.map(value, function(arrowIcon) {
                        return arrowIcon.element;
                    });
                    return axes[axis] = $.unique(axes[axis]);
                });
                return axes;
            },
            above: function(contextSelector) {
                if (null == contextSelector) {
                    /** @type {!Object} */
                    contextSelector = window;
                }
                return jQMethods._filter(contextSelector, "vertical", function(context, b) {
                    return b.offset <= context.oldScroll.y;
                });
            },
            below: function(contextSelector) {
                if (null == contextSelector) {
                    /** @type {!Object} */
                    contextSelector = window;
                }
                return jQMethods._filter(contextSelector, "vertical", function(context, bullet) {
                    return bullet.offset > context.oldScroll.y;
                });
            },
            left: function(name) {
                if (null == name) {
                    /** @type {!Object} */
                    name = window;
                }
                return jQMethods._filter(name, "horizontal", function(context, b) {
                    return b.offset <= context.oldScroll.x;
                });
            },
            right: function(name) {
                if (null == name) {
                    /** @type {!Object} */
                    name = window;
                }
                return jQMethods._filter(name, "horizontal", function(context, other) {
                    return other.offset > context.oldScroll.x;
                });
            },
            enable: function() {
                return jQMethods._invoke("enable");
            },
            disable: function() {
                return jQMethods._invoke("disable");
            },
            destroy: function() {
                return jQMethods._invoke("destroy");
            },
            extendFn: function(methodName, fn) {
                return methods[methodName] = fn;
            },
            _invoke: function(method) {
                var c;
                c = $.extend({}, allWaypoints.vertical, allWaypoints.horizontal);
                return $.each(c, function(canCreateDiscussions, groupRouter) {
                    groupRouter[method]();
                    return true;
                });
            },
            _filter: function(selector, axis, test) {
                var context;
                var f;
                context = args[$(selector).data("waypoints-context-id")];
                if (!context) {
                    return [];
                }
                /** @type {!Array} */
                f = [];
                $.each(context.waypoints[axis], function(b, c) {
                    if (test(context, c)) {
                        return f.push(c);
                    }
                });
                f.sort(function(a, b) {
                    return a.offset - b.offset;
                });
                return $.map(f, function(arrowIcon) {
                    return arrowIcon.element;
                });
            }
        };
        /**
         * @return {?}
         */
        $.waypoints = function() {
            var value;
            var method;
            method = arguments[0];
            /** @type {!Array<?>} */
            value = 2 <= arguments.length ? slice.call(arguments, 1) : [];
            return jQMethods[method] ? jQMethods[method].apply(null, value) : jQMethods.aggregate.call(null, method);
        };
        $.waypoints.settings = {
            resizeThrottle: 100,
            scrollThrottle: 30
        };
        return $window.load(function() {
            return $.waypoints("refresh");
        });
    });
}).call(this);
(function($) {
    var jCarousel = $.jCarousel = {};
    /** @type {string} */
    jCarousel.version = "0.3.0";
    /** @type {!RegExp} */
    var _facebookvideoRegex = /^([+\-]=)?(.+)$/;
    /**
     * @param {number} target
     * @return {?}
     */
    jCarousel.parseTarget = function(target) {
        /** @type {boolean} */
        var relative = false;
        /** @type {(Array<string>|null)} */
        var d = "object" !== typeof target ? _facebookvideoRegex.exec(target) : null;
        if (d) {
            /** @type {number} */
            target = parseInt(d[2], 10) || 0;
            if (d[1]) {
                /** @type {boolean} */
                relative = true;
                if ("-=" === d[1]) {
                    /** @type {number} */
                    target = target * -1;
                }
            }
        } else {
            if ("object" !== typeof target) {
                /** @type {number} */
                target = parseInt(target, 10) || 0;
            }
        }
        return {
            target: target,
            relative: relative
        };
    };
    /**
     * @param {!Object} element
     * @return {?}
     */
    jCarousel.detectCarousel = function(element) {
        var carousel;
        for (; 0 < element.length;) {
            carousel = element.filter("[data-jcarousel]");
            if (0 < carousel.length) {
                return carousel;
            }
            carousel = element.find("[data-jcarousel]");
            if (0 < carousel.length) {
                return carousel;
            }
            element = element.parent();
        }
        return null;
    };
    /**
     * @param {!Object} name
     * @return {?}
     */
    jCarousel.base = function(name) {
        return {
            version: jCarousel.version,
            _options: {},
            _element: null,
            _carousel: null,
            _init: $.noop,
            _create: $.noop,
            _destroy: $.noop,
            _reload: $.noop,
            create: function() {
                this._element.attr("data-" + name.toLowerCase(), true).data(name, this);
                if (false === this._trigger("create")) {
                    return this;
                }
                this._create();
                this._trigger("createend");
                return this;
            },
            destroy: function() {
                if (false === this._trigger("destroy")) {
                    return this;
                }
                this._destroy();
                this._trigger("destroyend");
                this._element.removeData(name).removeAttr("data-" + name.toLowerCase());
                return this;
            },
            reload: function(list) {
                if (false === this._trigger("reload")) {
                    return this;
                }
                if (list) {
                    this.options(list);
                }
                this._reload();
                this._trigger("reloadend");
                return this;
            },
            element: function() {
                return this._element;
            },
            options: function(name, value) {
                if (0 === arguments.length) {
                    return $.extend({}, this._options);
                }
                if ("string" === typeof name) {
                    if ("undefined" === typeof value) {
                        return "undefined" === typeof this._options[name] ? null : this._options[name];
                    }
                    /** @type {string} */
                    this._options[name] = value;
                } else {
                    this._options = $.extend({}, this._options, name);
                }
                return this;
            },
            carousel: function() {
                if (!(this._carousel || (this._carousel = jCarousel.detectCarousel(this.options("carousel") || this._element)))) {
                    $.error('Could not detect carousel for plugin "' + name + '"');
                }
                return this._carousel;
            },
            _trigger: function(type, name, value) {
                var event;
                /** @type {boolean} */
                var k = false;
                /** @type {!Array<?>} */
                value = [this].concat(value || []);
                (name || this._element).each(function() {
                    event = $.Event((name + ":" + type).toLowerCase());
                    $(this).trigger(event, value);
                    if (event.isDefaultPrevented()) {
                        /** @type {boolean} */
                        k = true;
                    }
                });
                return !k;
            }
        };
    };
    /**
     * @param {!Object} pluginName
     * @param {?} pluginPrototype
     * @return {?}
     */
    jCarousel.plugin = function(pluginName, pluginPrototype) {
        /** @type {function(?, undefined): undefined} */
        var Plugin = $[pluginName] = function(selector, watch) {
            this._element = $(selector);
            this.options(watch);
            this._init();
            this.create();
        };
        Plugin.fn = Plugin.prototype = $.extend({}, jCarousel.base(pluginName), pluginPrototype);
        /**
         * @param {string} name
         * @return {?}
         */
        $.fn[pluginName] = function(name) {
            /** @type {!Array<?>} */
            var i = Array.prototype.slice.call(arguments, 1);
            var validationVM = this;
            if ("string" === typeof name) {
                this.each(function() {
                    var elem = $(this).data(pluginName);
                    if (!elem) {
                        return $.error("Cannot call methods on " + pluginName + ' prior to initialization; attempted to call method "' + name + '"');
                    }
                    if (!$.isFunction(elem[name]) || "_" === name.charAt(0)) {
                        return $.error('No such method "' + name + '" for ' + pluginName + " instance");
                    }
                    var v = elem[name].apply(elem, i);
                    if (v !== elem && "undefined" !== typeof v) {
                        return validationVM = v, false;
                    }
                });
            } else {
                this.each(function() {
                    var plugin = $(this).data(pluginName);
                    if (plugin instanceof Plugin) {
                        plugin.reload(name);
                    } else {
                        new Plugin(this, name);
                    }
                });
            }
            return validationVM;
        };
        return Plugin;
    };
})(jQuery);
(function($, elem) {
    /**
     * @param {?} value
     * @return {?}
     */
    var toFloat = function(value) {
        return parseFloat(value) || 0;
    };
    $.jCarousel.plugin("jcarousel", {
        animating: false,
        tail: 0,
        inTail: false,
        resizeTimer: null,
        lt: null,
        vertical: false,
        rtl: false,
        circular: false,
        underflow: false,
        relative: false,
        _options: {
            list: function() {
                return this.element().children().eq(0);
            },
            items: function() {
                return this.list().children();
            },
            animation: 400,
            transitions: false,
            wrap: null,
            vertical: null,
            rtl: null,
            center: false
        },
        _list: null,
        _items: null,
        _target: null,
        _first: null,
        _last: null,
        _visible: null,
        _fullyvisible: null,
        _init: function() {
            var self = this;
            /**
             * @return {undefined}
             */
            this.onWindowResize = function() {
                if (self.resizeTimer) {
                    clearTimeout(self.resizeTimer);
                }
                /** @type {number} */
                self.resizeTimer = setTimeout(function() {
                    self.reload();
                }, 100);
            };
            return this;
        },
        _create: function() {
            this._reload();
            $(elem).on("resize.jcarousel", this.onWindowResize);
        },
        _destroy: function() {
            $(elem).off("resize.jcarousel", this.onWindowResize);
        },
        _reload: function() {
            this.vertical = this.options("vertical");
            if (null == this.vertical) {
                /** @type {boolean} */
                this.vertical = this.list().height() > this.list().width();
            }
            this.rtl = this.options("rtl");
            if (null == this.rtl) {
                this.rtl = function($slide) {
                    if ("rtl" === ("" + $slide.attr("dir")).toLowerCase()) {
                        return true;
                    }
                    /** @type {boolean} */
                    var found = false;
                    $slide.parents("[dir]").each(function() {
                        if (/rtl/i.test($(this).attr("dir"))) {
                            return found = true, false;
                        }
                    });
                    return found;
                }(this._element);
            }
            /** @type {string} */
            this.lt = this.vertical ? "top" : "left";
            /** @type {boolean} */
            this.relative = "relative" === this.list().css("position");
            /** @type {null} */
            this._items = this._list = null;
            var item = this._target && 0 <= this.index(this._target) ? this._target : this.closest();
            /** @type {boolean} */
            this.circular = "circular" === this.options("wrap");
            /** @type {boolean} */
            this.underflow = false;
            var props = {
                left: 0,
                top: 0
            };
            if (0 < item.length) {
                this._prepare(item);
                this.list().find("[data-jcarousel-clone]").remove();
                /** @type {null} */
                this._items = null;
                /** @type {boolean} */
                this.underflow = this._fullyvisible.length >= this.items().length;
                /** @type {boolean} */
                this.circular = this.circular && !this.underflow;
                props[this.lt] = this._position(item) + "px";
            }
            this.move(props);
            return this;
        },
        list: function() {
            if (null === this._list) {
                var option = this.options("list");
                this._list = $.isFunction(option) ? option.call(this) : this._element.find(option);
            }
            return this._list;
        },
        items: function() {
            if (null === this._items) {
                var item = this.options("items");
                this._items = ($.isFunction(item) ? item.call(this) : this.list().find(item)).not("[data-jcarousel-clone]");
            }
            return this._items;
        },
        index: function(name) {
            return this.items().index(name);
        },
        closest: function() {
            var proxy = this;
            var pos = this.list().position()[this.lt];
            var closest = $();
            /** @type {boolean} */
            var e = false;
            /** @type {string} */
            var lrb = this.vertical ? "bottom" : this.rtl && !this.relative ? "left" : "right";
            var width;
            if (this.rtl && this.relative && !this.vertical) {
                pos = pos + (this.list().width() - this.clipping());
            }
            this.items().each(function() {
                closest = $(this);
                if (e) {
                    return false;
                }
                var dim = proxy.dimension(closest);
                pos = pos + dim;
                if (0 <= pos) {
                    if (width = dim - toFloat(closest.css("margin-" + lrb)), 0 >= Math.abs(pos) - dim + width / 2) {
                        /** @type {boolean} */
                        e = true;
                    } else {
                        return false;
                    }
                }
            });
            return closest;
        },
        target: function() {
            return this._target;
        },
        first: function() {
            return this._first;
        },
        last: function() {
            return this._last;
        },
        visible: function() {
            return this._visible;
        },
        fullyvisible: function() {
            return this._fullyvisible;
        },
        hasNext: function() {
            if (false === this._trigger("hasnext")) {
                return true;
            }
            var path = this.options("wrap");
            /** @type {number} */
            var end = this.items().length - 1;
            return 0 <= end && (path && "first" !== path || this.index(this._last) < end || this.tail && !this.inTail) ? true : false;
        },
        hasPrev: function() {
            if (false === this._trigger("hasprev")) {
                return true;
            }
            var expr = this.options("wrap");
            return 0 < this.items().length && (expr && "last" !== expr || 0 < this.index(this._first) || this.tail && this.inTail) ? true : false;
        },
        clipping: function() {
            return this._element["inner" + (this.vertical ? "Height" : "Width")]();
        },
        dimension: function(element) {
            return element["outer" + (this.vertical ? "Height" : "Width")](true);
        },
        scroll: function(name, value, callback) {
            if (this.animating || false === this._trigger("scroll", null, [name, value])) {
                return this;
            }
            if ($.isFunction(value)) {
                /** @type {!Function} */
                callback = value;
                /** @type {boolean} */
                value = true;
            }
            var current = $.jCarousel.parseTarget(name);
            if (current.relative) {
                /** @type {number} */
                name = this.items().length - 1;
                /** @type {number} */
                var index = Math.abs(current.target);
                var i = this.options("wrap");
                var first;
                if (0 < current.target) {
                    if (first = this.index(this._last), first >= name && this.tail) {
                        if (this.inTail) {
                            if ("both" === i || "last" === i) {
                                this._scroll(0, value, callback);
                            } else {
                                if ($.isFunction(callback)) {
                                    callback.call(this, false);
                                }
                            }
                        } else {
                            this._scrollTail(value, callback);
                        }
                    } else {
                        if (current = this.index(this._target), this.underflow && current === name && ("circular" === i || "both" === i || "last" === i) || !this.underflow && first === name && ("both" === i || "last" === i)) {
                            this._scroll(0, value, callback);
                        } else {
                            if (index = current + index, this.circular && index > name) {
                                /** @type {string} */
                                i = name;
                                name = this.items().get(-1);
                                for (; i++ < index;) {
                                    name = this.items().eq(0);
                                    if (current = 0 <= this._visible.index(name)) {
                                        name.after(name.clone(true).attr("data-jcarousel-clone", true));
                                    }
                                    this.list().append(name);
                                    if (!current) {
                                        current = {};
                                        current[this.lt] = this.dimension(name);
                                        this.moveBy(current);
                                    }
                                    /** @type {null} */
                                    this._items = null;
                                }
                                this._scroll(name, value, callback);
                            } else {
                                this._scroll(Math.min(index, name), value, callback);
                            }
                        }
                    }
                } else {
                    if (this.inTail) {
                        this._scroll(Math.max(this.index(this._first) - index + 1, 0), value, callback);
                    } else {
                        if (first = this.index(this._first), current = this.index(this._target), current = this.underflow ? current : first, index = current - index, 0 >= current && (this.underflow && "circular" === i || "both" === i || "first" === i)) {
                            this._scroll(name, value, callback);
                        } else {
                            if (this.circular && 0 > index) {
                                /** @type {number} */
                                i = index;
                                name = this.items().get(0);
                                for (; 0 > i++;) {
                                    name = this.items().eq(-1);
                                    if (current = 0 <= this._visible.index(name)) {
                                        name.after(name.clone(true).attr("data-jcarousel-clone", true));
                                    }
                                    this.list().prepend(name);
                                    /** @type {null} */
                                    this._items = null;
                                    index = this.dimension(name);
                                    current = {};
                                    /** @type {number} */
                                    current[this.lt] = -index;
                                    this.moveBy(current);
                                }
                                this._scroll(name, value, callback);
                            } else {
                                this._scroll(Math.max(index, 0), value, callback);
                            }
                        }
                    }
                }
            } else {
                this._scroll(current.target, value, callback);
            }
            this._trigger("scrollend");
            $(document).trigger("promoSlideChange", {
                index: $(this._first).attr("data-index"),
                item: this._first
            });
            return this;
        },
        moveBy: function(e, x) {
            var fitContainerDimensions = this.list().position();
            /** @type {number} */
            var multiplier = 1;
            /** @type {number} */
            var fitContainerOffset = 0;
            if (this.rtl && !this.vertical) {
                /** @type {number} */
                multiplier = -1;
                if (this.relative) {
                    /** @type {number} */
                    fitContainerOffset = this.list().width() - this.clipping();
                }
            }
            if (e.left) {
                /** @type {string} */
                e.left = fitContainerDimensions.left + fitContainerOffset + toFloat(e.left) * multiplier + "px";
            }
            if (e.top) {
                /** @type {string} */
                e.top = fitContainerDimensions.top + fitContainerOffset + toFloat(e.top) * multiplier + "px";
            }
            return this.move(e, x);
        },
        move: function(options, opts) {
            opts = opts || {};
            var option = this.options("transitions");
            /** @type {boolean} */
            var leftToRight = !!option;
            /** @type {boolean} */
            var inputWin = !!option.transforms;
            /** @type {boolean} */
            var winRef = !!option.transforms3d;
            var maxColumn = opts.duration || 0;
            var list = this.list();
            if (!leftToRight && 0 < maxColumn) {
                list.animate(options, opts);
            } else {
                var next = opts.complete || $.noop;
                var css = {};
                if (leftToRight) {
                    var propX = list.css(["transitionDuration", "transitionTimingFunction", "transitionProperty"]);
                    var prevNext = next;
                    /**
                     * @return {undefined}
                     */
                    next = function() {
                        $(this).css(propX);
                        prevNext.call(this);
                    };
                    opts = option.easing || opts.easing;
                    /** @type {string} */
                    option = 0 < maxColumn ? inputWin || winRef ? "all" : options.left ? "left" : "top" : "none";
                    css = {
                        transitionDuration: (0 < maxColumn ? maxColumn / 1E3 : 0) + "s",
                        transitionTimingFunction: opts,
                        transitionProperty: option,
                        transform: "none"
                    };
                }
                if (winRef) {
                    /** @type {string} */
                    css.transform = "translate3d(" + (options.left || 0) + "," + (options.top || 0) + ",0)";
                } else {
                    if (inputWin) {
                        /** @type {string} */
                        css.transform = "translate(" + (options.left || 0) + "," + (options.top || 0) + ")";
                    } else {
                        $.extend(css, options);
                    }
                }
                if (leftToRight && 0 < maxColumn) {
                    list.one("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", next);
                }
                list.css(css);
                if (0 >= maxColumn) {
                    list.each(function() {
                        next.call(this);
                    });
                }
            }
        },
        _scroll: function(i, y, callback) {
            if (this.animating) {
                return $.isFunction(callback) && callback.call(this, false), this;
            }
            if ("object" !== typeof i) {
                i = this.items().eq(i);
            } else {
                if ("undefined" === typeof i.jquery) {
                    i = $(i);
                }
            }
            if (0 === i.length) {
                return $.isFunction(callback) && callback.call(this, false), this;
            }
            /** @type {boolean} */
            this.inTail = false;
            this._prepare(i);
            i = this._position(i);
            var pos = this.list().position()[this.lt];
            if (i === pos) {
                return $.isFunction(callback) && callback.call(this, false), this;
            }
            pos = {};
            /** @type {string} */
            pos[this.lt] = i + "px";
            this._animate(pos, y, callback);
            $(document).trigger("afterJcarouselScroll", this._target);
            return this;
        },
        _scrollTail: function(y, callback) {
            if (this.animating || !this.tail) {
                return $.isFunction(callback) && callback.call(this, false), this;
            }
            var pos = this.list().position()[this.lt];
            if (this.rtl && this.relative && !this.vertical) {
                pos = pos + (this.list().width() - this.clipping());
            }
            pos = this.rtl && !this.vertical ? pos + this.tail : pos - this.tail;
            /** @type {boolean} */
            this.inTail = true;
            var properties = {};
            /** @type {string} */
            properties[this.lt] = pos + "px";
            this._update({
                target: this._target.next(),
                fullyvisible: this._fullyvisible.slice(1).add(this._visible.last())
            });
            this._animate(properties, y, callback);
            return this;
        },
        _animate: function(x, y, callback) {
            callback = callback || $.noop;
            if (false === this._trigger("animate")) {
                return callback.call(this, false), this;
            }
            /** @type {boolean} */
            this.animating = true;
            var options = this.options("animation");
            var getClasspathFromDependencies = $.proxy(function() {
                /** @type {boolean} */
                this.animating = false;
                var otweets = this.list().find("[data-jcarousel-clone]");
                if (0 < otweets.length) {
                    otweets.remove();
                    this._reload();
                }
                this._trigger("animateend");
                callback.call(this, true);
            }, this);
            options = "object" === typeof options ? $.extend({}, options) : {
                duration: options
            };
            /** @type {function(): undefined} */
            var intersection__3365 = options.complete || $.noop;
            if (false === y) {
                /** @type {number} */
                options.duration = 0;
            } else {
                if ("undefined" !== typeof $.fx.speeds[options.duration]) {
                    options.duration = $.fx.speeds[options.duration];
                }
            }
            /**
             * @return {undefined}
             */
            options.complete = function() {
                getClasspathFromDependencies();
                intersection__3365.call(this);
            };
            this.move(x, options);
            return this;
        },
        _prepare: function(item) {
            var index = this.index(item);
            var i = index;
            var wh = this.dimension(item);
            var clip = this.clipping();
            /** @type {string} */
            var lrb = this.vertical ? "bottom" : this.rtl ? "left" : "right";
            var center = this.options("center");
            var update = {
                target: item,
                first: item,
                last: item,
                visible: item,
                fullyvisible: wh <= clip ? item : $()
            };
            var curr;
            var props;
            if (center) {
                /** @type {number} */
                wh = wh / 2;
                /** @type {number} */
                clip = clip / 2;
            }
            if (wh < clip) {
                for (;;) {
                    curr = this.items().eq(++i);
                    if (0 === curr.length) {
                        if (!this.circular) {
                            break;
                        }
                        curr = this.items().eq(0);
                        if (item.get(0) === curr.get(0)) {
                            break;
                        }
                        if (props = 0 <= this._visible.index(curr)) {
                            curr.after(curr.clone(true).attr("data-jcarousel-clone", true));
                        }
                        this.list().append(curr);
                        if (!props) {
                            props = {};
                            props[this.lt] = this.dimension(curr);
                            this.moveBy(props);
                        }
                        /** @type {null} */
                        this._items = null;
                    }
                    props = this.dimension(curr);
                    if (0 === props) {
                        break;
                    }
                    wh = wh + props;
                    update.last = curr;
                    update.visible = update.visible.add(curr);
                    props = toFloat(curr.css("margin-" + lrb));
                    if (wh - props <= clip) {
                        update.fullyvisible = update.fullyvisible.add(curr);
                    }
                    if (wh >= clip) {
                        break;
                    }
                }
            }
            if (!this.circular && !center && wh < clip) {
                i = index;
                for (; !(0 > --i);) {
                    curr = this.items().eq(i);
                    if (0 === curr.length) {
                        break;
                    }
                    props = this.dimension(curr);
                    if (0 === props) {
                        break;
                    }
                    wh = wh + props;
                    update.first = curr;
                    update.visible = update.visible.add(curr);
                    props = toFloat(curr.css("margin-" + lrb));
                    if (wh - props <= clip) {
                        update.fullyvisible = update.fullyvisible.add(curr);
                    }
                    if (wh >= clip) {
                        break;
                    }
                }
            }
            this._update(update);
            /** @type {number} */
            this.tail = 0;
            if (!(center || "circular" === this.options("wrap") || "custom" === this.options("wrap") || this.index(update.last) !== this.items().length - 1)) {
                /** @type {number} */
                wh = wh - toFloat(update.last.css("margin-" + lrb));
                if (wh > clip) {
                    /** @type {number} */
                    this.tail = wh - clip;
                }
            }
            return this;
        },
        _position: function(item) {
            var first = this._first;
            var pos = first.position()[this.lt];
            var center = this.options("center");
            /** @type {number} */
            var centerOffset = center ? this.clipping() / 2 - this.dimension(first) / 2 : 0;
            if (this.rtl && !this.vertical) {
                /** @type {number} */
                pos = this.relative ? pos - (this.list().width() - this.dimension(first)) : pos - (this.clipping() - this.dimension(first));
                /** @type {number} */
                pos = pos + centerOffset;
            } else {
                /** @type {number} */
                pos = pos - centerOffset;
            }
            if (!center && (this.index(item) > this.index(first) || this.inTail) && this.tail) {
                pos = this.rtl && !this.vertical ? pos - this.tail : pos + this.tail;
                /** @type {boolean} */
                this.inTail = true;
            } else {
                /** @type {boolean} */
                this.inTail = false;
            }
            return -pos;
        },
        _update: function(update) {
            var self = this;
            var current = {
                target: this._target || $(),
                first: this._first || $(),
                last: this._last || $(),
                visible: this._visible || $(),
                fullyvisible: this._fullyvisible || $()
            };
            /** @type {boolean} */
            var elOut = this.index(update.first || current.first) < this.index(current.first);
            var key;
            /**
             * @param {string} key
             * @return {undefined}
             */
            var doUpdate = function(key) {
                /** @type {!Array} */
                var e = [];
                /** @type {!Array} */
                var elIn = [];
                update[key].each(function() {
                    if (0 > current[key].index(this)) {
                        e.push(this);
                    }
                });
                current[key].each(function() {
                    if (0 > update[key].index(this)) {
                        elIn.push(this);
                    }
                });
                if (elOut) {
                    /** @type {!Array} */
                    e = e.reverse();
                } else {
                    /** @type {!Array} */
                    elIn = elIn.reverse();
                }
                self._trigger(key + "in", $(e));
                self._trigger(key + "out", $(elIn));
                self["_" + key] = update[key];
            };
            for (key in update) {
                doUpdate(key);
            }
            return this;
        }
    });
})(jQuery, window);
(function($) {
    /**
     * @param {string} index
     * @param {undefined} callback
     * @param {string} options
     * @return {?}
     */
    $.jcarousel.fn.scrollIntoView = function(index, callback, options) {
        index = $.jCarousel.parseTarget(index);
        var first = this.index(this._fullyvisible.first());
        var last = this.index(this._fullyvisible.last());
        index = index.relative ? 0 > index.target ? Math.max(0, first + index.target) : last + index.target : "object" !== typeof index.target ? index.target : this.index(index.target);
        if (index < first) {
            return this.scroll(index, callback, options);
        }
        if (index >= first && index <= last) {
            return $.isFunction(options) && options.call(this, false), this;
        }
        var children = this.items();
        first = this.clipping();
        /** @type {string} */
        var lrb = this.vertical ? "bottom" : this.rtl ? "left" : "right";
        /** @type {number} */
        last = 0;
        var curr;
        for (;;) {
            curr = children.eq(index);
            if (0 === curr.length) {
                break;
            }
            last = last + this.dimension(curr);
            if (last >= first) {
                /** @type {number} */
                children = parseFloat(curr.css("margin-" + lrb)) || 0;
                if (last - children !== first) {
                    index++;
                }
                break;
            }
            if (0 >= index) {
                break;
            }
            index--;
        }
        return this.scroll(index, callback, options);
    };
})(jQuery);
(function($) {
    $.jCarousel.plugin("jcarouselControl", {
        _options: {
            target: "+=1",
            event: "click",
            method: "scroll"
        },
        _active: null,
        _init: function() {
            this.onDestroy = $.proxy(function() {
                this._destroy();
                this.carousel().one("jcarousel:createend", $.proxy(this._create, this));
            }, this);
            this.onReload = $.proxy(this._reload, this);
            this.onEvent = $.proxy(function(options) {
                options.preventDefault();
                options = this.options("method");
                if ($.isFunction(options)) {
                    options.call(this);
                } else {
                    this.carousel().jcarousel(this.options("method"), this.options("target"));
                }
            }, this);
        },
        _create: function() {
            this.carousel().one("jcarousel:destroy", this.onDestroy).on("jcarousel:reloadend jcarousel:scrollend", this.onReload);
            this._element.on(this.options("event") + ".jcarouselcontrol", this.onEvent);
            this._reload();
        },
        _destroy: function() {
            this._element.off(".jcarouselcontrol", this.onEvent);
            this.carousel().off("jcarousel:destroy", this.onDestroy).off("jcarousel:reloadend jcarousel:scrollend", this.onReload);
        },
        _reload: function() {
            var res = $.jCarousel.parseTarget(this.options("target"));
            var carousel = this.carousel();
            if (res.relative) {
                carousel = carousel.jcarousel(0 < res.target ? "hasNext" : "hasPrev");
            } else {
                res = "object" !== typeof res.target ? carousel.jcarousel("items").eq(res.target) : res.target;
                /** @type {boolean} */
                carousel = 0 <= carousel.jcarousel("target").index(res);
            }
            if (this._active !== carousel) {
                this._trigger(carousel ? "active" : "inactive");
                this._active = carousel;
            }
            return this;
        }
    });
})(jQuery);
(function($) {
    $.jCarousel.plugin("jcarouselPagination", {
        _options: {
            perPage: null,
            item: function(name) {
                return '<a href="#' + name + '">' + name + "</a>";
            },
            event: "click",
            method: "scroll"
        },
        _pages: {},
        _items: {},
        _currentPage: null,
        _init: function() {
            this.onDestroy = $.proxy(function() {
                this._destroy();
                this.carousel().one("jcarousel:createend", $.proxy(this._create, this));
            }, this);
            this.onReload = $.proxy(this._reload, this);
            this.onScroll = $.proxy(this._update, this);
        },
        _create: function() {
            this.carousel().one("jcarousel:destroy", this.onDestroy).on("jcarousel:reloadend", this.onReload).on("jcarousel:scrollend", this.onScroll);
            this._reload();
        },
        _destroy: function() {
            this._clear();
            this.carousel().off("jcarousel:destroy", this.onDestroy).off("jcarousel:reloadend", this.onReload).off("jcarousel:scrollend", this.onScroll);
        },
        _reload: function() {
            var perPage = this.options("perPage");
            this._pages = {};
            this._items = {};
            if ($.isFunction(perPage)) {
                perPage = perPage.call(this);
            }
            if (null == perPage) {
                this._pages = this._calculatePages();
            } else {
                /** @type {number} */
                perPage = parseInt(perPage, 10) || 0;
                var a = this.carousel().jcarousel("items");
                /** @type {number} */
                var page = 1;
                /** @type {number} */
                var ia = 0;
                var i;
                for (;;) {
                    i = a.eq(ia++);
                    if (0 === i.length) {
                        break;
                    }
                    this._pages[page] = this._pages[page] ? this._pages[page].add(i) : i;
                    if (0 === ia % perPage) {
                        page++;
                    }
                }
            }
            this._clear();
            var that = this;
            var carousel = this.carousel().data("jcarousel");
            var element = this._element;
            var item = this.options("item");
            $.each(this._pages, function(page, carouselItems) {
                var form = that._items[page] = $(item.call(that, page, carouselItems));
                form.on(that.options("event") + ".jcarouselpagination", $.proxy(function() {
                    var index = carouselItems.eq(0);
                    if (carousel.circular) {
                        var delay = carousel.index(carousel.target());
                        var delta = carousel.index(index);
                        if (parseFloat(page) > parseFloat(that._currentPage)) {
                            if (delta < delay) {
                                /** @type {string} */
                                index = "+=" + (carousel.items().length - delay + delta);
                            }
                        } else {
                            if (delta > delay) {
                                /** @type {string} */
                                index = "-=" + (delay + (carousel.items().length - delta));
                            }
                        }
                    }
                    carousel[this.options("method")](index);
                }, that));
                element.append(form);
            });
            this._update();
        },
        _update: function() {
            var c = this.carousel().jcarousel("target");
            var currentPage;
            $.each(this._pages, function(n, ticket_list) {
                ticket_list.each(function() {
                    if (c.is(this)) {
                        return currentPage = n, false;
                    }
                });
                if (currentPage) {
                    return false;
                }
            });
            if (this._currentPage !== currentPage) {
                this._trigger("inactive", this._items[this._currentPage]);
                this._trigger("active", this._items[currentPage]);
            }
            this._currentPage = currentPage;
        },
        items: function() {
            return this._items;
        },
        _clear: function() {
            this._element.empty();
            /** @type {null} */
            this._currentPage = null;
        },
        _calculatePages: function() {
            var carousel = this.carousel().data("jcarousel");
            var $ths2 = carousel.items();
            var dst_start = carousel.clipping();
            /** @type {number} */
            var t = 0;
            /** @type {number} */
            var jj = 0;
            /** @type {number} */
            var j = 1;
            var pages = {};
            var m;
            for (;;) {
                m = $ths2.eq(jj++);
                if (0 === m.length) {
                    break;
                }
                pages[j] = pages[j] ? pages[j].add(m) : m;
                t = t + carousel.dimension(m);
                if (t >= dst_start) {
                    j++;
                    /** @type {number} */
                    t = 0;
                }
            }
            return pages;
        }
    });
})(jQuery);
(function($) {
    $.jCarousel.plugin("jcarouselAutoscroll", {
        _options: {
            target: "+=1",
            interval: 3E3,
            autostart: true
        },
        _timer: null,
        _init: function() {
            this.onDestroy = $.proxy(function() {
                this._destroy();
                this.carousel().one("jcarousel:createend", $.proxy(this._create, this));
            }, this);
            this.onAnimateEnd = $.proxy(this.start, this);
        },
        _create: function() {
            this.carousel().one("jcarousel:destroy", this.onDestroy);
            if (this.options("autostart")) {
                this.start();
            }
        },
        _destroy: function() {
            this.stop();
            this.carousel().off("jcarousel:destroy", this.onDestroy);
        },
        start: function() {
            this.stop();
            this.carousel().one("jcarousel:animateend", this.onAnimateEnd);
            /** @type {number} */
            this._timer = setTimeout($.proxy(function() {
                this.carousel().jcarousel("scroll", this.options("target"));
            }, this), this.options("interval"));
            return this;
        },
        stop: function() {
            if (this._timer) {
                this._timer = clearTimeout(this._timer);
            }
            this.carousel().off("jcarousel:animateend", this.onAnimateEnd);
            return this;
        }
    });
})(jQuery);
jQuery.easing.jswing = jQuery.easing.swing;
jQuery.extend(jQuery.easing, {
    def: "easeOutQuad",
    swing: function(p, t, diff, n, c) {
        return jQuery.easing[jQuery.easing.def](p, t, diff, n, c);
    },
    easeInQuad: function(duration, t, b, c, d) {
        return c * (t = t / d) * t + b;
    },
    easeOutQuad: function(b, c, t, d, dx) {
        return -d * (c = c / dx) * (c - 2) + t;
    },
    easeInOutQuad: function(x, t, b, c, d) {
        return 1 > (t = t / (d / 2)) ? c / 2 * t * t + b : -c / 2 * (--t * (t - 2) - 1) + b;
    },
    easeInCubic: function(duration, t, b, c, d) {
        return c * (t = t / d) * t * t + b;
    },
    easeOutCubic: function(b, x, i, t, a) {
        return t * ((x = x / a - 1) * x * x + 1) + i;
    },
    easeInOutCubic: function(c, t, b, m, d) {
        return 1 > (t = t / (d / 2)) ? m / 2 * t * t * t + b : m / 2 * ((t = t - 2) * t * t + 2) + b;
    },
    easeInQuart: function(t, d, c, pos, x) {
        return pos * (d = d / x) * d * d * d + c;
    },
    easeOutQuart: function(d, pos, c, t, segment) {
        return -t * ((pos = pos / segment - 1) * pos * pos * pos - 1) + c;
    },
    easeInOutQuart: function(c, pos, from, d, t) {
        return 1 > (pos = pos / (t / 2)) ? d / 2 * pos * pos * pos * pos + from : -d / 2 * ((pos = pos - 2) * pos * pos * pos - 2) + from;
    },
    easeInQuint: function(t, a, b, d, sx) {
        return d * (a = a / sx) * a * a * a * a + b;
    },
    easeOutQuint: function(b, x, i, t, c) {
        return t * ((x = x / c - 1) * x * x * x * x + 1) + i;
    },
    easeInOutQuint: function(c, t, b, m, d) {
        return 1 > (t = t / (d / 2)) ? m / 2 * t * t * t * t * t + b : m / 2 * ((t = t - 2) * t * t * t * t + 2) + b;
    },
    easeInSine: function(x, t, b, d, c) {
        return -d * Math.cos(t / c * (Math.PI / 2)) + d + b;
    },
    easeOutSine: function(t, x, d, b, c) {
        return b * Math.sin(x / c * (Math.PI / 2)) + d;
    },
    easeInOutSine: function(x, t, b, c, d) {
        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
    },
    easeInExpo: function(pos, x, n, t, c) {
        return 0 == x ? n : t * Math.pow(2, 10 * (x / c - 1)) + n;
    },
    easeOutExpo: function(x, t, b, c, d) {
        return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
    },
    easeInOutExpo: function(duration, t, b, c, d) {
        return 0 == t ? b : t == d ? b + c : 1 > (t = t / (d / 2)) ? c / 2 * Math.pow(2, 10 * (t - 1)) + b : c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
    },
    easeInCirc: function(d, pos, value, change, duration) {
        return -change * (Math.sqrt(1 - (pos = pos / duration) * pos) - 1) + value;
    },
    easeOutCirc: function(pos, d, n, t, c) {
        return t * Math.sqrt(1 - (d = d / c - 1) * d) + n;
    },
    easeInOutCirc: function(d, pos, value, start, speed) {
        return 1 > (pos = pos / (speed / 2)) ? -start / 2 * (Math.sqrt(1 - pos * pos) - 1) + value : start / 2 * (Math.sqrt(1 - (pos = pos - 2) * pos) + 1) + value;
    },
    easeInElastic: function(w, t, x_min, dx, d) {
        /** @type {number} */
        w = 0;
        /** @type {number} */
        var a = dx;
        if (0 == t) {
            return x_min;
        }
        if (1 == (t = t / d)) {
            return x_min + dx;
        }
        if (!w) {
            /** @type {number} */
            w = .3 * d;
        }
        if (a < Math.abs(dx)) {
            /** @type {number} */
            a = dx;
            /** @type {number} */
            dx = w / 4;
        } else {
            /** @type {number} */
            dx = w / (2 * Math.PI) * Math.asin(dx / a);
        }
        return -(a * Math.pow(2, 10 * --t) * Math.sin(2 * (t * d - dx) * Math.PI / w)) + x_min;
    },
    easeOutElastic: function(offset, x, b, c, scale) {
        /** @type {number} */
        var width = 0;
        /** @type {number} */
        var a = c;
        if (0 == x) {
            return b;
        }
        if (1 == (x = x / scale)) {
            return b + c;
        }
        if (!width) {
            /** @type {number} */
            width = .3 * scale;
        }
        if (a < Math.abs(c)) {
            /** @type {number} */
            a = c;
            /** @type {number} */
            offset = width / 4;
        } else {
            /** @type {number} */
            offset = width / (2 * Math.PI) * Math.asin(c / a);
        }
        return a * Math.pow(2, -10 * x) * Math.sin(2 * (x * scale - offset) * Math.PI / width) + c + b;
    },
    easeInOutElastic: function(s, t, x_min, dx, d) {
        /** @type {number} */
        var p = 0;
        /** @type {number} */
        var a = dx;
        if (0 == t) {
            return x_min;
        }
        if (2 == (t = t / (d / 2))) {
            return x_min + dx;
        }
        if (!p) {
            /** @type {number} */
            p = .3 * d * 1.5;
        }
        if (a < Math.abs(dx)) {
            /** @type {number} */
            a = dx;
            /** @type {number} */
            s = p / 4;
        } else {
            /** @type {number} */
            s = p / (2 * Math.PI) * Math.asin(dx / a);
        }
        return 1 > t ? -.5 * a * Math.pow(2, 10 * --t) * Math.sin(2 * (t * d - s) * Math.PI / p) + x_min : a * Math.pow(2, -10 * --t) * Math.sin(2 * (t * d - s) * Math.PI / p) * .5 + dx + x_min;
    },
    easeInBack: function(b, t, pos, c, d, s) {
        if (void 0 == s) {
            /** @type {number} */
            s = 1.70158;
        }
        return c * (t = t / d) * t * ((s + 1) * t - s) + pos;
    },
    easeOutBack: function(x, t, b, c, d, s) {
        if (void 0 == s) {
            /** @type {number} */
            s = 1.70158;
        }
        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
    },
    easeInOutBack: function(b, t, c, pos, d, s) {
        if (void 0 == s) {
            /** @type {number} */
            s = 1.70158;
        }
        return 1 > (t = t / (d / 2)) ? pos / 2 * t * t * (((s = s * 1.525) + 1) * t - s) + c : pos / 2 * ((t = t - 2) * t * (((s = s * 1.525) + 1) * t + s) + 2) + c;
    },
    easeInBounce: function(x, t, b, c, d) {
        return c - jQuery.easing.easeOutBounce(x, d - t, 0, c, d) + b;
    },
    easeOutBounce: function(t, n, s, d, m) {
        return (n = n / m) < 1 / 2.75 ? 7.5625 * d * n * n + s : n < 2 / 2.75 ? d * (7.5625 * (n = n - 1.5 / 2.75) * n + .75) + s : n < 2.5 / 2.75 ? d * (7.5625 * (n = n - 2.25 / 2.75) * n + .9375) + s : d * (7.5625 * (n = n - 2.625 / 2.75) * n + .984375) + s;
    },
    easeInOutBounce: function(x, t, b, c, d) {
        return t < d / 2 ? .5 * jQuery.easing.easeInBounce(x, 2 * t, 0, c, d) + b : .5 * jQuery.easing.easeOutBounce(x, 2 * t - d, 0, c, d) + .5 * c + b;
    }
});
(function($) {
    /**
     * @param {undefined} key
     * @return {?}
     */
    function settings(key) {
        return $.data(key, "tooltip");
    }
    /**
     * @param {!Object} width
     * @return {undefined}
     */
    function handle(width) {
        if (settings(this).delay) {
            /** @type {number} */
            timer = setTimeout(show, settings(this).delay);
        } else {
            show();
        }
        /** @type {boolean} */
        v = !!settings(this).track;
        $(document.body).bind("mousemove", update);
        update(width);
    }
    /**
     * @return {undefined}
     */
    function save() {
        if (!$.tooltip.blocked && this != current && (this.tooltipText || settings(this).bodyHandler)) {
            current = this;
            title = this.tooltipText;
            if (settings(this).bodyHandler) {
                helper.title.hide();
                var content = settings(this).bodyHandler.call(this);
                if (content.nodeType || content.jquery) {
                    helper.body.empty().append(content);
                } else {
                    helper.body.html(content);
                }
                helper.body.show();
            } else {
                if (settings(this).showBody) {
                    content = title.split(settings(this).showBody);
                    helper.title.html(content.shift()).show();
                    helper.body.empty();
                    /** @type {number} */
                    var i = 0;
                    var cur;
                    for (; cur = content[i]; i++) {
                        if (0 < i) {
                            helper.body.append("<br/>");
                        }
                        helper.body.append(cur);
                    }
                    helper.body.hideWhenEmpty();
                } else {
                    helper.title.html(title).show();
                    helper.body.hide();
                }
            }
            if (settings(this).showURL && $(this).url()) {
                helper.url.html($(this).url().replace("http://", "")).show();
            } else {
                helper.url.hide();
            }
            helper.parent.addClass(settings(this).extraClass);
            if (settings(this).fixPNG) {
                helper.parent.fixPNG();
            }
            handle.apply(this, arguments);
        }
    }
    /**
     * @return {undefined}
     */
    function show() {
        /** @type {null} */
        timer = null;
        if (IE && $.fn.bgiframe || !settings(current).fade) {
            helper.parent.show();
        } else {
            if (helper.parent.is(":animated")) {
                helper.parent.stop().show().fadeTo(settings(current).fade, current.tOpacity);
            } else {
                if (helper.parent.is(":visible")) {
                    helper.parent.fadeTo(settings(current).fade, current.tOpacity);
                } else {
                    helper.parent.fadeIn(settings(current).fade);
                }
            }
        }
        update();
    }
    /**
     * @param {!Object} a
     * @return {undefined}
     */
    function update(a) {
        if (!($.tooltip.blocked || a && "OPTION" == a.target.tagName)) {
            if (!v && helper.parent.is(":visible") && $(document.body).unbind("mousemove", update), null == current) {
                $(document.body).unbind("mousemove", update);
            } else {
                helper.parent.removeClass("viewport-right").removeClass("viewport-bottom");
                var x = helper.parent[0].offsetLeft;
                var top = helper.parent[0].offsetTop;
                if (a) {
                    x = a.pageX + settings(current).left;
                    top = a.pageY + settings(current).top;
                    /** @type {string} */
                    a = "auto";
                    if (settings(current).positionLeft) {
                        /** @type {number} */
                        a = $(window).width() - x;
                        /** @type {string} */
                        x = "auto";
                    }
                    helper.parent.css({
                        left: x,
                        right: a,
                        top: top
                    });
                }
                a = $(window).scrollLeft();
                var k = $(window).scrollTop();
                var b = $(window).width();
                var _open_dot = $(window).height();
                var calDiv = helper.parent[0];
                if (a + b < calDiv.offsetLeft + calDiv.offsetWidth) {
                    /** @type {number} */
                    x = x - (calDiv.offsetWidth + 20 + settings(current).left);
                    helper.parent.css({
                        left: x + "px"
                    }).addClass("viewport-right");
                }
                if (k + _open_dot < calDiv.offsetTop + calDiv.offsetHeight) {
                    /** @type {number} */
                    top = top - (calDiv.offsetHeight + 20 + settings(current).top);
                    helper.parent.css({
                        top: top + "px"
                    }).addClass("viewport-bottom");
                }
            }
        }
    }
    /**
     * @param {?} keepCurrentModal
     * @return {undefined}
     */
    function hide(keepCurrentModal) {
        /**
         * @return {undefined}
         */
        function complete() {
            helper.parent.removeClass(tsettings.extraClass).hide().css("opacity", "");
        }
        if (!$.tooltip.blocked) {
            if (timer) {
                clearTimeout(timer);
            }
            /** @type {null} */
            current = null;
            var tsettings = settings(this);
            if (IE && $.fn.bgiframe || !tsettings.fade) {
                complete();
            } else {
                if (helper.parent.is(":animated")) {
                    helper.parent.stop().fadeTo(tsettings.fade, 0, complete);
                } else {
                    helper.parent.stop().fadeOut(tsettings.fade, complete);
                }
            }
            if (settings(this).fixPNG) {
                helper.parent.unfixPNG();
            }
        }
    }
    var helper = {};
    var current;
    var title;
    var timer;
    var IE = $.browser.msie && /MSIE\s(5\.5|6\.)/.test(navigator.userAgent);
    /** @type {boolean} */
    var v = false;
    $.tooltip = {
        blocked: false,
        defaults: {
            delay: 200,
            fade: false,
            showURL: true,
            extraClass: "",
            top: 15,
            left: 15,
            id: "tooltip"
        },
        block: function() {
            /** @type {boolean} */
            $.tooltip.blocked = !$.tooltip.blocked;
        }
    };
    $.fn.extend({
        tooltip: function(s) {
            s = $.extend({}, $.tooltip.defaults, s);
            if (!helper.parent) {
                helper.parent = $('<div id="' + s.id + '"><div class="body"></div><div class="url"></div></div>').appendTo(document.body).hide();
                if ($.fn.bgiframe) {
                    helper.parent.bgiframe();
                }
                helper.title = $("h3", helper.parent);
                helper.body = $("div.body", helper.parent);
                helper.url = $("div.url", helper.parent);
            }
            return this.each(function() {
                $.data(this, "tooltip", s);
                this.tOpacity = helper.parent.css("opacity");
                this.tooltipText = this.title;
                $(this).removeAttr("title");
                /** @type {string} */
                this.alt = "";
            }).mouseover(save).mouseout(hide).click(hide);
        },
        fixPNG: IE ? function() {
            return this.each(function() {
                var id = $(this).css("backgroundImage");
                if (id.match(/^url\(["']?(.*\.png)["']?\)$/i)) {
                    /** @type {string} */
                    id = RegExp.$1;
                    $(this).css({
                        backgroundImage: "none",
                        filter: "progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=crop, src='" + id + "')"
                    }).each(function() {
                        var c = $(this).css("position");
                        if ("absolute" != c && "relative" != c) {
                            $(this).css("position", "relative");
                        }
                    });
                }
            });
        } : function() {
            return this;
        },
        unfixPNG: IE ? function() {
            return this.each(function() {
                $(this).css({
                    filter: "",
                    backgroundImage: ""
                });
            });
        } : function() {
            return this;
        },
        hideWhenEmpty: function() {
            return this.each(function() {
                $(this)[$(this).html() ? "show" : "hide"]();
            });
        },
        url: function() {
            return this.attr("href") || this.attr("src");
        }
    });
})(jQuery);
(function($, window, infinite) {
    /**
     * @param {string} url
     * @return {?}
     */
    function resolve(url) {
        url = url || location.href;
        return "#" + url.replace(/^[^#]*#?(.*)$/, "$1");
    }
    /** @type {!HTMLDocument} */
    var doc = document;
    var f;
    var that = $.event.special;
    var iter = doc.documentMode;
    /** @type {boolean} */
    var supports_onhashchange = "onhashchange" in window && (iter === infinite || 7 < iter);
    /**
     * @param {string} callback
     * @return {?}
     */
    $.fn.hashchange = function(callback) {
        return callback ? this.bind("hashchange", callback) : this.trigger("hashchange");
    };
    /** @type {number} */
    $.fn.hashchange.delay = 50;
    that.hashchange = $.extend(that.hashchange, {
        setup: function() {
            if (supports_onhashchange) {
                return false;
            }
            $(f.start);
        },
        teardown: function() {
            if (supports_onhashchange) {
                return false;
            }
            $(f.stop);
        }
    });
    f = function() {
        /**
         * @return {undefined}
         */
        function start() {
            var newValue = resolve();
            var result = listener(value);
            if (newValue !== value) {
                callback(value = newValue, result);
                $(window).trigger("hashchange");
            } else {
                if (result !== value) {
                    /** @type {string} */
                    location.href = location.href.replace(/#.*/, "") + result;
                }
            }
            /** @type {number} */
            startTimeout = setTimeout(start, $.fn.hashchange.delay);
        }
        var sprite = {};
        var startTimeout;
        var value = resolve();
        /**
         * @param {boolean} data
         * @return {?}
         */
        var fn = function(data) {
            return data;
        };
        /** @type {function(boolean): ?} */
        var callback = fn;
        /** @type {function(boolean): ?} */
        var listener = fn;
        /**
         * @return {undefined}
         */
        sprite.start = function() {
            if (!startTimeout) {
                start();
            }
        };
        /**
         * @return {undefined}
         */
        sprite.stop = function() {
            if (startTimeout) {
                clearTimeout(startTimeout);
            }
            /** @type {number} */
            startTimeout = infinite;
        };
        if ($.browser.msie && !supports_onhashchange) {
            (function() {
                var window;
                var imageSrc;
                /**
                 * @return {undefined}
                 */
                sprite.start = function() {
                    if (!window) {
                        imageSrc = (imageSrc = $.fn.hashchange.src) && imageSrc + resolve();
                        window = $('<iframe tabindex="-1" title="empty"/>').hide().one("load", function() {
                            if (!imageSrc) {
                                callback(resolve());
                            }
                            start();
                        }).attr("src", imageSrc || "javascript:0").insertAfter("body")[0].contentWindow;
                        /**
                         * @return {undefined}
                         */
                        doc.onpropertychange = function() {
                            try {
                                if ("title" === event.propertyName) {
                                    /** @type {string} */
                                    window.document.title = doc.title;
                                }
                            } catch (I) {}
                        };
                    }
                };
                /** @type {function(boolean): ?} */
                sprite.stop = fn;
                /**
                 * @return {?}
                 */
                listener = function() {
                    return resolve(window.location.href);
                };
                /**
                 * @param {string} id
                 * @param {string} e
                 * @return {undefined}
                 */
                callback = function(id, e) {
                    var document = window.document;
                    var httpfa = $.fn.hashchange.domain;
                    if (id !== e) {
                        /** @type {string} */
                        document.title = doc.title;
                        document.open();
                        if (httpfa) {
                            document.write('<script>document.domain="' + httpfa + '"\x3c/script>');
                        }
                        document.close();
                        /** @type {string} */
                        window.location.hash = id;
                    }
                };
            })();
        }
        return sprite;
    }();
})(jQuery, this);
(function($) {
    $.extend($.fn, {
        validate: function(options) {
            if (this.length) {
                var self = $.data(this[0], "validator");
                if (self) {
                    return self;
                }
                this.attr("novalidate", "novalidate");
                self = new $.validator(options, this[0]);
                $.data(this[0], "validator", self);
                if (self.settings.onsubmit) {
                    options = this.find("input, button");
                    options.filter(".cancel").click(function() {
                        /** @type {boolean} */
                        self.cancelSubmit = true;
                    });
                    if (self.settings.submitHandler) {
                        options.filter(":submit").click(function() {
                            self.submitButton = this;
                        });
                    }
                    this.submit(function(event) {
                        /**
                         * @return {?}
                         */
                        function handle() {
                            if (self.settings.submitHandler) {
                                if (self.submitButton) {
                                    var exMap = $("<input type='hidden'/>").attr("name", self.submitButton.name).val(self.submitButton.value).appendTo(self.currentForm);
                                }
                                self.settings.submitHandler.call(self, self.currentForm);
                                if (self.submitButton) {
                                    exMap.remove();
                                }
                                return false;
                            }
                            return true;
                        }
                        if (self.settings.debug) {
                            event.preventDefault();
                        }
                        if (self.cancelSubmit) {
                            return self.cancelSubmit = false, handle();
                        }
                        if (self.form()) {
                            return self.pendingRequest ? (self.formSubmitted = true, false) : handle();
                        }
                        self.focusInvalid();
                        return false;
                    });
                }
                return self;
            }
            if (options && options.debug && window.console) {
                console.warn("nothing selected, can't validate, returning nothing");
            }
        },
        valid: function() {
            if ($(this[0]).is("form")) {
                return this.validate().form();
            }
            /** @type {boolean} */
            var valid = true;
            var oStartData = $(this[0].form).validate();
            this.each(function() {
                /** @type {number} */
                valid = valid & oStartData.element(this);
            });
            return valid;
        },
        removeAttrs: function(attrs) {
            var result = {};
            var $elem = this;
            $.each(attrs.split(/\s/), function(b, attrName) {
                result[attrName] = $elem.attr(attrName);
                $elem.removeAttr(attrName);
            });
            return result;
        },
        rules: function(method, argument) {
            var element = this[0];
            if (method) {
                var settings = $.data(element.form, "validator").settings;
                var staticRules = settings.rules;
                var instance = $.validator.staticRules(element);
                switch (method) {
                    case "add":
                        $.extend(instance, $.validator.normalizeRule(argument));
                        staticRules[element.name] = instance;
                        if (argument.messages) {
                            settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages);
                        }
                        break;
                    case "remove":
                        if (!argument) {
                            return delete staticRules[element.name], instance;
                        }
                        var data = {};
                        $.each(argument.split(/\s/), function(b, p) {
                            data[p] = instance[p];
                            delete instance[p];
                        });
                        return data;
                }
            }
            method = $.validator.normalizeRules($.extend({}, $.validator.metadataRules(element), $.validator.classRules(element), $.validator.attributeRules(element), $.validator.staticRules(element)), element);
            if (method.required) {
                argument = method.required;
                delete method.required;
                method = $.extend({
                    required: argument
                }, method);
            }
            return method;
        }
    });
    $.extend($.expr[":"], {
        blank: function(a) {
            return !$.trim("" + a.value);
        },
        filled: function(a) {
            return !!$.trim("" + a.value);
        },
        unchecked: function(a) {
            return !a.checked;
        }
    });
    /**
     * @param {?} options
     * @param {string} form
     * @return {undefined}
     */
    $.validator = function(options, form) {
        this.settings = $.extend(true, {}, $.validator.defaults, options);
        /** @type {string} */
        this.currentForm = form;
        this.init();
    };
    /**
     * @param {!Object} name
     * @param {string} value
     * @return {?}
     */
    $.validator.format = function(name, value) {
        if (1 == arguments.length) {
            return function() {
                var d = $.makeArray(arguments);
                d.unshift(name);
                return $.validator.format.apply(this, d);
            };
        }
        if (2 < arguments.length && value.constructor != Array) {
            value = $.makeArray(arguments).slice(1);
        }
        if (value.constructor != Array) {
            /** @type {!Array} */
            value = [value];
        }
        $.each(value, function(b, word) {
            name = name.replace(new RegExp("\\{" + b + "\\}", "g"), word);
        });
        return name;
    };
    $.extend($.validator, {
        defaults: {
            messages: {},
            groups: {},
            rules: {},
            errorClass: "error",
            validClass: "valid",
            errorElement: "label",
            focusInvalid: true,
            errorContainer: $([]),
            errorLabelContainer: $([]),
            onsubmit: true,
            ignore: "input:hidden, textarea:hidden",
            ignoreTitle: false,
            onfocusin: function(element, event) {
                /** @type {!Object} */
                this.lastActive = element;
                if (this.settings.focusCleanup && !this.blockFocusCleanup) {
                    if (this.settings.unhighlight) {
                        this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass);
                    }
                    this.addWrapper(this.errorsFor(element)).hide();
                }
            },
            onfocusout: function(element, event) {
                if (!(this.checkable(element) || !(element.name in this.submitted) && this.optional(element))) {
                    this.element(element);
                }
            },
            onkeyup: function(element, event) {
                if (element.name in this.submitted || element == this.lastElement) {
                    this.element(element);
                }
            },
            onclick: function(element, event) {
                if (element.name in this.submitted) {
                    this.element(element);
                } else {
                    if (element.parentNode.name in this.submitted) {
                        this.element(element.parentNode);
                    }
                }
            },
            highlight: function(el, n, d) {
                if ("radio" === el.type) {
                    this.findByName(el.name).addClass(n).removeClass(d);
                } else {
                    $(el).addClass(n).removeClass(d);
                }
            },
            unhighlight: function(element, errorClass, validClass) {
                if ("radio" === element.type) {
                    this.findByName(element.name).removeClass(errorClass).addClass(validClass);
                } else {
                    $(element).removeClass(errorClass).addClass(validClass);
                }
            }
        },
        setDefaults: function(settings) {
            $.extend($.validator.defaults, settings);
        },
        messages: {
            required: "This field is required.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date (ISO).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            creditcard: "Please enter a valid credit card number.",
            equalTo: "Please enter the same value again.",
            accept: "Please enter a value with a valid extension.",
            maxlength: $.validator.format("Please enter no more than {0} characters."),
            minlength: $.validator.format("Please enter at least {0} characters."),
            rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
            range: $.validator.format("Please enter a value between {0} and {1}."),
            max: $.validator.format("Please enter a value less than or equal to {0}."),
            min: $.validator.format("Please enter a value greater than or equal to {0}.")
        },
        autoCreateRanges: false,
        prototype: {
            init: function() {
                /**
                 * @param {!Object} event
                 * @return {undefined}
                 */
                function delegate(event) {
                    var validator = $.data(this[0].form, "validator");
                    var eventType = "on" + event.type.replace(/^validate/, "");
                    if (validator.settings[eventType]) {
                        validator.settings[eventType].call(validator, this[0], event);
                    }
                }
                this.labelContainer = $(this.settings.errorLabelContainer);
                this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
                this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);
                this.submitted = {};
                this.valueCache = {};
                /** @type {number} */
                this.pendingRequest = 0;
                this.pending = {};
                this.invalid = {};
                this.reset();
                var groups = this.groups = {};
                $.each(this.settings.groups, function($this, clusterShardData) {
                    $.each(clusterShardData.split(/\s/), function(b, i) {
                        groups[i] = $this;
                    });
                });
                var rules = this.settings.rules;
                $.each(rules, function(name, value) {
                    rules[name] = $.validator.normalizeRule(value);
                });
                $(this.currentForm).validateDelegate("[type='text'], [type='password'], [type='file'], select, textarea, [type='number'], [type='search'] ,[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'] ", "focusin focusout keyup", delegate).validateDelegate("[type='radio'], [type='checkbox'], select, option", "click", delegate);
                if (this.settings.invalidHandler) {
                    $(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
                }
            },
            form: function() {
                this.checkForm();
                $.extend(this.submitted, this.errorMap);
                this.invalid = $.extend({}, this.errorMap);
                if (!this.valid()) {
                    $(this.currentForm).triggerHandler("invalid-form", [this]);
                }
                this.showErrors();
                return this.valid();
            },
            checkForm: function() {
                this.prepareForm();
                /** @type {number} */
                var i = 0;
                var elements = this.currentElements = this.elements();
                for (; elements[i]; i++) {
                    this.check(elements[i]);
                }
                return this.valid();
            },
            element: function(name) {
                this.lastElement = name = this.validationTargetFor(this.clean(name));
                this.prepareElement(name);
                this.currentElements = $(name);
                var result = this.check(name);
                if (result) {
                    delete this.invalid[name.name];
                } else {
                    /** @type {boolean} */
                    this.invalid[name.name] = true;
                }
                if (!this.numberOfInvalids()) {
                    this.toHide = this.toHide.add(this.containers);
                }
                this.showErrors();
                return result;
            },
            showErrors: function(errors) {
                if (errors) {
                    $.extend(this.errorMap, errors);
                    /** @type {!Array} */
                    this.errorList = [];
                    var name;
                    for (name in errors) {
                        this.errorList.push({
                            message: errors[name],
                            element: this.findByName(name)[0]
                        });
                    }
                    this.successList = $.grep(this.successList, function(element) {
                        return !(element.name in errors);
                    });
                }
                if (this.settings.showErrors) {
                    this.settings.showErrors.call(this, this.errorMap, this.errorList);
                } else {
                    this.defaultShowErrors();
                }
            },
            resetForm: function() {
                if ($.fn.resetForm) {
                    $(this.currentForm).resetForm();
                }
                this.submitted = {};
                /** @type {null} */
                this.lastElement = null;
                this.prepareForm();
                this.hideErrors();
                this.elements().removeClass(this.settings.errorClass);
            },
            numberOfInvalids: function() {
                return this.objectLength(this.invalid);
            },
            objectLength: function(o) {
                /** @type {number} */
                var count = 0;
                var k;
                for (k in o) {
                    count++;
                }
                return count;
            },
            hideErrors: function() {
                this.addWrapper(this.toHide).hide();
            },
            valid: function() {
                return 0 == this.size();
            },
            size: function() {
                return this.errorList.length;
            },
            focusInvalid: function() {
                if (this.settings.focusInvalid) {
                    try {
                        $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin");
                    } catch (c) {}
                }
            },
            findLastActive: function() {
                var lastActive = this.lastActive;
                return lastActive && 1 == $.grep(this.errorList, function(b) {
                    return b.element.name == lastActive.name;
                }).length && lastActive;
            },
            elements: function() {
                var validator = this;
                var rulesCache = {};
                return $(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function() {
                    if (!this.name && validator.settings.debug && window.console) {
                        console.error("%o has no name assigned", this);
                    }
                    return this.name in rulesCache || !validator.objectLength($(this).rules()) ? false : rulesCache[this.name] = true;
                });
            },
            clean: function(s) {
                return $(s)[0];
            },
            errors: function() {
                return $(this.settings.errorElement + "." + this.settings.errorClass, this.errorContext);
            },
            reset: function() {
                /** @type {!Array} */
                this.successList = [];
                /** @type {!Array} */
                this.errorList = [];
                this.errorMap = {};
                this.toShow = $([]);
                this.toHide = $([]);
                this.currentElements = $([]);
            },
            prepareForm: function() {
                this.reset();
                this.toHide = this.errors().add(this.containers);
            },
            prepareElement: function(element) {
                this.reset();
                this.toHide = this.errorsFor(element);
            },
            check: function(element) {
                element = this.validationTargetFor(this.clean(element));
                var rules = $(element).rules();
                /** @type {boolean} */
                var d = false;
                var method;
                for (method in rules) {
                    var rule = {
                        method: method,
                        parameters: rules[method]
                    };
                    try {
                        var current = $.validator.methods[method].call(this, element.value.replace(/\r/g, ""), element, rule.parameters);
                        if ("dependency-mismatch" == current) {
                            /** @type {boolean} */
                            d = true;
                        } else {
                            /** @type {boolean} */
                            d = false;
                            if ("pending" == current) {
                                this.toHide = this.toHide.not(this.errorsFor(element));
                                return;
                            }
                            if (!current) {
                                return this.formatAndAdd(element, rule), false;
                            }
                        }
                    } catch (size_buffer) {
                        throw this.settings.debug && window.console && console.log("exception occured when checking element " + element.id + ", check the '" + rule.method + "' method", size_buffer), size_buffer;
                    }
                }
                if (!d) {
                    return this.objectLength(rules) && this.successList.push(element), true;
                }
            },
            customMetaMessage: function(element, method) {
                if ($.metadata) {
                    return (element = this.settings.meta ? $(element).metadata()[this.settings.meta] : $(element).metadata()) && element.messages && element.messages[method];
                }
            },
            customMessage: function(rule, method) {
                return (rule = this.settings.messages[rule]) && (rule.constructor == String ? rule : rule[method]);
            },
            findDefined: function() {
                /** @type {number} */
                var i = 0;
                for (; i < arguments.length; i++) {
                    if (void 0 !== arguments[i]) {
                        return arguments[i];
                    }
                }
            },
            defaultMessage: function(element, method) {
                return this.findDefined(this.customMessage(element.name, method), this.customMetaMessage(element, method), !this.settings.ignoreTitle && element.title || void 0, $.validator.messages[method], "<strong>Warning: No message defined for " + element.name + "</strong>");
            },
            formatAndAdd: function(element, rule) {
                var message = this.defaultMessage(element, rule.method);
                /** @type {!RegExp} */
                var theregex = /\$?\{(\d+)\}/g;
                if ("function" == typeof message) {
                    message = message.call(this, rule.parameters, element);
                } else {
                    if (theregex.test(message)) {
                        message = jQuery.format(message.replace(theregex, "{$1}"), rule.parameters);
                    }
                }
                this.errorList.push({
                    message: message,
                    element: element
                });
                this.errorMap[element.name] = message;
                this.submitted[element.name] = message;
            },
            addWrapper: function(toToggle) {
                if (this.settings.wrapper) {
                    toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));
                }
                return toToggle;
            },
            defaultShowErrors: function() {
                /** @type {number} */
                var i = 0;
                for (; this.errorList[i]; i++) {
                    var error = this.errorList[i];
                    if (this.settings.highlight) {
                        this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);
                    }
                    this.showLabel(error.element, error.message);
                }
                if (this.errorList.length) {
                    this.toShow = this.toShow.add(this.containers);
                }
                if (this.settings.success) {
                    /** @type {number} */
                    i = 0;
                    for (; this.successList[i]; i++) {
                        this.showLabel(this.successList[i]);
                    }
                }
                if (this.settings.unhighlight) {
                    /** @type {number} */
                    i = 0;
                    error = this.validElements();
                    for (; error[i]; i++) {
                        this.settings.unhighlight.call(this, error[i], this.settings.errorClass, this.settings.validClass);
                    }
                }
                this.toHide = this.toHide.not(this.toShow);
                this.hideErrors();
                this.addWrapper(this.toShow).show();
            },
            validElements: function() {
                return this.currentElements.not(this.invalidElements());
            },
            invalidElements: function() {
                return $(this.errorList).map(function() {
                    return this.element;
                });
            },
            showLabel: function(element, message) {
                var label = this.errorsFor(element);
                if (label.length) {
                    label.removeClass(this.settings.validClass).addClass(this.settings.errorClass);
                    if (label.data("generated") || label.attr("generated")) {
                        label.html(message);
                    }
                } else {
                    label = $("<" + this.settings.errorElement + "/>").attr({
                        "data-for": this.idOrName(element),
                        "data-generated": true
                    }).addClass(this.settings.errorClass).html(message || "");
                    if (this.settings.wrapper) {
                        label = label.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
                    }
                    if (!this.labelContainer.append(label).length) {
                        if (this.settings.errorPlacement) {
                            this.settings.errorPlacement(label, $(element));
                        } else {
                            label.insertAfter(element);
                        }
                    }
                }
                if (!message && this.settings.success) {
                    label.text("");
                    if ("string" == typeof this.settings.success) {
                        label.addClass(this.settings.success);
                    } else {
                        this.settings.success(label);
                    }
                }
                this.toShow = this.toShow.add(label);
            },
            errorsFor: function(element) {
                var name = this.idOrName(element);
                return this.errors().filter(function() {
                    return $(this).data("for") == name || $(this).attr("for") == name;
                });
            },
            idOrName: function(element) {
                return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
            },
            validationTargetFor: function(element) {
                if (this.checkable(element)) {
                    element = this.findByName(element.name).not(this.settings.ignore)[0];
                }
                return element;
            },
            checkable: function(element) {
                return /radio|checkbox/i.test(element.type);
            },
            findByName: function(name) {
                return $(this.currentForm).find("[name='" + name + "']");
            },
            getLength: function(value, element) {
                switch (element.nodeName.toLowerCase()) {
                    case "select":
                        return $("option:selected", element).length;
                    case "input":
                        if (this.checkable(element)) {
                            return this.findByName(element.name).filter(":checked").length;
                        }
                }
                return value.length;
            },
            depend: function(param, element) {
                return this.dependTypes[typeof param] ? this.dependTypes[typeof param](param, element) : true;
            },
            dependTypes: {
                "boolean": function(val, options) {
                    return val;
                },
                string: function(elem, data) {
                    return !!$(elem, data.form).length;
                },
                "function": function(param, element) {
                    return param(element);
                }
            },
            optional: function(element) {
                return !$.validator.methods.required.call(this, $.trim(element.value), element) && "dependency-mismatch";
            },
            startRequest: function(element) {
                if (!this.pending[element.name]) {
                    this.pendingRequest++;
                    /** @type {boolean} */
                    this.pending[element.name] = true;
                }
            },
            stopRequest: function(element, valid) {
                this.pendingRequest--;
                if (0 > this.pendingRequest) {
                    /** @type {number} */
                    this.pendingRequest = 0;
                }
                delete this.pending[element.name];
                if (valid && 0 == this.pendingRequest && this.formSubmitted && this.form()) {
                    $(this.currentForm).submit();
                    /** @type {boolean} */
                    this.formSubmitted = false;
                } else {
                    if (!valid && 0 == this.pendingRequest && this.formSubmitted) {
                        $(this.currentForm).triggerHandler("invalid-form", [this]);
                        /** @type {boolean} */
                        this.formSubmitted = false;
                    }
                }
            },
            previousValue: function(element) {
                return $.data(element, "previousValue") || $.data(element, "previousValue", {
                    old: null,
                    valid: true,
                    message: this.defaultMessage(element, "remote")
                });
            }
        },
        classRuleSettings: {
            required: {
                required: true
            },
            email: {
                email: true
            },
            url: {
                url: true
            },
            date: {
                date: true
            },
            dateISO: {
                dateISO: true
            },
            dateDE: {
                dateDE: true
            },
            number: {
                number: true
            },
            numberDE: {
                numberDE: true
            },
            digits: {
                digits: true
            },
            creditcard: {
                creditcard: true
            }
        },
        addClassRules: function(className, rules) {
            if (className.constructor == String) {
                this.classRuleSettings[className] = rules;
            } else {
                $.extend(this.classRuleSettings, className);
            }
        },
        classRules: function(item) {
            var rules = {};
            if (item = $(item).attr("class")) {
                $.each(item.split(" "), function() {
                    if (this in $.validator.classRuleSettings) {
                        $.extend(rules, $.validator.classRuleSettings[this]);
                    }
                });
            }
            return rules;
        },
        attributeRules: function(element) {
            var rules = {};
            element = $(element);
            var method;
            for (method in $.validator.methods) {
                var value;
                if (value = "required" === method && "function" === typeof $.fn.prop ? element.prop(method) : element.attr(method)) {
                    rules[method] = value;
                } else {
                    if (element[0].getAttribute("type") === method) {
                        /** @type {boolean} */
                        rules[method] = true;
                    }
                }
            }
            if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
                delete rules.maxlength;
            }
            return rules;
        },
        metadataRules: function(element) {
            if (!$.metadata) {
                return {};
            }
            var meta = $.data(element.form, "validator").settings.meta;
            return meta ? $(element).metadata()[meta] : $(element).metadata();
        },
        staticRules: function(element) {
            var rules = {};
            var validator = $.data(element.form, "validator");
            if (validator.settings.rules) {
                rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
            }
            return rules;
        },
        normalizeRules: function(rules, element) {
            $.each(rules, function(languageCode, val) {
                if (false === val) {
                    delete rules[languageCode];
                } else {
                    if (val.param || val.depends) {
                        /** @type {boolean} */
                        var $elementsCovered = true;
                        switch (typeof val.depends) {
                            case "string":
                                /** @type {boolean} */
                                $elementsCovered = !!$(val.depends, element.form).length;
                                break;
                            case "function":
                                $elementsCovered = val.depends.call(element, element);
                        }
                        if ($elementsCovered) {
                            rules[languageCode] = void 0 !== val.param ? val.param : true;
                        } else {
                            delete rules[languageCode];
                        }
                    }
                }
            });
            $.each(rules, function(rule, parameter) {
                rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;
            });
            $.each(["minlength", "maxlength", "min", "max"], function() {
                if (rules[this]) {
                    /** @type {number} */
                    rules[this] = Number(rules[this]);
                }
            });
            $.each(["rangelength", "range"], function() {
                if (rules[this]) {
                    /** @type {!Array} */
                    rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
                }
            });
            if ($.validator.autoCreateRanges) {
                if (rules.min && rules.max) {
                    /** @type {!Array} */
                    rules.range = [rules.min, rules.max];
                    delete rules.min;
                    delete rules.max;
                }
                if (rules.minlength && rules.maxlength) {
                    /** @type {!Array} */
                    rules.rangelength = [rules.minlength, rules.maxlength];
                    delete rules.minlength;
                    delete rules.maxlength;
                }
            }
            if (rules.messages) {
                delete rules.messages;
            }
            return rules;
        },
        normalizeRule: function(data) {
            if ("string" == typeof data) {
                var pathOrData = {};
                $.each(data.split(/\s/), function() {
                    /** @type {boolean} */
                    pathOrData[this] = true;
                });
                data = pathOrData;
            }
            return data;
        },
        addMethod: function(name, fn, data) {
            /** @type {!Function} */
            $.validator.methods[name] = fn;
            $.validator.messages[name] = void 0 != data ? data : $.validator.messages[name];
            if (3 > fn.length) {
                $.validator.addClassRules(name, $.validator.normalizeRule(name));
            }
        },
        methods: {
            required: function(value, element, param) {
                if (!this.depend(param, element)) {
                    return "dependency-mismatch";
                }
                switch (element.nodeName.toLowerCase()) {
                    case "select":
                        return (value = $(element).val()) && 0 < value.length;
                    case "input":
                        if (this.checkable(element)) {
                            return 0 < this.getLength(value, element);
                        }
                    default:
                        return 0 < $.trim(value).length;
                }
            },
            remote: function(name, element, value) {
                if (this.optional(element)) {
                    return "dependency-mismatch";
                }
                var options = this.previousValue(element);
                if (!this.settings.messages[element.name]) {
                    this.settings.messages[element.name] = {};
                }
                options.originalMessage = this.settings.messages[element.name].remote;
                this.settings.messages[element.name].remote = options.message;
                value = "string" == typeof value && {
                    url: value
                } || value;
                if (this.pending[element.name]) {
                    return "pending";
                }
                if (options.old === name) {
                    return options.valid;
                }
                /** @type {!Object} */
                options.old = name;
                var validator = this;
                this.startRequest(element);
                var data = {};
                /** @type {!Object} */
                data[element.name] = name;
                $.ajax($.extend(true, {
                    url: value,
                    mode: "abort",
                    port: "validate" + element.name,
                    dataType: "json",
                    data: data,
                    success: function(key) {
                        validator.settings.messages[element.name].remote = options.originalMessage;
                        /** @type {boolean} */
                        var response = true === key;
                        if (response) {
                            var errors = validator.formSubmitted;
                            validator.prepareElement(element);
                            validator.formSubmitted = errors;
                            validator.successList.push(element);
                            validator.showErrors();
                        } else {
                            errors = {};
                            key = key || validator.defaultMessage(element, "remote");
                            errors[element.name] = options.message = $.isFunction(key) ? key(name) : key;
                            validator.showErrors(errors);
                        }
                        /** @type {boolean} */
                        options.valid = response;
                        validator.stopRequest(element, response);
                    }
                }, value));
                return "pending";
            },
            minlength: function(value, element, param) {
                return this.optional(element) || this.getLength($.trim(value), element) >= param;
            },
            maxlength: function(value, element, param) {
                return this.optional(element) || this.getLength($.trim(value), element) <= param;
            },
            rangelength: function(value, element, param) {
                value = this.getLength($.trim(value), element);
                return this.optional(element) || value >= param[0] && value <= param[1];
            },
            min: function(name, value, key) {
                return this.optional(value) || name >= key;
            },
            max: function(name, value, key) {
                return this.optional(value) || name <= key;
            },
            range: function(a, m, b) {
                return this.optional(m) || a >= b[0] && a <= b[1];
            },
            email: function(name, value) {
                return this.optional(value) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(name);
            },
            url: function(name, value) {
                return this.optional(value) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(name);
            },
            date: function(value, element) {
                return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
            },
            dateISO: function(value, element) {
                return this.optional(element) || /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(value);
            },
            number: function(value, element) {
                return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(value);
            },
            digits: function(value, element) {
                return this.optional(element) || /^\d+$/.test(value);
            },
            creditcard: function(value, element) {
                if (this.optional(element)) {
                    return "dependency-mismatch";
                }
                if (/[^0-9 -]+/.test(value)) {
                    return false;
                }
                /** @type {number} */
                element = 0;
                var t;
                /** @type {boolean} */
                var g = false;
                value = value.replace(/\D/g, "");
                /** @type {number} */
                var i = value.length - 1;
                for (; 0 <= i; i--) {
                    t = value.charAt(i);
                    /** @type {number} */
                    t = parseInt(t, 10);
                    if (g && 9 < (t = t * 2)) {
                        /** @type {number} */
                        t = t - 9;
                    }
                    /** @type {number} */
                    element = element + t;
                    /** @type {boolean} */
                    g = !g;
                }
                return 0 == element % 10;
            },
            accept: function(value, element, type) {
                /** @type {string} */
                type = "string" == typeof type ? type.replace(/,/g, "|") : "png|jpe?g|gif";
                return this.optional(element) || value.match(new RegExp(".(" + type + ")$", "i"));
            },
            equalTo: function(param, value, element) {
                element = $(element).unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
                    $(value).valid();
                });
                return param == element.val();
            }
        }
    });
    /** @type {function(!Object, string): ?} */
    $.format = $.validator.format;
})(jQuery);
(function($) {
    var pendingRequests = {};
    if ($.ajaxPrefilter) {
        $.ajaxPrefilter(function(options, port, xhr) {
            port = options.port;
            if ("abort" == options.mode) {
                if (pendingRequests[port]) {
                    pendingRequests[port].abort();
                }
                pendingRequests[port] = xhr;
            }
        });
    } else {
        var ajax = $.ajax;
        /**
         * @param {!Object} settings
         * @return {?}
         */
        $.ajax = function(settings) {
            var port = ("port" in settings ? settings : $.ajaxSettings).port;
            return "abort" == ("mode" in settings ? settings : $.ajaxSettings).mode ? (pendingRequests[port] && pendingRequests[port].abort(), pendingRequests[port] = ajax.apply(this, arguments)) : ajax.apply(this, arguments);
        };
    }
})(jQuery);
(function($) {
    if (!(jQuery.event.special.focusin || jQuery.event.special.focusout || !document.addEventListener)) {
        $.each({
            focus: "focusin",
            blur: "focusout"
        }, function(type, fix) {
            /**
             * @param {(Event|string)} event
             * @return {?}
             */
            function handler(event) {
                event = $.event.fix(event);
                /** @type {!Object} */
                event.type = fix;
                return $.event.handle.call(this, event);
            }
            $.event.special[fix] = {
                setup: function() {
                    this.addEventListener(type, handler, true);
                },
                teardown: function() {
                    this.removeEventListener(type, handler, true);
                },
                handler: function(name) {
                    arguments[0] = $.event.fix(name);
                    /** @type {!Object} */
                    arguments[0].type = fix;
                    return $.event.handle.apply(this, arguments);
                }
            };
        });
    }
    $.extend($.fn, {
        validateDelegate: function(delegate, type, handler) {
            return this.bind(type, function(jEvent) {
                var target = $(jEvent.target);
                if (target.is(delegate)) {
                    return handler.apply(target, arguments);
                }
            });
        }
    });
})(jQuery);
var NO_JQUERY = {};
(function(window, $, undefined) {
    if (!("console" in window)) {
        var loggingMethods = window.console = {};
        /** @type {function(): undefined} */
        loggingMethods.log = loggingMethods.warn = loggingMethods.error = loggingMethods.debug = function() {};
    }
    if ($ === NO_JQUERY) {
        $ = {
            fn: {},
            extend: function() {
                var b = arguments[0];
                /** @type {number} */
                var i = 1;
                /** @type {number} */
                var argl = arguments.length;
                for (; i < argl; i++) {
                    var data = arguments[i];
                    var k;
                    for (k in data) {
                        b[k] = data[k];
                    }
                }
                return b;
            }
        };
    }
    /**
     * @return {?}
     */
    $.fn.pm = function() {
        console.log("usage: \nto send: $.pm(options)\nto receive: $.pm.bind(type, fn, [origin])");
        return this;
    };
    /** @type {function(undefined): undefined} */
    $.pm = window.pm = function(options) {
        pm.send(options);
    };
    /** @type {function(!Object, string=, !Function=, boolean=, boolean=): function(...?): undefined} */
    $.pm.bind = window.pm.bind = function(type, name, callback, hash, when) {
        pm.bind(type, name, callback, hash, true === when);
    };
    /** @type {function(string, !Function): undefined} */
    $.pm.unbind = window.pm.unbind = function(type, fn) {
        pm.unbind(type, fn);
    };
    /** @type {null} */
    $.pm.origin = window.pm.origin = null;
    /** @type {number} */
    $.pm.poll = window.pm.poll = 200;
    var pm = {
        send: function(o) {
            o = $.extend({}, pm.defaults, o);
            var target = o.target;
            if (o.target) {
                if (o.type) {
                    var msg = {
                        data: o.data,
                        type: o.type
                    };
                    if (o.success) {
                        msg.callback = pm._callback(o.success);
                    }
                    if (o.error) {
                        msg.errback = pm._callback(o.error);
                    }
                    if ("postMessage" in target && !o.hash) {
                        pm._bind();
                        target.postMessage(JSON.stringify(msg), o.origin || "*");
                    } else {
                        pm.hash._bind();
                        pm.hash.send(o, msg);
                    }
                } else {
                    console.warn("postmessage type required");
                }
            } else {
                console.warn("postmessage target window required");
            }
        },
        bind: function(type, name, value, hash, async_reply) {
            pm._replyBind(type, name, value, hash, async_reply);
        },
        _replyBind: function(type, fn, origin, hash, isCallback) {
            if ("postMessage" in window && !hash) {
                pm._bind();
            } else {
                pm.hash._bind();
            }
            hash = pm.data("listeners.postmessage");
            if (!hash) {
                hash = {};
                pm.data("listeners.postmessage", hash);
            }
            var fns = hash[type];
            if (!fns) {
                /** @type {!Array} */
                fns = [];
                /** @type {!Array} */
                hash[type] = fns;
            }
            fns.push({
                fn: fn,
                callback: isCallback,
                origin: origin || $.pm.origin
            });
        },
        unbind: function(type, fn) {
            var map = pm.data("listeners.postmessage");
            if (map) {
                if (type) {
                    if (fn) {
                        var groups = map[type];
                        if (groups) {
                            /** @type {!Array} */
                            var f = [];
                            /** @type {number} */
                            var i = 0;
                            var groupLn = groups.length;
                            for (; i < groupLn; i++) {
                                var o = groups[i];
                                if (o.fn !== fn) {
                                    f.push(o);
                                }
                            }
                            /** @type {!Array} */
                            map[type] = f;
                        }
                    } else {
                        delete map[type];
                    }
                } else {
                    for (i in map) {
                        delete map[i];
                    }
                }
            }
        },
        data: function(name, value) {
            return value === undefined ? pm._data[name] : pm._data[name] = value;
        },
        _data: {},
        _CHARS: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
        _random: function() {
            /** @type {!Array} */
            var b = [];
            /** @type {number} */
            var $orderCol = 0;
            for (; 32 > $orderCol; $orderCol++) {
                /** @type {string} */
                b[$orderCol] = pm._CHARS[0 | 32 * Math.random()];
            }
            return b.join("");
        },
        _callback: function(tpl) {
            var c = pm.data("callbacks.postmessage");
            if (!c) {
                c = {};
                pm.data("callbacks.postmessage", c);
            }
            var func_name = pm._random();
            c[func_name] = tpl;
            return func_name;
        },
        _bind: function() {
            if (!pm.data("listening.postmessage")) {
                if (window.addEventListener) {
                    window.addEventListener("message", pm._dispatch, false);
                } else {
                    if (window.attachEvent) {
                        window.attachEvent("onmessage", pm._dispatch);
                    }
                }
                pm.data("listening.postmessage", 1);
            }
        },
        _dispatch: function(e) {
            if (e && e.data && "" != e.data) {
                try {
                    /** @type {*} */
                    var options = JSON.parse(e.data);
                } catch (v) {
                    return;
                }
                if (options.type) {
                    var append = (pm.data("callbacks.postmessage") || {})[options.type];
                    if (append) {
                        append(options.data);
                    } else {
                        append = (pm.data("listeners.postmessage") || {})[options.type] || [];
                        /** @type {number} */
                        var j = 0;
                        var appendCount = append.length;
                        for (; j < appendCount; j++) {
                            /**
                             * @param {!Object} stat
                             * @return {undefined}
                             */
                            var next = function(stat) {
                                if (options.callback) {
                                    pm.send({
                                        target: e.source,
                                        data: stat,
                                        type: options.callback
                                    });
                                }
                            };
                            var node = append[j];
                            if (node.origin && "*" !== node.origin && e.origin !== node.origin) {
                                console.warn("postmessage message origin mismatch", e.origin, node.origin);
                                if (options.errback) {
                                    pm.send({
                                        target: e.source,
                                        data: {
                                            message: "postmessage origin mismatch",
                                            origin: [e.origin, node.origin]
                                        },
                                        type: options.errback
                                    });
                                }
                            } else {
                                try {
                                    if (node.callback) {
                                        node.fn(options.data, next, e);
                                    } else {
                                        next(node.fn(options.data, e));
                                    }
                                } catch (maindata3) {
                                    if (options.errback) {
                                        pm.send({
                                            target: e.source,
                                            data: maindata3,
                                            type: options.errback
                                        });
                                    } else {
                                        throw maindata3;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        hash: {
            send: function(n, data) {
                var e = n.target;
                if (n = n.url) {
                    n = pm.hash._url(n);
                    var p;
                    var requestOrUrl = pm.hash._url(window.location.href);
                    if (window == e.parent) {
                        /** @type {string} */
                        p = "parent";
                    } else {
                        try {
                            /** @type {number} */
                            var i = 0;
                            var patchLen = parent.frames.length;
                            for (; i < patchLen; i++) {
                                if (parent.frames[i] == window) {
                                    /** @type {number} */
                                    p = i;
                                    break;
                                }
                            }
                        } catch (v) {
                            /** @type {string} */
                            p = window.name;
                        }
                    }
                    if (null == p) {
                        console.warn("postmessage windows must be direct parent/child windows and the child must be available through the parent window.frames list");
                    } else {
                        data = {
                            "x-requested-with": "postmessage",
                            source: {
                                name: p,
                                url: requestOrUrl
                            },
                            postmessage: data
                        };
                        /** @type {string} */
                        p = "#x-postmessage-id=" + pm._random();
                        /** @type {string} */
                        e.location = n + p + encodeURIComponent(JSON.stringify(data));
                    }
                } else {
                    console.warn("postmessage target window url is required");
                }
            },
            _regex: /^#x\-postmessage\-id=(\w{32})/,
            _regex_len: 50,
            _bind: function() {
                if (!pm.data("polling.postmessage")) {
                    setInterval(function() {
                        /** @type {string} */
                        var hash = "" + window.location.hash;
                        /** @type {(Array<string>|null)} */
                        var id = pm.hash._regex.exec(hash);
                        if (id) {
                            /** @type {string} */
                            id = id[1];
                            if (pm.hash._last !== id) {
                                /** @type {string} */
                                pm.hash._last = id;
                                pm.hash._dispatch(hash.substring(pm.hash._regex_len));
                            }
                        }
                    }, $.pm.poll || 200);
                    pm.data("polling.postmessage", 1);
                }
            },
            _dispatch: function(hash) {
                if (hash) {
                    try {
                        if (hash = JSON.parse(decodeURIComponent(hash)), !("postmessage" === hash["x-requested-with"] && hash.source && null != hash.source.name && hash.source.url && hash.postmessage)) {
                            return;
                        }
                    } catch (y) {
                        return;
                    }
                    var msg = hash.postmessage;
                    var f = (pm.data("callbacks.postmessage") || {})[msg.type];
                    if (f) {
                        f(msg.data);
                    } else {
                        var $submenuTarget;
                        $submenuTarget = "parent" === hash.source.name ? window.parent : window.frames[hash.source.name];
                        f = (pm.data("listeners.postmessage") || {})[msg.type] || [];
                        /** @type {number} */
                        var i = 0;
                        var V = f.length;
                        for (; i < V; i++) {
                            /**
                             * @param {!Object} result
                             * @return {undefined}
                             */
                            var sendReply = function(result) {
                                if (msg.callback) {
                                    pm.send({
                                        target: $submenuTarget,
                                        data: result,
                                        type: msg.callback,
                                        hash: true,
                                        url: hash.source.url
                                    });
                                }
                            };
                            var o = f[i];
                            if (o.origin) {
                                /** @type {string} */
                                var origin = /https?:\/\/[^\/]*/.exec(hash.source.url)[0];
                                if ("*" !== o.origin && origin !== o.origin) {
                                    console.warn("postmessage message origin mismatch", origin, o.origin);
                                    if (msg.errback) {
                                        pm.send({
                                            target: $submenuTarget,
                                            data: {
                                                message: "postmessage origin mismatch",
                                                origin: [origin, o.origin]
                                            },
                                            type: msg.errback,
                                            hash: true,
                                            url: hash.source.url
                                        });
                                    }
                                    continue;
                                }
                            }
                            try {
                                if (o.callback) {
                                    o.fn(msg.data, sendReply);
                                } else {
                                    sendReply(o.fn(msg.data));
                                }
                            } catch (maindata3) {
                                if (msg.errback) {
                                    pm.send({
                                        target: $submenuTarget,
                                        data: maindata3,
                                        type: msg.errback,
                                        hash: true,
                                        url: hash.source.url
                                    });
                                } else {
                                    throw maindata3;
                                }
                            }
                        }
                    }
                }
            },
            _url: function(id) {
                return ("" + id).replace(/#.*$/, "");
            }
        }
    };
    $.extend(pm, {
        defaults: {
            target: null,
            url: null,
            type: null,
            data: null,
            success: null,
            error: null,
            origin: "*",
            hash: false
        }
    });
})(this, "undefined" === typeof jQuery ? NO_JQUERY : jQuery);
(function($) {
    /**
     * @param {string} container
     * @return {undefined}
     */
    function addAccountInfo(container) {
        $.ajax({
            url: "https://gdata.youtube.com/feeds/api/videos/" + container + "?v=2&alt=json",
            dataType: "jsonp",
            cache: true,
            success: function(name) {
                dialog.dialog({
                    title: name.entry.title.$t
                });
            }
        });
    }
    /**
     * @param {string} data
     * @return {?}
     */
    function reduceDuplicateMonths(data) {
        return (data = data.match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=)([^#&\?]*).*/)) && 11 == data[2].length ? data[2] : false;
    }
    /** @type {null} */
    var dialog = null;
    var methods = {
        init: function(name) {
            name = $.extend({}, $.fn.YouTubePopup.defaults, name);
            if (null == dialog) {
                dialog = $("<div>").css({
                    display: "none",
                    padding: 0
                });
                if ("" != name.cssClass) {
                    dialog.addClass(name.cssClass);
                }
                $("body").append(dialog);
                dialog.dialog({
                    autoOpen: false,
                    resizable: false,
                    draggable: name.draggable,
                    modal: name.modal,
                    dialogClass: name.dialogClass,
                    close: function() {
                        dialog.html("");
                        $(".ui-dialog-titlebar").show();
                    }
                });
            }
            return this.each(function() {
                var self = $(this);
                if (!self.data("YouTube")) {
                    self.data("YouTube", {
                        target: self,
                        active: true
                    });
                    $(self).bind("click.YouTubePopup", function() {
                        var i = name.youtubeId;
                        if ("" == $.trim(i) && self.is("a")) {
                            i = reduceDuplicateMonths(self.attr("href"));
                        }
                        if ("" == $.trim(i) || false === i) {
                            i = self.attr(name.idAttribute);
                        }
                        var value = $.trim(name.title);
                        if ("" == value) {
                            if (name.useYouTubeTitle) {
                                addAccountInfo(i);
                            } else {
                                value = self.attr("title");
                            }
                        }
                        /** @type {string} */
                        i = window.location.protocol + "//www.youtube.com/embed/" + i + "?rel=0&showsearch=0&autohide=" + name.autohide;
                        /** @type {string} */
                        i = i + ("&autoplay=" + name.autoplay + "&controls=" + name.controls + "&fs=" + name.fs + "&loop=" + name.loop);
                        /** @type {string} */
                        i = i + ("&showinfo=" + name.showinfo + "&color=" + name.color + "&theme=" + name.theme);
                        dialog.html('<iframe title="YouTube video player" style="margin:0; padding:0;" width="' + name.width + '" ' + ('height="' + name.height + '" src="' + i + '" frameborder="0" allowfullscreen></iframe>'));
                        dialog.dialog({
                            width: "auto",
                            height: "auto"
                        });
                        dialog.dialog({
                            minWidth: name.width,
                            minHeight: name.height,
                            title: value
                        });
                        dialog.dialog("open");
                        $(".ui-widget-overlay").fadeTo("fast", name.overlayOpacity);
                        if (name.hideTitleBar && name.modal) {
                            $(".ui-dialog-titlebar").hide();
                            $(".ui-widget-overlay").click(function() {
                                dialog.dialog("close");
                            });
                        }
                        if (name.clickOutsideClose && name.modal) {
                            $(".ui-widget-overlay").click(function() {
                                dialog.dialog("close");
                            });
                        }
                        return false;
                    });
                }
            });
        },
        destroy: function() {
            return this.each(function() {
                $(this).unbind(".YouTubePopup");
                $(this).removeData("YouTube");
            });
        }
    };
    /**
     * @param {string} action
     * @return {?}
     */
    $.fn.YouTubePopup = function(action) {
        if (methods[action]) {
            return methods[action].apply(this, Array.prototype.slice.call(arguments, 1));
        }
        if ("object" !== typeof action && action) {
            $.error("Method " + action + " does not exist on jQuery.YouTubePopup");
        } else {
            return methods.init.apply(this, arguments);
        }
    };
    $.fn.YouTubePopup.defaults = {
        youtubeId: "",
        title: "",
        useYouTubeTitle: true,
        idAttribute: "rel",
        cssClass: "",
        dialogClass: "",
        draggable: false,
        modal: true,
        width: 640,
        height: 480,
        hideTitleBar: false,
        clickOutsideClose: false,
        overlayOpacity: .5,
        autohide: 2,
        autoplay: 1,
        color: "red",
        controls: 1,
        fs: 1,
        loop: 0,
        showinfo: 0,
        theme: "light"
    };
})(jQuery);
(function($) {
    /**
     * @param {string} message
     * @return {?}
     */
    function format(message) {
        /** @type {number} */
        var i = 1;
        for (; i < arguments.length; i++) {
            message = message.replace("%" + (i - 1), arguments[i]);
        }
        return message;
    }
    /**
     * @param {!Object} p
     * @param {!Object} opts
     * @return {undefined}
     */
    function init(p, opts) {
        /**
         * @return {undefined}
         */
        function _LOADING_IMAGE() {
            /** @type {!Image} */
            img = new Image;
            $(img).load(function() {
                ctx.init2(this, 0);
            });
            img.src = parent.attr("src");
            /** @type {!Image} */
            img2 = new Image;
            $(img2).load(function() {
                ctx.init2(this, 1);
            });
            img2.src = p.attr("href");
        }
        var parent = $("img", p);
        var img;
        var img2;
        /** @type {null} */
        var zoomDiv = null;
        /** @type {null} */
        var $mouseTrap = null;
        /** @type {null} */
        var lens = null;
        /** @type {null} */
        var $tint = null;
        /** @type {null} */
        var $elem = null;
        /** @type {null} */
        var $ie6Fix = null;
        var zoomImage;
        /** @type {number} */
        var _takingTooLongTimeout = 0;
        var cw;
        var ch;
        /** @type {number} */
        var destU = 0;
        /** @type {number} */
        var destV = 0;
        /** @type {number} */
        var currV = 0;
        /** @type {number} */
        var currU = 0;
        /** @type {number} */
        var h = 0;
        var xaxis;
        var posY;
        var ctx = this;
        var zw;
        setTimeout(function() {
            if (null === $mouseTrap) {
                var w = p.width();
                p.parent().append(format('<div style="width:%0px;position:absolute;top:75%;left:%1px;text-align:center" class="cloud-zoom-loading" >Loading...</div>', w / 3, w / 2 - w / 6)).find(":last").css("opacity", .5);
            }
        }, 200);
        /**
         * @return {undefined}
         */
        this.removeBits = function() {
            if (lens) {
                lens.remove();
                /** @type {null} */
                lens = null;
            }
            if ($tint) {
                $tint.remove();
                /** @type {null} */
                $tint = null;
            }
            if ($elem) {
                $elem.remove();
                /** @type {null} */
                $elem = null;
            }
            if (null !== $ie6Fix) {
                $ie6Fix.remove();
                /** @type {null} */
                $ie6Fix = null;
            }
            $(".cloud-zoom-loading", p.parent()).remove();
        };
        /**
         * @return {undefined}
         */
        this.destroy = function() {
            p.data("zoom", null);
            if ($mouseTrap) {
                $mouseTrap.unbind();
                $mouseTrap.remove();
                /** @type {null} */
                $mouseTrap = null;
            }
            if (zoomDiv) {
                zoomDiv.remove();
                /** @type {null} */
                zoomDiv = null;
            }
            this.removeBits();
        };
        /**
         * @return {undefined}
         */
        this.fadedOut = function() {
            if (zoomDiv) {
                zoomDiv.remove();
                /** @type {null} */
                zoomDiv = null;
            }
            this.removeBits();
        };
        /**
         * @return {undefined}
         */
        this.controlLoop = function() {
            if (lens) {
                /** @type {number} */
                var x = xaxis - parent.offset().left - .5 * cw >> 0;
                /** @type {number} */
                var y = posY - parent.offset().top - .5 * ch >> 0;
                if (0 > x) {
                    /** @type {number} */
                    x = 0;
                } else {
                    if (x > parent.outerWidth() - cw) {
                        /** @type {number} */
                        x = parent.outerWidth() - cw;
                    }
                }
                if (0 > y) {
                    /** @type {number} */
                    y = 0;
                } else {
                    if (y > parent.outerHeight() - ch) {
                        /** @type {number} */
                        y = parent.outerHeight() - ch;
                    }
                }
                lens.css({
                    left: x,
                    top: y
                });
                lens.css("background-position", -x + "px " + -y + "px");
                /** @type {number} */
                destU = x / parent.outerWidth() * zoomImage.width >> 0;
                /** @type {number} */
                destV = y / parent.outerHeight() * zoomImage.height >> 0;
                currU = currU + (destU - currU) / opts.smoothMove;
                currV = currV + (destV - currV) / opts.smoothMove;
                zoomDiv.css("background-position", -(currU >> 0) + "px " + (-(currV >> 0) + "px"));
            }
            /** @type {number} */
            _takingTooLongTimeout = setTimeout(function() {
                ctx.controlLoop();
            }, 30);
        };
        /**
         * @param {boolean} img
         * @param {number} pos
         * @return {undefined}
         */
        this.init2 = function(img, pos) {
            h++;
            if (1 === pos) {
                /** @type {boolean} */
                zoomImage = img;
            }
            if (2 === h) {
                this.init();
            }
        };
        /**
         * @return {undefined}
         */
        this.init = function() {
            $(".cloud-zoom-loading", p.parent()).remove();
            var buttons = p.find("img").length ? p.find("img").position().top : 0;
            var color = p.find("img").length ? p.find("img").position().left : 0;
            if (p.find(".mousetrap").length) {
                $(".mousetrap").remove();
            }
            $mouseTrap = p.parent().append(format("<div class='mousetrap transparent_bg' style='z-index:899;position:absolute;width:%0px;height:%1px;left:%2px;top:%3px;'></div>", parent.outerWidth(), parent.outerHeight(), color, buttons)).find(":last");
            $mouseTrap.bind("mousemove", this, function(event) {
                xaxis = event.pageX;
                posY = event.pageY;
            });
            $mouseTrap.bind("mouseleave", this, function(b) {
                clearTimeout(_takingTooLongTimeout);
                clearTimeout(paintNodesTimeout);
                if (lens) {
                    lens.fadeOut(299);
                }
                if ($tint) {
                    $tint.fadeOut(299);
                }
                if ($elem) {
                    $elem.fadeOut(299);
                }
                if (zoomDiv) {
                    zoomDiv.fadeOut(300, function() {
                        ctx.fadedOut();
                    });
                }
                return false;
            });
            $mouseTrap.bind("mouseenter", this, function(event) {
                if (opts.lazyLoad) {
                    _LOADING_IMAGE();
                }
                xaxis = event.pageX;
                posY = event.pageY;
                zw = event.data;
                if (zoomDiv) {
                    zoomDiv.stop(true, false);
                    zoomDiv.remove();
                }
                /** @type {number} */
                paintNodesTimeout = setTimeout(function() {
                    var xPos = opts.adjustX;
                    var yPos = opts.adjustY;
                    var siw = parent.outerWidth();
                    var sih = parent.outerHeight();
                    var w = opts.zoomWidth;
                    var h = opts.zoomHeight;
                    if ("auto" == opts.zoomWidth) {
                        w = siw;
                    }
                    if ("auto" == opts.zoomHeight) {
                        h = sih;
                    }
                    var appendTo = p.parent();
                    switch (opts.position) {
                        case "top":
                            /** @type {number} */
                            yPos = yPos - h;
                            break;
                        case "right":
                            xPos = xPos + siw;
                            break;
                        case "bottom":
                            yPos = yPos + sih;
                            break;
                        case "left":
                            /** @type {number} */
                            xPos = xPos - w;
                            break;
                        case "inside":
                            w = siw;
                            h = sih;
                            break;
                        default:
                            appendTo = $("#" + opts.position);
                            if (appendTo.length) {
                                w = appendTo.innerWidth();
                                h = appendTo.innerHeight();
                            } else {
                                /** @type {!Object} */
                                appendTo = p;
                                xPos = xPos + siw;
                                yPos = yPos + sih;
                            }
                    }
                    zoomDiv = appendTo.append(format('<div id="cloud-zoom-big" class="cloud-zoom-big" style="display:none;position:absolute;left:%0px;top:%1px;width:%2px;height:%3px;background-image:url(\'%4\');z-index:99;"></div>', xPos, yPos, w, h, zoomImage.src)).find(":last");
                    if (parent.attr("title") && opts.showTitle) {
                        zoomDiv.append(format('<div class="cloud-zoom-title">%0</div>', parent.attr("title"))).find(":last").css("opacity", opts.titleOpacity);
                    }
                    if ($.browser.msie && 7 > $.browser.version) {
                        $ie6Fix = $('<iframe frameborder="0" src="#"></iframe>').css({
                            position: "absolute",
                            left: xPos,
                            top: yPos,
                            zIndex: 99,
                            width: w,
                            height: h
                        }).insertBefore(zoomDiv);
                    }
                    zoomDiv.fadeIn(500);
                    if (lens) {
                        lens.remove();
                        /** @type {null} */
                        lens = null;
                    }
                    /** @type {number} */
                    cw = parent.outerWidth() / zoomImage.width * zoomDiv.width();
                    /** @type {number} */
                    ch = parent.outerHeight() / zoomImage.height * zoomDiv.height();
                    if ($(".cloud-zoom-lens").length) {
                        $(".cloud-zoom-lens").remove();
                    }
                    lens = p.append(format("<div class = 'cloud-zoom-lens' style='display:none;z-index:98;position:absolute;width:%0px;height:%1px;'></div>", cw, ch)).find(":last");
                    $mouseTrap.css("cursor", lens.css("cursor"));
                    /** @type {boolean} */
                    xPos = false;
                    if (opts.tint) {
                        lens.css("background", 'url("' + parent.attr("src") + '")');
                        $tint = p.append(format('<div class="overlay" style="display:none;position:absolute; left:0px; top:0px; width:%0px; height:%1px; background-color:%2;" />', parent.outerWidth(), parent.outerHeight(), opts.tint)).find(":last");
                        $tint.css("opacity", opts.tintOpacity);
                        /** @type {boolean} */
                        xPos = true;
                        $tint.fadeIn(500);
                    }
                    if (opts.softFocus) {
                        lens.css("background", 'url("' + parent.attr("src") + '")');
                        $elem = p.append(format('<div style="position:absolute;display:none;top:2px; left:2px; width:%0px; height:%1px;" />', parent.outerWidth() - 2, parent.outerHeight() - 2, opts.tint)).find(":last");
                        $elem.css("background", 'url("' + parent.attr("src") + '")');
                        $elem.css("opacity", .5);
                        /** @type {boolean} */
                        xPos = true;
                        $elem.fadeIn(500);
                    }
                    if (!xPos) {
                        lens.css("opacity", opts.lensOpacity);
                    }
                    if ("inside" !== opts.position) {
                        lens.fadeIn(500);
                    }
                    zw.controlLoop();
                }, opts.delay);
            });
        };
        if (opts.lazyLoad) {
            this.init();
        } else {
            _LOADING_IMAGE();
        }
    }
    var paintNodesTimeout;
    /**
     * @param {number} opts
     * @return {?}
     */
    $.fn.CloudZoom = function(opts) {
        try {
            document.execCommand("BackgroundImageCache", false, true);
        } catch (f) {}
        this.each(function() {
            var options;
            var context;
            options = $.parseJSON("{" + ($(this).attr("rel") || "") + "}");
            if ($(this).is(".cloud-zoom")) {
                $(this).css({
                    position: "relative",
                    display: "block"
                });
                $("img", $(this)).css({
                    display: "block"
                });
                if ("wrap" != $(this).parent().attr("id")) {
                    $(this).wrap('<div id="wrap" style="top:0px;position:relative;"></div>');
                }
                context = $.extend({}, $.fn.CloudZoom.defaults, opts);
                context = $.extend({}, context, options);
                $(this).data("zoom", new init($(this), context));
            } else {
                if ($(this).is(".cloud-zoom-gallery")) {
                    context = $.extend({}, options, opts);
                    $(this).data("relOpts", context);
                    $(this).bind("click", $(this), function(selectedNode) {
                        var data = selectedNode.data.data("relOpts");
                        $("#" + data.useZoom).data("zoom").destroy();
                        $("#" + data.useZoom).attr("href", selectedNode.data.attr("href"));
                        $("#" + data.useZoom + " img").attr("src", selectedNode.data.data("relOpts").smallImage);
                        $("#" + selectedNode.data.data("relOpts").useZoom).CloudZoom();
                        return false;
                    });
                }
            }
        });
        return this;
    };
    $.fn.CloudZoom.defaults = {
        zoomWidth: "450",
        zoomHeight: "483",
        position: "right",
        tint: true,
        tintOpacity: .75,
        lensOpacity: 1,
        softFocus: false,
        smoothMove: 3,
        showTitle: false,
        titleOpacity: .5,
        adjustX: 40,
        adjustY: 0,
        delay: "10",
        lazyLoad: false
    };
})(jQuery);
/**
 * @param {string} props
 * @param {string} value
 * @param {!Object} m
 * @return {?}
 */
jQuery.cookie = function(props, value, m) {
    if ("undefined" != typeof value) {
        m = m || {};
        if (null === value) {
            /** @type {string} */
            value = "";
            /** @type {number} */
            m.expires = -1;
        }
        /** @type {string} */
        var t = "";
        if (m.expires && ("number" == typeof m.expires || m.expires.toUTCString)) {
            if ("number" == typeof m.expires) {
                /** @type {!Date} */
                t = new Date;
                t.setTime(t.getTime() + 864E5 * m.expires);
            } else {
                t = m.expires;
            }
            t = "; expires=" + t.toUTCString();
        }
        /** @type {string} */
        var outputFile = m.path ? "; path=" + m.path : "";
        /** @type {string} */
        var inlineClass = m.domain ? "; domain=" + m.domain : "";
        /** @type {string} */
        m = m.secure ? "; secure" : "";
        /** @type {string} */
        document.cookie = [props, "=", encodeURIComponent(value), t, outputFile, inlineClass, m].join("");
    } else {
        /** @type {null} */
        value = null;
        if (document.cookie && "" != document.cookie) {
            /** @type {!Array<string>} */
            m = document.cookie.split(";");
            /** @type {number} */
            t = 0;
            for (; t < m.length; t++) {
                if (outputFile = jQuery.trim(m[t]), outputFile.substring(0, props.length + 1) == props + "=") {
                    /** @type {string} */
                    value = decodeURIComponent(outputFile.substring(props.length + 1));
                    break;
                }
            }
        }
        return value;
    }
};
var debugDW = {
    init: function() {
        if (null != jQuery("#__DW__SFToolkit").contents().find("#dw-sf-control-menu ul")) {
            jQuery("#__DW__SFToolkit").contents().find("#dw-sf-control-menu ul").append('<li class="x-menu-list-item" id="build_listitem"><a href="#" class="x-menu-item" id="build-anchor"><img class="x-menu-item-icon dw-sf-control-menu-log" src="/on/demandware.static/Sites-Site/-/-/internal/images/s.gif">Build Information</a></li>');
        }
    },
    showBuildInfo: function() {
        jQuery("#build_information").show();
    }
};
jQuery(document).ready(function() {
    debugDW.init();
    jQuery("#__DW__SFToolkit").contents().find("#build-anchor").on("click", debugDW.showBuildInfo);
});
var json_parse = function() {
    var i;
    var c;
    var escapes = {
        '"': '"',
        "\\": "\\",
        "/": "/",
        b: "\b",
        f: "\f",
        n: "\n",
        r: "\r",
        t: "\t"
    };
    var d;
    /**
     * @param {string} notMessage
     * @return {?}
     */
    var test = function(notMessage) {
        throw {
            name: "SyntaxError",
            message: notMessage,
            at: i,
            text: d
        };
    };
    /**
     * @param {string} n
     * @return {?}
     */
    var next = function(n) {
        if (n && n !== c) {
            test("Expected '" + n + "' instead of '" + c + "'");
        }
        c = d.charAt(i);
        i = i + 1;
        return c;
    };
    /**
     * @return {?}
     */
    var parseNumber = function() {
        var val;
        /** @type {string} */
        val = "";
        if ("-" === c) {
            /** @type {string} */
            val = "-";
            next("-");
        }
        for (;
            "0" <= c && "9" >= c;) {
            val = val + c;
            next();
        }
        if ("." === c) {
            /** @type {string} */
            val = val + ".";
            for (; next() && "0" <= c && "9" >= c;) {
                val = val + c;
            }
        }
        if ("e" === c || "E" === c) {
            val = val + c;
            next();
            if ("-" === c || "+" === c) {
                val = val + c;
                next();
            }
            for (;
                "0" <= c && "9" >= c;) {
                val = val + c;
                next();
            }
        }
        /** @type {number} */
        val = +val;
        if (isFinite(val)) {
            return val;
        }
        test("Bad number");
    };
    /**
     * @return {?}
     */
    var round = function() {
        var width;
        var xi;
        /** @type {string} */
        var result = "";
        var x;
        if ('"' === c) {
            for (; next();) {
                if ('"' === c) {
                    return next(), result;
                }
                if ("\\" === c) {
                    if (next(), "u" === c) {
                        /** @type {number} */
                        xi = x = 0;
                        for (; 4 > xi; xi = xi + 1) {
                            /** @type {number} */
                            width = parseInt(next(), 16);
                            if (!isFinite(width)) {
                                break;
                            }
                            /** @type {number} */
                            x = 16 * x + width;
                        }
                        /** @type {string} */
                        result = result + String.fromCharCode(x);
                    } else {
                        if ("string" === typeof escapes[c]) {
                            result = result + escapes[c];
                        } else {
                            break;
                        }
                    }
                } else {
                    result = result + c;
                }
            }
        }
        test("Bad string");
    };
    /**
     * @return {undefined}
     */
    var _eatWhitespace = function() {
        for (; c && " " >= c;) {
            next();
        }
    };
    /**
     * @return {?}
     */
    var sscanf = function() {
        switch (c) {
            case "t":
                return next("t"), next("r"), next("u"), next("e"), true;
            case "f":
                return next("f"), next("a"), next("l"), next("s"), next("e"), false;
            case "n":
                return next("n"), next("u"), next("l"), next("l"), null;
        }
        test("Unexpected '" + c + "'");
    };
    var parse;
    /**
     * @return {?}
     */
    parse = function() {
        _eatWhitespace();
        switch (c) {
            case "{":
                var g;
                a: {
                    var window = {};
                    if ("{" === c) {
                        next("{");
                        _eatWhitespace();
                        if ("}" === c) {
                            next("}");
                            g = window;
                            break a;
                        }
                        for (; c;) {
                            g = round();
                            _eatWhitespace();
                            next(":");
                            if (Object.hasOwnProperty.call(window, g)) {
                                test('Duplicate key "' + g + '"');
                            }
                            window[g] = parse();
                            _eatWhitespace();
                            if ("}" === c) {
                                next("}");
                                g = window;
                                break a;
                            }
                            next(",");
                            _eatWhitespace();
                        }
                    }
                    test("Bad object");
                    g = void 0;
                }
                return g;
            case "[":
                a: {
                    /** @type {!Array} */
                    g = [];
                    if ("[" === c) {
                        next("[");
                        _eatWhitespace();
                        if ("]" === c) {
                            next("]");
                            break a;
                        }
                        for (; c;) {
                            g.push(parse());
                            _eatWhitespace();
                            if ("]" === c) {
                                next("]");
                                break a;
                            }
                            next(",");
                            _eatWhitespace();
                        }
                    }
                    test("Bad array");
                    g = void 0;
                }
                return g;
            case '"':
                return round();
            case "-":
                return parseNumber();
            default:
                return "0" <= c && "9" >= c ? parseNumber() : sscanf();
        }
    };
    return function(value, callback) {
        /** @type {!Object} */
        d = value;
        /** @type {number} */
        i = 0;
        /** @type {string} */
        c = " ";
        value = parse();
        _eatWhitespace();
        if (c) {
            test("Syntax error");
        }
        return "function" === typeof callback ? function extend(descriptor, name) {
            var key;
            var d;
            var value = descriptor[name];
            if (value && "object" === typeof value) {
                for (key in value) {
                    if (Object.prototype.hasOwnProperty.call(value, key)) {
                        d = extend(value, key);
                        if (void 0 !== d) {
                            value[key] = d;
                        } else {
                            delete value[key];
                        }
                    }
                }
            }
            return callback.call(descriptor, name, value);
        }({
            "": value
        }, "") : value;
    };
}();
(function($) {
    /**
     * @param {!Object} e
     * @return {undefined}
     */
    function handler(e) {
        var options = e.data;
        if (!e.isDefaultPrevented()) {
            e.preventDefault();
            $(this).ajaxSubmit(options);
        }
    }
    /**
     * @param {!Event} e
     * @return {undefined}
     */
    function clickHandler(e) {
        var target = e.target;
        var tr = $(target);
        if (!tr.is("[type=submit],[type=image]")) {
            target = tr.closest("[type=submit]");
            if (0 === target.length) {
                return;
            }
            target = target[0];
        }
        var form = this;
        form.clk = target;
        if ("image" == target.type) {
            if (void 0 !== e.offsetX) {
                form.clk_x = e.offsetX;
                form.clk_y = e.offsetY;
            } else {
                if ("function" == typeof $.fn.offset) {
                    tr = tr.offset();
                    /** @type {number} */
                    form.clk_x = e.pageX - tr.left;
                    /** @type {number} */
                    form.clk_y = e.pageY - tr.top;
                } else {
                    /** @type {number} */
                    form.clk_x = e.pageX - target.offsetLeft;
                    /** @type {number} */
                    form.clk_y = e.pageY - target.offsetTop;
                }
            }
        }
        setTimeout(function() {
            /** @type {null} */
            form.clk = form.clk_x = form.clk_y = null;
        }, 100);
    }
    /**
     * @return {undefined}
     */
    function log() {
        if ($.fn.ajaxSubmit.debug) {
            /** @type {string} */
            var msg = "[jquery.form] " + Array.prototype.join.call(arguments, "");
            if (window.console && window.console.log) {
                window.console.log(msg);
            } else {
                if (window.opera && window.opera.postError) {
                    window.opera.postError(msg);
                }
            }
        }
    }
    var reverseIsSingle;
    var reverseValue;
    /** @type {boolean} */
    reverseIsSingle = void 0 !== $("<input type='file'/>").get(0).files;
    /** @type {boolean} */
    reverseValue = void 0 !== window.FormData;
    /** @type {boolean} */
    var e = !!$.fn.prop;
    /**
     * @return {?}
     */
    $.fn.attr2 = function() {
        if (!e) {
            return this.attr.apply(this, arguments);
        }
        var option = this.prop.apply(this, arguments);
        return option && option.jquery || "string" === typeof option ? option : this.attr.apply(this, arguments);
    };
    /**
     * @param {(Object|string)} options
     * @return {?}
     */
    $.fn.ajaxSubmit = function(options) {
        /**
         * @param {!Array} file
         * @return {?}
         */
        function deepSerialize(file) {
            file = $.param(file, options.traditional).split("&");
            var fl = file.length;
            /** @type {!Array} */
            var result = [];
            var i;
            var parsedQR;
            /** @type {number} */
            i = 0;
            for (; i < fl; i++) {
                file[i] = file[i].replace(/\+/g, " ");
                parsedQR = file[i].split("=");
                result.push([decodeURIComponent(parsedQR[0]), decodeURIComponent(parsedQR[1])]);
            }
            return result;
        }
        /**
         * @param {number} a
         * @return {?}
         */
        function fileUploadXhr(a) {
            /** @type {!FormData} */
            var formData = new FormData;
            /** @type {number} */
            var s = 0;
            for (; s < a.length; s++) {
                formData.append(a[s].name, a[s].value);
            }
            if (options.extraData) {
                a = deepSerialize(options.extraData);
                /** @type {number} */
                s = 0;
                for (; s < a.length; s++) {
                    if (a[s]) {
                        formData.append(a[s][0], a[s][1]);
                    }
                }
            }
            /** @type {null} */
            options.data = null;
            s = $.extend(true, {}, $.ajaxSettings, options, {
                contentType: false,
                processData: false,
                cache: false,
                type: method || "POST"
            });
            if (options.uploadProgress) {
                /**
                 * @return {?}
                 */
                s.xhr = function() {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.addEventListener("progress", function(event) {
                            /** @type {number} */
                            var percent = 0;
                            var position = event.loaded || event.position;
                            var total = event.total;
                            if (event.lengthComputable) {
                                /** @type {number} */
                                percent = Math.ceil(position / total * 100);
                            }
                            options.uploadProgress(event, position, total, percent);
                        }, false);
                    }
                    return myXhr;
                };
            }
            /** @type {null} */
            s.data = null;
            /** @type {function(?, !Object): undefined} */
            var beforeSend = s.beforeSend;
            /**
             * @param {?} xhr
             * @param {!Object} options
             * @return {undefined}
             */
            s.beforeSend = function(xhr, options) {
                /** @type {!FormData} */
                options.data = formData;
                if (beforeSend) {
                    beforeSend.call(this, xhr, options);
                }
            };
            return $.ajax(s);
        }
        /**
         * @param {!Object} a
         * @return {?}
         */
        function fileUploadIframe(a) {
            /**
             * @param {!Element} frame
             * @return {?}
             */
            function getDoc(frame) {
                /** @type {null} */
                var doc = null;
                try {
                    if (frame.contentWindow) {
                        doc = frame.contentWindow.document;
                    }
                } catch (CalcMethod) {
                    log("cannot get iframe.contentWindow document: " + CalcMethod);
                }
                if (doc) {
                    return doc;
                }
                try {
                    doc = frame.contentDocument ? frame.contentDocument : frame.document;
                } catch (CalcMethod) {
                    log("cannot get iframe.contentDocument: " + CalcMethod);
                    doc = frame.document;
                }
                return doc;
            }
            /**
             * @return {undefined}
             */
            function doSubmit() {
                /**
                 * @return {undefined}
                 */
                function checkState() {
                    try {
                        var state = getDoc(io).readyState;
                        log("state = " + state);
                        if (state && "uninitialized" == state.toLowerCase()) {
                            setTimeout(checkState, 50);
                        }
                    } catch (clip) {
                        log("Server abort: ", clip, " (", clip.name, ")");
                        cb(2);
                        if (_takingTooLongTimeout) {
                            clearTimeout(_takingTooLongTimeout);
                        }
                        _takingTooLongTimeout = void 0;
                    }
                }
                var oldTarget = $form.attr2("target");
                var a = $form.attr2("action");
                form.setAttribute("target", id);
                if (!method) {
                    form.setAttribute("method", "POST");
                }
                if (a != s.url) {
                    form.setAttribute("action", s.url);
                }
                if (!(s.skipEncodingOverride || method && !/post/i.test(method))) {
                    $form.attr({
                        encoding: "multipart/form-data",
                        enctype: "multipart/form-data"
                    });
                }
                if (s.timeout) {
                    /** @type {number} */
                    _takingTooLongTimeout = setTimeout(function() {
                        /** @type {boolean} */
                        H = true;
                        cb(1);
                    }, s.timeout);
                }
                /** @type {!Array} */
                var puzzle = [];
                try {
                    if (s.extraData) {
                        var n;
                        for (n in s.extraData) {
                            if (s.extraData.hasOwnProperty(n)) {
                                if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty("name") && s.extraData[n].hasOwnProperty("value")) {
                                    puzzle.push($('<input type="hidden" name="' + s.extraData[n].name + '">').val(s.extraData[n].value).appendTo(form)[0]);
                                } else {
                                    puzzle.push($('<input type="hidden" name="' + n + '">').val(s.extraData[n]).appendTo(form)[0]);
                                }
                            }
                        }
                    }
                    if (!s.iframeTarget) {
                        $io.appendTo("body");
                        if (io.attachEvent) {
                            io.attachEvent("onload", cb);
                        } else {
                            io.addEventListener("load", cb, false);
                        }
                    }
                    setTimeout(checkState, 15);
                    try {
                        form.submit();
                    } catch (W) {
                        document.createElement("form").submit.apply(form);
                    }
                } finally {
                    form.setAttribute("action", a);
                    if (oldTarget) {
                        form.setAttribute("target", oldTarget);
                    } else {
                        $form.removeAttr("target");
                    }
                    $(puzzle).remove();
                }
            }
            /**
             * @param {number} status
             * @return {undefined}
             */
            function cb(status) {
                if (!xhr.aborted && !E) {
                    if (doc = getDoc(io), doc || (log("cannot access response document"), status = 2), 1 === status && xhr) {
                        xhr.abort("timeout");
                        deferred.reject(xhr, "timeout");
                    } else {
                        if (2 == status && xhr) {
                            xhr.abort("server abort");
                            deferred.reject(xhr, "error", "server abort");
                        } else {
                            if (doc && doc.location.href != s.iframeSrc || H) {
                                if (io.detachEvent) {
                                    io.detachEvent("onload", cb);
                                } else {
                                    io.removeEventListener("load", cb, false);
                                }
                                /** @type {string} */
                                status = "success";
                                var errMsg;
                                try {
                                    if (H) {
                                        throw "timeout";
                                    }
                                    var isXml = "xml" == s.dataType || doc.XMLDocument || $.isXMLDoc(doc);
                                    log("isXml=" + isXml);
                                    if (!isXml && window.opera && (null === doc.body || !doc.body.innerHTML) && --F) {
                                        log("requeing onLoad callback, DOM not available");
                                        setTimeout(cb, 250);
                                        return;
                                    }
                                    var docRoot = doc.body ? doc.body : doc.documentElement;
                                    xhr.responseText = docRoot ? docRoot.innerHTML : null;
                                    xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
                                    if (isXml) {
                                        /** @type {string} */
                                        s.dataType = "xml";
                                    }
                                    /**
                                     * @param {string} header
                                     * @return {?}
                                     */
                                    xhr.getResponseHeader = function(header) {
                                        return {
                                            "content-type": s.dataType
                                        }[header];
                                    };
                                    if (docRoot) {
                                        xhr.status = Number(docRoot.getAttribute("status")) || xhr.status;
                                        xhr.statusText = docRoot.getAttribute("statusText") || xhr.statusText;
                                    }
                                    var dt = (s.dataType || "").toLowerCase();
                                    /** @type {boolean} */
                                    var scr = /(json|script|text)/.test(dt);
                                    if (scr || s.textarea) {
                                        var ta = doc.getElementsByTagName("textarea")[0];
                                        if (ta) {
                                            xhr.responseText = ta.value;
                                            xhr.status = Number(ta.getAttribute("status")) || xhr.status;
                                            xhr.statusText = ta.getAttribute("statusText") || xhr.statusText;
                                        } else {
                                            if (scr) {
                                                var pre = doc.getElementsByTagName("pre")[0];
                                                var b = doc.getElementsByTagName("body")[0];
                                                if (pre) {
                                                    xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
                                                } else {
                                                    if (b) {
                                                        xhr.responseText = b.textContent ? b.textContent : b.innerText;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if ("xml" == dt && !xhr.responseXML && xhr.responseText) {
                                            xhr.responseXML = toXml(xhr.responseText);
                                        }
                                    }
                                    try {
                                        data = httpData(xhr, dt, s);
                                    } catch (e) {
                                        /** @type {string} */
                                        status = "parsererror";
                                        xhr.error = errMsg = e || status;
                                    }
                                } catch (e) {
                                    log("error caught: ", e);
                                    /** @type {string} */
                                    status = "error";
                                    xhr.error = errMsg = e || status;
                                }
                                if (xhr.aborted) {
                                    log("upload aborted");
                                    /** @type {null} */
                                    status = null;
                                }
                                if (xhr.status) {
                                    /** @type {string} */
                                    status = 200 <= xhr.status && 300 > xhr.status || 304 === xhr.status ? "success" : "error";
                                }
                                if ("success" === status) {
                                    if (s.success) {
                                        s.success.call(s.context, data, "success", xhr);
                                    }
                                    deferred.resolve(xhr.responseText, "success", xhr);
                                    if (g) {
                                        $.event.trigger("ajaxSuccess", [xhr, s]);
                                    }
                                } else {
                                    if (status) {
                                        if (void 0 === errMsg) {
                                            errMsg = xhr.statusText;
                                        }
                                        if (s.error) {
                                            s.error.call(s.context, xhr, status, errMsg);
                                        }
                                        deferred.reject(xhr, "error", errMsg);
                                        if (g) {
                                            $.event.trigger("ajaxError", [xhr, s, errMsg]);
                                        }
                                    }
                                }
                                if (g) {
                                    $.event.trigger("ajaxComplete", [xhr, s]);
                                }
                                if (g && !--$.active) {
                                    $.event.trigger("ajaxStop");
                                }
                                if (s.complete) {
                                    s.complete.call(s.context, xhr, status);
                                }
                                /** @type {boolean} */
                                E = true;
                                if (s.timeout) {
                                    clearTimeout(_takingTooLongTimeout);
                                }
                                setTimeout(function() {
                                    if (!s.iframeTarget) {
                                        $io.remove();
                                    }
                                    /** @type {null} */
                                    xhr.responseXML = null;
                                }, 100);
                            }
                        }
                    }
                }
            }
            var form = $form[0];
            var n;
            var s;
            var g;
            var id;
            var $io;
            var io;
            var xhr;
            var H;
            var _takingTooLongTimeout;
            var deferred = $.Deferred();
            /**
             * @param {string} error
             * @return {undefined}
             */
            deferred.abort = function(error) {
                xhr.abort(error);
            };
            if (a) {
                /** @type {number} */
                n = 0;
                for (; n < elements.length; n++) {
                    a = $(elements[n]);
                    if (e) {
                        a.prop("disabled", false);
                    } else {
                        a.removeAttr("disabled");
                    }
                }
            }
            s = $.extend(true, {}, $.ajaxSettings, options);
            s.context = s.context || s;
            /** @type {string} */
            id = "jqFormIO" + (new Date).getTime();
            if (s.iframeTarget) {
                $io = $(s.iframeTarget);
                if (n = $io.attr2("name")) {
                    id = n;
                } else {
                    $io.attr2("name", id);
                }
            } else {
                $io = $('<iframe name="' + id + '" src="' + s.iframeSrc + '" />');
                $io.css({
                    position: "absolute",
                    top: "-1000px",
                    left: "-1000px"
                });
            }
            io = $io[0];
            xhr = {
                aborted: 0,
                responseText: null,
                responseXML: null,
                status: 0,
                statusText: "n/a",
                getAllResponseHeaders: function() {},
                getResponseHeader: function() {},
                setRequestHeader: function() {},
                abort: function(error) {
                    /** @type {string} */
                    var e = "timeout" === error ? "timeout" : "aborted";
                    log("aborting upload... " + e);
                    /** @type {number} */
                    this.aborted = 1;
                    try {
                        if (io.contentWindow.document.execCommand) {
                            io.contentWindow.document.execCommand("Stop");
                        }
                    } catch (Y) {}
                    $io.attr("src", s.iframeSrc);
                    /** @type {string} */
                    xhr.error = e;
                    if (s.error) {
                        s.error.call(s.context, xhr, e, error);
                    }
                    if (g) {
                        $.event.trigger("ajaxError", [xhr, s, e]);
                    }
                    if (s.complete) {
                        s.complete.call(s.context, xhr, e);
                    }
                }
            };
            if ((g = s.global) && 0 === $.active++) {
                $.event.trigger("ajaxStart");
            }
            if (g) {
                $.event.trigger("ajaxSend", [xhr, s]);
            }
            if (s.beforeSend && false === s.beforeSend.call(s.context, xhr, s)) {
                return s.global && $.active--, deferred.reject(), deferred;
            }
            if (xhr.aborted) {
                return deferred.reject(), deferred;
            }
            if ((a = form.clk) && (n = a.name) && !a.disabled) {
                s.extraData = s.extraData || {};
                s.extraData[n] = a.value;
                if ("image" == a.type) {
                    s.extraData[n + ".x"] = form.clk_x;
                    s.extraData[n + ".y"] = form.clk_y;
                }
            }
            a = $("meta[name=csrf-token]").attr("content");
            if ((n = $("meta[name=csrf-param]").attr("content")) && a) {
                s.extraData = s.extraData || {};
                /** @type {!Object} */
                s.extraData[n] = a;
            }
            if (s.forceSync) {
                doSubmit();
            } else {
                setTimeout(doSubmit, 10);
            }
            var data;
            var doc;
            /** @type {number} */
            var F = 50;
            var E;
            var toXml = $.parseXML || function(xmlString, doc) {
                if (window.ActiveXObject) {
                    doc = new ActiveXObject("Microsoft.XMLDOM");
                    /** @type {string} */
                    doc.async = "false";
                    doc.loadXML(xmlString);
                } else {
                    /** @type {(Document|null)} */
                    doc = (new DOMParser).parseFromString(xmlString, "text/xml");
                }
                return doc && doc.documentElement && "parsererror" != doc.documentElement.nodeName ? doc : null;
            };
            /**
             * @param {!Object} data
             * @param {string} type
             * @param {!Object} s
             * @return {?}
             */
            var httpData = function(data, type, s) {
                var ct = data.getResponseHeader("content-type") || "";
                /** @type {boolean} */
                var xml = "xml" === type || !type && 0 <= ct.indexOf("xml");
                data = xml ? data.responseXML : data.responseText;
                if (xml && "parsererror" === data.documentElement.nodeName && $.error) {
                    $.error("parsererror");
                }
                if (s && s.dataFilter) {
                    data = s.dataFilter(data, type);
                }
                if ("string" === typeof data) {
                    if ("json" === type || !type && 0 <= ct.indexOf("json")) {
                        data = json_parse(data);
                    } else {
                        if ("script" === type || !type && 0 <= ct.indexOf("javascript")) {
                            $.globalEval(data);
                        }
                    }
                }
                return data;
            };
            return deferred;
        }
        if (!this.length) {
            return log("ajaxSubmit: skipping submit process - no element selected"), this;
        }
        var method;
        var value;
        var $form = this;
        if ("function" == typeof options) {
            options = {
                success: options
            };
        } else {
            if (void 0 === options) {
                options = {};
            }
        }
        method = options.type || this.attr2("method");
        value = options.url || this.attr2("action");
        if (value = (value = "string" === typeof value ? $.trim(value) : "") || window.location.href || "") {
            value = (value.match(/^([^#]+)/) || [])[1];
        }
        options = $.extend(true, {
            url: value,
            success: $.ajaxSettings.success,
            type: method || $.ajaxSettings.type,
            iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank"
        }, options);
        value = {};
        this.trigger("form-pre-serialize", [this, options, value]);
        if (value.veto) {
            return log("ajaxSubmit: submit vetoed via form-pre-serialize trigger"), this;
        }
        if (options.beforeSerialize && false === options.beforeSerialize(this, options)) {
            return log("ajaxSubmit: submit aborted via beforeSerialize callback"), this;
        }
        var k = options.traditional;
        if (void 0 === k) {
            k = $.ajaxSettings.traditional;
        }
        /** @type {!Array} */
        var elements = [];
        var key;
        var a = this.formToArray(options.semantic, elements);
        if (options.data) {
            options.extraData = options.data;
            key = $.param(options.data, k);
        }
        if (options.beforeSubmit && false === options.beforeSubmit(a, this, options)) {
            return log("ajaxSubmit: submit aborted via beforeSubmit callback"), this;
        }
        this.trigger("form-submit-validate", [a, this, options, value]);
        if (value.veto) {
            return log("ajaxSubmit: submit vetoed via form-submit-validate trigger"), this;
        }
        value = $.param(a, k);
        if (key) {
            value = value ? value + "&" + key : key;
        }
        if ("GET" == options.type.toUpperCase()) {
            options.url += (0 <= options.url.indexOf("?") ? "&" : "?") + value;
            /** @type {null} */
            options.data = null;
        } else {
            options.data = value;
        }
        /** @type {!Array} */
        var callbacks = [];
        if (options.resetForm) {
            callbacks.push(function() {
                $form.resetForm();
            });
        }
        if (options.clearForm) {
            callbacks.push(function() {
                $form.clearForm(options.includeHidden);
            });
        }
        if (!options.dataType && options.target) {
            var q = options.success || function() {};
            callbacks.push(function(val) {
                /** @type {string} */
                var fn = options.replaceTarget ? "replaceWith" : "html";
                $(options.target)[fn](val).each(q, arguments);
            });
        } else {
            if (options.success) {
                callbacks.push(options.success);
            }
        }
        /**
         * @param {!Object} name
         * @param {!Function} value
         * @param {string} key
         * @return {undefined}
         */
        options.success = function(name, value, key) {
            var _whitespaceCharClass = options.context || this;
            /** @type {number} */
            var i = 0;
            /** @type {number} */
            var len = callbacks.length;
            for (; i < len; i++) {
                callbacks[i].apply(_whitespaceCharClass, [name, value, key || $form, $form]);
            }
        };
        if (options.error) {
            var onError = options.error;
            /**
             * @param {!Object} name
             * @param {!Function} value
             * @param {string} key
             * @return {undefined}
             */
            options.error = function(name, value, key) {
                onError.apply(options.context || this, [name, value, key, $form]);
            };
        }
        if (options.complete) {
            var oldComplete = options.complete;
            /**
             * @param {!Object} name
             * @param {!Function} value
             * @return {undefined}
             */
            options.complete = function(name, value) {
                oldComplete.apply(options.context || this, [name, value, $form]);
            };
        }
        /** @type {boolean} */
        key = 0 < $('input[type=file]:enabled:not([value=""])', this).length;
        /** @type {boolean} */
        value = "multipart/form-data" == $form.attr("enctype") || "multipart/form-data" == $form.attr("encoding");
        k = reverseIsSingle && reverseValue;
        log("fileAPI :" + k);
        var mockDomainObject;
        if (false !== options.iframe && (options.iframe || (key || value) && !k)) {
            if (options.closeKeepAlive) {
                $.get(options.closeKeepAlive, function() {
                    mockDomainObject = fileUploadIframe(a);
                });
            } else {
                mockDomainObject = fileUploadIframe(a);
            }
        } else {
            mockDomainObject = (key || value) && k ? fileUploadXhr(a) : $.ajax(options);
        }
        $form.removeData("jqxhr").data("jqxhr", mockDomainObject);
        /** @type {number} */
        key = 0;
        for (; key < elements.length; key++) {
            /** @type {null} */
            elements[key] = null;
        }
        this.trigger("form-submit-notify", [this, options]);
        return this;
    };
    /**
     * @param {string} options
     * @return {?}
     */
    $.fn.ajaxForm = function(options) {
        options = options || {};
        options.delegation = options.delegation && $.isFunction($.fn.on);
        if (!options.delegation && 0 === this.length) {
            var selector = this.selector;
            var modalContent = this.context;
            if (!$.isReady && selector) {
                return log("DOM not ready, queuing ajaxForm"), $(function() {
                    $(selector, modalContent).ajaxForm(options);
                }), this;
            }
            log("terminating; zero elements found by selector" + ($.isReady ? "" : " (DOM not ready)"));
            return this;
        }
        return options.delegation ? ($(document).off("submit.form-plugin", this.selector, handler).off("click.form-plugin", this.selector, clickHandler).on("submit.form-plugin", this.selector, options, handler).on("click.form-plugin", this.selector, options, clickHandler), this) : this.ajaxFormUnbind().bind("submit.form-plugin", options, handler).bind("click.form-plugin", options, clickHandler);
    };
    /**
     * @return {?}
     */
    $.fn.ajaxFormUnbind = function() {
        return this.unbind("submit.form-plugin click.form-plugin");
    };
    /**
     * @param {string} semantic
     * @param {!Object} elements
     * @return {?}
     */
    $.fn.formToArray = function(semantic, elements) {
        /** @type {!Array} */
        var a = [];
        if (0 === this.length) {
            return a;
        }
        var form = this[0];
        var els = semantic ? form.getElementsByTagName("*") : form.elements;
        if (!els) {
            return a;
        }
        var i;
        var j;
        var key;
        var obj;
        var el;
        var l;
        /** @type {number} */
        i = 0;
        l = els.length;
        for (; i < l; i++) {
            if (el = els[i], (key = el.name) && !el.disabled) {
                if (semantic && form.clk && "image" == el.type) {
                    if (form.clk == el) {
                        a.push({
                            name: key,
                            value: $(el).val(),
                            type: el.type
                        });
                        a.push({
                            name: key + ".x",
                            value: form.clk_x
                        }, {
                            name: key + ".y",
                            value: form.clk_y
                        });
                    }
                } else {
                    if ((obj = $.fieldValue(el, true)) && obj.constructor == Array) {
                        if (elements) {
                            elements.push(el);
                        }
                        /** @type {number} */
                        j = 0;
                        el = obj.length;
                        for (; j < el; j++) {
                            a.push({
                                name: key,
                                value: obj[j]
                            });
                        }
                    } else {
                        if (reverseIsSingle && "file" == el.type) {
                            if (elements && elements.push(el), obj = el.files, obj.length) {
                                /** @type {number} */
                                j = 0;
                                for (; j < obj.length; j++) {
                                    a.push({
                                        name: key,
                                        value: obj[j],
                                        type: el.type
                                    });
                                }
                            } else {
                                a.push({
                                    name: key,
                                    value: "",
                                    type: el.type
                                });
                            }
                        } else {
                            if (null !== obj && "undefined" != typeof obj) {
                                if (elements) {
                                    elements.push(el);
                                }
                                a.push({
                                    name: key,
                                    value: obj,
                                    type: el.type,
                                    required: el.required
                                });
                            }
                        }
                    }
                }
            }
        }
        if (!semantic && form.clk) {
            semantic = $(form.clk);
            elements = semantic[0];
            if ((key = elements.name) && !elements.disabled && "image" == elements.type) {
                a.push({
                    name: key,
                    value: semantic.val()
                });
                a.push({
                    name: key + ".x",
                    value: form.clk_x
                }, {
                    name: key + ".y",
                    value: form.clk_y
                });
            }
        }
        return a;
    };
    /**
     * @param {string} semantic
     * @return {?}
     */
    $.fn.formSerialize = function(semantic) {
        return $.param(this.formToArray(semantic));
    };
    /**
     * @param {undefined} successful
     * @return {?}
     */
    $.fn.fieldSerialize = function(successful) {
        /** @type {!Array} */
        var parameters = [];
        this.each(function() {
            var name = this.name;
            if (name) {
                var value = $.fieldValue(this, successful);
                if (value && value.constructor == Array) {
                    /** @type {number} */
                    var j = 0;
                    var valueLength = value.length;
                    for (; j < valueLength; j++) {
                        parameters.push({
                            name: name,
                            value: value[j]
                        });
                    }
                } else {
                    if (null !== value && "undefined" != typeof value) {
                        parameters.push({
                            name: this.name,
                            value: value
                        });
                    }
                }
            }
        });
        return $.param(parameters);
    };
    /**
     * @param {number} object
     * @return {?}
     */
    $.fn.fieldValue = function(object) {
        /** @type {!Array} */
        var a = [];
        /** @type {number} */
        var i = 0;
        var l = this.length;
        for (; i < l; i++) {
            var obj = $.fieldValue(this[i], object);
            if (!(null === obj || "undefined" == typeof obj || obj.constructor == Array && !obj.length)) {
                if (obj.constructor == Array) {
                    $.merge(a, obj);
                } else {
                    a.push(obj);
                }
            }
        }
        return a;
    };
    /**
     * @param {!Object} el
     * @param {number} a
     * @return {?}
     */
    $.fieldValue = function(el, a) {
        var n = el.name;
        var type = el.type;
        var i = el.tagName.toLowerCase();
        if (void 0 === a) {
            /** @type {boolean} */
            a = true;
        }
        if (a && (!n || el.disabled || "reset" == type || "button" == type || ("checkbox" == type || "radio" == type) && !el.checked || ("submit" == type || "image" == type) && el.form && el.form.clk != el || "select" == i && -1 == el.selectedIndex)) {
            return null;
        }
        if ("select" == i) {
            i = el.selectedIndex;
            if (0 > i) {
                return null;
            }
            /** @type {!Array} */
            a = [];
            el = el.options;
            n = (type = "select-one" == type) ? i + 1 : el.length;
            i = type ? i : 0;
            for (; i < n; i++) {
                var node = el[i];
                if (node.selected) {
                    var v = node.value;
                    if (!v) {
                        v = node.attributes && node.attributes.value && !node.attributes.value.specified ? node.text : node.value;
                    }
                    if (type) {
                        return v;
                    }
                    a.push(v);
                }
            }
            return a;
        }
        return $(el).val();
    };
    /**
     * @param {?} includeHidden
     * @return {?}
     */
    $.fn.clearForm = function(includeHidden) {
        return this.each(function() {
            $("input,select,textarea", this).clearFields(includeHidden);
        });
    };
    /** @type {function(boolean): ?} */
    $.fn.clearFields = $.fn.clearInputs = function(arg) {
        /** @type {!RegExp} */
        var d = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
        return this.each(function() {
            var type = this.type;
            var name = this.tagName.toLowerCase();
            if (d.test(type) || "textarea" == name) {
                /** @type {string} */
                this.value = "";
            } else {
                if ("checkbox" == type || "radio" == type) {
                    /** @type {boolean} */
                    this.checked = false;
                } else {
                    if ("select" == name) {
                        /** @type {number} */
                        this.selectedIndex = -1;
                    } else {
                        if ("file" == type) {
                            if (/MSIE/.test(navigator.userAgent)) {
                                $(this).replaceWith($(this).clone(true));
                            } else {
                                $(this).val("");
                            }
                        } else {
                            if (arg && (true === arg && /hidden/.test(type) || "string" == typeof arg && $(this).is(arg))) {
                                /** @type {string} */
                                this.value = "";
                            }
                        }
                    }
                }
            }
        });
    };
    /**
     * @return {?}
     */
    $.fn.resetForm = function() {
        return this.each(function() {
            if ("function" == typeof this.reset || "object" == typeof this.reset && !this.reset.nodeType) {
                this.reset();
            }
        });
    };
    /**
     * @param {number} b
     * @return {?}
     */
    $.fn.enable = function(b) {
        if (void 0 === b) {
            /** @type {boolean} */
            b = true;
        }
        return this.each(function() {
            /** @type {boolean} */
            this.disabled = !b;
        });
    };
    /**
     * @param {!Object} name
     * @return {?}
     */
    $.fn.selected = function(name) {
        if (void 0 === name) {
            /** @type {boolean} */
            name = true;
        }
        return this.each(function() {
            var type = this.type;
            if ("checkbox" == type || "radio" == type) {
                this.checked = name;
            } else {
                if ("option" == this.tagName.toLowerCase()) {
                    type = $(this).parent("select");
                    if (name && type[0] && "select-one" == type[0].type) {
                        type.find("option").selected(false);
                    }
                    /** @type {!Object} */
                    this.selected = name;
                }
            }
        });
    };
    /** @type {boolean} */
    $.fn.ajaxSubmit.debug = false;
})("undefined" != typeof jQuery ? jQuery : window.Zepto);
(function(state, $) {
    /**
     * @return {undefined}
     */
    function refresh_configurable_extensions_list() {
        $(document.documentElement).addClass(state.resources.HEADER_LOCALE_CLASS.toLowerCase());
    }
    var d = $("#appPreferences").length ? $("#appPreferences").data() : {};
    var isTablet = MODETECT && MODETECT.device && MODETECT.device.tablet;
    var isPhone = MODETECT && MODETECT.device && MODETECT.device.phone;
    state.isUserAuthenticated = "isUserAuthenticated" in d ? d.isUserAuthenticated : false;
    state.isUserRegistered = "isUserRegistered" in d ? d.isUserRegistered : false;
    state.isUserSubscribed = "isUserSubscribed" in d ? d.isUserSubscribed : false;
    state.isUserUnsubscribed = "isUserUnsubscribed" in d ? d.isUserUnsubscribed : false;
    state.isLoyaltyEnabled = "isLoyaltyEnabled" in d ? d.isLoyaltyEnabled : false;
    state.isLoyaltyUser = "isLoyaltyUser" in d ? d.isLoyaltyUser : false;
    state.loyaltyUserData = "loyaltyUserData" in d ? d.loyaltyUserData : false;
    state.loyaltyStatusUpdated = "loyaltyStatusUpdated" in d ? d.loyaltyStatusUpdated : false;
    state.disableCommerce = state.preferences && state.preferences.disableCommerce;
    state.disableQuickView = state.preferences && state.preferences.disableQuickView;
    if (state.disableCommerce) {
        $(document.documentElement).addClass("disableCommerce");
    }
    if (state.isLoyaltyEnabled) {
        $(document.documentElement).addClass("loyaltyEnabled");
    } else {
        $(document.documentElement).addClass("loyaltyDisabled");
    }
    if (state.isUserAuthenticated) {
        $(document.documentElement).addClass("authenticatedUser");
    } else {
        $(document.documentElement).addClass("notAuthenticatedUser");
    }
    if ("resources" in state && "HEADER_LOCALE_CLASS" in state.resources) {
        refresh_configurable_extensions_list();
    } else {
        $(document).on("AllJsInitialized", refresh_configurable_extensions_list);
    }
    state.isMobileUserAgent = isPhone;
    state.isTabletUserAgent = isTablet;
    /** @type {boolean} */
    state.zoomViewerEnabled = !isPhone;
    /** @type {string} */
    state.currentDevice = isPhone ? "mobile" : isTablet ? "tablet" : "desktop";
})(window.app = window.app || {}, jQuery);
(function($) {
    /**
     * @return {?}
     */
    $.fn.PlaceholderShow = function() {
        return this.not("[type=submit]").each(function() {
            if (0 !== $(this).nextAll(".f_placeholder").length) {
                $(this).nextAll(".f_placeholder").show();
            }
        });
    };
    /**
     * @return {?}
     */
    $.fn.PlaceholderHide = function() {
        return this.not("[type=submit]").each(function() {
            if (0 !== $(this).nextAll(".f_placeholder").length) {
                $(this).nextAll(".f_placeholder").hide();
            }
        });
    };
    /**
     * @return {?}
     */
    $.fn.PlaceholderRemove = function() {
        return this.not("[type=submit]").each(function() {
            if (0 !== $(this).nextAll(".f_placeholder").length && $(this).parent().hasClass("f_placeholder_wrapper")) {
                $(this).attr("placeholder", $(this).nextAll(".f_placeholder").text());
                $(this).nextAll(".f_placeholder").remove();
                $(this).parent().replaceWith($(this));
            }
        });
    };
    /**
     * @param {?} canCreateDiscussions
     * @return {?}
     */
    $.fn.PlaceholderFallback = function(canCreateDiscussions) {
        return this.not("[type=submit]").each(function() {
            var label = $(this).attr("placeholder");
            if (label && label.length) {
                var element = $(this).on("blur", function(event) {
                    event.preventDefault();
                    if (!$(this).val()) {
                        $menuElementWrapper.show();
                    }
                }).on("keyup keydown change", function(canCreateDiscussions) {
                    if ($(this).val()) {
                        $menuElementWrapper.hide();
                    } else {
                        $menuElementWrapper.show();
                    }
                });
                var $menuElementWrapper = $(document.createElement("div")).text(label).css({
                    display: "none",
                    position: "absolute",
                    left: 0,
                    top: 0,
                    width: element.width(),
                    height: element.height()
                }).on("click", function(event) {
                    element.focus();
                    event.preventDefault();
                }).addClass("f_placeholder");
                $(document.createElement("div")).css("position", "relative").insertAfter(element).append(element, $menuElementWrapper).addClass("f_placeholder_wrapper");
                if (!element.val()) {
                    $menuElementWrapper.show();
                }
                element.removeAttr("placeholder");
            }
        });
    };
})(jQuery);
(function(window, document, undefined) {
    /**
     * @param {!Object} options
     * @return {?}
     */
    function render(options) {
        if (html = document.documentElement, elm = document.body, Plugin(), el = this, options = options || {}, values = options.constants || {}, options.easing) {
            var name;
            for (name in options.easing) {
                templateData[name] = options.easing[name];
            }
        }
        obj = options.edgeStrategy || "set";
        doc = {
            beforerender: options.beforerender,
            render: options.render
        };
        if (targetElm = false !== options.forceHeight) {
            step = options.scale || 1;
        }
        value = options.mobileDeceleration || Arial;
        /** @type {boolean} */
        query = false !== options.smoothScrolling;
        duration = options.smoothScrollingDuration || DEFAULT_DURATION;
        o = {
            targetTop: el.getScrollTop()
        };
        if (isReadAction = (options.mobileCheck || function() {
                return /Android|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent || navigator.vendor || window.opera);
            })()) {
            /** @type {(Element|null)} */
            body = document.getElementById("skrollr-body");
            if (body) {
                select();
            }
            init();
            h(html, [name, input], [title]);
        } else {
            h(html, [name, content], [title]);
        }
        el.refresh();
        on(window, "resize orientationchange", function() {
            var w = html.clientWidth;
            var h = html.clientHeight;
            if (h !== eH || w !== eW) {
                eH = h;
                eW = w;
                /** @type {boolean} */
                Aa = true;
            }
        });
        var cb = next();
        return function init() {
            if (Aa) {
                /** @type {boolean} */
                Aa = false;
                parse();
            }
            var ref;
            var i;
            var from = el.getScrollTop();
            /** @type {number} */
            var time = parseInt();
            if (options) {
                if (time >= options.endTime) {
                    from = options.targetTop;
                    ref = options.done;
                    /** @type {!Object} */
                    options = undefined;
                } else {
                    i = options.easing((time - options.startTime) / options.duration);
                    /** @type {number} */
                    from = 0 | options.startTop + i * options.topDiff;
                }
                el.setScrollTop(from, true);
            } else {
                if (!n) {
                    if (o.targetTop - from) {
                        o = {
                            startTop: to,
                            topDiff: from - to,
                            targetTop: from,
                            startTime: startTime,
                            endTime: startTime + duration
                        };
                    }
                    if (o.endTime >= time) {
                        i = templateData.sqrt((time - o.startTime) / duration);
                        /** @type {number} */
                        from = 0 | o.startTop + i * o.topDiff;
                    }
                }
            }
            if (isReadAction && body && $.setStyle(body, "transform", "translate(0, " + -w + "px) " + end), n || to !== from) {
                direction = from > to ? "down" : to > from ? "up" : direction;
                /** @type {boolean} */
                n = false;
                i = {
                    curTop: from,
                    lastTop: to,
                    maxTop: start,
                    direction: direction
                };
                if (false !== (doc.beforerender && doc.beforerender.call(el, i))) {
                    var val = from;
                    var any = el.getScrollTop();
                    /** @type {number} */
                    var id = 0;
                    var j = list.length;
                    for (; j > id; id++) {
                        var key;
                        var previous;
                        var a = list[id];
                        var d = a.element;
                        var value = a.smoothScrolling ? val : any;
                        var b = a.keyFrames;
                        /** @type {boolean} */
                        var pos = b[0].frame > value;
                        /** @type {boolean} */
                        var i = value > b[b.length - 1].frame;
                        var frame = b[pos ? 0 : b.length - 1];
                        if (pos || i) {
                            if (pos && -1 === a.edge || i && 1 === a.edge) {
                                continue;
                            }
                            switch (h(d, [pos ? "skrollable-before" : "skrollable-after"], ["skrollable-before", "skrollable-between", "skrollable-after"]), a.edge = pos ? -1 : 1, a.edgeStrategy) {
                                case "reset":
                                    check(d);
                                    continue;
                                case "ease":
                                    value = frame.frame;
                                    break;
                                default:
                                case "set":
                                    value = frame.props;
                                    for (key in value) {
                                        if (util.call(value, key)) {
                                            previous = walk(value[key].value);
                                            $.setStyle(d, key, previous);
                                        }
                                    }
                                    continue;
                            }
                        } else {
                            if (0 !== a.edge) {
                                h(d, ["skrollable", "skrollable-between"], ["skrollable-before", "skrollable-after"]);
                                /** @type {number} */
                                a.edge = 0;
                            }
                        }
                        /** @type {number} */
                        pos = 0;
                        /** @type {number} */
                        a = b.length - 1;
                        for (; a > pos; pos++) {
                            if (value >= b[pos].frame && b[pos + 1].frame >= value) {
                                a = b[pos];
                                b = b[pos + 1];
                                for (key in a.props) {
                                    if (util.call(a.props, key)) {
                                        /** @type {number} */
                                        i = (value - a.frame) / (b.frame - a.frame);
                                        i = a.props[key].easing(i);
                                        previous = a.props[key].value;
                                        pos = b.props[key].value;
                                        frame = i;
                                        var length = previous.length;
                                        if (length !== pos.length) {
                                            throw "Can't interpolate between \"" + previous[0] + '" and "' + pos[0] + '"';
                                        }
                                        /** @type {!Array} */
                                        var buff = [previous[0]];
                                        /** @type {number} */
                                        i = 1;
                                        for (; length > i; i++) {
                                            buff[i] = previous[i] + (pos[i] - previous[i]) * frame;
                                        }
                                        /** @type {!Array} */
                                        previous = buff;
                                        previous = walk(previous);
                                        $.setStyle(d, key, previous);
                                    }
                                }
                                break;
                            }
                        }
                    }
                    to = from;
                    if (doc.render) {
                        doc.render.call(el, i);
                    }
                }
                if (ref) {
                    ref.call(el, false);
                }
            }
            /** @type {number} */
            startTime = time;
            iteratee = cb(init);
        }(), el;
    }
    var html;
    var elm;
    var $ = window.skrollr = {
        get: function() {
            return el;
        },
        init: function(name) {
            return el || new render(name);
        },
        VERSION: "0.6.21"
    };
    /** @type {function(this:Object, *): boolean} */
    var util = Object.prototype.hasOwnProperty;
    var Math = window.Math;
    var jQuery = window.getComputedStyle;
    /** @type {string} */
    var name = "skrollr";
    /** @type {string} */
    var title = "no-" + name;
    /** @type {string} */
    var content = name + "-desktop";
    /** @type {string} */
    var input = name + "-mobile";
    /** @type {number} */
    var Arial = .004;
    /** @type {number} */
    var DEFAULT_DURATION = 200;
    /** @type {!RegExp} */
    var REGEXP_INPUTS = /^(?:input|textarea|button|select)$/i;
    /** @type {!RegExp} */
    var val = /^\s+|\s+$/g;
    /** @type {!RegExp} */
    var apacheLogRegex = /^data(?:-(_\w+))?(?:-?(-?\d*\.?\d+p?))?(?:-?(start|end|top|center|bottom))?(?:-?(top|center|bottom))?$/;
    /** @type {!RegExp} */
    var ctx = /\s*([\w\-\[\]]+)\s*:\s*(.+?)\s*(?:;|$)/gi;
    /** @type {!RegExp} */
    var UNIT_RE = /^([a-z\-]+)\[(\w+)\]$/;
    /** @type {!RegExp} */
    var x = /-([a-z])/g;
    /**
     * @param {?} _
     * @param {string} prefix
     * @return {?}
     */
    var guid = function(_, prefix) {
        return prefix.toUpperCase();
    };
    /** @type {!RegExp} */
    var url = /[\-+]?[\d]*\.?[\d]+/g;
    /** @type {!RegExp} */
    var multiple_slash_re = /\{\?\}/g;
    /** @type {!RegExp} */
    var re = /rgba?\(\s*-?\d+\s*,\s*-?\d+\s*,\s*-?\d+/g;
    /** @type {!RegExp} */
    var line = /[a-z\-]+-gradient/g;
    /** @type {string} */
    var theCSSPrefix = "";
    /** @type {string} */
    var prefix = "";
    /**
     * @return {?}
     */
    var Plugin = function() {
        /** @type {!RegExp} */
        var elem = /^(?:O|Moz|webkit|ms)|(?:-(?:o|moz|webkit|ms)-)/;
        if (jQuery) {
            var obj = jQuery(elm, null);
            var a;
            for (a in obj) {
                if (theCSSPrefix = a.match(elem) || +a == a && obj[a].match(elem)) {
                    break;
                }
            }
            if (!theCSSPrefix) {
                return theCSSPrefix = prefix = "", undefined;
            }
            theCSSPrefix = theCSSPrefix[0];
            if ("-" === theCSSPrefix.slice(0, 1)) {
                prefix = theCSSPrefix;
                theCSSPrefix = {
                    "-webkit-": "webkit",
                    "-moz-": "Moz",
                    "-ms-": "ms",
                    "-o-": "O"
                }[theCSSPrefix];
            } else {
                /** @type {string} */
                prefix = "-" + theCSSPrefix.toLowerCase() + "-";
            }
        }
    };
    /**
     * @return {?}
     */
    var next = function() {
        var handler = window.requestAnimationFrame || window[theCSSPrefix.toLowerCase() + "RequestAnimationFrame"];
        /** @type {number} */
        var l = parseInt();
        return (isReadAction || !handler) && (handler = function(callback) {
            /** @type {number} */
            var width = parseInt() - l;
            width = Math.max(0, 1E3 / 60 - width);
            return window.setTimeout(function() {
                /** @type {number} */
                l = parseInt();
                callback();
            }, width);
        }), handler;
    };
    /**
     * @return {?}
     */
    var setupRequestAnimationFrame = function() {
        var cancelAnimationFrame = window.cancelAnimationFrame || window[theCSSPrefix.toLowerCase() + "CancelAnimationFrame"];
        return (isReadAction || !cancelAnimationFrame) && (cancelAnimationFrame = function(id) {
            return window.clearTimeout(id);
        }), cancelAnimationFrame;
    };
    var templateData = {
        begin: function() {
            return 0;
        },
        end: function() {
            return 1;
        },
        linear: function(p) {
            return p;
        },
        quadratic: function(value) {
            return value * value;
        },
        cubic: function(y1) {
            return y1 * y1 * y1;
        },
        swing: function(p) {
            return -Math.cos(p * Math.PI) / 2 + .5;
        },
        sqrt: function(n) {
            return Math.sqrt(n);
        },
        outCubic: function(b) {
            return Math.pow(b - 1, 3) + 1;
        },
        bounce: function(b) {
            var f;
            if (.5083 >= b) {
                /** @type {number} */
                f = 3;
            } else {
                if (.8489 >= b) {
                    /** @type {number} */
                    f = 9;
                } else {
                    if (.96208 >= b) {
                        /** @type {number} */
                        f = 27;
                    } else {
                        if (!(.99981 >= b)) {
                            return 1;
                        }
                        /** @type {number} */
                        f = 91;
                    }
                }
            }
            return 1 - Math.abs(3 * Math.cos(1.028 * b * f) / f);
        }
    };
    /**
     * @param {string} text
     * @return {?}
     */
    render.prototype.refresh = function(text) {
        var pos;
        var i;
        /** @type {boolean} */
        var t = false;
        if (text === undefined) {
            /** @type {boolean} */
            t = true;
            /** @type {!Array} */
            list = [];
            /** @type {number} */
            cookiesCreated = 0;
            /** @type {!NodeList<Element>} */
            text = document.getElementsByTagName("*");
        } else {
            /** @type {!Array<?>} */
            text = [].concat(text);
        }
        /** @type {number} */
        pos = 0;
        i = text.length;
        for (; i > pos; pos++) {
            var c = text[pos];
            var a = c;
            /** @type {!Array} */
            var n = [];
            var path = query;
            var p = obj;
            if (c.attributes) {
                /** @type {number} */
                var value = 0;
                var matches = c.attributes.length;
                for (; matches > value; value++) {
                    var options = c.attributes[value];
                    if ("data-anchor-target" !== options.name) {
                        if ("data-smooth-scrolling" !== options.name) {
                            if ("data-edge-strategy" !== options.name) {
                                var match = options.name.match(apacheLogRegex);
                                if (null !== match) {
                                    options = {
                                        props: options.value,
                                        element: c
                                    };
                                    n.push(options);
                                    var end = match[1];
                                    if (end) {
                                        options.constant = end.substr(1);
                                    }
                                    end = match[2];
                                    if (/p$/.test(end)) {
                                        /** @type {boolean} */
                                        options.isPercentage = true;
                                        /** @type {number} */
                                        options.offset = (0 | end.slice(0, -1)) / 100;
                                    } else {
                                        /** @type {number} */
                                        options.offset = 0 | end;
                                    }
                                    end = match[3];
                                    match = match[4] || end;
                                    if (end && "start" !== end && "end" !== end) {
                                        /** @type {string} */
                                        options.mode = "relative";
                                        /** @type {!Array} */
                                        options.anchors = [end, match];
                                    } else {
                                        /** @type {string} */
                                        options.mode = "absolute";
                                        if ("end" === end) {
                                            /** @type {boolean} */
                                            options.isEnd = true;
                                        } else {
                                            if (!options.isPercentage) {
                                                options.offset *= step;
                                            }
                                        }
                                    }
                                }
                            } else {
                                p = options.value;
                            }
                        } else {
                            /** @type {boolean} */
                            path = "off" !== options.value;
                        }
                    } else {
                        if (a = document.querySelector(options.value), null === a) {
                            throw 'Unable to find anchor target "' + options.value + '"';
                        }
                    }
                }
                if (n.length) {
                    var val;
                    var data;
                    var name;
                    if (!t && "___skrollable_id" in c) {
                        name = c.___skrollable_id;
                        val = list[name].styleAttr;
                        data = list[name].classAttr;
                    } else {
                        /** @type {number} */
                        name = c.___skrollable_id = cookiesCreated++;
                        val = c.style.cssText;
                        data = bind(c);
                    }
                    list[name] = {
                        element: c,
                        styleAttr: val,
                        classAttr: data,
                        anchorTarget: a,
                        keyFrames: n,
                        smoothScrolling: path,
                        edgeStrategy: p
                    };
                    h(c, ["skrollable"], []);
                }
            }
        }
        parse();
        /** @type {number} */
        pos = 0;
        i = text.length;
        for (; i > pos; pos++) {
            if (t = list[text[pos].___skrollable_id], t !== undefined) {
                c = t;
                /** @type {number} */
                a = 0;
                n = c.keyFrames.length;
                for (; n > a; a++) {
                    p = c.keyFrames[a];
                    value = {};
                    for (; null !== (matches = ctx.exec(p.props));) {
                        /** @type {string} */
                        path = matches[1];
                        /** @type {string} */
                        val = matches[2];
                        /** @type {(Array<string>|null)} */
                        matches = path.match(UNIT_RE);
                        if (null !== matches) {
                            /** @type {string} */
                            path = matches[1];
                            /** @type {string} */
                            matches = matches[2];
                        } else {
                            /** @type {string} */
                            matches = "linear";
                        }
                        val = val.indexOf("!") ? hashToParams_(val) : [val.slice(1)];
                        value[path] = {
                            value: val,
                            easing: templateData[matches]
                        };
                    }
                    p.props = value;
                }
                a = t;
                n = {};
                /** @type {number} */
                c = 0;
                t = a.keyFrames.length;
                for (; t > c; c++) {
                    reduce(a.keyFrames[c], n);
                }
                n = {};
                /** @type {number} */
                c = a.keyFrames.length - 1;
                for (; 0 <= c; c--) {
                    reduce(a.keyFrames[c], n);
                }
            }
        }
        return el;
    };
    /**
     * @param {number} n
     * @param {string} r
     * @param {string} align
     * @return {?}
     */
    render.prototype.relativeToAbsolute = function(n, r, align) {
        var h = html.clientHeight;
        var v = n.getBoundingClientRect();
        n = v.top;
        /** @type {number} */
        v = v.bottom - v.top;
        return "bottom" === r ? n = n - h : "center" === r && (n = n - h / 2), "bottom" === align ? n = n + v : "center" === align && (n = n + v / 2), n = n + el.getScrollTop(), 0 | n + .5;
    };
    /**
     * @param {number} properties
     * @param {!Object} opts
     * @return {?}
     */
    render.prototype.animateTo = function(properties, opts) {
        opts = opts || {};
        /** @type {number} */
        var startTime = parseInt();
        var startTopPos = el.getScrollTop();
        return options = {
            startTop: startTopPos,
            topDiff: properties - startTopPos,
            targetTop: properties,
            duration: opts.duration || 1E3,
            startTime: startTime,
            endTime: startTime + (opts.duration || 1E3),
            easing: templateData[opts.easing || "linear"],
            done: opts.done
        }, options.topDiff || (options.done && options.done.call(el, false), options = undefined), el;
    };
    /**
     * @return {undefined}
     */
    render.prototype.stopAnimateTo = function() {
        if (options && options.done) {
            options.done.call(el, true);
        }
        /** @type {!Object} */
        options = undefined;
    };
    /**
     * @return {?}
     */
    render.prototype.isAnimatingTo = function() {
        return !!options;
    };
    /**
     * @param {!Object} value
     * @param {boolean} number
     * @return {?}
     */
    render.prototype.setScrollTop = function(value, number) {
        return n = true === number, isReadAction ? w = Math.min(Math.max(value, 0), start) : window.scrollTo(0, value), el;
    };
    /**
     * @return {?}
     */
    render.prototype.getScrollTop = function() {
        return isReadAction ? w : window.pageYOffset || html.scrollTop || elm.scrollTop || 0;
    };
    /**
     * @return {?}
     */
    render.prototype.getMaxScrollTop = function() {
        return start;
    };
    /**
     * @param {string} name
     * @param {string} type
     * @return {?}
     */
    render.prototype.on = function(name, type) {
        return doc[name] = type, el;
    };
    /**
     * @param {string} name
     * @return {?}
     */
    render.prototype.off = function(name) {
        return delete doc[name], el;
    };
    /**
     * @return {undefined}
     */
    render.prototype.destroy = function() {
        setupRequestAnimationFrame()(iteratee);
        var a;
        /** @type {number} */
        var i = 0;
        var x = d.length;
        for (; x > i; i++) {
            a = d[i];
            remove(a.element, a.name, a.listener);
        }
        /** @type {!Array} */
        d = [];
        h(html, [title], [name, content, input]);
        /** @type {number} */
        a = 0;
        i = list.length;
        for (; i > a; a++) {
            check(list[a].element);
        }
        /** @type {string} */
        html.style.overflow = elm.style.overflow = "auto";
        /** @type {string} */
        html.style.height = elm.style.height = "auto";
        if (body) {
            $.setStyle(body, "transform", "none");
        }
        targetElm = doc = body = el = undefined;
        /** @type {number} */
        start = 0;
        /** @type {number} */
        step = 1;
        value = values = undefined;
        /** @type {string} */
        direction = "down";
        /** @type {number} */
        to = -1;
        /** @type {number} */
        eH = eW = 0;
        /** @type {boolean} */
        Aa = false;
        n = o = duration = query = options = undefined;
        /** @type {number} */
        cookiesCreated = 0;
        /** @type {!Object} */
        obj = undefined;
        /** @type {boolean} */
        isReadAction = false;
        /** @type {number} */
        w = 0;
        /** @type {!Object} */
        end = undefined;
    };
    /**
     * @return {undefined}
     */
    var init = function() {
        var input;
        var canvas_height;
        var e;
        var element;
        var height;
        var s;
        var cropHeight;
        var margin;
        var connectNumber;
        var concurency;
        var listBaseIndent;
        on(html, "touchstart touchmove touchcancel touchend", function(event) {
            var data = event.changedTouches[0];
            element = event.target;
            for (; 3 === element.nodeType;) {
                element = element.parentNode;
            }
            switch (height = data.clientY, s = data.clientX, connectNumber = event.timeStamp, REGEXP_INPUTS.test(element.tagName) || event.preventDefault(), event.type) {
                case "touchstart":
                    if (input) {
                        input.blur();
                    }
                    el.stopAnimateTo();
                    input = element;
                    canvas_height = cropHeight = height;
                    e = s;
                    break;
                case "touchmove":
                    if (REGEXP_INPUTS.test(element.tagName) && document.activeElement !== element) {
                        event.preventDefault();
                    }
                    /** @type {number} */
                    margin = height - cropHeight;
                    /** @type {number} */
                    listBaseIndent = connectNumber - concurency;
                    el.setScrollTop(w - margin, true);
                    cropHeight = height;
                    concurency = connectNumber;
                    break;
                default:
                case "touchcancel":
                case "touchend":
                    /** @type {number} */
                    var evt = canvas_height - height;
                    /** @type {number} */
                    var xdiff = e - s;
                    if (49 > xdiff * xdiff + evt * evt) {
                        if (!REGEXP_INPUTS.test(input.tagName)) {
                            input.focus();
                            /** @type {(Event|null)} */
                            evt = document.createEvent("MouseEvents");
                            evt.initMouseEvent("click", true, true, event.view, 1, data.screenX, data.screenY, data.clientX, data.clientY, event.ctrlKey, event.altKey, event.shiftKey, event.metaKey, 0, null);
                            input.dispatchEvent(evt);
                        }
                    } else {
                        /** @type {!Object} */
                        input = undefined;
                        /** @type {number} */
                        data = margin / listBaseIndent;
                        data = Math.max(Math.min(data, 3), -3);
                        event = Math.abs(data / value);
                        /** @type {number} */
                        data = data * event + .5 * value * event * event;
                        /** @type {number} */
                        evt = el.getScrollTop() - data;
                        /** @type {number} */
                        xdiff = 0;
                        if (evt > start) {
                            /** @type {number} */
                            xdiff = (start - evt) / data;
                            evt = start;
                        } else {
                            if (0 > evt) {
                                /** @type {number} */
                                xdiff = -evt / data;
                                /** @type {number} */
                                evt = 0;
                            }
                        }
                        el.animateTo(0 | evt + .5, {
                            easing: "outCubic",
                            duration: event * (1 - xdiff)
                        });
                    }
            }
        });
        window.scrollTo(0, 0);
        /** @type {string} */
        html.style.overflow = elm.style.overflow = "hidden";
    };
    /**
     * @param {string} hash
     * @return {?}
     */
    var hashToParams_ = function(hash) {
        /** @type {!Array} */
        var params = [];
        return re.lastIndex = 0, hash = hash.replace(re, function(val) {
            return val.replace(url, function(b) {
                return b / 255 * 100 + "%";
            });
        }), prefix && (line.lastIndex = 0, hash = hash.replace(line, function(dword) {
            return prefix + dword;
        })), hash = hash.replace(url, function(b) {
            return params.push(+b), "{?}";
        }), params.unshift(hash), params;
    };
    /**
     * @param {!Object} a
     * @param {!Object} b
     * @return {undefined}
     */
    var reduce = function(a, b) {
        var prop;
        for (prop in b) {
            if (!util.call(a.props, prop)) {
                a.props[prop] = b[prop];
            }
        }
        for (prop in a.props) {
            b[prop] = a.props[prop];
        }
    };
    /**
     * @param {!Object} node
     * @return {?}
     */
    var walk = function(node) {
        /** @type {number} */
        var count = 1;
        return multiple_slash_re.lastIndex = 0, node[0].replace(multiple_slash_re, function() {
            return node[count++];
        });
    };
    /**
     * @param {number} input
     * @param {boolean} recipient
     * @return {undefined}
     */
    var check = function(input, recipient) {
        /** @type {!Array<?>} */
        input = [].concat(input);
        var node;
        var item;
        /** @type {number} */
        var i = 0;
        /** @type {number} */
        var l = input.length;
        for (; l > i; i++) {
            item = input[i];
            if (node = list[item.___skrollable_id]) {
                if (recipient) {
                    item.style.cssText = node.dirtyStyleAttr;
                    h(item, node.dirtyClassAttr);
                } else {
                    node.dirtyStyleAttr = item.style.cssText;
                    node.dirtyClassAttr = bind(item);
                    item.style.cssText = node.styleAttr;
                    h(item, node.classAttr);
                }
            }
        }
    };
    /**
     * @return {undefined}
     */
    var select = function() {
        /** @type {string} */
        end = "translateZ(0)";
        $.setStyle(body, "transform", end);
        var t = jQuery(body);
        var authType = t.getPropertyValue("transform");
        t = t.getPropertyValue(prefix + "transform");
        if (!(authType && "none" !== authType || t && "none" !== t)) {
            /** @type {string} */
            end = "";
        }
    };
    /**
     * @param {!Object} style
     * @param {string} name
     * @param {number} value
     * @return {undefined}
     */
    $.setStyle = function(style, name, value) {
        style = style.style;
        if (name = name.replace(x, guid).replace("-", ""), "zIndex" === name) {
            style[name] = isNaN(value) ? value : "" + (0 | value);
        } else {
            if ("float" === name) {
                style.styleFloat = style.cssFloat = value;
            } else {
                try {
                    if (theCSSPrefix) {
                        /** @type {number} */
                        style[theCSSPrefix + name.slice(0, 1).toUpperCase() + name.slice(1)] = value;
                    }
                    /** @type {number} */
                    style[name] = value;
                } catch (Sa) {}
            }
        }
    };
    var el;
    var list;
    var body;
    var doc;
    var targetElm;
    var values;
    var value;
    var options;
    var query;
    var duration;
    var o;
    var n;
    var obj;
    var end;
    var iteratee;
    /** @type {function(!Element, string, !Function): undefined} */
    var on = $.addEvent = function(el, args, callback) {
        /**
         * @param {!Object} event
         * @return {?}
         */
        var handler = function(event) {
            return event = event || window.event, event.target || (event.target = event.srcElement), event.preventDefault || (event.preventDefault = function() {
                /** @type {boolean} */
                event.returnValue = false;
            }), callback.call(this, event);
        };
        args = args.split(" ");
        var event;
        /** @type {number} */
        var i = 0;
        var l = args.length;
        for (; l > i; i++) {
            event = args[i];
            if (el.addEventListener) {
                el.addEventListener(event, callback, false);
            } else {
                el.attachEvent("on" + event, handler);
            }
            d.push({
                element: el,
                name: event,
                listener: callback
            });
        }
    };
    /** @type {function(!Element, string, ?): undefined} */
    var remove = $.removeEvent = function(elem, events, fn) {
        events = events.split(" ");
        /** @type {number} */
        var i = 0;
        var len = events.length;
        for (; len > i; i++) {
            if (elem.removeEventListener) {
                elem.removeEventListener(events[i], fn, false);
            } else {
                elem.detachEvent("on" + events[i], fn);
            }
        }
    };
    /**
     * @return {undefined}
     */
    var parse = function() {
        var value = el.getScrollTop();
        /** @type {number} */
        start = 0;
        if (targetElm && !isReadAction) {
            /** @type {string} */
            elm.style.height = "auto";
        }
        var f;
        var i;
        var h;
        var height;
        var point_index;
        var len4;
        var options;
        var j;
        var length;
        var delta;
        var l = html.clientHeight;
        height = html.clientHeight;
        var d = {};
        for (i in values) {
            h = values[i];
            if ("function" == typeof h) {
                h = h.call(el);
            } else {
                if (/p$/.test(h)) {
                    /** @type {number} */
                    h = h.slice(0, -1) / 100 * height;
                }
            }
            d[i] = h;
        }
        /** @type {number} */
        j = 0;
        length = list.length;
        for (; length > j; j++) {
            f = list[j];
            i = f.element;
            h = f.anchorTarget;
            height = f.keyFrames;
            /** @type {number} */
            point_index = 0;
            len4 = height.length;
            for (; len4 > point_index; point_index++) {
                options = height[point_index];
                f = options.offset;
                delta = d[options.constant] || 0;
                options.frame = f;
                if (options.isPercentage) {
                    /** @type {number} */
                    f = f * l;
                    options.frame = f;
                }
                if ("relative" === options.mode) {
                    check(i);
                    /** @type {number} */
                    options.frame = el.relativeToAbsolute(h, options.anchors[0], options.anchors[1]) - f;
                    check(i, true);
                }
                options.frame += delta;
                if (targetElm && !options.isEnd && options.frame > start) {
                    start = options.frame;
                }
            }
        }
        start = Math.max(start, Math.max(body && body.offsetHeight || 0, elm.scrollHeight, elm.offsetHeight, html.scrollHeight, html.offsetHeight, html.clientHeight) - html.clientHeight);
        /** @type {number} */
        j = 0;
        length = list.length;
        for (; length > j; j++) {
            f = list[j];
            height = f.keyFrames;
            /** @type {number} */
            point_index = 0;
            len4 = height.length;
            for (; len4 > point_index; point_index++) {
                options = height[point_index];
                delta = d[options.constant] || 0;
                if (options.isEnd) {
                    options.frame = start - options.offset + delta;
                }
            }
            f.keyFrames.sort(sortByIMDBRating);
        }
        if (targetElm && !isReadAction) {
            /** @type {string} */
            elm.style.height = start + html.clientHeight + "px";
        }
        if (isReadAction) {
            el.setScrollTop(Math.min(el.getScrollTop(), start));
        } else {
            el.setScrollTop(value, true);
        }
        /** @type {boolean} */
        n = true;
    };
    /**
     * @param {string} el
     * @return {?}
     */
    var bind = function(el) {
        /** @type {string} */
        var name = "className";
        return window.SVGElement && el instanceof window.SVGElement && (el = el[name], name = "baseVal"), el[name];
    };
    /**
     * @param {!Element} data
     * @param {!Object} a
     * @param {!Object} el
     * @return {?}
     */
    var h = function(data, a, el) {
        /** @type {string} */
        var name = "className";
        if (window.SVGElement && data instanceof window.SVGElement && (data = data[name], name = "baseVal"), el === undefined) {
            return data[name] = a, undefined;
        }
        var result = data[name];
        /** @type {number} */
        var i = 0;
        var l = el.length;
        for (; l > i; i++) {
            /** @type {string} */
            result = (" " + result + " ").replace(" " + el[i] + " ", " ");
        }
        result = result.replace(val, "");
        /** @type {number} */
        el = 0;
        i = a.length;
        for (; i > el; el++) {
            if (-1 === (" " + result + " ").indexOf(" " + a[el] + " ")) {
                result = result + (" " + a[el]);
            }
        }
        data[name] = result.replace(val, "");
    };
    /** @type {function(): number} */
    var parseInt = Date.now || function() {
        return +new Date;
    };
    /**
     * @param {?} clip
     * @param {?} at_time
     * @return {?}
     */
    var sortByIMDBRating = function(clip, at_time) {
        return clip.frame - at_time.frame;
    };
    /** @type {number} */
    var start = 0;
    /** @type {number} */
    var step = 1;
    /** @type {string} */
    var direction = "down";
    /** @type {number} */
    var to = -1;
    /** @type {number} */
    var startTime = parseInt();
    /** @type {number} */
    var eW = 0;
    /** @type {number} */
    var eH = 0;
    /** @type {boolean} */
    var Aa = false;
    /** @type {number} */
    var cookiesCreated = 0;
    /** @type {boolean} */
    var isReadAction = false;
    /** @type {number} */
    var w = 0;
    /** @type {!Array} */
    var d = [];
})(window, document);
(function($) {
    /** @type {boolean} */
    var isDead = false;
    /** @type {boolean} */
    var k = false;
    /** @type {number} */
    var d = 5E3;
    /** @type {number} */
    var g = 2E3;
    /** @type {number} */
    var z = 0;
    var e = function() {
        /** @type {!NodeList<Element>} */
        var configPath = document.getElementsByTagName("script");
        configPath = configPath[configPath.length - 1].src.split("?")[0];
        return 0 < configPath.split("/").length ? configPath.split("/").slice(0, -1).join("/") + "/" : "";
    }();
    if (!Array.prototype.forEach) {
        /**
         * @param {(function(this:S, T, number, !Array<T>): ?|null)} data
         * @param {(S|null)=} obj
         * @return {undefined}
         * @template T,S
         */
        Array.prototype.forEach = function(data, obj) {
            /** @type {number} */
            var i = 0;
            /** @type {number} */
            var l = this.length;
            for (; i < l; ++i) {
                data.call(obj, this[i], i, this);
            }
        };
    }
    var fn = window.requestAnimationFrame || false;
    var callback = window.cancelAnimationFrame || false;
    ["ms", "moz", "webkit", "o"].forEach(function(prefix) {
        if (!fn) {
            fn = window[prefix + "RequestAnimationFrame"];
        }
        if (!callback) {
            callback = window[prefix + "CancelAnimationFrame"] || window[prefix + "CancelRequestAnimationFrame"];
        }
    });
    var Observer = window.MutationObserver || window.WebKitMutationObserver || false;
    var defaultOptions = {
        zindex: "auto",
        cursoropacitymin: 0,
        cursoropacitymax: 1,
        cursorcolor: "#424242",
        cursorwidth: "5px",
        cursorborder: "1px solid #fff",
        cursorborderradius: "5px",
        scrollspeed: 60,
        mousescrollstep: 24,
        touchbehavior: false,
        hwacceleration: true,
        usetransition: true,
        boxzoom: false,
        dblclickzoom: true,
        gesturezoom: true,
        grabcursorenabled: true,
        autohidemode: true,
        background: "",
        iframeautoresize: true,
        cursorminheight: 32,
        preservenativescrolling: true,
        railoffset: false,
        bouncescroll: true,
        spacebarenabled: true,
        railpadding: {
            top: 0,
            right: 0,
            left: 0,
            bottom: 0
        },
        disableoutline: true,
        horizrailenabled: true,
        railalign: "right",
        railvalign: "bottom",
        enabletranslate3d: true,
        enablemousewheel: true,
        enablekeyboard: true,
        smoothscroll: true,
        sensitiverail: true,
        enablemouselockapi: true,
        cursorfixedheight: false,
        directionlockdeadzone: 6,
        hidecursordelay: 400,
        nativeparentscrolling: true,
        enablescrollonselection: true,
        overflowx: true,
        overflowy: true,
        cursordragspeed: .3,
        rtlmode: false,
        cursordragontouch: false
    };
    /** @type {boolean} */
    var cfg = false;
    /**
     * @return {?}
     */
    var _init = function() {
        if (cfg) {
            return cfg;
        }
        /** @type {!Element} */
        var el = document.createElement("DIV");
        var options = {
            haspointerlock: "pointerLockElement" in document || "mozPointerLockElement" in document || "webkitPointerLockElement" in document
        };
        /** @type {boolean} */
        options.isopera = "opera" in window;
        /** @type {boolean} */
        options.isopera12 = options.isopera && "getUserMedia" in navigator;
        /** @type {boolean} */
        options.isie = "all" in document && "attachEvent" in el && !options.isopera;
        /** @type {boolean} */
        options.isieold = options.isie && !("msInterpolationMode" in el.style);
        /** @type {boolean} */
        options.isie7 = options.isie && !options.isieold && (!("documentMode" in document) || 7 == document.documentMode);
        /** @type {boolean} */
        options.isie8 = options.isie && "documentMode" in document && 8 == document.documentMode;
        /** @type {boolean} */
        options.isie9 = options.isie && "performance" in window && 9 <= document.documentMode;
        /** @type {boolean} */
        options.isie10 = options.isie && "performance" in window && 10 <= document.documentMode;
        /** @type {boolean} */
        options.isie9mobile = /iemobile.9/i.test(navigator.userAgent);
        if (options.isie9mobile) {
            /** @type {boolean} */
            options.isie9 = false;
        }
        /** @type {boolean} */
        options.isie7mobile = !options.isie9mobile && options.isie7 && /iemobile/i.test(navigator.userAgent);
        /** @type {boolean} */
        options.ismozilla = "MozAppearance" in el.style;
        /** @type {boolean} */
        options.iswebkit = "WebkitAppearance" in el.style;
        /** @type {boolean} */
        options.ischrome = "chrome" in window;
        /** @type {boolean} */
        options.ischrome22 = options.ischrome && options.haspointerlock;
        /** @type {boolean} */
        options.ischrome26 = options.ischrome && "transition" in el.style;
        /** @type {boolean} */
        options.cantouch = "ontouchstart" in document.documentElement || "ontouchstart" in window;
        /** @type {boolean} */
        options.hasmstouch = window.navigator.msPointerEnabled || false;
        /** @type {boolean} */
        options.ismac = /^mac$/i.test(navigator.platform);
        /** @type {boolean} */
        options.isios = options.cantouch && /iphone|ipad|ipod/i.test(navigator.platform);
        /** @type {boolean} */
        options.isios4 = options.isios && !("seal" in Object);
        /** @type {boolean} */
        options.isandroid = /android/i.test(navigator.userAgent);
        /** @type {boolean} */
        options.trstyle = false;
        /** @type {boolean} */
        options.hastransform = false;
        /** @type {boolean} */
        options.hastranslate3d = false;
        /** @type {boolean} */
        options.transitionstyle = false;
        /** @type {boolean} */
        options.hastransition = false;
        /** @type {boolean} */
        options.transitionend = false;
        /** @type {!Array} */
        var properties = ["transform", "msTransform", "webkitTransform", "MozTransform", "OTransform"];
        /** @type {number} */
        var i = 0;
        for (; i < properties.length; i++) {
            if ("undefined" != typeof el.style[properties[i]]) {
                options.trstyle = properties[i];
                break;
            }
        }
        /** @type {boolean} */
        options.hastransform = 0 != options.trstyle;
        if (options.hastransform) {
            /** @type {string} */
            el.style[options.trstyle] = "translate3d(1px,2px,3px)";
            /** @type {boolean} */
            options.hastranslate3d = /translate3d/.test(el.style[options.trstyle]);
        }
        /** @type {boolean} */
        options.transitionstyle = false;
        /** @type {string} */
        options.prefixstyle = "";
        /** @type {boolean} */
        options.transitionend = false;
        /** @type {!Array<string>} */
        properties = "transition webkitTransition MozTransition OTransition OTransition msTransition KhtmlTransition".split(" ");
        /** @type {!Array<string>} */
        var id = " -webkit- -moz- -o- -o -ms- -khtml-".split(" ");
        /** @type {!Array<string>} */
        var peopleArray = "transitionend webkitTransitionEnd transitionend otransitionend oTransitionEnd msTransitionEnd KhtmlTransitionEnd".split(" ");
        /** @type {number} */
        i = 0;
        for (; i < properties.length; i++) {
            if (properties[i] in el.style) {
                /** @type {string} */
                options.transitionstyle = properties[i];
                /** @type {string} */
                options.prefixstyle = id[i];
                /** @type {string} */
                options.transitionend = peopleArray[i];
                break;
            }
        }
        if (options.ischrome26) {
            /** @type {string} */
            options.prefixstyle = id[1];
        }
        /** @type {(boolean|string)} */
        options.hastransition = options.transitionstyle;
        a: {
            /** @type {!Array} */
            properties = ["-moz-grab", "-webkit-grab", "grab"];
            if (options.ischrome && !options.ischrome22 || options.isie) {
                /** @type {!Array} */
                properties = [];
            }
            /** @type {number} */
            i = 0;
            for (; i < properties.length; i++) {
                if (id = properties[i], el.style.cursor = id, el.style.cursor == id) {
                    properties = id;
                    break a;
                }
            }
            /** @type {string} */
            properties = "url(http://www.google.com/intl/en_ALL/mapfiles/openhand.cur),n-resize";
        }
        options.cursorgrabvalue = properties;
        /** @type {boolean} */
        options.hasmousecapture = "setCapture" in el;
        /** @type {boolean} */
        options.hasMutationObserver = false !== Observer;
        return cfg = options;
    };
    /**
     * @param {!Object} hash
     * @param {string} username
     * @return {undefined}
     */
    var init = function(hash, username) {
        /**
         * @return {?}
         */
        function init() {
            var options = self.win;
            if ("zIndex" in options) {
                return options.zIndex();
            }
            for (; 0 < options.length && 9 != options[0].nodeType;) {
                var basezIndex = options.css("zIndex");
                if (!isNaN(basezIndex) && 0 != basezIndex) {
                    return parseInt(basezIndex);
                }
                options = options.parent();
            }
            return false;
        }
        /**
         * @param {number} value
         * @param {string} prop
         * @param {number} force
         * @return {?}
         */
        function resize(value, prop, force) {
            prop = value.css(prop);
            /** @type {number} */
            value = parseFloat(prop);
            return isNaN(value) ? (value = size[prop] || 0, force = 3 == value ? force ? self.win.outerHeight() - self.win.innerHeight() : self.win.outerWidth() - self.win.innerWidth() : 1, self.isie8 && value && (value = value + 1), force ? value : 0) : value;
        }
        /**
         * @param {!Object} elem
         * @param {string} eventName
         * @param {!Function} callback
         * @param {string} e
         * @return {undefined}
         */
        function _addWheelListener(elem, eventName, callback, e) {
            self._bind(elem, eventName, function(e) {
                e = e ? e : window.event;
                var event = {
                    original: e,
                    target: e.target || e.srcElement,
                    type: "wheel",
                    deltaMode: "MozMousePixelScroll" == e.type ? 0 : 1,
                    deltaX: 0,
                    deltaZ: 0,
                    preventDefault: function() {
                        if (e.preventDefault) {
                            e.preventDefault();
                        } else {
                            /** @type {boolean} */
                            e.returnValue = false;
                        }
                        return false;
                    },
                    stopImmediatePropagation: function() {
                        if (e.stopImmediatePropagation) {
                            e.stopImmediatePropagation();
                        } else {
                            /** @type {boolean} */
                            e.cancelBubble = true;
                        }
                    }
                };
                if ("mousewheel" == eventName) {
                    /** @type {number} */
                    event.deltaY = -.025 * e.wheelDelta;
                    if (e.wheelDeltaX) {
                        /** @type {number} */
                        event.deltaX = -.025 * e.wheelDeltaX;
                    }
                } else {
                    event.deltaY = e.detail;
                }
                return callback.call(elem, event);
            }, e);
        }
        /**
         * @param {!Event} event
         * @param {number} data
         * @param {string} type
         * @return {?}
         */
        function handler(event, data, type) {
            var string;
            var n;
            if (0 == event.deltaMode) {
                /** @type {number} */
                string = -Math.floor(self.opt.mousescrollstep / 54 * event.deltaX);
                /** @type {number} */
                n = -Math.floor(self.opt.mousescrollstep / 54 * event.deltaY);
            } else {
                if (1 == event.deltaMode) {
                    /** @type {number} */
                    string = -Math.floor(event.deltaX * self.opt.mousescrollstep);
                    /** @type {number} */
                    n = -Math.floor(event.deltaY * self.opt.mousescrollstep);
                }
            }
            if (data && 0 == string && n) {
                string = n;
                /** @type {number} */
                n = 0;
            }
            if (string) {
                if (self.scrollmom) {
                    self.scrollmom.stop();
                }
                self.lastdeltax += string;
                self.debounced("mousewheelx", function() {
                    var b = self.lastdeltax;
                    /** @type {number} */
                    self.lastdeltax = 0;
                    if (!self.rail.drag) {
                        self.doScrollLeftBy(b);
                    }
                }, 120);
            }
            if (n) {
                if (self.opt.nativeparentscrolling && type && !self.ispage && !self.zoomactive) {
                    if (0 > n) {
                        if (self.getScrollTop() >= self.page.maxh) {
                            return true;
                        }
                    } else {
                        if (0 >= self.getScrollTop()) {
                            return true;
                        }
                    }
                }
                if (self.scrollmom) {
                    self.scrollmom.stop();
                }
                self.lastdeltay += n;
                self.debounced("mousewheely", function() {
                    var b = self.lastdeltay;
                    /** @type {number} */
                    self.lastdeltay = 0;
                    if (!self.rail.drag) {
                        self.doScrollBy(b);
                    }
                }, 120);
            }
            event.stopImmediatePropagation();
            return event.preventDefault();
        }
        var self = this;
        /** @type {string} */
        this.version = "3.4.0";
        /** @type {string} */
        this.name = "nicescroll";
        /** @type {string} */
        this.me = username;
        this.opt = {
            doc: $("body"),
            win: false
        };
        $.extend(this.opt, defaultOptions);
        /** @type {number} */
        this.opt.snapbackspeed = 80;
        if (hash) {
            var key;
            for (key in self.opt) {
                if ("undefined" != typeof hash[key]) {
                    self.opt[key] = hash[key];
                }
            }
        }
        this.iddoc = (this.doc = self.opt.doc) && this.doc[0] ? this.doc[0].id || "" : "";
        /** @type {boolean} */
        this.ispage = /BODY|HTML/.test(self.opt.win ? self.opt.win[0].nodeName : this.doc[0].nodeName);
        /** @type {boolean} */
        this.haswrapper = false !== self.opt.win;
        this.win = self.opt.win || (this.ispage ? $(window) : this.doc);
        this.docscroll = this.ispage && !this.haswrapper ? $(window) : this.win;
        this.body = $("body");
        /** @type {boolean} */
        this.iframe = this.isfixed = this.viewport = false;
        /** @type {boolean} */
        this.isiframe = "IFRAME" == this.doc[0].nodeName && "IFRAME" == this.win[0].nodeName;
        /** @type {boolean} */
        this.istextarea = "TEXTAREA" == this.win[0].nodeName;
        /** @type {boolean} */
        this.forcescreen = false;
        /** @type {boolean} */
        this.canshowonmouseevent = "scroll" != self.opt.autohidemode;
        /** @type {boolean} */
        this.page = this.view = this.onzoomout = this.onzoomin = this.onscrollcancel = this.onscrollend = this.onscrollstart = this.onclick = this.ongesturezoom = this.onkeypress = this.onmousewheel = this.onmousemove = this.onmouseleave = this.onmouseup = this.onmousedown = false;
        this.scroll = {
            x: 0,
            y: 0
        };
        this.scrollratio = {
            x: 0,
            y: 0
        };
        /** @type {number} */
        this.cursorheight = 20;
        /** @type {number} */
        this.scrollvaluemax = 0;
        /** @type {boolean} */
        this.observerremover = this.observer = this.scrollmom = this.scrollrunning = this.checkrtlmode = false;
        do {
            /** @type {string} */
            this.id = "ascrail" + g++;
        } while (document.getElementById(this.id));
        /** @type {boolean} */
        this.hasmousefocus = this.hasfocus = this.zoomactive = this.zoom = this.selectiondrag = this.cursorfreezed = this.cursor = this.rail = false;
        /** @type {boolean} */
        this.visibility = true;
        /** @type {boolean} */
        this.hidden = this.locked = false;
        /** @type {boolean} */
        this.cursoractive = true;
        this.overflowx = self.opt.overflowx;
        this.overflowy = self.opt.overflowy;
        /** @type {boolean} */
        this.nativescrollingarea = false;
        /** @type {number} */
        this.checkarea = 0;
        /** @type {!Array} */
        this.events = [];
        this.saved = {};
        this.delaylist = {};
        this.synclist = {};
        /** @type {number} */
        this.lastdeltay = this.lastdeltax = 0;
        this.detected = _init();
        var options = $.extend({}, this.detected);
        this.ishwscroll = (this.canhwscroll = options.hastransform && self.opt.hwacceleration) && self.haswrapper;
        /** @type {boolean} */
        this.istouchcapable = false;
        if (options.cantouch && options.ischrome && !options.isios && !options.isandroid) {
            /** @type {boolean} */
            this.istouchcapable = true;
            /** @type {boolean} */
            options.cantouch = false;
        }
        if (options.cantouch && options.ismozilla && !options.isios) {
            /** @type {boolean} */
            this.istouchcapable = true;
            /** @type {boolean} */
            options.cantouch = false;
        }
        if (!self.opt.enablemouselockapi) {
            /** @type {boolean} */
            options.hasmousecapture = false;
            /** @type {boolean} */
            options.haspointerlock = false;
        }
        /**
         * @param {string} name
         * @param {!Function} delay
         * @param {number} value
         * @param {?} cb
         * @return {?}
         */
        this.delayed = function(name, delay, value, cb) {
            var options = self.delaylist[name];
            /** @type {number} */
            var time = (new Date).getTime();
            if (!cb && options && options.tt) {
                return false;
            }
            if (options && options.tt) {
                clearTimeout(options.tt);
            }
            if (options && options.last + value > time && !options.tt) {
                self.delaylist[name] = {
                    last: time + value,
                    tt: setTimeout(function() {
                        /** @type {number} */
                        self.delaylist[name].tt = 0;
                        delay.call();
                    }, value)
                };
            } else {
                if (!(options && options.tt)) {
                    self.delaylist[name] = {
                        last: time,
                        tt: 0
                    };
                    setTimeout(function() {
                        delay.call();
                    }, 0);
                }
            }
        };
        /**
         * @param {string} request
         * @param {!Function} callback
         * @param {number} wait
         * @return {undefined}
         */
        this.debounced = function(request, callback, wait) {
            var svcInParams = self.delaylist[request];
            (new Date).getTime();
            /** @type {!Function} */
            self.delaylist[request] = callback;
            if (!svcInParams) {
                setTimeout(function() {
                    var resolved = self.delaylist[request];
                    /** @type {boolean} */
                    self.delaylist[request] = false;
                    resolved.call();
                }, wait);
            }
        };
        /**
         * @param {string} type
         * @param {!Function} decoratorClass
         * @return {?}
         */
        this.synched = function(type, decoratorClass) {
            /** @type {!Function} */
            self.synclist[type] = decoratorClass;
            (function() {
                if (!self.onsync) {
                    fn(function() {
                        /** @type {boolean} */
                        self.onsync = false;
                        for (type in self.synclist) {
                            var thismethod = self.synclist[type];
                            if (thismethod) {
                                thismethod.call(self);
                            }
                            /** @type {boolean} */
                            self.synclist[type] = false;
                        }
                    });
                    /** @type {boolean} */
                    self.onsync = true;
                }
            })();
            return type;
        };
        /**
         * @param {string} objectPoolID
         * @return {undefined}
         */
        this.unsynched = function(objectPoolID) {
            if (self.synclist[objectPoolID]) {
                /** @type {boolean} */
                self.synclist[objectPoolID] = false;
            }
        };
        /**
         * @param {!Object} name
         * @param {string} value
         * @return {undefined}
         */
        this.css = function(name, value) {
            var i;
            for (i in value) {
                self.saved.css.push([name, i, name.css(i)]);
                name.css(i, value[i]);
            }
        };
        /**
         * @param {!Object} name
         * @return {?}
         */
        this.scrollTop = function(name) {
            return "undefined" == typeof name ? self.getScrollTop() : self.setScrollTop(name);
        };
        /**
         * @param {number} element
         * @return {?}
         */
        this.scrollLeft = function(element) {
            return "undefined" == typeof element ? self.getScrollLeft() : self.setScrollLeft(element);
        };
        /**
         * @param {?} st
         * @param {string} ed
         * @param {number} match
         * @param {number} p1
         * @param {?} p2
         * @param {number} mercX
         * @param {number} mercY
         * @return {undefined}
         */
        BezierClass = function(st, ed, match, p1, p2, mercX, mercY) {
            this.st = st;
            /** @type {string} */
            this.ed = ed;
            /** @type {number} */
            this.spd = match;
            this.p1 = p1 || 0;
            this.p2 = p2 || 1;
            this.p3 = mercX || 0;
            this.p4 = mercY || 1;
            /** @type {number} */
            this.ts = (new Date).getTime();
            /** @type {number} */
            this.df = this.ed - this.st;
        };
        BezierClass.prototype = {
            B2: function(t) {
                return 3 * t * t * (1 - t);
            },
            B3: function(t) {
                return 3 * t * (1 - t) * (1 - t);
            },
            B4: function(t) {
                return (1 - t) * (1 - t) * (1 - t);
            },
            getNow: function() {
                /** @type {number} */
                var x = 1 - ((new Date).getTime() - this.ts) / this.spd;
                var ipw = this.B2(x) + this.B3(x) + this.B4(x);
                return 0 > x ? this.ed : this.st + Math.round(this.df * ipw);
            },
            update: function(type, url) {
                this.st = this.getNow();
                this.ed = type;
                this.spd = url;
                /** @type {number} */
                this.ts = (new Date).getTime();
                /** @type {number} */
                this.df = this.ed - this.st;
                return this;
            }
        };
        if (this.ishwscroll) {
            /**
             * @return {?}
             */
            var create = function() {
                var curTitle = self.doc.css(options.trstyle);
                return curTitle && "matrix" == curTitle.substr(0, 6) ? curTitle.replace(/^.*\((.*)\)$/g, "$1").replace(/px/g, "").split(/, +/) : false;
            };
            this.doc.translate = {
                x: 0,
                y: 0,
                tx: "0px",
                ty: "0px"
            };
            if (options.hastranslate3d && options.isios) {
                this.doc.css("-webkit-backface-visibility", "hidden");
            }
            /**
             * @param {string} element
             * @return {?}
             */
            this.getScrollTop = function(element) {
                if (!element) {
                    if (element = create()) {
                        return 16 == element.length ? -element[13] : -element[5];
                    }
                    if (self.timerscroll && self.timerscroll.bz) {
                        return self.timerscroll.bz.getNow();
                    }
                }
                return self.doc.translate.y;
            };
            /**
             * @param {string} element
             * @return {?}
             */
            this.getScrollLeft = function(element) {
                if (!element) {
                    if (element = create()) {
                        return 16 == element.length ? -element[12] : -element[4];
                    }
                    if (self.timerscroll && self.timerscroll.bh) {
                        return self.timerscroll.bh.getNow();
                    }
                }
                return self.doc.translate.x;
            };
            /** @type {!Function} */
            this.notifyScrollEvent = document.createEvent ? function(lk) {
                /** @type {(Event|null)} */
                var evt = document.createEvent("UIEvents");
                evt.initUIEvent("scroll", false, true, window, 1);
                lk.dispatchEvent(evt);
            } : document.fireEvent ? function(window) {
                var e = document.createEventObject();
                window.fireEvent("onscroll");
                /** @type {boolean} */
                e.cancelBubble = true;
            } : function(b, canCreateDiscussions) {};
            if (options.hastranslate3d && self.opt.enabletranslate3d) {
                /**
                 * @param {number} value
                 * @param {boolean} element
                 * @return {undefined}
                 */
                this.setScrollTop = function(value, element) {
                    /** @type {number} */
                    self.doc.translate.y = value;
                    /** @type {string} */
                    self.doc.translate.ty = -1 * value + "px";
                    self.doc.css(options.trstyle, "translate3d(" + self.doc.translate.tx + "," + self.doc.translate.ty + ",0px)");
                    if (!element) {
                        self.notifyScrollEvent(self.win[0]);
                    }
                };
                /**
                 * @param {number} pos
                 * @param {?} n
                 * @return {undefined}
                 */
                this.setScrollLeft = function(pos, n) {
                    /** @type {number} */
                    self.doc.translate.x = pos;
                    /** @type {string} */
                    self.doc.translate.tx = -1 * pos + "px";
                    self.doc.css(options.trstyle, "translate3d(" + self.doc.translate.tx + "," + self.doc.translate.ty + ",0px)");
                    if (!n) {
                        self.notifyScrollEvent(self.win[0]);
                    }
                };
            } else {
                /**
                 * @param {number} value
                 * @param {boolean} element
                 * @return {undefined}
                 */
                this.setScrollTop = function(value, element) {
                    /** @type {number} */
                    self.doc.translate.y = value;
                    /** @type {string} */
                    self.doc.translate.ty = -1 * value + "px";
                    self.doc.css(options.trstyle, "translate(" + self.doc.translate.tx + "," + self.doc.translate.ty + ")");
                    if (!element) {
                        self.notifyScrollEvent(self.win[0]);
                    }
                };
                /**
                 * @param {number} pos
                 * @param {?} n
                 * @return {undefined}
                 */
                this.setScrollLeft = function(pos, n) {
                    /** @type {number} */
                    self.doc.translate.x = pos;
                    /** @type {string} */
                    self.doc.translate.tx = -1 * pos + "px";
                    self.doc.css(options.trstyle, "translate(" + self.doc.translate.tx + "," + self.doc.translate.ty + ")");
                    if (!n) {
                        self.notifyScrollEvent(self.win[0]);
                    }
                };
            }
        } else {
            /**
             * @return {?}
             */
            this.getScrollTop = function() {
                return self.docscroll.scrollTop();
            };
            /**
             * @param {!Object} value
             * @return {?}
             */
            this.setScrollTop = function(value) {
                return self.docscroll.scrollTop(value);
            };
            /**
             * @return {?}
             */
            this.getScrollLeft = function() {
                return self.docscroll.scrollLeft();
            };
            /**
             * @param {number} value
             * @return {?}
             */
            this.setScrollLeft = function(value) {
                return self.docscroll.scrollLeft(value);
            };
        }
        /**
         * @param {!Function} event
         * @return {?}
         */
        this.getTarget = function(event) {
            return event ? event.target ? event.target : event.srcElement ? event.srcElement : false : false;
        };
        /**
         * @param {!Object} e
         * @param {?} id
         * @return {?}
         */
        this.hasParent = function(e, id) {
            if (!e) {
                return false;
            }
            e = e.target || e.srcElement || e || false;
            for (; e && e.id != id;) {
                e = e.parentNode || false;
            }
            return false !== e;
        };
        var size = {
            thin: 1,
            medium: 3,
            thick: 5
        };
        /**
         * @return {?}
         */
        this.getOffset = function() {
            if (self.isfixed) {
                return {
                    top: parseFloat(self.win.css("top")),
                    left: parseFloat(self.win.css("left"))
                };
            }
            if (!self.viewport) {
                return self.win.offset();
            }
            var elpos = self.win.offset();
            var cpos = self.viewport.offset();
            return {
                top: elpos.top - cpos.top + self.viewport.scrollTop(),
                left: elpos.left - cpos.left + self.viewport.scrollLeft()
            };
        };
        /**
         * @param {string} height
         * @return {undefined}
         */
        this.updateScrollBar = function(height) {
            if (self.ishwscroll) {
                self.rail.css({
                    height: self.win.innerHeight()
                });
                if (self.railh) {
                    self.railh.css({
                        width: self.win.innerWidth()
                    });
                }
            } else {
                var insets = self.getOffset();
                var y = insets.top;
                var x = insets.left;
                y = y + resize(self.win, "border-top-width", true);
                self.win.outerWidth();
                self.win.innerWidth();
                x = x + (self.rail.align ? self.win.outerWidth() - resize(self.win, "border-right-width") - self.rail.width : resize(self.win, "border-left-width"));
                var tooltipOffset = self.opt.railoffset;
                if (tooltipOffset) {
                    if (tooltipOffset.top) {
                        y = y + tooltipOffset.top;
                    }
                    if (self.rail.align && tooltipOffset.left) {
                        x = x + tooltipOffset.left;
                    }
                }
                if (!self.locked) {
                    self.rail.css({
                        top: y,
                        left: x,
                        height: height ? height.h : self.win.innerHeight()
                    });
                }
                if (self.zoom) {
                    self.zoom.css({
                        top: y + 1,
                        left: 1 == self.rail.align ? x - 20 : x + self.rail.width + 4
                    });
                }
                if (self.railh && !self.locked) {
                    y = insets.top;
                    x = insets.left;
                    height = self.railh.align ? y + resize(self.win, "border-top-width", true) + self.win.innerHeight() - self.railh.height : y + resize(self.win, "border-top-width", true);
                    x = x + resize(self.win, "border-left-width");
                    self.railh.css({
                        top: height,
                        left: x,
                        width: self.railh.width
                    });
                }
            }
        };
        /**
         * @param {!Object} event
         * @param {string} c
         * @param {number} e
         * @return {undefined}
         */
        this.doRailClick = function(event, c, e) {
            var m;
            if (!self.locked) {
                self.cancelEvent(event);
                if (c) {
                    c = e ? self.doScrollLeft : self.doScrollTop;
                    /** @type {number} */
                    m = e ? (event.pageX - self.railh.offset().left - self.cursorwidth / 2) * self.scrollratio.x : (event.pageY - self.rail.offset().top - self.cursorheight / 2) * self.scrollratio.y;
                    c(m);
                } else {
                    c = e ? self.doScrollLeftBy : self.doScrollBy;
                    m = e ? self.scroll.x : self.scroll.y;
                    /** @type {number} */
                    event = e ? event.pageX - self.railh.offset().left : event.pageY - self.rail.offset().top;
                    e = e ? self.view.w : self.view.h;
                    if (m >= event) {
                        c(e);
                    } else {
                        c(-e);
                    }
                }
            }
        };
        self.hasanimationframe = fn;
        self.hascancelanimationframe = callback;
        if (self.hasanimationframe) {
            if (!self.hascancelanimationframe) {
                /**
                 * @return {undefined}
                 */
                callback = function() {
                    /** @type {boolean} */
                    self.cancelAnimationFrame = true;
                };
            }
        } else {
            /**
             * @param {!Function} callback
             * @return {?}
             */
            fn = function(callback) {
                return setTimeout(callback, 15 - Math.floor(+new Date / 1E3) % 16);
            };
            /** @type {function((null|number|undefined)): undefined} */
            callback = clearInterval;
        }
        /**
         * @return {?}
         */
        this.init = function() {
            /** @type {!Array} */
            self.saved.css = [];
            if (options.isie7mobile) {
                return true;
            }
            if (options.hasmstouch) {
                self.css(self.ispage ? $("html") : self.win, {
                    "-ms-touch-action": "none"
                });
            }
            /** @type {string} */
            self.zindex = "auto";
            self.zindex = self.ispage || "auto" != self.opt.zindex ? self.opt.zindex : init() || "auto";
            if (!self.ispage && "auto" != self.zindex && self.zindex > z) {
                z = self.zindex;
            }
            if (self.isie && 0 == self.zindex && "auto" == self.opt.zindex) {
                /** @type {string} */
                self.zindex = "auto";
            }
            if (!self.ispage || !options.cantouch && !options.isieold && !options.isie9mobile) {
                var key = self.docscroll;
                if (self.ispage) {
                    key = self.haswrapper ? self.win : self.doc;
                }
                if (!options.isie9mobile) {
                    self.css(key, {
                        "overflow-y": "hidden"
                    });
                }
                if (self.ispage && options.isie7) {
                    if ("BODY" == self.doc[0].nodeName) {
                        self.css($("html"), {
                            "overflow-y": "hidden"
                        });
                    } else {
                        if ("HTML" == self.doc[0].nodeName) {
                            self.css($("body"), {
                                "overflow-y": "hidden"
                            });
                        }
                    }
                }
                if (!(!options.isios || self.ispage || self.haswrapper)) {
                    self.css($("body"), {
                        "-webkit-overflow-scrolling": "touch"
                    });
                }
                var div = $(document.createElement("div"));
                div.css({
                    position: "relative",
                    top: 0,
                    "float": "right",
                    width: self.opt.cursorwidth,
                    height: "0px",
                    "background-color": self.opt.cursorcolor,
                    border: self.opt.cursorborder,
                    "background-clip": "padding-box",
                    "-webkit-border-radius": self.opt.cursorborderradius,
                    "-moz-border-radius": self.opt.cursorborderradius,
                    "border-radius": self.opt.cursorborderradius
                });
                /** @type {number} */
                div.hborder = parseFloat(div.outerHeight() - div.innerHeight());
                self.cursor = div;
                var element = $(document.createElement("div"));
                element.attr("id", self.id);
                element.addClass("nicescroll-rails");
                var keyboardHeight;
                var direction;
                /** @type {!Array} */
                var directions = ["left", "right"];
                var i;
                for (i in directions) {
                    direction = directions[i];
                    if (keyboardHeight = self.opt.railpadding[direction]) {
                        element.css("padding-" + direction, keyboardHeight + "px");
                    } else {
                        /** @type {number} */
                        self.opt.railpadding[direction] = 0;
                    }
                }
                element.append(div);
                element.width = Math.max(parseFloat(self.opt.cursorwidth), div.outerWidth()) + self.opt.railpadding.left + self.opt.railpadding.right;
                element.css({
                    width: element.width + "px",
                    zIndex: self.zindex,
                    background: self.opt.background,
                    cursor: "default"
                });
                /** @type {boolean} */
                element.visibility = true;
                /** @type {boolean} */
                element.scrollable = true;
                /** @type {number} */
                element.align = "left" == self.opt.railalign ? 0 : 1;
                self.rail = element;
                /** @type {boolean} */
                div = self.rail.drag = false;
                if (!(!self.opt.boxzoom || self.ispage || options.isieold)) {
                    /** @type {!Element} */
                    div = document.createElement("div");
                    self.bind(div, "click", self.doZoom);
                    self.zoom = $(div);
                    self.zoom.css({
                        cursor: "pointer",
                        "z-index": self.zindex,
                        backgroundImage: "url(" + e + "zoomico.png)",
                        height: 18,
                        width: 18,
                        backgroundPosition: "0px 0px"
                    });
                    if (self.opt.dblclickzoom) {
                        self.bind(self.win, "dblclick", self.doZoom);
                    }
                    if (options.cantouch && self.opt.gesturezoom) {
                        /**
                         * @param {!Object} event
                         * @return {?}
                         */
                        self.ongesturezoom = function(event) {
                            if (1.5 < event.scale) {
                                self.doZoomIn(event);
                            }
                            if (.8 > event.scale) {
                                self.doZoomOut(event);
                            }
                            return self.cancelEvent(event);
                        };
                        self.bind(self.win, "gestureend", self.ongesturezoom);
                    }
                }
                /** @type {boolean} */
                self.railh = false;
                if (self.opt.horizrailenabled) {
                    self.css(key, {
                        "overflow-x": "hidden"
                    });
                    div = $(document.createElement("div"));
                    div.css({
                        position: "relative",
                        top: 0,
                        height: self.opt.cursorwidth,
                        width: "0px",
                        "background-color": self.opt.cursorcolor,
                        border: self.opt.cursorborder,
                        "background-clip": "padding-box",
                        "-webkit-border-radius": self.opt.cursorborderradius,
                        "-moz-border-radius": self.opt.cursorborderradius,
                        "border-radius": self.opt.cursorborderradius
                    });
                    /** @type {number} */
                    div.wborder = parseFloat(div.outerWidth() - div.innerWidth());
                    self.cursorh = div;
                    var el = $(document.createElement("div"));
                    el.attr("id", self.id + "-hr");
                    el.addClass("nicescroll-rails");
                    /** @type {number} */
                    el.height = Math.max(parseFloat(self.opt.cursorwidth), div.outerHeight());
                    el.css({
                        height: el.height + "px",
                        zIndex: self.zindex,
                        background: self.opt.background
                    });
                    el.append(div);
                    /** @type {boolean} */
                    el.visibility = true;
                    /** @type {boolean} */
                    el.scrollable = true;
                    /** @type {number} */
                    el.align = "top" == self.opt.railvalign ? 0 : 1;
                    self.railh = el;
                    /** @type {boolean} */
                    self.railh.drag = false;
                }
                if (self.ispage) {
                    element.css({
                        position: "fixed",
                        top: "0px",
                        height: "100%"
                    });
                    if (element.align) {
                        element.css({
                            right: "0px"
                        });
                    } else {
                        element.css({
                            left: "0px"
                        });
                    }
                    self.body.append(element);
                    if (self.railh) {
                        el.css({
                            position: "fixed",
                            left: "0px",
                            width: "100%"
                        });
                        if (el.align) {
                            el.css({
                                bottom: "0px"
                            });
                        } else {
                            el.css({
                                top: "0px"
                            });
                        }
                        self.body.append(el);
                    }
                } else {
                    if (self.ishwscroll) {
                        if ("static" == self.win.css("position")) {
                            self.css(self.win, {
                                position: "relative"
                            });
                        }
                        key = "HTML" == self.win[0].nodeName ? self.body : self.win;
                        if (self.zoom) {
                            self.zoom.css({
                                position: "absolute",
                                top: 1,
                                right: 0,
                                "margin-right": element.width + 4
                            });
                            key.append(self.zoom);
                        }
                        element.css({
                            position: "absolute",
                            top: 0
                        });
                        if (element.align) {
                            element.css({
                                right: 0
                            });
                        } else {
                            element.css({
                                left: 0
                            });
                        }
                        key.append(element);
                        if (el) {
                            el.css({
                                position: "absolute",
                                left: 0,
                                bottom: 0
                            });
                            if (el.align) {
                                el.css({
                                    bottom: 0
                                });
                            } else {
                                el.css({
                                    top: 0
                                });
                            }
                            key.append(el);
                        }
                    } else {
                        /** @type {boolean} */
                        self.isfixed = "fixed" == self.win.css("position");
                        /** @type {string} */
                        key = self.isfixed ? "fixed" : "absolute";
                        if (!self.isfixed) {
                            self.viewport = self.getViewport(self.win[0]);
                        }
                        if (self.viewport) {
                            self.body = self.viewport;
                            if (0 == /relative|absolute/.test(self.viewport.css("position"))) {
                                self.css(self.viewport, {
                                    position: "relative"
                                });
                            }
                        }
                        element.css({
                            position: key
                        });
                        if (self.zoom) {
                            self.zoom.css({
                                position: key
                            });
                        }
                        self.updateScrollBar();
                        self.body.append(element);
                        if (self.zoom) {
                            self.body.append(self.zoom);
                        }
                        if (self.railh) {
                            el.css({
                                position: key
                            });
                            self.body.append(el);
                        }
                    }
                    if (options.isios) {
                        self.css(self.win, {
                            "-webkit-tap-highlight-color": "rgba(0,0,0,0)",
                            "-webkit-touch-callout": "none"
                        });
                    }
                    if (options.isie && self.opt.disableoutline) {
                        self.win.attr("hideFocus", "true");
                    }
                    if (options.iswebkit && self.opt.disableoutline) {
                        self.win.css({
                            outline: "none"
                        });
                    }
                }
                if (false === self.opt.autohidemode) {
                    /** @type {boolean} */
                    self.autohidedom = false;
                    self.rail.css({
                        opacity: self.opt.cursoropacitymax
                    });
                    if (self.railh) {
                        self.railh.css({
                            opacity: self.opt.cursoropacitymax
                        });
                    }
                } else {
                    if (true === self.opt.autohidemode) {
                        self.autohidedom = $().add(self.rail);
                        if (options.isie8) {
                            self.autohidedom = self.autohidedom.add(self.cursor);
                        }
                        if (self.railh) {
                            self.autohidedom = self.autohidedom.add(self.railh);
                        }
                        if (self.railh && options.isie8) {
                            self.autohidedom = self.autohidedom.add(self.cursorh);
                        }
                    } else {
                        if ("scroll" == self.opt.autohidemode) {
                            self.autohidedom = $().add(self.rail);
                            if (self.railh) {
                                self.autohidedom = self.autohidedom.add(self.railh);
                            }
                        } else {
                            if ("cursor" == self.opt.autohidemode) {
                                self.autohidedom = $().add(self.cursor);
                                if (self.railh) {
                                    self.autohidedom = self.autohidedom.add(self.cursorh);
                                }
                            } else {
                                if ("hidden" == self.opt.autohidemode) {
                                    /** @type {boolean} */
                                    self.autohidedom = false;
                                    self.hide();
                                    /** @type {boolean} */
                                    self.locked = false;
                                }
                            }
                        }
                    }
                }
                if (options.isie9mobile) {
                    self.scrollmom = new Console(self);
                    /**
                     * @param {number} y
                     * @return {?}
                     */
                    self.onmangotouch = function(y) {
                        y = self.getScrollTop();
                        var x = self.getScrollLeft();
                        if (y == self.scrollmom.lastscrolly && x == self.scrollmom.lastscrollx) {
                            return true;
                        }
                        /** @type {number} */
                        var j = y - self.mangotouch.sy;
                        /** @type {number} */
                        var d = x - self.mangotouch.sx;
                        if (0 != Math.round(Math.sqrt(Math.pow(d, 2) + Math.pow(j, 2)))) {
                            /** @type {number} */
                            var dryHandler = 0 > j ? -1 : 1;
                            /** @type {number} */
                            var g = 0 > d ? -1 : 1;
                            /** @type {number} */
                            var tm = +new Date;
                            if (self.mangotouch.lazy) {
                                clearTimeout(self.mangotouch.lazy);
                            }
                            if (80 < tm - self.mangotouch.tm || self.mangotouch.dry != dryHandler || self.mangotouch.drx != g) {
                                self.scrollmom.stop();
                                self.scrollmom.reset(x, y);
                                /** @type {number} */
                                self.mangotouch.sy = y;
                                /** @type {number} */
                                self.mangotouch.ly = y;
                                self.mangotouch.sx = x;
                                self.mangotouch.lx = x;
                                /** @type {number} */
                                self.mangotouch.dry = dryHandler;
                                /** @type {number} */
                                self.mangotouch.drx = g;
                                /** @type {number} */
                                self.mangotouch.tm = tm;
                            } else {
                                self.scrollmom.stop();
                                self.scrollmom.update(self.mangotouch.sx - d, self.mangotouch.sy - j);
                                /** @type {number} */
                                self.mangotouch.tm = tm;
                                /** @type {number} */
                                j = Math.max(Math.abs(self.mangotouch.ly - y), Math.abs(self.mangotouch.lx - x));
                                /** @type {number} */
                                self.mangotouch.ly = y;
                                self.mangotouch.lx = x;
                                if (2 < j) {
                                    /** @type {number} */
                                    self.mangotouch.lazy = setTimeout(function() {
                                        /** @type {boolean} */
                                        self.mangotouch.lazy = false;
                                        /** @type {number} */
                                        self.mangotouch.dry = 0;
                                        /** @type {number} */
                                        self.mangotouch.drx = 0;
                                        /** @type {number} */
                                        self.mangotouch.tm = 0;
                                        self.scrollmom.doMomentum(30);
                                    }, 100);
                                }
                            }
                        }
                    };
                    element = self.getScrollTop();
                    el = self.getScrollLeft();
                    self.mangotouch = {
                        sy: element,
                        ly: element,
                        dry: 0,
                        sx: el,
                        lx: el,
                        drx: 0,
                        lazy: false,
                        tm: 0
                    };
                    self.bind(self.docscroll, "scroll", self.onmangotouch);
                } else {
                    if (options.cantouch || self.istouchcapable || self.opt.touchbehavior || options.hasmstouch) {
                        self.scrollmom = new Console(self);
                        /**
                         * @param {!Object} e
                         * @return {?}
                         */
                        self.ontouchstart = function(e) {
                            if (e.pointerType && 2 != e.pointerType) {
                                return false;
                            }
                            if (!self.locked) {
                                if (options.hasmstouch) {
                                    var el = e.target ? e.target : false;
                                    for (; el;) {
                                        var pos = $(el).getNiceScroll();
                                        if (0 < pos.length && pos[0].me == self.me) {
                                            break;
                                        }
                                        if (0 < pos.length) {
                                            return false;
                                        }
                                        if ("DIV" == el.nodeName && el.id == self.id) {
                                            break;
                                        }
                                        el = el.parentNode ? el.parentNode : false;
                                    }
                                }
                                self.cancelScroll();
                                if ((el = self.getTarget(e)) && /INPUT/i.test(el.nodeName) && /range/i.test(el.type)) {
                                    return self.stopPropagation(e);
                                }
                                if (!("clientX" in e) && "changedTouches" in e) {
                                    e.clientX = e.changedTouches[0].clientX;
                                    e.clientY = e.changedTouches[0].clientY;
                                }
                                if (self.forcescreen) {
                                    /** @type {!Object} */
                                    pos = e;
                                    e = {
                                        original: e.original ? e.original : e
                                    };
                                    e.clientX = pos.screenX;
                                    e.clientY = pos.screenY;
                                }
                                self.rail.drag = {
                                    x: e.clientX,
                                    y: e.clientY,
                                    sx: self.scroll.x,
                                    sy: self.scroll.y,
                                    st: self.getScrollTop(),
                                    sl: self.getScrollLeft(),
                                    pt: 2,
                                    dl: false
                                };
                                if (self.ispage || !self.opt.directionlockdeadzone) {
                                    /** @type {string} */
                                    self.rail.drag.dl = "f";
                                } else {
                                    pos = $(window).width();
                                    var min = $(window).height();
                                    /** @type {number} */
                                    min = Math.max(0, Math.max(document.body.scrollHeight, document.documentElement.scrollHeight) - min);
                                    /** @type {number} */
                                    pos = Math.max(0, Math.max(document.body.scrollWidth, document.documentElement.scrollWidth) - pos);
                                    /** @type {(boolean|string)} */
                                    self.rail.drag.ck = !self.rail.scrollable && self.railh.scrollable ? 0 < min ? "v" : false : self.rail.scrollable && !self.railh.scrollable ? 0 < pos ? "h" : false : false;
                                    if (!self.rail.drag.ck) {
                                        /** @type {string} */
                                        self.rail.drag.dl = "f";
                                    }
                                }
                                if (self.opt.touchbehavior && self.isiframe && options.isie) {
                                    pos = self.win.position();
                                    self.rail.drag.x += pos.left;
                                    self.rail.drag.y += pos.top;
                                }
                                /** @type {boolean} */
                                self.hasmoving = false;
                                /** @type {boolean} */
                                self.lastmouseup = false;
                                self.scrollmom.reset(e.clientX, e.clientY);
                                if (!options.cantouch && !this.istouchcapable && !options.hasmstouch) {
                                    if (!el || !/INPUT|SELECT|TEXTAREA/i.test(el.nodeName)) {
                                        return !self.ispage && options.hasmousecapture && el.setCapture(), self.cancelEvent(e);
                                    }
                                    if (/SUBMIT|CANCEL|BUTTON/i.test($(el).attr("type"))) {
                                        pc = {
                                            tg: el,
                                            click: false
                                        };
                                        self.preventclick = pc;
                                    }
                                }
                            }
                        };
                        /**
                         * @param {!Object} event
                         * @return {?}
                         */
                        self.ontouchend = function(event) {
                            if (event.pointerType && 2 != event.pointerType) {
                                return false;
                            }
                            if (self.rail.drag && 2 == self.rail.drag.pt && (self.scrollmom.doMomentum(), self.rail.drag = false, self.hasmoving && (self.hasmoving = false, self.lastmouseup = true, self.hideCursor(), options.hasmousecapture && document.releaseCapture(), !options.cantouch))) {
                                return self.cancelEvent(event);
                            }
                        };
                        var override = self.opt.touchbehavior && self.isiframe && !options.hasmousecapture;
                        /**
                         * @param {!Object} event
                         * @param {number} t
                         * @return {?}
                         */
                        self.ontouchmove = function(event, t) {
                            if (event.pointerType && 2 != event.pointerType) {
                                return false;
                            }
                            if (self.rail.drag && 2 == self.rail.drag.pt) {
                                if (options.cantouch && "undefined" == typeof event.original) {
                                    return true;
                                }
                                /** @type {boolean} */
                                self.hasmoving = true;
                                if (self.preventclick && !self.preventclick.click) {
                                    self.preventclick.click = self.preventclick.tg.onclick || false;
                                    self.preventclick.tg.onclick = self.onpreventclick;
                                }
                                event = $.extend({
                                    original: event
                                }, event);
                                if ("changedTouches" in event) {
                                    event.clientX = event.changedTouches[0].clientX;
                                    event.clientY = event.changedTouches[0].clientY;
                                }
                                if (self.forcescreen) {
                                    /** @type {!Object} */
                                    var e = event;
                                    event = {
                                        original: event.original ? event.original : event
                                    };
                                    event.clientX = e.screenX;
                                    event.clientY = e.screenY;
                                }
                                /** @type {number} */
                                e = ofy = 0;
                                if (override && !t) {
                                    t = self.win.position();
                                    /** @type {number} */
                                    e = -t.left;
                                    /** @type {number} */
                                    ofy = -t.top;
                                }
                                var value = event.clientY + ofy;
                                /** @type {number} */
                                t = value - self.rail.drag.y;
                                var c = event.clientX + e;
                                /** @type {number} */
                                var left = c - self.rail.drag.x;
                                /** @type {number} */
                                var h = self.rail.drag.st - t;
                                if (self.ishwscroll && self.opt.bouncescroll) {
                                    if (0 > h) {
                                        /** @type {number} */
                                        h = Math.round(h / 2);
                                    } else {
                                        if (h > self.page.maxh) {
                                            h = self.page.maxh + Math.round((h - self.page.maxh) / 2);
                                        }
                                    }
                                } else {
                                    if (0 > h) {
                                        /** @type {number} */
                                        value = h = 0;
                                    }
                                    if (h > self.page.maxh) {
                                        h = self.page.maxh;
                                        /** @type {number} */
                                        value = 0;
                                    }
                                }
                                if (self.railh && self.railh.scrollable) {
                                    /** @type {number} */
                                    var w = self.rail.drag.sl - left;
                                    if (self.ishwscroll && self.opt.bouncescroll) {
                                        if (0 > w) {
                                            /** @type {number} */
                                            w = Math.round(w / 2);
                                        } else {
                                            if (w > self.page.maxw) {
                                                w = self.page.maxw + Math.round((w - self.page.maxw) / 2);
                                            }
                                        }
                                    } else {
                                        if (0 > w) {
                                            /** @type {number} */
                                            c = w = 0;
                                        }
                                        if (w > self.page.maxw) {
                                            w = self.page.maxw;
                                            /** @type {number} */
                                            c = 0;
                                        }
                                    }
                                }
                                /** @type {boolean} */
                                e = false;
                                if (self.rail.drag.dl) {
                                    /** @type {boolean} */
                                    e = true;
                                    if ("v" == self.rail.drag.dl) {
                                        w = self.rail.drag.sl;
                                    } else {
                                        if ("h" == self.rail.drag.dl) {
                                            h = self.rail.drag.st;
                                        }
                                    }
                                } else {
                                    /** @type {number} */
                                    t = Math.abs(t);
                                    /** @type {number} */
                                    left = Math.abs(left);
                                    var attack = self.opt.directionlockdeadzone;
                                    if ("v" == self.rail.drag.ck) {
                                        if (t > attack && left <= .3 * t) {
                                            return self.rail.drag = false, true;
                                        }
                                        if (left > attack) {
                                            /** @type {string} */
                                            self.rail.drag.dl = "f";
                                            $("body").scrollTop($("body").scrollTop());
                                        }
                                    } else {
                                        if ("h" == self.rail.drag.ck) {
                                            if (left > attack && t <= .3 * az) {
                                                return self.rail.drag = false, true;
                                            }
                                            if (t > attack) {
                                                /** @type {string} */
                                                self.rail.drag.dl = "f";
                                                $("body").scrollLeft($("body").scrollLeft());
                                            }
                                        }
                                    }
                                }
                                self.synched("touchmove", function() {
                                    if (self.rail.drag && 2 == self.rail.drag.pt) {
                                        if (self.prepareTransition) {
                                            self.prepareTransition(0);
                                        }
                                        if (self.rail.scrollable) {
                                            self.setScrollTop(h);
                                        }
                                        self.scrollmom.update(c, value);
                                        if (self.railh && self.railh.scrollable) {
                                            self.setScrollLeft(w);
                                            self.showCursor(h, w);
                                        } else {
                                            self.showCursor(h);
                                        }
                                        if (options.isie10) {
                                            document.selection.clear();
                                        }
                                    }
                                });
                                if (options.ischrome && self.istouchcapable) {
                                    /** @type {boolean} */
                                    e = false;
                                }
                                if (e) {
                                    return self.cancelEvent(event);
                                }
                            }
                        };
                    }
                    /**
                     * @param {!Object} event
                     * @param {!HTMLElement} button
                     * @return {?}
                     */
                    self.onmousedown = function(event, button) {
                        if (!self.rail.drag || 1 == self.rail.drag.pt) {
                            if (self.locked) {
                                return self.cancelEvent(event);
                            }
                            self.cancelScroll();
                            self.rail.drag = {
                                x: event.clientX,
                                y: event.clientY,
                                sx: self.scroll.x,
                                sy: self.scroll.y,
                                pt: 1,
                                hr: !!button
                            };
                            button = self.getTarget(event);
                            if (!self.ispage && options.hasmousecapture) {
                                button.setCapture();
                            }
                            if (self.isiframe && !options.hasmousecapture) {
                                self.saved.csspointerevents = self.doc.css("pointer-events");
                                self.css(self.doc, {
                                    "pointer-events": "none"
                                });
                            }
                            return self.cancelEvent(event);
                        }
                    };
                    /**
                     * @param {!Object} event
                     * @return {?}
                     */
                    self.onmouseup = function(event) {
                        if (self.rail.drag && (options.hasmousecapture && document.releaseCapture(), self.isiframe && !options.hasmousecapture && self.doc.css("pointer-events", self.saved.csspointerevents), 1 == self.rail.drag.pt)) {
                            return self.rail.drag = false, self.cancelEvent(event);
                        }
                    };
                    if (options.isie8) {
                        /**
                         * @param {!Object} event
                         * @return {?}
                         */
                        self.onmouseleave = function(event) {
                            if (self.rail.drag && (options.hasmousecapture && document.releaseCapture(), self.isiframe && !options.hasmousecapture && self.doc.css("pointer-events", self.saved.csspointerevents), 1 == self.rail.drag.pt)) {
                                return self.rail.drag = false, self.cancelEvent(event);
                            }
                        };
                    }
                    /**
                     * @param {!Object} e
                     * @return {?}
                     */
                    self.onmousemove = function(e) {
                        if (self.rail.drag && 1 == self.rail.drag.pt) {
                            if (options.ischrome && 0 == e.which) {
                                return self.onmouseup(e);
                            }
                            /** @type {boolean} */
                            self.cursorfreezed = true;
                            if (self.rail.drag.hr) {
                                self.scroll.x = self.rail.drag.sx + (e.clientX - self.rail.drag.x);
                                if (0 > self.scroll.x) {
                                    /** @type {number} */
                                    self.scroll.x = 0;
                                }
                                var max = self.scrollvaluemaxw;
                                if (self.scroll.x > max) {
                                    self.scroll.x = max;
                                }
                            } else {
                                self.scroll.y = self.rail.drag.sy + (e.clientY - self.rail.drag.y);
                                if (0 > self.scroll.y) {
                                    /** @type {number} */
                                    self.scroll.y = 0;
                                }
                                max = self.scrollvaluemax;
                                if (self.scroll.y > max) {
                                    self.scroll.y = max;
                                }
                            }
                            self.synched("mousemove", function() {
                                if (self.rail.drag && 1 == self.rail.drag.pt) {
                                    self.showCursor();
                                    if (self.rail.drag.hr) {
                                        self.doScrollLeft(Math.round(self.scroll.x * self.scrollratio.x), self.opt.cursordragspeed);
                                    } else {
                                        self.doScrollTop(Math.round(self.scroll.y * self.scrollratio.y), self.opt.cursordragspeed);
                                    }
                                }
                            });
                            return self.cancelEvent(e);
                        }
                    };
                    if (options.cantouch || self.opt.touchbehavior) {
                        /**
                         * @param {!Function} event
                         * @return {?}
                         */
                        self.onpreventclick = function(event) {
                            if (self.preventclick) {
                                return self.preventclick.tg.onclick = self.preventclick.click, self.preventclick = false, self.cancelEvent(event);
                            }
                        };
                        self.bind(self.win, "mousedown", self.ontouchstart);
                        /** @type {(boolean|function(!Function): ?)} */
                        self.onclick = options.isios ? false : function(event) {
                            return self.lastmouseup ? (self.lastmouseup = false, self.cancelEvent(event)) : true;
                        };
                        if (self.opt.grabcursorenabled && options.cursorgrabvalue) {
                            self.css(self.ispage ? self.doc : self.win, {
                                cursor: options.cursorgrabvalue
                            });
                            self.css(self.rail, {
                                cursor: options.cursorgrabvalue
                            });
                        }
                    } else {
                        /**
                         * @param {string} a
                         * @return {undefined}
                         */
                        var func = function(a) {
                            if (self.selectiondrag) {
                                if (a) {
                                    var b = self.win.outerHeight();
                                    /** @type {number} */
                                    a = a.pageY - self.selectiondrag.top;
                                    if (0 < a && a < b) {
                                        /** @type {number} */
                                        a = 0;
                                    }
                                    if (a >= b) {
                                        /** @type {number} */
                                        a = a - b;
                                    }
                                    /** @type {string} */
                                    self.selectiondrag.df = a;
                                }
                                if (0 != self.selectiondrag.df) {
                                    self.doScrollBy(2 * -Math.floor(self.selectiondrag.df / 6));
                                    self.debounced("doselectionscroll", function() {
                                        func();
                                    }, 50);
                                }
                            }
                        };
                        /** @type {function(): ?} */
                        self.hasTextSelected = "getSelection" in document ? function() {
                            return 0 < document.getSelection().rangeCount;
                        } : "selection" in document ? function() {
                            return "None" != document.selection.type;
                        } : function() {
                            return false;
                        };
                        /**
                         * @param {?} b
                         * @return {undefined}
                         */
                        self.onselectionstart = function(b) {
                            if (!self.ispage) {
                                self.selectiondrag = self.win.offset();
                            }
                        };
                        /**
                         * @param {?} b
                         * @return {undefined}
                         */
                        self.onselectionend = function(b) {
                            /** @type {boolean} */
                            self.selectiondrag = false;
                        };
                        /**
                         * @param {string} tx
                         * @return {undefined}
                         */
                        self.onselectiondrag = function(tx) {
                            if (self.selectiondrag && self.hasTextSelected()) {
                                self.debounced("selectionscroll", function() {
                                    func(tx);
                                }, 250);
                            }
                        };
                    }
                    if (options.hasmstouch) {
                        self.css(self.rail, {
                            "-ms-touch-action": "none"
                        });
                        self.css(self.cursor, {
                            "-ms-touch-action": "none"
                        });
                        self.bind(self.win, "MSPointerDown", self.ontouchstart);
                        self.bind(document, "MSPointerUp", self.ontouchend);
                        self.bind(document, "MSPointerMove", self.ontouchmove);
                        self.bind(self.cursor, "MSGestureHold", function(event) {
                            event.preventDefault();
                        });
                        self.bind(self.cursor, "contextmenu", function(event) {
                            event.preventDefault();
                        });
                    }
                    if (this.istouchcapable) {
                        self.bind(self.win, "touchstart", self.ontouchstart);
                        self.bind(document, "touchend", self.ontouchend);
                        self.bind(document, "touchcancel", self.ontouchend);
                        self.bind(document, "touchmove", self.ontouchmove);
                    }
                    self.bind(self.cursor, "mousedown", self.onmousedown);
                    self.bind(self.cursor, "mouseup", self.onmouseup);
                    if (options.isie8) {
                        self.bind(self.cursor, "mouseleave", self.onmouseleave);
                    }
                    if (self.railh) {
                        self.bind(self.cursorh, "mousedown", function(event) {
                            self.onmousedown(event, true);
                        });
                        self.bind(self.cursorh, "mouseup", function(event) {
                            if (!self.rail.drag || 2 != self.rail.drag.pt) {
                                return self.rail.drag = false, self.hasmoving = false, self.hideCursor(), options.hasmousecapture && document.releaseCapture(), self.cancelEvent(event);
                            }
                        });
                    }
                    if (self.opt.cursordragontouch || !options.cantouch && !self.opt.touchbehavior) {
                        self.rail.css({
                            cursor: "default"
                        });
                        if (self.railh) {
                            self.railh.css({
                                cursor: "default"
                            });
                        }
                        self.jqbind(self.rail, "mouseenter", function() {
                            if (self.canshowonmouseevent) {
                                self.showCursor();
                            }
                            /** @type {boolean} */
                            self.rail.active = true;
                        });
                        self.jqbind(self.rail, "mouseleave", function() {
                            /** @type {boolean} */
                            self.rail.active = false;
                            if (!self.rail.drag) {
                                self.hideCursor();
                            }
                        });
                        if (self.opt.sensitiverail) {
                            self.bind(self.rail, "click", function(b) {
                                self.doRailClick(b, false, false);
                            });
                            self.bind(self.rail, "dblclick", function(b) {
                                self.doRailClick(b, true, false);
                            });
                            self.bind(self.cursor, "click", function(event) {
                                self.cancelEvent(event);
                            });
                            self.bind(self.cursor, "dblclick", function(event) {
                                self.cancelEvent(event);
                            });
                        }
                        if (self.railh) {
                            self.jqbind(self.railh, "mouseenter", function() {
                                if (self.canshowonmouseevent) {
                                    self.showCursor();
                                }
                                /** @type {boolean} */
                                self.rail.active = true;
                            });
                            self.jqbind(self.railh, "mouseleave", function() {
                                /** @type {boolean} */
                                self.rail.active = false;
                                if (!self.rail.drag) {
                                    self.hideCursor();
                                }
                            });
                            if (self.opt.sensitiverail) {
                                self.bind(self.railh, "click", function(b) {
                                    self.doRailClick(b, false, true);
                                });
                                self.bind(self.railh, "dblclick", function(b) {
                                    self.doRailClick(b, true, true);
                                });
                                self.bind(self.cursorh, "click", function(event) {
                                    self.cancelEvent(event);
                                });
                                self.bind(self.cursorh, "dblclick", function(event) {
                                    self.cancelEvent(event);
                                });
                            }
                        }
                    }
                    if (options.cantouch || self.opt.touchbehavior) {
                        self.bind(options.hasmousecapture ? self.win : document, "mouseup", self.ontouchend);
                        self.bind(document, "mousemove", self.ontouchmove);
                        if (self.onclick) {
                            self.bind(document, "click", self.onclick);
                        }
                        if (self.opt.cursordragontouch) {
                            self.bind(self.cursor, "mousedown", self.onmousedown);
                            self.bind(self.cursor, "mousemove", self.onmousemove);
                            if (self.cursorh) {
                                self.bind(self.cursorh, "mousedown", self.onmousedown);
                            }
                            if (self.cursorh) {
                                self.bind(self.cursorh, "mousemove", self.onmousemove);
                            }
                        }
                    } else {
                        self.bind(options.hasmousecapture ? self.win : document, "mouseup", self.onmouseup);
                        self.bind(document, "mousemove", self.onmousemove);
                        if (self.onclick) {
                            self.bind(document, "click", self.onclick);
                        }
                        if (!self.ispage && self.opt.enablescrollonselection) {
                            self.bind(self.win[0], "mousedown", self.onselectionstart);
                            self.bind(document, "mouseup", self.onselectionend);
                            self.bind(self.cursor, "mouseup", self.onselectionend);
                            if (self.cursorh) {
                                self.bind(self.cursorh, "mouseup", self.onselectionend);
                            }
                            self.bind(document, "mousemove", self.onselectiondrag);
                        }
                        if (self.zoom) {
                            self.jqbind(self.zoom, "mouseenter", function() {
                                if (self.canshowonmouseevent) {
                                    self.showCursor();
                                }
                                /** @type {boolean} */
                                self.rail.active = true;
                            });
                            self.jqbind(self.zoom, "mouseleave", function() {
                                /** @type {boolean} */
                                self.rail.active = false;
                                if (!self.rail.drag) {
                                    self.hideCursor();
                                }
                            });
                        }
                    }
                    if (self.opt.enablemousewheel) {
                        if (!self.isiframe) {
                            self.bind(options.isie && self.ispage ? document : self.docscroll, "mousewheel", self.onmousewheel);
                        }
                        self.bind(self.rail, "mousewheel", self.onmousewheel);
                        if (self.railh) {
                            self.bind(self.railh, "mousewheel", self.onmousewheelhr);
                        }
                    }
                    if (!(self.ispage || options.cantouch || /HTML|BODY/.test(self.win[0].nodeName))) {
                        if (!self.win.attr("tabindex")) {
                            self.win.attr({
                                tabindex: d++
                            });
                        }
                        self.jqbind(self.win, "focus", function(event) {
                            isDead = self.getTarget(event).id || true;
                            /** @type {boolean} */
                            self.hasfocus = true;
                            if (self.canshowonmouseevent) {
                                self.noticeCursor();
                            }
                        });
                        self.jqbind(self.win, "blur", function(b) {
                            /** @type {boolean} */
                            isDead = false;
                            /** @type {boolean} */
                            self.hasfocus = false;
                        });
                        self.jqbind(self.win, "mouseenter", function(event) {
                            k = self.getTarget(event).id || true;
                            /** @type {boolean} */
                            self.hasmousefocus = true;
                            if (self.canshowonmouseevent) {
                                self.noticeCursor();
                            }
                        });
                        self.jqbind(self.win, "mouseleave", function() {
                            /** @type {boolean} */
                            k = false;
                            /** @type {boolean} */
                            self.hasmousefocus = false;
                        });
                    }
                }
                /**
                 * @param {!Object} e
                 * @return {?}
                 */
                self.onkeypress = function(e) {
                    if (self.locked && 0 == self.page.maxh) {
                        return true;
                    }
                    e = e ? e : window.e;
                    var ch = self.getTarget(e);
                    if (ch && /INPUT|TEXTAREA|SELECT|OPTION/.test(ch.nodeName) && (!ch.getAttribute("type") && !ch.type || !/submit|button|cancel/i.tp)) {
                        return true;
                    }
                    if (self.hasfocus || self.hasmousefocus && !isDead || self.ispage && !isDead && !k) {
                        ch = e.keyCode;
                        if (self.locked && 27 != ch) {
                            return self.cancelEvent(e);
                        }
                        var createdAtAttr = e.ctrlKey || false;
                        var f = e.shiftKey || false;
                        /** @type {boolean} */
                        var g = false;
                        switch (ch) {
                            case 38:
                            case 63233:
                                self.doScrollBy(72);
                                /** @type {boolean} */
                                g = true;
                                break;
                            case 40:
                            case 63235:
                                self.doScrollBy(-72);
                                /** @type {boolean} */
                                g = true;
                                break;
                            case 37:
                            case 63232:
                                if (self.railh) {
                                    if (createdAtAttr) {
                                        self.doScrollLeft(0);
                                    } else {
                                        self.doScrollLeftBy(72);
                                    }
                                    /** @type {boolean} */
                                    g = true;
                                }
                                break;
                            case 39:
                            case 63234:
                                if (self.railh) {
                                    if (createdAtAttr) {
                                        self.doScrollLeft(self.page.maxw);
                                    } else {
                                        self.doScrollLeftBy(-72);
                                    }
                                    /** @type {boolean} */
                                    g = true;
                                }
                                break;
                            case 33:
                            case 63276:
                                self.doScrollBy(self.view.h);
                                /** @type {boolean} */
                                g = true;
                                break;
                            case 34:
                            case 63277:
                                self.doScrollBy(-self.view.h);
                                /** @type {boolean} */
                                g = true;
                                break;
                            case 36:
                            case 63273:
                                if (self.railh && createdAtAttr) {
                                    self.doScrollPos(0, 0);
                                } else {
                                    self.doScrollTo(0);
                                }
                                /** @type {boolean} */
                                g = true;
                                break;
                            case 35:
                            case 63275:
                                if (self.railh && createdAtAttr) {
                                    self.doScrollPos(self.page.maxw, self.page.maxh);
                                } else {
                                    self.doScrollTo(self.page.maxh);
                                }
                                /** @type {boolean} */
                                g = true;
                                break;
                            case 32:
                                if (self.opt.spacebarenabled) {
                                    if (f) {
                                        self.doScrollBy(self.view.h);
                                    } else {
                                        self.doScrollBy(-self.view.h);
                                    }
                                    /** @type {boolean} */
                                    g = true;
                                }
                                break;
                            case 27:
                                if (self.zoomactive) {
                                    self.doZoom();
                                    /** @type {boolean} */
                                    g = true;
                                }
                        }
                        if (g) {
                            return self.cancelEvent(e);
                        }
                    }
                };
                if (self.opt.enablekeyboard) {
                    self.bind(document, options.isopera && !options.isopera12 ? "keypress" : "keydown", self.onkeypress);
                }
                self.bind(window, "resize", self.lazyResize);
                self.bind(window, "orientationchange", self.lazyResize);
                self.bind(window, "load", self.lazyResize);
                if (options.ischrome && !self.ispage && !self.haswrapper) {
                    var originInlineStyles = self.win.attr("style");
                    /** @type {number} */
                    element = parseFloat(self.win.css("width")) + 1;
                    self.win.css("width", element);
                    self.synched("chromefix", function() {
                        self.win.attr("style", originInlineStyles);
                    });
                }
                /**
                 * @param {?} callback
                 * @return {undefined}
                 */
                self.onAttributeChange = function(callback) {
                    self.lazyResize(250);
                };
                if (!(self.ispage || self.haswrapper)) {
                    if (false !== Observer) {
                        self.observer = new Observer(function(b) {
                            b.forEach(self.onAttributeChange);
                        });
                        self.observer.observe(self.win[0], {
                            childList: true,
                            characterData: false,
                            attributes: true,
                            subtree: false
                        });
                        self.observerremover = new Observer(function(wrappersTemplates) {
                            wrappersTemplates.forEach(function(spec) {
                                if (0 < spec.removedNodes.length) {
                                    var i;
                                    for (i in spec.removedNodes) {
                                        if (spec.removedNodes[i] == self.win[0]) {
                                            return self.remove();
                                        }
                                    }
                                }
                            });
                        });
                        self.observerremover.observe(self.win[0].parentNode, {
                            childList: true,
                            characterData: false,
                            attributes: false,
                            subtree: false
                        });
                    } else {
                        self.bind(self.win, options.isie && !options.isie9 ? "propertychange" : "DOMAttrModified", self.onAttributeChange);
                        if (options.isie9) {
                            self.win[0].attachEvent("onpropertychange", self.onAttributeChange);
                        }
                        self.bind(self.win, "DOMNodeRemoved", function(b) {
                            if (b.target == self.win[0]) {
                                self.remove();
                            }
                        });
                    }
                }
                if (!self.ispage && self.opt.boxzoom) {
                    self.bind(window, "resize", self.resizeZoom);
                }
                if (self.istextarea) {
                    self.bind(self.win, "mouseup", self.lazyResize);
                }
                /** @type {boolean} */
                self.checkrtlmode = true;
                self.lazyResize(30);
            }
            if ("IFRAME" == this.doc[0].nodeName) {
                /**
                 * @param {!Object} content
                 * @return {?}
                 */
                var init = function(content) {
                    /** @type {boolean} */
                    self.iframexd = false;
                    try {
                        var doc = "contentDocument" in this ? this.contentDocument : this.contentWindow.document;
                    } catch (ha) {
                        /** @type {boolean} */
                        self.iframexd = true;
                        /** @type {boolean} */
                        doc = false;
                    }
                    if (self.iframexd) {
                        return "console" in window && console.log("NiceScroll error: policy restriced iframe"), true;
                    }
                    /** @type {boolean} */
                    self.forcescreen = true;
                    if (self.isiframe) {
                        self.iframe = {
                            doc: $(doc),
                            html: self.doc.contents().find("html")[0],
                            body: self.doc.contents().find("body")[0]
                        };
                        /**
                         * @return {?}
                         */
                        self.getContentSize = function() {
                            return {
                                w: Math.max(self.iframe.html.scrollWidth, self.iframe.body.scrollWidth),
                                h: Math.max(self.iframe.html.scrollHeight, self.iframe.body.scrollHeight)
                            };
                        };
                        self.docscroll = $(self.iframe.body);
                    }
                    if (!(options.isios || !self.opt.iframeautoresize || self.isiframe)) {
                        self.win.scrollTop(0);
                        self.doc.height("");
                        /** @type {number} */
                        content = Math.max(doc.getElementsByTagName("html")[0].scrollHeight, doc.body.scrollHeight);
                        self.doc.height(content);
                    }
                    self.lazyResize(30);
                    if (options.isie7) {
                        self.css($(self.iframe.html), {
                            "overflow-y": "hidden"
                        });
                    }
                    self.css($(self.iframe.body), {
                        "overflow-y": "hidden"
                    });
                    if ("contentWindow" in this) {
                        self.bind(this.contentWindow, "scroll", self.onscroll);
                    } else {
                        self.bind(doc, "scroll", self.onscroll);
                    }
                    if (self.opt.enablemousewheel) {
                        self.bind(doc, "mousewheel", self.onmousewheel);
                    }
                    if (self.opt.enablekeyboard) {
                        self.bind(doc, options.isopera ? "keypress" : "keydown", self.onkeypress);
                    }
                    if (options.cantouch || self.opt.touchbehavior) {
                        self.bind(doc, "mousedown", self.onmousedown);
                        self.bind(doc, "mousemove", function(e) {
                            self.onmousemove(e, true);
                        });
                        if (self.opt.grabcursorenabled && options.cursorgrabvalue) {
                            self.css($(doc.body), {
                                cursor: options.cursorgrabvalue
                            });
                        }
                    }
                    self.bind(doc, "mouseup", self.onmouseup);
                    if (self.zoom) {
                        if (self.opt.dblclickzoom) {
                            self.bind(doc, "dblclick", self.doZoom);
                        }
                        if (self.ongesturezoom) {
                            self.bind(doc, "gestureend", self.ongesturezoom);
                        }
                    }
                };
                if (this.doc[0].readyState && "complete" == this.doc[0].readyState) {
                    setTimeout(function() {
                        init.call(self.doc[0], false);
                    }, 500);
                }
                self.bind(this.doc, "load", init);
            }
        };
        /**
         * @param {number} name
         * @param {number} callback
         * @return {undefined}
         */
        this.showCursor = function(name, callback) {
            if (self.cursortimeout) {
                clearTimeout(self.cursortimeout);
                /** @type {number} */
                self.cursortimeout = 0;
            }
            if (self.rail) {
                if (self.autohidedom) {
                    self.autohidedom.stop().css({
                        opacity: self.opt.cursoropacitymax
                    });
                    /** @type {boolean} */
                    self.cursoractive = true;
                }
                if (!(self.rail.drag && 1 == self.rail.drag.pt)) {
                    if ("undefined" != typeof name && false !== name) {
                        /** @type {number} */
                        self.scroll.y = Math.round(1 * name / self.scrollratio.y);
                    }
                    if ("undefined" != typeof callback) {
                        /** @type {number} */
                        self.scroll.x = Math.round(1 * callback / self.scrollratio.x);
                    }
                }
                self.cursor.css({
                    height: self.cursorheight,
                    top: self.scroll.y
                });
                if (self.cursorh) {
                    if (!self.rail.align && self.rail.visibility) {
                        self.cursorh.css({
                            width: self.cursorwidth,
                            left: self.scroll.x + self.rail.width
                        });
                    } else {
                        self.cursorh.css({
                            width: self.cursorwidth,
                            left: self.scroll.x
                        });
                    }
                    /** @type {boolean} */
                    self.cursoractive = true;
                }
                if (self.zoom) {
                    self.zoom.stop().css({
                        opacity: self.opt.cursoropacitymax
                    });
                }
            }
        };
        /**
         * @param {string} callback
         * @return {undefined}
         */
        this.hideCursor = function(callback) {
            if (!self.cursortimeout && self.rail && self.autohidedom) {
                /** @type {number} */
                self.cursortimeout = setTimeout(function() {
                    if (!(self.rail.active && self.showonmouseevent)) {
                        self.autohidedom.stop().animate({
                            opacity: self.opt.cursoropacitymin
                        });
                        if (self.zoom) {
                            self.zoom.stop().animate({
                                opacity: self.opt.cursoropacitymin
                            });
                        }
                        /** @type {boolean} */
                        self.cursoractive = false;
                    }
                    /** @type {number} */
                    self.cursortimeout = 0;
                }, callback || self.opt.hidecursordelay);
            }
        };
        /**
         * @param {string} interval
         * @param {undefined} label
         * @param {undefined} selector
         * @return {undefined}
         */
        this.noticeCursor = function(interval, label, selector) {
            self.showCursor(label, selector);
            if (!self.rail.active) {
                self.hideCursor(interval);
            }
        };
        /** @type {function(): ?} */
        this.getContentSize = self.ispage ? function() {
            return {
                w: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth),
                h: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)
            };
        } : self.haswrapper ? function() {
            return {
                w: self.doc.outerWidth() + parseInt(self.win.css("paddingLeft")) + parseInt(self.win.css("paddingRight")),
                h: self.doc.outerHeight() + parseInt(self.win.css("paddingTop")) + parseInt(self.win.css("paddingBottom"))
            };
        } : function() {
            return {
                w: self.docscroll[0].scrollWidth,
                h: self.docscroll[0].scrollHeight
            };
        };
        /**
         * @param {number} a
         * @param {!Object} b
         * @return {?}
         */
        this.onResize = function(a, b) {
            if (!self.win) {
                return false;
            }
            if (!self.haswrapper && !self.ispage) {
                if ("none" == self.win.css("display")) {
                    return self.visibility && self.hideRail().hideRailHr(), false;
                }
                if (!(self.hidden || self.visibility)) {
                    self.showRail().showRailHr();
                }
            }
            a = self.page.maxh;
            var max = self.page.maxw;
            var w = self.view.w;
            self.view = {
                w: self.ispage ? self.win.width() : parseInt(self.win[0].clientWidth),
                h: self.ispage ? self.win.height() : parseInt(self.win[0].clientHeight)
            };
            self.page = b ? b : self.getContentSize();
            /** @type {number} */
            self.page.maxh = Math.max(0, self.page.h - self.view.h);
            /** @type {number} */
            self.page.maxw = Math.max(0, self.page.w - self.view.w);
            if (self.page.maxh == a && self.page.maxw == max && self.view.w == w) {
                if (self.ispage) {
                    return self;
                }
                b = self.win.offset();
                if (self.lastposition && (a = self.lastposition, a.top == b.top && a.left == b.left)) {
                    return self;
                }
                /** @type {!Object} */
                self.lastposition = b;
            }
            if (0 == self.page.maxh) {
                self.hideRail();
                /** @type {number} */
                self.scrollvaluemax = 0;
                /** @type {number} */
                self.scroll.y = 0;
                /** @type {number} */
                self.scrollratio.y = 0;
                /** @type {number} */
                self.cursorheight = 0;
                self.setScrollTop(0);
                /** @type {boolean} */
                self.rail.scrollable = false;
            } else {
                /** @type {boolean} */
                self.rail.scrollable = true;
            }
            if (0 == self.page.maxw) {
                self.hideRailHr();
                /** @type {number} */
                self.scrollvaluemaxw = 0;
                /** @type {number} */
                self.scroll.x = 0;
                /** @type {number} */
                self.scrollratio.x = 0;
                /** @type {number} */
                self.cursorwidth = 0;
                self.setScrollLeft(0);
                /** @type {boolean} */
                self.railh.scrollable = false;
            } else {
                /** @type {boolean} */
                self.railh.scrollable = true;
            }
            /** @type {boolean} */
            self.locked = 0 == self.page.maxh && 0 == self.page.maxw;
            if (self.locked) {
                return self.ispage || self.updateScrollBar(self.view), false;
            }
            if (self.hidden || self.visibility) {
                if (!(self.hidden || self.railh.visibility)) {
                    self.showRailHr();
                }
            } else {
                self.showRail().showRailHr();
            }
            if (self.istextarea && self.win.css("resize") && "none" != self.win.css("resize")) {
                self.view.h -= 20;
            }
            /** @type {number} */
            self.cursorheight = Math.min(self.view.h, Math.round(self.view.h / self.page.h * self.view.h));
            self.cursorheight = self.opt.cursorfixedheight ? self.opt.cursorfixedheight : Math.max(self.opt.cursorminheight, self.cursorheight);
            /** @type {number} */
            self.cursorwidth = Math.min(self.view.w, Math.round(self.view.w / self.page.w * self.view.w));
            self.cursorwidth = self.opt.cursorfixedheight ? self.opt.cursorfixedheight : Math.max(self.opt.cursorminheight, self.cursorwidth);
            /** @type {number} */
            self.scrollvaluemax = self.view.h - self.cursorheight - self.cursor.hborder;
            if (self.railh) {
                self.railh.width = 0 < self.page.maxh ? self.view.w - self.rail.width : self.view.w;
                /** @type {number} */
                self.scrollvaluemaxw = self.railh.width - self.cursorwidth - self.cursorh.wborder;
            }
            if (self.checkrtlmode && self.railh) {
                /** @type {boolean} */
                self.checkrtlmode = false;
                if (self.opt.rtlmode && 0 == self.scroll.x) {
                    self.setScrollLeft(self.page.maxw);
                }
            }
            if (!self.ispage) {
                self.updateScrollBar(self.view);
            }
            self.scrollratio = {
                x: self.page.maxw / self.scrollvaluemaxw,
                y: self.page.maxh / self.scrollvaluemax
            };
            if (self.getScrollTop() > self.page.maxh) {
                self.doScrollTop(self.page.maxh);
            } else {
                /** @type {number} */
                self.scroll.y = Math.round(self.getScrollTop() * (1 / self.scrollratio.y));
                /** @type {number} */
                self.scroll.x = Math.round(self.getScrollLeft() * (1 / self.scrollratio.x));
                if (self.cursoractive) {
                    self.noticeCursor();
                }
            }
            if (self.scroll.y && 0 == self.getScrollTop()) {
                self.doScrollTo(Math.floor(self.scroll.y * self.scrollratio.y));
            }
            return self;
        };
        this.resize = self.onResize;
        /**
         * @param {number} value
         * @return {?}
         */
        this.lazyResize = function(value) {
            value = isNaN(value) ? 30 : value;
            self.delayed("resize", self.resize, value);
            return self;
        };
        /**
         * @param {!Object} element
         * @param {string} name
         * @param {!Function} callback
         * @param {string} fn
         * @return {undefined}
         */
        this._bind = function(element, name, callback, fn) {
            self.events.push({
                e: element,
                n: name,
                f: callback,
                b: fn,
                q: false
            });
            if (element.addEventListener) {
                element.addEventListener(name, callback, fn || false);
            } else {
                if (element.attachEvent) {
                    element.attachEvent("on" + name, callback);
                } else {
                    /** @type {!Function} */
                    element["on" + name] = callback;
                }
            }
        };
        /**
         * @param {string} i
         * @param {string} name
         * @param {!Function} type
         * @return {undefined}
         */
        this.jqbind = function(i, name, type) {
            self.events.push({
                e: i,
                n: name,
                f: type,
                q: true
            });
            $(i).bind(name, type);
        };
        /**
         * @param {string} el
         * @param {string} name
         * @param {!Function} callback
         * @param {boolean} params
         * @return {undefined}
         */
        this.bind = function(el, name, callback, params) {
            var elem = "jquery" in el ? el[0] : el;
            if ("mousewheel" == name) {
                if ("onwheel" in self.win) {
                    self._bind(elem, "wheel", callback, params || false);
                } else {
                    /** @type {string} */
                    el = "undefined" != typeof document.onmousewheel ? "mousewheel" : "DOMMouseScroll";
                    _addWheelListener(elem, el, callback, params || false);
                    if ("DOMMouseScroll" == el) {
                        _addWheelListener(elem, "MozMousePixelScroll", callback, params || false);
                    }
                }
            } else {
                if (elem.addEventListener) {
                    if (options.cantouch && /mouseup|mousedown|mousemove/.test(name)) {
                        self._bind(elem, "mousedown" == name ? "touchstart" : "mouseup" == name ? "touchend" : "touchmove", function(e) {
                            if (e.touches) {
                                if (2 > e.touches.length) {
                                    var message = e.touches.length ? e.touches[0] : e;
                                    /** @type {!Object} */
                                    message.original = e;
                                    callback.call(this, message);
                                }
                            } else {
                                if (e.changedTouches) {
                                    message = e.changedTouches[0];
                                    /** @type {!Object} */
                                    message.original = e;
                                    callback.call(this, message);
                                }
                            }
                        }, params || false);
                    }
                    self._bind(elem, name, callback, params || false);
                    if (options.cantouch && "mouseup" == name) {
                        self._bind(elem, "touchcancel", callback, params || false);
                    }
                } else {
                    self._bind(elem, name, function(event) {
                        if ((event = event || window.event || false) && event.srcElement) {
                            event.target = event.srcElement;
                        }
                        if (!("pageY" in event)) {
                            event.pageX = event.clientX + document.documentElement.scrollLeft;
                            event.pageY = event.clientY + document.documentElement.scrollTop;
                        }
                        return false === callback.call(elem, event) || false === params ? self.cancelEvent(event) : true;
                    });
                }
            }
        };
        /**
         * @param {!Object} el
         * @param {string} type
         * @param {?} fn
         * @param {?} bubble
         * @return {undefined}
         */
        this._unbind = function(el, type, fn, bubble) {
            if (el.removeEventListener) {
                el.removeEventListener(type, fn, bubble);
            } else {
                if (el.detachEvent) {
                    el.detachEvent("on" + type, fn);
                } else {
                    /** @type {boolean} */
                    el["on" + type] = false;
                }
            }
        };
        /**
         * @return {undefined}
         */
        this.unbindAll = function() {
            /** @type {number} */
            var idx = 0;
            for (; idx < self.events.length; idx++) {
                var opts = self.events[idx];
                if (opts.q) {
                    opts.e.unbind(opts.n, opts.f);
                } else {
                    self._unbind(opts.e, opts.n, opts.f, opts.b);
                }
            }
        };
        /**
         * @param {!Object} event
         * @return {?}
         */
        this.cancelEvent = function(event) {
            event = event.original ? event.original : event ? event : window.event || false;
            if (!event) {
                return false;
            }
            if (event.preventDefault) {
                event.preventDefault();
            }
            if (event.stopPropagation) {
                event.stopPropagation();
            }
            if (event.preventManipulation) {
                event.preventManipulation();
            }
            /** @type {boolean} */
            event.cancelBubble = true;
            /** @type {boolean} */
            event.cancel = true;
            return event.returnValue = false;
        };
        /**
         * @param {!Object} e
         * @return {?}
         */
        this.stopPropagation = function(e) {
            e = e.original ? e.original : e ? e : window.event || false;
            if (!e) {
                return false;
            }
            if (e.stopPropagation) {
                return e.stopPropagation();
            }
            if (e.cancelBubble) {
                /** @type {boolean} */
                e.cancelBubble = true;
            }
            return false;
        };
        /**
         * @return {?}
         */
        this.showRail = function() {
            if (!(0 == self.page.maxh || !self.ispage && "none" == self.win.css("display"))) {
                /** @type {boolean} */
                self.visibility = true;
                /** @type {boolean} */
                self.rail.visibility = true;
                self.rail.css("display", "block");
            }
            return self;
        };
        /**
         * @return {?}
         */
        this.showRailHr = function() {
            if (!self.railh) {
                return self;
            }
            if (!(0 == self.page.maxw || !self.ispage && "none" == self.win.css("display"))) {
                /** @type {boolean} */
                self.railh.visibility = true;
                self.railh.css("display", "block");
            }
            return self;
        };
        /**
         * @return {?}
         */
        this.hideRail = function() {
            /** @type {boolean} */
            self.visibility = false;
            /** @type {boolean} */
            self.rail.visibility = false;
            self.rail.css("display", "none");
            return self;
        };
        /**
         * @return {?}
         */
        this.hideRailHr = function() {
            if (!self.railh) {
                return self;
            }
            /** @type {boolean} */
            self.railh.visibility = false;
            self.railh.css("display", "none");
            return self;
        };
        /**
         * @return {?}
         */
        this.show = function() {
            /** @type {boolean} */
            self.hidden = false;
            /** @type {boolean} */
            self.locked = false;
            return self.showRail().showRailHr();
        };
        /**
         * @return {?}
         */
        this.hide = function() {
            /** @type {boolean} */
            self.hidden = true;
            /** @type {boolean} */
            self.locked = true;
            return self.hideRail().hideRailHr();
        };
        /**
         * @return {?}
         */
        this.toggle = function() {
            return self.hidden ? self.show() : self.hide();
        };
        /**
         * @return {?}
         */
        this.remove = function() {
            self.stop();
            if (self.cursortimeout) {
                clearTimeout(self.cursortimeout);
            }
            self.doZoomOut();
            self.unbindAll();
            if (false !== self.observer) {
                self.observer.disconnect();
            }
            if (false !== self.observerremover) {
                self.observerremover.disconnect();
            }
            /** @type {!Array} */
            self.events = [];
            if (self.cursor) {
                self.cursor.remove();
                /** @type {null} */
                self.cursor = null;
            }
            if (self.cursorh) {
                self.cursorh.remove();
                /** @type {null} */
                self.cursorh = null;
            }
            if (self.rail) {
                self.rail.remove();
                /** @type {null} */
                self.rail = null;
            }
            if (self.railh) {
                self.railh.remove();
                /** @type {null} */
                self.railh = null;
            }
            if (self.zoom) {
                self.zoom.remove();
                /** @type {null} */
                self.zoom = null;
            }
            /** @type {number} */
            var i = 0;
            for (; i < self.saved.css.length; i++) {
                var set = self.saved.css[i];
                set[0].css(set[1], "undefined" == typeof set[2] ? "" : set[2]);
            }
            /** @type {boolean} */
            self.saved = false;
            self.me.data("__nicescroll", "");
            /** @type {null} */
            self.me = null;
            /** @type {null} */
            self.doc = null;
            /** @type {null} */
            self.docscroll = null;
            /** @type {null} */
            self.win = null;
            return self;
        };
        /**
         * @param {boolean} handler
         * @return {?}
         */
        this.scrollstart = function(handler) {
            /** @type {boolean} */
            this.onscrollstart = handler;
            return self;
        };
        /**
         * @param {boolean} handler
         * @return {?}
         */
        this.scrollend = function(handler) {
            /** @type {boolean} */
            this.onscrollend = handler;
            return self;
        };
        /**
         * @param {boolean} b
         * @return {?}
         */
        this.scrollcancel = function(b) {
            /** @type {boolean} */
            this.onscrollcancel = b;
            return self;
        };
        /**
         * @param {boolean} zoomNode
         * @return {?}
         */
        this.zoomin = function(zoomNode) {
            /** @type {boolean} */
            this.onzoomin = zoomNode;
            return self;
        };
        /**
         * @param {boolean} i
         * @return {?}
         */
        this.zoomout = function(i) {
            /** @type {boolean} */
            this.onzoomout = i;
            return self;
        };
        /**
         * @param {!Object} el
         * @return {?}
         */
        this.isScrollable = function(el) {
            el = el.target ? el.target : el;
            if ("OPTION" == el.nodeName) {
                return true;
            }
            for (; el && 1 == el.nodeType && !/BODY|HTML/.test(el.nodeName);) {
                var html = $(el);
                html = html.css("overflowY") || html.css("overflowX") || html.css("overflow") || "";
                if (/scroll|auto/.test(html)) {
                    return el.clientHeight != el.scrollHeight;
                }
                el = el.parentNode ? el.parentNode : false;
            }
            return false;
        };
        /**
         * @param {!Object} node
         * @return {?}
         */
        this.getViewport = function(node) {
            node = node && node.parentNode ? node.parentNode : false;
            for (; node && 1 == node.nodeType && !/BODY|HTML/.test(node.nodeName);) {
                var el = $(node);
                var h = el.css("overflowY") || el.css("overflowX") || el.css("overflow") || "";
                if (/scroll|auto/.test(h) && node.clientHeight != node.scrollHeight || 0 < el.getNiceScroll().length) {
                    return el;
                }
                node = node.parentNode ? node.parentNode : false;
            }
            return false;
        };
        /**
         * @param {!Event} e
         * @return {?}
         */
        this.onmousewheel = function(e) {
            if (self.locked) {
                return true;
            }
            if (self.rail.drag) {
                return self.cancelEvent(e);
            }
            if (!self.rail.scrollable) {
                return self.railh && self.railh.scrollable ? self.onmousewheelhr(e) : true;
            }
            /** @type {number} */
            var tickZoom = +new Date;
            /** @type {boolean} */
            var value = false;
            if (self.opt.preservenativescrolling && self.checkarea + 600 < tickZoom) {
                self.nativescrollingarea = self.isScrollable(e);
                /** @type {boolean} */
                value = true;
            }
            /** @type {number} */
            self.checkarea = tickZoom;
            if (self.nativescrollingarea) {
                return true;
            }
            if (e = handler(e, false, value)) {
                /** @type {number} */
                self.checkarea = 0;
            }
            return e;
        };
        /**
         * @param {!Event} e
         * @return {?}
         */
        this.onmousewheelhr = function(e) {
            if (self.locked || !self.railh.scrollable) {
                return true;
            }
            if (self.rail.drag) {
                return self.cancelEvent(e);
            }
            /** @type {number} */
            var tickZoom = +new Date;
            /** @type {boolean} */
            var raw = false;
            if (self.opt.preservenativescrolling && self.checkarea + 600 < tickZoom) {
                self.nativescrollingarea = self.isScrollable(e);
                /** @type {boolean} */
                raw = true;
            }
            /** @type {number} */
            self.checkarea = tickZoom;
            return self.nativescrollingarea ? true : self.locked ? self.cancelEvent(e) : handler(e, true, raw);
        };
        /**
         * @return {?}
         */
        this.stop = function() {
            self.cancelScroll();
            if (self.scrollmon) {
                self.scrollmon.stop();
            }
            /** @type {boolean} */
            self.cursorfreezed = false;
            /** @type {number} */
            self.scroll.y = Math.round(self.getScrollTop() * (1 / self.scrollratio.y));
            self.noticeCursor();
            return self;
        };
        /**
         * @param {number} a
         * @return {?}
         */
        this.getTransitionSpeed = function(a) {
            /** @type {number} */
            a = Math.min(Math.round(10 * self.opt.scrollspeed), Math.round(a / 20 * self.opt.scrollspeed));
            return 20 < a ? a : 0;
        };
        if (self.opt.smoothscroll) {
            if (self.ishwscroll && options.hastransition && self.opt.usetransition) {
                /**
                 * @param {number} data
                 * @param {string} id
                 * @return {?}
                 */
                this.prepareTransition = function(data, id) {
                    /** @type {string} */
                    id = (data = id ? 20 < data ? data : 0 : self.getTransitionSpeed(data)) ? options.prefixstyle + "transform " + data + "ms ease-out" : "";
                    if (!(self.lasttransitionstyle && self.lasttransitionstyle == id)) {
                        /** @type {string} */
                        self.lasttransitionstyle = id;
                        self.doc.css(options.transitionstyle, id);
                    }
                    return data;
                };
                /**
                 * @param {number} num
                 * @param {undefined} f
                 * @return {undefined}
                 */
                this.doScrollLeft = function(num, f) {
                    var bottom = self.scrollrunning ? self.newscrolly : self.getScrollTop();
                    self.doScrollPos(num, bottom, f);
                };
                /**
                 * @param {number} b
                 * @param {undefined} c
                 * @return {undefined}
                 */
                this.doScrollTop = function(b, c) {
                    var d = self.scrollrunning ? self.newscrollx : self.getScrollLeft();
                    self.doScrollPos(d, b, c);
                };
                /**
                 * @param {number} x
                 * @param {number} h
                 * @param {string} id
                 * @return {?}
                 */
                this.doScrollPos = function(x, h, id) {
                    var sy = self.getScrollTop();
                    var y = self.getScrollLeft();
                    if (0 > (self.newscrolly - sy) * (h - sy) || 0 > (self.newscrollx - y) * (x - y)) {
                        self.cancelScroll();
                    }
                    if (0 == self.opt.bouncescroll) {
                        if (0 > h) {
                            /** @type {number} */
                            h = 0;
                        } else {
                            if (h > self.page.maxh) {
                                h = self.page.maxh;
                            }
                        }
                        if (0 > x) {
                            /** @type {number} */
                            x = 0;
                        } else {
                            if (x > self.page.maxw) {
                                x = self.page.maxw;
                            }
                        }
                    }
                    if (self.scrollrunning && x == self.newscrollx && h == self.newscrolly) {
                        return false;
                    }
                    /** @type {number} */
                    self.newscrolly = h;
                    /** @type {number} */
                    self.newscrollx = x;
                    self.newscrollspeed = id || false;
                    if (self.timer) {
                        return false;
                    }
                    /** @type {number} */
                    self.timer = setTimeout(function() {
                        var t = self.getScrollTop();
                        var a = self.getScrollLeft();
                        /** @type {number} */
                        var v = Math.round(Math.sqrt(Math.pow(x - a, 2) + Math.pow(h - t, 2)));
                        v = self.newscrollspeed && 1 < self.newscrollspeed ? self.newscrollspeed : self.getTransitionSpeed(v);
                        if (self.newscrollspeed && 1 >= self.newscrollspeed) {
                            /** @type {number} */
                            v = v * self.newscrollspeed;
                        }
                        self.prepareTransition(v, true);
                        if (self.timerscroll && self.timerscroll.tm) {
                            clearInterval(self.timerscroll.tm);
                        }
                        if (0 < v) {
                            if (!self.scrollrunning && self.onscrollstart) {
                                self.onscrollstart.call(self, {
                                    type: "scrollstart",
                                    current: {
                                        x: a,
                                        y: t
                                    },
                                    request: {
                                        x: x,
                                        y: h
                                    },
                                    end: {
                                        x: self.newscrollx,
                                        y: self.newscrolly
                                    },
                                    speed: v
                                });
                            }
                            if (options.transitionend) {
                                if (!self.scrollendtrapped) {
                                    /** @type {boolean} */
                                    self.scrollendtrapped = true;
                                    self.bind(self.doc, options.transitionend, self.onScrollEnd, false);
                                }
                            } else {
                                if (self.scrollendtrapped) {
                                    clearTimeout(self.scrollendtrapped);
                                }
                                /** @type {number} */
                                self.scrollendtrapped = setTimeout(self.onScrollEnd, v);
                            }
                            self.timerscroll = {
                                bz: new BezierClass(t, self.newscrolly, v, 0, 0, .58, 1),
                                bh: new BezierClass(a, self.newscrollx, v, 0, 0, .58, 1)
                            };
                            if (!self.cursorfreezed) {
                                /** @type {number} */
                                self.timerscroll.tm = setInterval(function() {
                                    self.showCursor(self.getScrollTop(), self.getScrollLeft());
                                }, 60);
                            }
                        }
                        self.synched("doScroll-set", function() {
                            /** @type {number} */
                            self.timer = 0;
                            if (self.scrollendtrapped) {
                                /** @type {boolean} */
                                self.scrollrunning = true;
                            }
                            self.setScrollTop(self.newscrolly);
                            self.setScrollLeft(self.newscrollx);
                            if (!self.scrollendtrapped) {
                                self.onScrollEnd();
                            }
                        });
                    }, 50);
                };
                /**
                 * @return {?}
                 */
                this.cancelScroll = function() {
                    if (!self.scrollendtrapped) {
                        return true;
                    }
                    var value = self.getScrollTop();
                    var y = self.getScrollLeft();
                    /** @type {boolean} */
                    self.scrollrunning = false;
                    if (!options.transitionend) {
                        clearTimeout(options.transitionend);
                    }
                    /** @type {boolean} */
                    self.scrollendtrapped = false;
                    self._unbind(self.doc, options.transitionend, self.onScrollEnd);
                    self.prepareTransition(0);
                    self.setScrollTop(value);
                    if (self.railh) {
                        self.setScrollLeft(y);
                    }
                    if (self.timerscroll && self.timerscroll.tm) {
                        clearInterval(self.timerscroll.tm);
                    }
                    /** @type {boolean} */
                    self.timerscroll = false;
                    /** @type {boolean} */
                    self.cursorfreezed = false;
                    self.showCursor(value, y);
                    return self;
                };
                /**
                 * @return {?}
                 */
                this.onScrollEnd = function() {
                    if (self.scrollendtrapped) {
                        self._unbind(self.doc, options.transitionend, self.onScrollEnd);
                    }
                    /** @type {boolean} */
                    self.scrollendtrapped = false;
                    self.prepareTransition(0);
                    if (self.timerscroll && self.timerscroll.tm) {
                        clearInterval(self.timerscroll.tm);
                    }
                    /** @type {boolean} */
                    self.timerscroll = false;
                    var h = self.getScrollTop();
                    var w = self.getScrollLeft();
                    self.setScrollTop(h);
                    if (self.railh) {
                        self.setScrollLeft(w);
                    }
                    self.noticeCursor(false, h, w);
                    /** @type {boolean} */
                    self.cursorfreezed = false;
                    if (0 > h) {
                        /** @type {number} */
                        h = 0;
                    } else {
                        if (h > self.page.maxh) {
                            h = self.page.maxh;
                        }
                    }
                    if (0 > w) {
                        /** @type {number} */
                        w = 0;
                    } else {
                        if (w > self.page.maxw) {
                            w = self.page.maxw;
                        }
                    }
                    if (h != self.newscrolly || w != self.newscrollx) {
                        return self.doScrollPos(w, h, self.opt.snapbackspeed);
                    }
                    if (self.onscrollend && self.scrollrunning) {
                        self.onscrollend.call(self, {
                            type: "scrollend",
                            current: {
                                x: w,
                                y: h
                            },
                            end: {
                                x: self.newscrollx,
                                y: self.newscrolly
                            }
                        });
                    }
                    /** @type {boolean} */
                    self.scrollrunning = false;
                };
            } else {
                /**
                 * @param {number} num
                 * @param {undefined} f
                 * @return {undefined}
                 */
                this.doScrollLeft = function(num, f) {
                    var bottom = self.scrollrunning ? self.newscrolly : self.getScrollTop();
                    self.doScrollPos(num, bottom, f);
                };
                /**
                 * @param {number} b
                 * @param {undefined} c
                 * @return {undefined}
                 */
                this.doScrollTop = function(b, c) {
                    var d = self.scrollrunning ? self.newscrollx : self.getScrollLeft();
                    self.doScrollPos(d, b, c);
                };
                /**
                 * @param {number} x
                 * @param {number} h
                 * @param {number} max
                 * @return {?}
                 */
                this.doScrollPos = function(x, h, max) {
                    /**
                     * @return {?}
                     */
                    function init() {
                        if (self.cancelAnimationFrame) {
                            return true;
                        }
                        /** @type {boolean} */
                        self.scrollrunning = true;
                        if (num = 1 - num) {
                            return self.timer = fn(init) || 1;
                        }
                        /** @type {number} */
                        var val = 0;
                        var y = sy = self.getScrollTop();
                        if (self.dst.ay) {
                            y = self.bzscroll ? self.dst.py + self.bzscroll.getNow() * self.dst.ay : self.newscrolly;
                            /** @type {number} */
                            var x0 = y - sy;
                            if (0 > x0 && y < self.newscrolly || 0 < x0 && y > self.newscrolly) {
                                y = self.newscrolly;
                            }
                            self.setScrollTop(y);
                            if (y == self.newscrolly) {
                                /** @type {number} */
                                val = 1;
                            }
                        } else {
                            /** @type {number} */
                            val = 1;
                        }
                        var x = sx = self.getScrollLeft();
                        if (self.dst.ax) {
                            x = self.bzscroll ? self.dst.px + self.bzscroll.getNow() * self.dst.ax : self.newscrollx;
                            /** @type {number} */
                            x0 = x - sx;
                            if (0 > x0 && x < self.newscrollx || 0 < x0 && x > self.newscrollx) {
                                x = self.newscrollx;
                            }
                            self.setScrollLeft(x);
                            if (x == self.newscrollx) {
                                /** @type {number} */
                                val = val + 1;
                            }
                        } else {
                            /** @type {number} */
                            val = val + 1;
                        }
                        if (2 == val) {
                            /** @type {number} */
                            self.timer = 0;
                            /** @type {boolean} */
                            self.cursorfreezed = false;
                            /** @type {boolean} */
                            self.bzscroll = false;
                            /** @type {boolean} */
                            self.scrollrunning = false;
                            if (0 > y) {
                                /** @type {number} */
                                y = 0;
                            } else {
                                if (y > self.page.maxh) {
                                    y = self.page.maxh;
                                }
                            }
                            if (0 > x) {
                                /** @type {number} */
                                x = 0;
                            } else {
                                if (x > self.page.maxw) {
                                    x = self.page.maxw;
                                }
                            }
                            if (x != self.newscrollx || y != self.newscrolly) {
                                self.doScrollPos(x, y);
                            } else {
                                if (self.onscrollend) {
                                    self.onscrollend.call(self, {
                                        type: "scrollend",
                                        current: {
                                            x: sx,
                                            y: sy
                                        },
                                        end: {
                                            x: self.newscrollx,
                                            y: self.newscrolly
                                        }
                                    });
                                }
                            }
                        } else {
                            self.timer = fn(init) || 1;
                        }
                    }
                    h = "undefined" == typeof h || false === h ? self.getScrollTop(true) : h;
                    if (self.timer && self.newscrolly == h && self.newscrollx == x) {
                        return true;
                    }
                    if (self.timer) {
                        callback(self.timer);
                    }
                    /** @type {number} */
                    self.timer = 0;
                    var top = self.getScrollTop();
                    var y = self.getScrollLeft();
                    if (0 > (self.newscrolly - top) * (h - top) || 0 > (self.newscrollx - y) * (x - y)) {
                        self.cancelScroll();
                    }
                    /** @type {number} */
                    self.newscrolly = h;
                    /** @type {number} */
                    self.newscrollx = x;
                    if (!(self.bouncescroll && self.rail.visibility)) {
                        if (0 > self.newscrolly) {
                            /** @type {number} */
                            self.newscrolly = 0;
                        } else {
                            if (self.newscrolly > self.page.maxh) {
                                self.newscrolly = self.page.maxh;
                            }
                        }
                    }
                    if (!(self.bouncescroll && self.railh.visibility)) {
                        if (0 > self.newscrollx) {
                            /** @type {number} */
                            self.newscrollx = 0;
                        } else {
                            if (self.newscrollx > self.page.maxw) {
                                self.newscrollx = self.page.maxw;
                            }
                        }
                    }
                    self.dst = {};
                    /** @type {number} */
                    self.dst.x = x - y;
                    /** @type {number} */
                    self.dst.y = h - top;
                    self.dst.px = y;
                    self.dst.py = top;
                    /** @type {number} */
                    var value = Math.round(Math.sqrt(Math.pow(self.dst.x, 2) + Math.pow(self.dst.y, 2)));
                    /** @type {number} */
                    self.dst.ax = self.dst.x / value;
                    /** @type {number} */
                    self.dst.ay = self.dst.y / value;
                    /** @type {number} */
                    var yKey = 0;
                    /** @type {number} */
                    var val = value;
                    if (0 == self.dst.x) {
                        yKey = top;
                        /** @type {number} */
                        val = h;
                        /** @type {number} */
                        self.dst.ay = 1;
                        /** @type {number} */
                        self.dst.py = 0;
                    } else {
                        if (0 == self.dst.y) {
                            yKey = y;
                            /** @type {number} */
                            val = x;
                            /** @type {number} */
                            self.dst.ax = 1;
                            /** @type {number} */
                            self.dst.px = 0;
                        }
                    }
                    value = self.getTransitionSpeed(value);
                    if (max && 1 >= max) {
                        /** @type {number} */
                        value = value * max;
                    }
                    self.bzscroll = 0 < value ? self.bzscroll ? self.bzscroll.update(val, value) : new BezierClass(yKey, val, value, 0, 1, 0, 1) : false;
                    if (!self.timer) {
                        if (top == self.page.maxh && h >= self.page.maxh || y == self.page.maxw && x >= self.page.maxw) {
                            self.checkContentSize();
                        }
                        /** @type {number} */
                        var num = 1;
                        /** @type {boolean} */
                        self.cancelAnimationFrame = false;
                        /** @type {number} */
                        self.timer = 1;
                        if (self.onscrollstart && !self.scrollrunning) {
                            self.onscrollstart.call(self, {
                                type: "scrollstart",
                                current: {
                                    x: y,
                                    y: top
                                },
                                request: {
                                    x: x,
                                    y: h
                                },
                                end: {
                                    x: self.newscrollx,
                                    y: self.newscrolly
                                },
                                speed: value
                            });
                        }
                        init();
                        if (top == self.page.maxh && h >= top || y == self.page.maxw && x >= y) {
                            self.checkContentSize();
                        }
                        self.noticeCursor();
                    }
                };
                /**
                 * @return {?}
                 */
                this.cancelScroll = function() {
                    if (self.timer) {
                        callback(self.timer);
                    }
                    /** @type {number} */
                    self.timer = 0;
                    /** @type {boolean} */
                    self.bzscroll = false;
                    /** @type {boolean} */
                    self.scrollrunning = false;
                    return self;
                };
            }
        } else {
            /**
             * @param {number} num
             * @param {undefined} f
             * @return {undefined}
             */
            this.doScrollLeft = function(num, f) {
                var bottom = self.getScrollTop();
                self.doScrollPos(num, bottom, f);
            };
            /**
             * @param {number} b
             * @param {undefined} c
             * @return {undefined}
             */
            this.doScrollTop = function(b, c) {
                var d = self.getScrollLeft();
                self.doScrollPos(d, b, c);
            };
            /**
             * @param {number} x
             * @param {number} y
             * @param {!Object} flag
             * @return {undefined}
             */
            this.doScrollPos = function(x, y, flag) {
                var left = x > self.page.maxw ? self.page.maxw : x;
                if (0 > left) {
                    /** @type {number} */
                    left = 0;
                }
                var top = y > self.page.maxh ? self.page.maxh : y;
                if (0 > top) {
                    /** @type {number} */
                    top = 0;
                }
                self.synched("scroll", function() {
                    self.setScrollTop(top);
                    self.setScrollLeft(left);
                });
            };
            /**
             * @return {undefined}
             */
            this.cancelScroll = function() {};
        }
        /**
         * @param {number} h
         * @param {number} t
         * @return {?}
         */
        this.doScrollBy = function(h, t) {
            /** @type {number} */
            h = t ? Math.floor((self.scroll.y - h) * self.scrollratio.y) : (self.timer ? self.newscrolly : self.getScrollTop(true)) - h;
            if (self.bouncescroll) {
                /** @type {number} */
                t = Math.round(self.view.h / 2);
                if (h < -t) {
                    /** @type {number} */
                    h = -t;
                } else {
                    if (h > self.page.maxh + t) {
                        h = self.page.maxh + t;
                    }
                }
            }
            /** @type {boolean} */
            self.cursorfreezed = false;
            py = self.getScrollTop(true);
            if (0 > h && 0 >= py) {
                return self.noticeCursor();
            }
            if (h > self.page.maxh && py >= self.page.maxh) {
                return self.checkContentSize(), self.noticeCursor();
            }
            self.doScrollTop(h);
        };
        /**
         * @param {number} t
         * @param {number} d
         * @return {?}
         */
        this.doScrollLeftBy = function(t, d) {
            /** @type {number} */
            t = d ? Math.floor((self.scroll.x - t) * self.scrollratio.x) : (self.timer ? self.newscrollx : self.getScrollLeft(true)) - t;
            if (self.bouncescroll) {
                /** @type {number} */
                d = Math.round(self.view.w / 2);
                if (t < -d) {
                    /** @type {number} */
                    t = -d;
                } else {
                    if (t > self.page.maxw + d) {
                        t = self.page.maxw + d;
                    }
                }
            }
            /** @type {boolean} */
            self.cursorfreezed = false;
            px = self.getScrollLeft(true);
            if (0 > t && 0 >= px || t > self.page.maxw && px >= self.page.maxw) {
                return self.noticeCursor();
            }
            self.doScrollLeft(t);
        };
        /**
         * @param {number} y
         * @param {?} animation
         * @return {undefined}
         */
        this.doScrollTo = function(y, animation) {
            /** @type {boolean} */
            self.cursorfreezed = false;
            self.doScrollTop(y);
        };
        /**
         * @return {undefined}
         */
        this.checkContentSize = function() {
            var size = self.getContentSize();
            if (!(size.h == self.page.h && size.w == self.page.w)) {
                self.resize(false, size);
            }
        };
        /**
         * @param {?} callback
         * @return {undefined}
         */
        self.onscroll = function(callback) {
            if (!(self.rail.drag || self.cursorfreezed)) {
                self.synched("scroll", function() {
                    /** @type {number} */
                    self.scroll.y = Math.round(self.getScrollTop() * (1 / self.scrollratio.y));
                    if (self.railh) {
                        /** @type {number} */
                        self.scroll.x = Math.round(self.getScrollLeft() * (1 / self.scrollratio.x));
                    }
                    self.noticeCursor();
                });
            }
        };
        self.bind(self.docscroll, "scroll", self.onscroll);
        /**
         * @param {!Object} event
         * @return {?}
         */
        this.doZoomIn = function(event) {
            if (!self.zoomactive) {
                /** @type {boolean} */
                self.zoomactive = true;
                self.zoomrestore = {
                    style: {}
                };
                /** @type {!Array<string>} */
                var value = "position top left zIndex backgroundColor marginTop marginBottom marginLeft marginRight".split(" ");
                var acs = self.win[0].style;
                var name;
                for (name in value) {
                    /** @type {string} */
                    var i = value[name];
                    self.zoomrestore.style[i] = "undefined" != typeof acs[i] ? acs[i] : "";
                }
                self.zoomrestore.style.width = self.win.css("width");
                self.zoomrestore.style.height = self.win.css("height");
                self.zoomrestore.padding = {
                    w: self.win.outerWidth() - self.win.width(),
                    h: self.win.outerHeight() - self.win.height()
                };
                if (options.isios4) {
                    self.zoomrestore.scrollTop = $(window).scrollTop();
                    $(window).scrollTop(0);
                }
                self.win.css({
                    position: options.isios4 ? "absolute" : "fixed",
                    top: 0,
                    left: 0,
                    "z-index": z + 100,
                    margin: "0px"
                });
                value = self.win.css("backgroundColor");
                if ("" == value || /transparent|rgba\(0, 0, 0, 0\)|rgba\(0,0,0,0\)/.test(value)) {
                    self.win.css("backgroundColor", "#fff");
                }
                self.rail.css({
                    "z-index": z + 101
                });
                self.zoom.css({
                    "z-index": z + 102
                });
                self.zoom.css("backgroundPosition", "0px -18px");
                self.resizeZoom();
                if (self.onzoomin) {
                    self.onzoomin.call(self);
                }
                return self.cancelEvent(event);
            }
        };
        /**
         * @param {!Object} event
         * @return {?}
         */
        this.doZoomOut = function(event) {
            if (self.zoomactive) {
                return self.zoomactive = false, self.win.css("margin", ""), self.win.css(self.zoomrestore.style), options.isios4 && $(window).scrollTop(self.zoomrestore.scrollTop), self.rail.css({
                    "z-index": self.zindex
                }), self.zoom.css({
                    "z-index": self.zindex
                }), self.zoomrestore = false, self.zoom.css("backgroundPosition", "0px 0px"), self.onResize(), self.onzoomout && self.onzoomout.call(self), self.cancelEvent(event);
            }
        };
        /**
         * @param {!Object} e
         * @return {?}
         */
        this.doZoom = function(e) {
            return self.zoomactive ? self.doZoomOut(e) : self.doZoomIn(e);
        };
        /**
         * @return {undefined}
         */
        this.resizeZoom = function() {
            if (self.zoomactive) {
                var stop = self.getScrollTop();
                self.win.css({
                    width: $(window).width() - self.zoomrestore.padding.w + "px",
                    height: $(window).height() - self.zoomrestore.padding.h + "px"
                });
                self.onResize();
                self.setScrollTop(Math.min(self.page.maxh, stop));
            }
        };
        this.init();
        $.nicescroll.push(this);
    };
    /**
     * @param {string} cmp
     * @return {undefined}
     */
    var Console = function(cmp) {
        var self = this;
        /** @type {string} */
        this.nc = cmp;
        /** @type {number} */
        this.steptime = this.lasttime = this.speedy = this.speedx = this.lasty = this.lastx = 0;
        /** @type {boolean} */
        this.snapy = this.snapx = false;
        /** @type {number} */
        this.demuly = this.demulx = 0;
        /** @type {number} */
        this.lastscrolly = this.lastscrollx = -1;
        /** @type {number} */
        this.timer = this.chky = this.chkx = 0;
        /**
         * @return {?}
         */
        this.time = function() {
            return +new Date;
        };
        /**
         * @param {number} x
         * @param {number} y
         * @return {undefined}
         */
        this.reset = function(x, y) {
            self.stop();
            var tickZoom = self.time();
            /** @type {number} */
            self.steptime = 0;
            self.lasttime = tickZoom;
            /** @type {number} */
            self.speedx = 0;
            /** @type {number} */
            self.speedy = 0;
            /** @type {number} */
            self.lastx = x;
            /** @type {number} */
            self.lasty = y;
            /** @type {number} */
            self.lastscrollx = -1;
            /** @type {number} */
            self.lastscrolly = -1;
        };
        /**
         * @param {number} x
         * @param {number} y
         * @return {undefined}
         */
        this.update = function(x, y) {
            var time = self.time();
            /** @type {number} */
            self.steptime = time - self.lasttime;
            self.lasttime = time;
            /** @type {number} */
            time = y - self.lasty;
            /** @type {number} */
            var px = x - self.lastx;
            var now = self.nc.getScrollTop();
            var w = self.nc.getScrollLeft();
            now = now + time;
            w = w + px;
            /** @type {boolean} */
            self.snapx = 0 > w || w > self.nc.page.maxw;
            /** @type {boolean} */
            self.snapy = 0 > now || now > self.nc.page.maxh;
            /** @type {number} */
            self.speedx = px;
            /** @type {number} */
            self.speedy = time;
            /** @type {number} */
            self.lastx = x;
            /** @type {number} */
            self.lasty = y;
        };
        /**
         * @return {undefined}
         */
        this.stop = function() {
            self.nc.unsynched("domomentum2d");
            if (self.timer) {
                clearTimeout(self.timer);
            }
            /** @type {number} */
            self.timer = 0;
            /** @type {number} */
            self.lastscrollx = -1;
            /** @type {number} */
            self.lastscrolly = -1;
        };
        /**
         * @param {number} w
         * @param {number} h
         * @return {undefined}
         */
        this.doSnapy = function(w, h) {
            /** @type {boolean} */
            var e = false;
            if (0 > h) {
                /** @type {number} */
                h = 0;
                /** @type {boolean} */
                e = true;
            } else {
                if (h > self.nc.page.maxh) {
                    h = self.nc.page.maxh;
                    /** @type {boolean} */
                    e = true;
                }
            }
            if (0 > w) {
                /** @type {number} */
                w = 0;
                /** @type {boolean} */
                e = true;
            } else {
                if (w > self.nc.page.maxw) {
                    w = self.nc.page.maxw;
                    /** @type {boolean} */
                    e = true;
                }
            }
            if (e) {
                self.nc.doScrollPos(w, h, self.nc.opt.snapbackspeed);
            }
        };
        /**
         * @param {number} id
         * @return {undefined}
         */
        this.doMomentum = function(id) {
            var form = self.time();
            var item = id ? form + id : self.lasttime;
            id = self.nc.getScrollLeft();
            var w = self.nc.getScrollTop();
            var maxWeeks = self.nc.page.maxh;
            var max = self.nc.page.maxw;
            /** @type {number} */
            self.speedx = 0 < max ? Math.min(60, self.speedx) : 0;
            /** @type {number} */
            self.speedy = 0 < maxWeeks ? Math.min(60, self.speedy) : 0;
            item = item && 50 >= form - item;
            if (0 > w || w > maxWeeks || 0 > id || id > max) {
                /** @type {boolean} */
                item = false;
            }
            /** @type {(boolean|number)} */
            id = self.speedx && item ? self.speedx : false;
            if (self.speedy && item && self.speedy || id) {
                /** @type {number} */
                var delay = Math.max(16, self.steptime);
                if (50 < delay) {
                    /** @type {number} */
                    id = delay / 50;
                    self.speedx *= id;
                    self.speedy *= id;
                    /** @type {number} */
                    delay = 50;
                }
                /** @type {number} */
                self.demulxy = 0;
                self.lastscrollx = self.nc.getScrollLeft();
                self.chkx = self.lastscrollx;
                self.lastscrolly = self.nc.getScrollTop();
                self.chky = self.lastscrolly;
                var pos = self.lastscrollx;
                var w = self.lastscrolly;
                /**
                 * @return {undefined}
                 */
                var init = function() {
                    /** @type {number} */
                    var itemBuffer = 600 < self.time() - form ? .04 : .02;
                    if (self.speedx && (pos = Math.floor(self.lastscrollx - self.speedx * (1 - self.demulxy)), self.lastscrollx = pos, 0 > pos || pos > max)) {
                        /** @type {number} */
                        itemBuffer = .1;
                    }
                    if (self.speedy && (w = Math.floor(self.lastscrolly - self.speedy * (1 - self.demulxy)), self.lastscrolly = w, 0 > w || w > maxWeeks)) {
                        /** @type {number} */
                        itemBuffer = .1;
                    }
                    /** @type {number} */
                    self.demulxy = Math.min(1, self.demulxy + itemBuffer);
                    self.nc.synched("domomentum2d", function() {
                        if (self.speedx) {
                            if (self.nc.getScrollLeft() != self.chkx) {
                                self.stop();
                            }
                            self.chkx = pos;
                            self.nc.setScrollLeft(pos);
                        }
                        if (self.speedy) {
                            if (self.nc.getScrollTop() != self.chky) {
                                self.stop();
                            }
                            self.chky = w;
                            self.nc.setScrollTop(w);
                        }
                        if (!self.timer) {
                            self.nc.hideCursor();
                            self.doSnapy(pos, w);
                        }
                    });
                    if (1 > self.demulxy) {
                        /** @type {number} */
                        self.timer = setTimeout(init, delay);
                    } else {
                        self.stop();
                        self.nc.hideCursor();
                        self.doSnapy(pos, w);
                    }
                };
                init();
            } else {
                self.doSnapy(self.nc.getScrollLeft(), self.nc.getScrollTop());
            }
        };
    };
    /** @type {function(!Object): ?} */
    var t = $.fn.scrollTop;
    $.cssHooks.pageYOffset = {
        get: function(type, e, d) {
            return (e = $.data(type, "__nicescroll") || false) && e.ishwscroll ? e.getScrollTop() : t.call(type);
        },
        set: function(type, h) {
            var me = $.data(type, "__nicescroll") || false;
            if (me && me.ishwscroll) {
                me.setScrollTop(parseInt(h));
            } else {
                t.call(type, h);
            }
            return this;
        }
    };
    /**
     * @param {!Object} name
     * @return {?}
     */
    $.fn.scrollTop = function(name) {
        if ("undefined" == typeof name) {
            var obj = this[0] ? $.data(this[0], "__nicescroll") || false : false;
            return obj && obj.ishwscroll ? obj.getScrollTop() : t.call(this);
        }
        return this.each(function() {
            var me = $.data(this, "__nicescroll") || false;
            if (me && me.ishwscroll) {
                me.setScrollTop(parseInt(name));
            } else {
                t.call($(this), name);
            }
        });
    };
    /** @type {function(number): ?} */
    var l = $.fn.scrollLeft;
    $.cssHooks.pageXOffset = {
        get: function(a, doc, leagueId) {
            return (doc = $.data(a, "__nicescroll") || false) && doc.ishwscroll ? doc.getScrollLeft() : l.call(a);
        },
        set: function(type, x) {
            var data = $.data(type, "__nicescroll") || false;
            if (data && data.ishwscroll) {
                data.setScrollLeft(parseInt(x));
            } else {
                l.call(type, x);
            }
            return this;
        }
    };
    /**
     * @param {number} x
     * @return {?}
     */
    $.fn.scrollLeft = function(x) {
        if ("undefined" == typeof x) {
            var doc = this[0] ? $.data(this[0], "__nicescroll") || false : false;
            return doc && doc.ishwscroll ? doc.getScrollLeft() : l.call(this);
        }
        return this.each(function() {
            var colors = $.data(this, "__nicescroll") || false;
            if (colors && colors.ishwscroll) {
                colors.setScrollLeft(parseInt(x));
            } else {
                l.call($(this), x);
            }
        });
    };
    /**
     * @param {!NodeList} data
     * @return {?}
     */
    var List = function(data) {
        var val = this;
        /** @type {number} */
        this.length = 0;
        /** @type {string} */
        this.name = "nicescrollarray";
        /**
         * @param {!Object} name
         * @return {?}
         */
        this.each = function(name) {
            /** @type {number} */
            var i = 0;
            for (; i < val.length; i++) {
                name.call(val[i]);
            }
            return val;
        };
        /**
         * @param {!Object} value
         * @return {undefined}
         */
        this.push = function(value) {
            /** @type {!Object} */
            val[val.length] = value;
            val.length++;
        };
        /**
         * @param {number} x
         * @return {?}
         */
        this.eq = function(x) {
            return val[x];
        };
        if (data) {
            /** @type {number} */
            a = 0;
            for (; a < data.length; a++) {
                var previous = $.data(data[a], "__nicescroll") || false;
                if (previous) {
                    this[this.length] = previous;
                    this.length++;
                }
            }
        }
        return this;
    };
    (function(e, a, d) {
        /** @type {number} */
        var f = 0;
        for (; f < a.length; f++) {
            d(e, a[f]);
        }
    })(List.prototype, "show hide toggle onResize resize remove stop doScrollPos".split(" "), function(instance, modelFunctionName) {
        /**
         * @return {?}
         */
        instance[modelFunctionName] = function() {
            /** @type {!Arguments} */
            var original_arguments = arguments;
            return this.each(function() {
                this[modelFunctionName].apply(this, original_arguments);
            });
        };
    });
    /**
     * @param {?} index
     * @return {?}
     */
    $.fn.getNiceScroll = function(index) {
        return "undefined" == typeof index ? new List(this) : $.data(this[index], "__nicescroll") || false;
    };
    $.extend($.expr[":"], {
        nicescroll: function(c) {
            return $.data(c, "__nicescroll") ? true : false;
        }
    });
    /**
     * @param {!Object} obj
     * @param {!Object} config
     * @return {?}
     */
    $.fn.niceScroll = function(obj, config) {
        if (!("undefined" != typeof config || "object" != typeof obj || "jquery" in obj)) {
            /** @type {!Object} */
            config = obj;
            /** @type {boolean} */
            obj = false;
        }
        var result = new List;
        if ("undefined" == typeof config) {
            config = {};
        }
        if (obj) {
            config.doc = $(obj);
            config.win = $(this);
        }
        /** @type {boolean} */
        var root = !("doc" in config);
        if (!(root || "win" in config)) {
            config.win = $(this);
        }
        this.each(function() {
            var c = $(this).data("__nicescroll") || false;
            if (!c) {
                config.doc = root ? $(this) : config.doc;
                c = new init(config, $(this));
                $(this).data("__nicescroll", c);
            }
            result.push(c);
        });
        return 1 == result.length ? result[0] : result;
    };
    window.NiceScroll = {
        getjQuery: function() {
            return $;
        }
    };
    if (!$.nicescroll) {
        $.nicescroll = new List;
        $.nicescroll.options = defaultOptions;
    }
})(jQuery);
(function($) {
    $.waitForImages = {
        hasImageProperties: ["backgroundImage", "listStyleImage", "borderImage", "borderCornerImage", "cursor"]
    };
    /**
     * @param {!Node} obj
     * @return {?}
     */
    $.expr[":"].uncached = function(obj) {
        if (!$(obj).is('img[src!=""]') || $(obj).is("picture > img")) {
            return false;
        }
        /** @type {!Image} */
        var img = new Image;
        if (obj.src) {
            img.src = obj.src;
        }
        return !img.complete;
    };
    /**
     * @param {!Object} callback
     * @param {string} eachCallback
     * @param {boolean} waitForAll
     * @return {?}
     */
    $.fn.waitForImages = function(callback, eachCallback, waitForAll) {
        /** @type {number} */
        var allImgsLength = 0;
        /** @type {number} */
        var allImgsLoaded = 0;
        if ($.isPlainObject(callback)) {
            waitForAll = callback.waitForAll;
            eachCallback = callback.each;
            callback = callback.finished;
        }
        callback = callback || $.noop;
        eachCallback = eachCallback || $.noop;
        /** @type {boolean} */
        waitForAll = !!waitForAll;
        if (!$.isFunction(callback) || !$.isFunction(eachCallback)) {
            throw new TypeError("An invalid callback was supplied.");
        }
        return this.each(function() {
            var element = $(this);
            /** @type {!Array} */
            var items = [];
            var m = $.waitForImages.hasImageProperties || [];
            /** @type {!RegExp} */
            var p = /url\(\s*(['"]?)(.*?)\1\s*\)/g;
            if (waitForAll) {
                element.find("*").addBack().each(function() {
                    var $img = $(this);
                    if ($img.is("img:uncached")) {
                        items.push({
                            src: $img.attr("src"),
                            element: $img[0]
                        });
                    }
                    $.each(m, function(json, a) {
                        json = $img.css(a);
                        if (!json) {
                            return true;
                        }
                        for (; a = p.exec(json);) {
                            items.push({
                                src: a[2],
                                element: $img[0]
                            });
                        }
                    });
                });
            } else {
                element.find("img:uncached").each(function() {
                    items.push({
                        src: this.src,
                        element: this
                    });
                });
            }
            /** @type {number} */
            allImgsLength = items.length;
            /** @type {number} */
            allImgsLoaded = 0;
            if (0 === allImgsLength) {
                callback.call(element[0]);
            }
            $.each(items, function(image, img) {
                /** @type {!Image} */
                image = new Image;
                $(image).on("load.waitForImages error.waitForImages", function(verifiedEvent) {
                    allImgsLoaded++;
                    eachCallback.call(img.element, allImgsLoaded, allImgsLength, "load" == verifiedEvent.type);
                    if (allImgsLoaded == allImgsLength) {
                        return callback.call(element[0]), false;
                    }
                });
                image.src = img.src;
            });
        });
    };
})(jQuery);
(function(window, factory) {
    if ("function" === typeof define && define.amd) {
        define(["jquery"], function(jQuery) {
            return factory(window, jQuery);
        });
    } else {
        if ("object" === typeof exports) {
            factory(window, require("jquery"));
        } else {
            factory(window, window.jQuery);
        }
    }
})("undefined" !== typeof window ? window : this, function(window, $) {
    /**
     * @param {!Object} m
     * @param {!Object} a
     * @return {?}
     */
    function matrixEquals(m, a) {
        var j = m.length;
        for (; --j;) {
            if (+m[j] !== +a[j]) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {boolean} opts
     * @return {?}
     */
    function createResetOptions(opts) {
        var options = {
            range: true,
            animate: true
        };
        if ("boolean" === typeof opts) {
            /** @type {boolean} */
            options.animate = opts;
        } else {
            $.extend(options, opts);
        }
        return options;
    }
    /**
     * @param {!Object} a
     * @param {?} b
     * @param {?} c
     * @param {?} d
     * @param {?} e
     * @param {?} f
     * @param {number} options
     * @param {number} values
     * @param {number} align
     * @return {undefined}
     */
    function Matrix(a, b, c, d, e, f, options, values, align) {
        if ("array" === $.type(a)) {
            /** @type {!Array} */
            this.elements = [+a[0], +a[2], +a[4], +a[1], +a[3], +a[5], 0, 0, 1];
        } else {
            /** @type {!Array} */
            this.elements = [a, b, c, d, e, f, options || 0, values || 0, align || 1];
        }
    }
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} z
     * @return {undefined}
     */
    function Vector(x, y, z) {
        /** @type {!Array} */
        this.elements = [x, y, z];
    }
    /**
     * @param {!Object} name
     * @param {!Object} value
     * @return {?}
     */
    function Panzoom(name, value) {
        if (!(this instanceof Panzoom)) {
            return new Panzoom(name, value);
        }
        if (1 !== name.nodeType) {
            $.error("Panzoom called on non-Element node");
        }
        if (!$.contains(document, name)) {
            $.error("Panzoom element must be attached to the document");
        }
        var d = $.data(name, "__pz__");
        if (d) {
            return d;
        }
        this.options = value = $.extend({}, Panzoom.defaults, value);
        /** @type {!Object} */
        this.elem = name;
        d = this.$elem = $(name);
        this.$set = value.$set && value.$set.length ? value.$set : d;
        this.$doc = $(name.ownerDocument || document);
        this.$parent = d.parent();
        /** @type {boolean} */
        this.isSVG = node.test(name.namespaceURI) && "svg" !== name.nodeName.toLowerCase();
        /** @type {boolean} */
        this.panning = false;
        this._buildTransform();
        this._transform = !this.isSVG && $.cssProps.transform.replace(rupper, "-$1").toLowerCase();
        this._buildTransition();
        this.resetDimensions();
        var doc = $();
        var _events = this;
        $.each(["$zoomIn", "$zoomOut", "$zoomRange", "$reset"], function(b, eventLongname) {
            _events[eventLongname] = value[eventLongname] || doc;
        });
        this.enable();
        $.data(name, "__pz__", this);
    }
    /** @type {!Array<string>} */
    var l = "over out down up move enter leave cancel".split(" ");
    var me = $.extend({}, $.event.mouseHooks);
    var events = {};
    if (window.PointerEvent) {
        $.each(l, function(b, name) {
            $.event.fixHooks[events[name] = "pointer" + name] = me;
        });
    } else {
        var names = me.props;
        me.props = names.concat("touches changedTouches targetTouches altKey ctrlKey metaKey shiftKey".split(" "));
        /**
         * @param {!Object} name
         * @param {!Object} value
         * @return {?}
         */
        me.filter = function(name, value) {
            var options;
            var i = names.length;
            if (!value.pageX && value.touches && (options = value.touches[0])) {
                for (; i--;) {
                    name[names[i]] = options[names[i]];
                }
            }
            return name;
        };
        $.each(l, function(eventName, name) {
            if (2 > eventName) {
                /** @type {string} */
                events[name] = "mouse" + name;
            } else {
                /** @type {string} */
                eventName = "touch" + ("down" === name ? "start" : "up" === name ? "end" : name);
                $.event.fixHooks[eventName] = me;
                /** @type {string} */
                events[name] = eventName + " mouse" + name;
            }
        });
    }
    $.pointertouch = events;
    /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
    var slice = Array.prototype.slice;
    /** @type {boolean} */
    var pointerEvents = !!window.PointerEvent;
    /** @type {!RegExp} */
    var rupper = /([A-Z])/g;
    /** @type {!RegExp} */
    var node = /^http:[\w\.\/]+svg$/;
    /** @type {!RegExp} */
    var rinline = /^inline/;
    /** @type {!RegExp} */
    var rmatrix = /^matrix\((\-?[\d\.e]+),?\s*(\-?[\d\.e]+),?\s*(\-?[\d\.e]+),?\s*(\-?[\d\.e]+),?\s*(\-?[\d\.e]+),?\s*(\-?[\d\.e]+)\)$/;
    Matrix.prototype = {
        x: function(name) {
            var a = this.elements;
            var b = name.elements;
            return name instanceof Vector && 3 === b.length ? new Vector(a[0] * b[0] + a[1] * b[1] + a[2] * b[2], a[3] * b[0] + a[4] * b[1] + a[5] * b[2], a[6] * b[0] + a[7] * b[1] + a[8] * b[2]) : b.length === a.length ? new Matrix(a[0] * b[0] + a[1] * b[3] + a[2] * b[6], a[0] * b[1] + a[1] * b[4] + a[2] * b[7], a[0] * b[2] + a[1] * b[5] + a[2] * b[8], a[3] * b[0] + a[4] * b[3] + a[5] * b[6], a[3] * b[1] + a[4] * b[4] + a[5] * b[7], a[3] * b[2] + a[4] * b[5] + a[5] * b[8], a[6] * b[0] + a[7] * b[3] +
                a[8] * b[6], a[6] * b[1] + a[7] * b[4] + a[8] * b[7], a[6] * b[2] + a[7] * b[5] + a[8] * b[8]) : false;
        },
        inverse: function() {
            /** @type {number} */
            var d = 1 / this.determinant();
            var a = this.elements;
            return new Matrix(d * (a[8] * a[4] - a[7] * a[5]), d * -(a[8] * a[1] - a[7] * a[2]), d * (a[5] * a[1] - a[4] * a[2]), d * -(a[8] * a[3] - a[6] * a[5]), d * (a[8] * a[0] - a[6] * a[2]), d * -(a[5] * a[0] - a[3] * a[2]), d * (a[7] * a[3] - a[6] * a[4]), d * -(a[7] * a[0] - a[6] * a[1]), d * (a[4] * a[0] - a[3] * a[1]));
        },
        determinant: function() {
            var a = this.elements;
            return a[0] * (a[8] * a[4] - a[7] * a[5]) - a[3] * (a[8] * a[1] - a[7] * a[2]) + a[6] * (a[5] * a[1] - a[4] * a[2]);
        }
    };
    /** @type {function(number): ?} */
    Vector.prototype.e = Matrix.prototype.e = function(i) {
        return this.elements[i];
    };
    /** @type {!RegExp} */
    Panzoom.rmatrix = rmatrix;
    Panzoom.events = $.pointertouch;
    Panzoom.defaults = {
        eventNamespace: ".panzoom",
        transition: true,
        cursor: "move",
        disablePan: false,
        disableZoom: false,
        increment: .3,
        minScale: .4,
        maxScale: 5,
        rangeStep: .05,
        duration: 200,
        easing: "ease-in-out",
        contain: false
    };
    Panzoom.prototype = {
        constructor: Panzoom,
        instance: function() {
            return this;
        },
        enable: function() {
            this._initStyle();
            this._bind();
            /** @type {boolean} */
            this.disabled = false;
        },
        disable: function() {
            /** @type {boolean} */
            this.disabled = true;
            this._resetStyle();
            this._unbind();
        },
        isDisabled: function() {
            return this.disabled;
        },
        destroy: function() {
            this.disable();
            $.removeData(this.elem, "__pz__");
        },
        resetDimensions: function() {
            var parent = this.$parent;
            this.container = {
                width: parent.innerWidth(),
                height: parent.innerHeight()
            };
            parent = parent.offset();
            var elem = this.elem;
            var dims = this.$elem;
            if (this.isSVG) {
                dims = elem.getBoundingClientRect();
                dims = {
                    left: dims.left - parent.left,
                    top: dims.top - parent.top,
                    width: dims.width,
                    height: dims.height,
                    margin: {
                        left: 0,
                        top: 0
                    }
                };
            } else {
                dims = {
                    left: $.css(elem, "left", true) || 0,
                    top: $.css(elem, "top", true) || 0,
                    width: dims.innerWidth(),
                    height: dims.innerHeight(),
                    margin: {
                        top: $.css(elem, "marginTop", true) || 0,
                        left: $.css(elem, "marginLeft", true) || 0
                    }
                };
            }
            dims.widthBorder = $.css(elem, "borderLeftWidth", true) + $.css(elem, "borderRightWidth", true) || 0;
            dims.heightBorder = $.css(elem, "borderTopWidth", true) + $.css(elem, "borderBottomWidth", true) || 0;
            this.dimensions = dims;
        },
        reset: function(options) {
            options = createResetOptions(options);
            var matrix = this.setMatrix(this._origTransform, options);
            if (!options.silent) {
                this._trigger("reset", matrix);
            }
        },
        resetZoom: function(options) {
            options = createResetOptions(options);
            var origMatrix = this.getMatrix(this._origTransform);
            options.dValue = origMatrix[3];
            this.zoom(origMatrix[0], options);
        },
        resetPan: function(options) {
            var origMatrix = this.getMatrix(this._origTransform);
            this.pan(origMatrix[4], origMatrix[5], createResetOptions(options));
        },
        setTransform: function(transform) {
            /** @type {string} */
            var method = this.isSVG ? "attr" : "style";
            var $set = this.$set;
            var i = $set.length;
            for (; i--;) {
                $[method]($set[i], "transform", transform);
            }
        },
        getTransform: function(transform) {
            var transformElem = this.$set[0];
            if (transform) {
                this.setTransform(transform);
            } else {
                transform = $[this.isSVG ? "attr" : "style"](transformElem, "transform");
            }
            if (!("none" === transform || rmatrix.test(transform))) {
                this.setTransform(transform = $.css(transformElem, "transform"));
            }
            return transform || "none";
        },
        getMatrix: function(transform) {
            if (transform = rmatrix.exec(transform || this.getTransform())) {
                transform.shift();
            }
            return transform || [1, 0, 0, 1, 0, 0];
        },
        setMatrix: function(matrix, options) {
            if (!this.disabled) {
                if (!options) {
                    options = {};
                }
                if ("string" === typeof matrix) {
                    matrix = this.getMatrix(matrix);
                }
                var dims;
                var container;
                var length;
                var marginH;
                var i;
                var diffH;
                var offset;
                var top;
                var width;
                var height;
                /** @type {number} */
                var scale = +matrix[0];
                var $parent = this.$parent;
                if (i = "undefined" !== typeof options.contain ? options.contain : this.options.contain) {
                    dims = this._checkDims();
                    container = this.container;
                    width = dims.width + dims.widthBorder;
                    height = dims.height + dims.heightBorder;
                    /** @type {number} */
                    length = (width * Math.abs(scale) - container.width) / 2;
                    /** @type {number} */
                    marginH = (height * Math.abs(scale) - container.height) / 2;
                    offset = dims.left + dims.margin.left;
                    top = dims.top + dims.margin.top;
                    if ("invert" === i) {
                        /** @type {number} */
                        i = width > container.width ? width - container.width : 0;
                        /** @type {number} */
                        diffH = height > container.height ? height - container.height : 0;
                        /** @type {number} */
                        length = length + (container.width - width) / 2;
                        /** @type {number} */
                        marginH = marginH + (container.height - height) / 2;
                        /** @type {number} */
                        matrix[4] = Math.max(Math.min(matrix[4], length - offset), -length - offset - i);
                        /** @type {number} */
                        matrix[5] = Math.max(Math.min(matrix[5], marginH - top), -marginH - top - diffH + dims.heightBorder);
                    } else {
                        /** @type {number} */
                        marginH = marginH + dims.heightBorder / 2;
                        /** @type {number} */
                        i = container.width > width ? container.width - width : 0;
                        /** @type {number} */
                        diffH = container.height > height ? container.height - height : 0;
                        if ("center" === $parent.css("textAlign") && rinline.test($.css(this.elem, "display"))) {
                            /** @type {number} */
                            i = 0;
                        } else {
                            /** @type {number} */
                            length = marginH = 0;
                        }
                        /** @type {number} */
                        matrix[4] = Math.min(Math.max(matrix[4], length - offset), -length - offset + i);
                        /** @type {number} */
                        matrix[5] = Math.min(Math.max(matrix[5], marginH - top), -marginH - top + diffH);
                    }
                }
                if ("skip" !== options.animate) {
                    this.transition(!options.animate);
                }
                if (options.range) {
                    this.$zoomRange.val(scale);
                }
                this.setTransform("matrix(" + matrix.join(",") + ")");
                if (!options.silent) {
                    this._trigger("change", matrix);
                }
                return matrix;
            }
        },
        isPanning: function() {
            return this.panning;
        },
        transition: function(name) {
            if (this._transition) {
                name = name || !this.options.transition ? "none" : this._transition;
                var $set = this.$set;
                var i = $set.length;
                for (; i--;) {
                    if ($.style($set[i], "transition") !== name) {
                        $.style($set[i], "transition", name);
                    }
                }
            }
        },
        pan: function(y, x, options) {
            if (!this.options.disablePan) {
                if (!options) {
                    options = {};
                }
                var matrix = options.matrix;
                if (!matrix) {
                    matrix = this.getMatrix();
                }
                if (options.relative) {
                    y = y + +matrix[4];
                    x = x + +matrix[5];
                }
                /** @type {number} */
                matrix[4] = y;
                /** @type {number} */
                matrix[5] = x;
                this.setMatrix(matrix, options);
                if (!options.silent) {
                    this._trigger("pan", matrix[4], matrix[5]);
                }
            }
        },
        zoom: function(scale, options) {
            if ("object" === typeof scale) {
                /** @type {number} */
                options = scale;
                /** @type {null} */
                scale = null;
            } else {
                if (!options) {
                    options = {};
                }
            }
            options = $.extend({}, this.options, options);
            if (!options.disableZoom) {
                /** @type {boolean} */
                var animate = false;
                var matrix = options.matrix || this.getMatrix();
                if ("number" !== typeof scale) {
                    /** @type {number} */
                    scale = +matrix[0] + options.increment * (scale ? -1 : 1);
                    /** @type {boolean} */
                    animate = true;
                }
                if (scale > options.maxScale) {
                    scale = options.maxScale;
                } else {
                    if (scale < options.minScale) {
                        scale = options.minScale;
                    }
                }
                var d = options.focal;
                if (d && !options.disablePan) {
                    var dims = this._checkDims();
                    var x = d.clientX;
                    d = d.clientY;
                    if (!this.isSVG) {
                        /** @type {number} */
                        x = x - (dims.width + dims.widthBorder) / 2;
                        /** @type {number} */
                        d = d - (dims.height + dims.heightBorder) / 2;
                    }
                    var v = new Vector(x, d, 1);
                    dims = new Matrix(matrix);
                    var s = this.parentOffset || this.$parent.offset();
                    s = new Matrix(1, 0, s.left - this.$doc.scrollLeft(), 0, 1, s.top - this.$doc.scrollTop());
                    v = dims.inverse().x(s.inverse().x(v));
                    /** @type {number} */
                    var scaleBy = scale / matrix[0];
                    dims = dims.x(new Matrix([scaleBy, 0, 0, scaleBy, 0, 0]));
                    v = s.x(dims.x(v));
                    /** @type {number} */
                    matrix[4] = +matrix[4] + (x - v.e(0));
                    /** @type {number} */
                    matrix[5] = +matrix[5] + (d - v.e(1));
                }
                /** @type {number} */
                matrix[0] = scale;
                matrix[3] = "number" === typeof options.dValue ? options.dValue : scale;
                this.setMatrix(matrix, {
                    animate: "boolean" === typeof options.animate ? options.animate : animate,
                    range: !options.noSetRange
                });
                if (!options.silent) {
                    this._trigger("zoom", matrix[0], options);
                }
            }
        },
        option: function(name, value) {
            var options;
            if (!name) {
                return $.extend({}, this.options);
            }
            if ("string" === typeof name) {
                if (1 === arguments.length) {
                    return void 0 !== this.options[name] ? this.options[name] : null;
                }
                options = {};
                options[name] = value;
            } else {
                /** @type {number} */
                options = name;
            }
            this._setOptions(options);
        },
        _setOptions: function(key) {
            $.each(key, $.proxy(function(key, value) {
                switch (key) {
                    case "disablePan":
                        this._resetStyle();
                    case "$zoomIn":
                    case "$zoomOut":
                    case "$zoomRange":
                    case "$reset":
                    case "disableZoom":
                    case "onStart":
                    case "onChange":
                    case "onZoom":
                    case "onPan":
                    case "onEnd":
                    case "onReset":
                    case "eventNamespace":
                        this._unbind();
                }
                /** @type {!Object} */
                this.options[key] = value;
                switch (key) {
                    case "disablePan":
                        this._initStyle();
                    case "$zoomIn":
                    case "$zoomOut":
                    case "$zoomRange":
                    case "$reset":
                        /** @type {!Object} */
                        this[key] = value;
                    case "disableZoom":
                    case "onStart":
                    case "onChange":
                    case "onZoom":
                    case "onPan":
                    case "onEnd":
                    case "onReset":
                    case "eventNamespace":
                        alert("bind");
                        this._bind();
                        break;
                    case "cursor":
                        $.style(this.elem, "cursor", value);
                        break;
                    case "minScale":
                        this.$zoomRange.attr("min", value);
                        break;
                    case "maxScale":
                        this.$zoomRange.attr("max", value);
                        break;
                    case "rangeStep":
                        this.$zoomRange.attr("step", value);
                        break;
                    case "startTransform":
                        this._buildTransform();
                        break;
                    case "duration":
                    case "easing":
                        this._buildTransition();
                    case "transition":
                        this.transition();
                        break;
                    case "$set":
                        if (value instanceof $ && value.length) {
                            /** @type {!Object} */
                            this.$set = value;
                            this._initStyle();
                            this._buildTransform();
                        }
                }
            }, this));
        },
        _initStyle: function() {
            var styles = {
                "backface-visibility": "hidden",
                "transform-origin": this.isSVG ? "0 0" : "50% 50%"
            };
            if (!this.options.disablePan) {
                styles.cursor = this.options.cursor;
            }
            this.$set.css(styles);
            var $parent = this.$parent;
            if ($parent.length && !$.nodeName($parent[0], "body")) {
                styles = {
                    overflow: "hidden"
                };
                if ("static" === $parent.css("position")) {
                    /** @type {string} */
                    styles.position = "relative";
                }
                $parent.css(styles);
            }
        },
        _resetStyle: function() {
            this.$elem.css({
                cursor: "",
                transition: ""
            });
            this.$parent.css({
                overflow: "",
                position: ""
            });
        },
        _bind: function() {
            var self = this;
            var options = this.options;
            var ns = options.eventNamespace;
            /** @type {string} */
            var p = pointerEvents ? "pointerdown" + ns : "touchstart" + ns + " mousedown" + ns;
            /** @type {string} */
            var click = pointerEvents ? "pointerup" + ns : "touchend" + ns + " click" + ns;
            var events = {};
            var c = this.$reset;
            var $zoomRange = this.$zoomRange;
            $.each("Start Change Zoom Pan End Reset".split(" "), function() {
                var fn = options["on" + this];
                if ($.isFunction(fn)) {
                    events["panzoom" + this.toLowerCase() + ns] = fn;
                }
            });
            if (!(options.disablePan && options.disableZoom)) {
                /**
                 * @param {!Object} e
                 * @return {undefined}
                 */
                events[p] = function(e) {
                    var touches;
                    if (!("touchstart" === e.type ? !(touches = e.touches) || options.disablePan || 2 !== touches.length : options.disablePan || 1 !== e.which)) {
                        e.preventDefault();
                        e.stopPropagation();
                        self._startMove(e, touches);
                    }
                };
            }
            this.$elem.on(events);
            if (c.length) {
                c.on(click, function(event) {
                    event.preventDefault();
                    self.reset();
                });
            }
            if ($zoomRange.length) {
                $zoomRange.attr({
                    step: options.rangeStep === Panzoom.defaults.rangeStep && $zoomRange.attr("step") || options.rangeStep,
                    min: options.minScale,
                    max: options.maxScale
                }).prop({
                    value: this.getMatrix()[0]
                });
            }
            if (!options.disableZoom) {
                p = this.$zoomIn;
                c = this.$zoomOut;
                if (p.length && c.length) {
                    p.on(click, function(event) {
                        event.preventDefault();
                        self.zoom();
                    });
                    c.on(click, function(event) {
                        event.preventDefault();
                        self.zoom(true);
                    });
                }
                if ($zoomRange.length) {
                    events = {};
                    /**
                     * @return {undefined}
                     */
                    events[(pointerEvents ? "pointerdown" : "mousedown") + ns] = function() {
                        self.transition(true);
                    };
                    /**
                     * @return {undefined}
                     */
                    events["change" + ns] = function() {
                        self.zoom(+this.value, {
                            noSetRange: true
                        });
                    };
                    $zoomRange.on(events);
                }
            }
        },
        _unbind: function() {
            this.$elem.add(this.$zoomIn).add(this.$zoomOut).add(this.$reset).off(this.options.eventNamespace);
        },
        _buildTransform: function() {
            return this._origTransform = this.getTransform(this.options.startTransform);
        },
        _buildTransition: function() {
            if (this._transform) {
                var options = this.options;
                /** @type {string} */
                this._transition = this._transform + " " + options.duration + "ms " + options.easing;
            }
        },
        _checkDims: function() {
            var dimensions = this.dimensions;
            if (!(dimensions.width && dimensions.height)) {
                this.resetDimensions();
            }
            return this.dimensions;
        },
        _getDistance: function(event) {
            var data = event[0];
            event = event[1];
            return Math.sqrt(Math.pow(Math.abs(event.clientX - data.clientX), 2) + Math.pow(Math.abs(event.clientY - data.clientY), 2));
        },
        _getMiddle: function(event) {
            var data = event[0];
            event = event[1];
            return {
                clientX: (event.clientX - data.clientX) / 2 + data.clientX,
                clientY: (event.clientY - data.clientY) / 2 + data.clientY
            };
        },
        _trigger: function(type) {
            if ("string" === typeof type) {
                /** @type {string} */
                type = "panzoom" + type;
            }
            this.$elem.triggerHandler(type, [this].concat(slice.call(arguments, 1)));
        },
        _startMove: function(move, touches) {
            var moveEvent;
            var endEvent;
            var startDistance;
            var startScale;
            var startMiddle;
            var startPageX;
            var startPageY;
            var self = this;
            var options = this.options;
            var ns = options.eventNamespace;
            var matrix = this.getMatrix();
            var original = matrix.slice(0);
            /** @type {number} */
            var origPageX = +original[4];
            /** @type {number} */
            var origPageY = +original[5];
            var panOptions = {
                matrix: matrix,
                animate: "skip"
            };
            if (pointerEvents) {
                /** @type {string} */
                moveEvent = "pointermove";
                /** @type {string} */
                endEvent = "pointerup";
            } else {
                if ("touchstart" === move.type) {
                    /** @type {string} */
                    moveEvent = "touchmove";
                    /** @type {string} */
                    endEvent = "touchend";
                } else {
                    /** @type {string} */
                    moveEvent = "mousemove";
                    /** @type {string} */
                    endEvent = "mouseup";
                }
            }
            moveEvent = moveEvent + ns;
            endEvent = endEvent + ns;
            this.transition(true);
            /** @type {boolean} */
            this.panning = true;
            this._trigger("start", move, touches);
            if (touches && 2 === touches.length) {
                startDistance = this._getDistance(touches);
                /** @type {number} */
                startScale = +matrix[0];
                startMiddle = this._getMiddle(touches);
                /**
                 * @param {!Object} e
                 * @return {undefined}
                 */
                move = function(e) {
                    e.preventDefault();
                    e = self._getMiddle(touches = e.touches);
                    /** @type {number} */
                    var diff = self._getDistance(touches) - startDistance;
                    self.zoom(options.increment / 100 * diff + startScale, {
                        focal: e,
                        matrix: matrix,
                        animate: false
                    });
                    self.pan(+matrix[4] + e.clientX - startMiddle.clientX, +matrix[5] + e.clientY - startMiddle.clientY, panOptions);
                    /** @type {!Object} */
                    startMiddle = e;
                };
            } else {
                startPageX = move.pageX;
                startPageY = move.pageY;
                /**
                 * @param {!Event} e
                 * @return {undefined}
                 */
                move = function(e) {
                    e.preventDefault();
                    self.pan(origPageX + e.pageX - startPageX, origPageY + e.pageY - startPageY, panOptions);
                };
            }
            $(document).off(ns).on(moveEvent, move).on(endEvent, function(e) {
                e.preventDefault();
                $(this).off(ns);
                /** @type {boolean} */
                self.panning = false;
                /** @type {string} */
                e.type = "panzoomend";
                self._trigger(e, matrix, !matrixEquals(matrix, original));
            });
        }
    };
    /** @type {function(!Object, !Object): ?} */
    $.Panzoom = Panzoom;
    /**
     * @param {string} options
     * @return {?}
     */
    $.fn.panzoom = function(options) {
        var instance;
        var X;
        var m;
        var result;
        return "string" === typeof options ? (result = [], X = slice.call(arguments, 1), this.each(function() {
            if (instance = $.data(this, "__pz__")) {
                if ("_" !== options.charAt(0) && "function" === typeof(m = instance[options]) && void 0 !== (m = m.apply(instance, X))) {
                    result.push(m);
                }
            } else {
                result.push(void 0);
            }
        }), result.length ? 1 === result.length ? result[0] : result : this) : this.each(function() {
            new Panzoom(this, options);
        });
    };
    return Panzoom;
});
(function(global, exports_1) {
    if ("object" === typeof exports && exports) {
        exports_1(exports);
    } else {
        exports_1(global.Mustache = {});
    }
})(this, function(exports) {
    /**
     * @param {!Object} obj
     * @return {?}
     */
    function isFunction(obj) {
        return "function" === typeof obj;
    }
    /**
     * @param {string} selector
     * @return {?}
     */
    function restore(selector) {
        return selector.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    }
    /**
     * @param {!Object} scanner
     * @param {!Object} start
     * @return {?}
     */
    function parse(scanner, start) {
        /**
         * @param {!Object} id
         * @return {undefined}
         */
        function when(id) {
            if ("string" === typeof id) {
                /** @type {!Array<string>} */
                id = id.split(C, 2);
            }
            if (!isArray(id) || 2 !== id.length) {
                throw Error("Invalid tags: " + id);
            }
            /** @type {!RegExp} */
            openingTagRe = new RegExp(restore(id[0]) + "\\s*");
            /** @type {!RegExp} */
            closingTagRe = new RegExp("\\s*" + restore(id[1]));
            /** @type {!RegExp} */
            closingCurlyRe = new RegExp("\\s*" + restore("}" + id[1]));
        }
        if (!scanner) {
            return [];
        }
        /** @type {!Array} */
        var timeEvents = [];
        /** @type {!Array} */
        var tokens = [];
        /** @type {!Array} */
        var spaces = [];
        /** @type {boolean} */
        var y = false;
        /** @type {boolean} */
        var x = false;
        var openingTagRe;
        var closingTagRe;
        var closingCurlyRe;
        when(start || exports.tags);
        scanner = new Scanner(scanner);
        var data;
        var value;
        var arg;
        for (; !scanner.eos();) {
            start = scanner.pos;
            if (value = scanner.scanUntil(openingTagRe)) {
                /** @type {number} */
                arg = 0;
                var argLen = value.length;
                for (; arg < argLen; ++arg) {
                    if (data = value.charAt(arg), test.call(expected, data) ? x = true : spaces.push(tokens.length), tokens.push(["text", data, start, start + 1]), start = start + 1, "\n" === data) {
                        if (y && !x) {
                            for (; spaces.length;) {
                                delete tokens[spaces.pop()];
                            }
                        } else {
                            /** @type {!Array} */
                            spaces = [];
                        }
                        /** @type {boolean} */
                        x = y = false;
                    }
                }
            }
            if (!scanner.scan(openingTagRe)) {
                break;
            }
            /** @type {boolean} */
            y = true;
            data = scanner.scan(tagRe) || "name";
            scanner.scan(equalsRe);
            if ("=" === data) {
                value = scanner.scanUntil(openingTagRe);
                scanner.scan(openingTagRe);
                scanner.scanUntil(closingTagRe);
            } else {
                if ("{" === data) {
                    value = scanner.scanUntil(closingCurlyRe);
                    scanner.scan(whiteRe);
                    scanner.scanUntil(closingTagRe);
                    /** @type {string} */
                    data = "&";
                } else {
                    value = scanner.scanUntil(closingTagRe);
                }
            }
            if (!scanner.scan(closingTagRe)) {
                throw Error("Unclosed tag at " + scanner.pos);
            }
            /** @type {!Array} */
            arg = [data, value, start, scanner.pos];
            tokens.push(arg);
            if ("#" === data || "^" === data) {
                timeEvents.push(arg);
            } else {
                if ("/" === data) {
                    data = timeEvents.pop();
                    if (!data) {
                        throw Error('Unopened section "' + value + '" at ' + start);
                    }
                    if (data[1] !== value) {
                        throw Error('Unclosed section "' + data[1] + '" at ' + start);
                    }
                } else {
                    if ("name" === data || "{" === data || "&" === data) {
                        /** @type {boolean} */
                        x = true;
                    } else {
                        if ("=" === data) {
                            when(value);
                        }
                    }
                }
            }
        }
        if (data = timeEvents.pop()) {
            throw Error('Unclosed section "' + data[1] + '" at ' + scanner.pos);
        }
        return nestTokens(squashTokens(tokens));
    }
    /**
     * @param {!Array} tokens
     * @return {?}
     */
    function squashTokens(tokens) {
        /** @type {!Array} */
        var squashedTokens = [];
        var token;
        var lastToken;
        /** @type {number} */
        var i = 0;
        var numTokens = tokens.length;
        for (; i < numTokens; ++i) {
            if (token = tokens[i]) {
                if ("text" === token[0] && lastToken && "text" === lastToken[0]) {
                    lastToken[1] += token[1];
                    lastToken[3] = token[3];
                } else {
                    squashedTokens.push(token);
                    lastToken = token;
                }
            }
        }
        return squashedTokens;
    }
    /**
     * @param {!NodeList} rules
     * @return {?}
     */
    function nestTokens(rules) {
        /** @type {!Array} */
        var len = [];
        /** @type {!Array} */
        var l = len;
        /** @type {!Array} */
        var e = [];
        var h;
        /** @type {number} */
        var i = 0;
        var rulesCount = rules.length;
        for (; i < rulesCount; ++i) {
            switch (h = rules[i], h[0]) {
                case "#":
                case "^":
                    l.push(h);
                    e.push(h);
                    /** @type {!Array} */
                    l = h[4] = [];
                    break;
                case "/":
                    l = e.pop();
                    l[5] = h[2];
                    l = 0 < e.length ? e[e.length - 1][4] : len;
                    break;
                default:
                    l.push(h);
            }
        }
        return len;
    }
    /**
     * @param {string} string
     * @return {undefined}
     */
    function Scanner(string) {
        this.tail = this.string = string;
        /** @type {number} */
        this.pos = 0;
    }
    /**
     * @param {!Object} view
     * @param {?} parentContext
     * @return {undefined}
     */
    function Context(view, parentContext) {
        this.view = null == view ? {} : view;
        this.cache = {
            ".": this.view
        };
        this.parent = parentContext;
    }
    /**
     * @return {undefined}
     */
    function Writer() {
        this.cache = {};
    }
    /** @type {function(this:*): string} */
    var objToString = Object.prototype.toString;
    /** @type {function(*): boolean} */
    var isArray = Array.isArray || function(obj) {
        return "[object Array]" === objToString.call(obj);
    };
    /** @type {function(this:RegExp, *): boolean} */
    var test = RegExp.prototype.test;
    /** @type {!RegExp} */
    var expected = /\S/;
    var entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "/": "&#x2F;"
    };
    /** @type {!RegExp} */
    var equalsRe = /\s*/;
    /** @type {!RegExp} */
    var C = /\s+/;
    /** @type {!RegExp} */
    var openingTagRe = /\s*=/;
    /** @type {!RegExp} */
    var whiteRe = /\s*\}/;
    /** @type {!RegExp} */
    var tagRe = /#|\^|\/|>|\{|&|=|!/;
    /**
     * @return {?}
     */
    Scanner.prototype.eos = function() {
        return "" === this.tail;
    };
    /**
     * @param {!Object} re
     * @return {?}
     */
    Scanner.prototype.scan = function(re) {
        re = this.tail.match(re);
        if (!re || 0 !== re.index) {
            return "";
        }
        re = re[0];
        this.tail = this.tail.substring(re.length);
        this.pos += re.length;
        return re;
    };
    /**
     * @param {!RegExp} re
     * @return {?}
     */
    Scanner.prototype.scanUntil = function(re) {
        re = this.tail.search(re);
        var match;
        switch (re) {
            case -1:
                match = this.tail;
                /** @type {string} */
                this.tail = "";
                break;
            case 0:
                /** @type {string} */
                match = "";
                break;
            default:
                match = this.tail.substring(0, re);
                this.tail = this.tail.substring(re);
        }
        this.pos += match.length;
        return match;
    };
    /**
     * @param {!Object} name
     * @return {?}
     */
    Context.prototype.push = function(name) {
        return new Context(name, this);
    };
    /**
     * @param {string} name
     * @return {?}
     */
    Context.prototype.lookup = function(name) {
        var cache = this.cache;
        var value;
        if (name in cache) {
            value = cache[name];
        } else {
            var o = this;
            var keys;
            var i;
            for (; o;) {
                if (0 < name.indexOf(".")) {
                    value = o.view;
                    keys = name.split(".");
                    /** @type {number} */
                    i = 0;
                    for (; null != value && i < keys.length;) {
                        value = value[keys[i++]];
                    }
                } else {
                    value = o.view[name];
                }
                if (null != value) {
                    break;
                }
                o = o.parent;
            }
            cache[name] = value;
        }
        if (isFunction(value)) {
            value = value.call(this.view);
        }
        return value;
    };
    /**
     * @return {undefined}
     */
    Writer.prototype.clearCache = function() {
        this.cache = {};
    };
    /**
     * @param {!Object} name
     * @param {string} args
     * @return {?}
     */
    Writer.prototype.parse = function(name, args) {
        var cache = this.cache;
        var r = cache[name];
        if (null == r) {
            r = cache[name] = parse(name, args);
        }
        return r;
    };
    /**
     * @param {!Object} value
     * @param {!Object} view
     * @param {!Object} partials
     * @return {?}
     */
    Writer.prototype.render = function(value, view, partials) {
        var tokens = this.parse(value);
        view = view instanceof Context ? view : new Context(view);
        return this.renderTokens(tokens, view, partials, value);
    };
    /**
     * @param {!NodeList} tokens
     * @param {!Object} context
     * @param {!Object} partials
     * @param {!Object} originalTemplate
     * @return {?}
     */
    Writer.prototype.renderTokens = function(tokens, context, partials, originalTemplate) {
        /**
         * @param {!Object} template
         * @return {?}
         */
        function subRender(template) {
            return self.render(template, context, partials);
        }
        /** @type {string} */
        var buffer = "";
        var self = this;
        var token;
        var value;
        /** @type {number} */
        var i = 0;
        var numTokens = tokens.length;
        for (; i < numTokens; ++i) {
            switch (token = tokens[i], token[0]) {
                case "#":
                    value = context.lookup(token[1]);
                    if (!value) {
                        continue;
                    }
                    if (isArray(value)) {
                        /** @type {number} */
                        var j = 0;
                        var valueLength = value.length;
                        for (; j < valueLength; ++j) {
                            buffer = buffer + this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);
                        }
                    } else {
                        if ("object" === typeof value || "string" === typeof value) {
                            buffer = buffer + this.renderTokens(token[4], context.push(value), partials, originalTemplate);
                        } else {
                            if (isFunction(value)) {
                                if ("string" !== typeof originalTemplate) {
                                    throw Error("Cannot use higher-order sections without the original template");
                                }
                                value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);
                                if (null != value) {
                                    buffer = buffer + value;
                                }
                            } else {
                                buffer = buffer + this.renderTokens(token[4], context, partials, originalTemplate);
                            }
                        }
                    }
                    break;
                case "^":
                    value = context.lookup(token[1]);
                    if (!value || isArray(value) && 0 === value.length) {
                        buffer = buffer + this.renderTokens(token[4], context, partials, originalTemplate);
                    }
                    break;
                case ">":
                    if (!partials) {
                        continue;
                    }
                    value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
                    if (null != value) {
                        buffer = buffer + this.renderTokens(this.parse(value), context, partials, value);
                    }
                    break;
                case "&":
                    value = context.lookup(token[1]);
                    if (null != value) {
                        buffer = buffer + value;
                    }
                    break;
                case "name":
                    value = context.lookup(token[1]);
                    if (null != value) {
                        buffer = buffer + exports.escape(value);
                    }
                    break;
                case "text":
                    buffer = buffer + token[1];
            }
        }
        return buffer;
    };
    /** @type {string} */
    exports.name = "mustache.js";
    /** @type {string} */
    exports.version = "0.8.1";
    /** @type {!Array} */
    exports.tags = ["{{", "}}"];
    var self = new Writer;
    /**
     * @return {?}
     */
    exports.clearCache = function() {
        return self.clearCache();
    };
    /**
     * @param {!Object} data
     * @param {boolean} c
     * @return {?}
     */
    exports.parse = function(data, c) {
        return self.parse(data, c);
    };
    /**
     * @param {!Object} value
     * @param {!Object} view
     * @param {!Object} partials
     * @return {?}
     */
    exports.render = function(value, view, partials) {
        return self.render(value, view, partials);
    };
    /**
     * @param {?} result
     * @param {!Object} view
     * @param {!Object} partials
     * @param {!Object} send
     * @return {?}
     */
    exports.to_html = function(result, view, partials, send) {
        result = exports.render(result, view, partials);
        if (isFunction(send)) {
            send(result);
        } else {
            return result;
        }
    };
    /**
     * @param {!Object} value
     * @return {?}
     */
    exports.escape = function(value) {
        return String(value).replace(/[&<>"'\/]/g, function(s) {
            return entityMap[s];
        });
    };
    /** @type {function(string): undefined} */
    exports.Scanner = Scanner;
    /** @type {function(!Object, ?): undefined} */
    exports.Context = Context;
    /** @type {function(): undefined} */
    exports.Writer = Writer;
});
(function() {
    var b;
    var durationInMilliseconds;
    var MutationObserver;
    var Odometer;
    var result;
    var addClass;
    var createFromHTML;
    var findSelectedData;
    var now;
    var removeClass;
    var requestAnimationFrame;
    var round;
    var wrapJQuery;
    var trigger;
    var truncate;
    var C;
    var _onreadystatechange;
    var _ref;
    var root;
    /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
    var slice = [].slice;
    /** @type {!RegExp} */
    b = /^\(?([^)]*)\)?(?:(.)(d+))?$/;
    /** @type {number} */
    durationInMilliseconds = 1E3 / 30;
    /** @type {!CSSStyleDeclaration} */
    wrapJQuery = document.createElement("div").style;
    /** @type {boolean} */
    result = null != wrapJQuery.transition || null != wrapJQuery.webkitTransition || null != wrapJQuery.mozTransition || null != wrapJQuery.oTransition;
    requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
    MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
    /**
     * @param {string} html
     * @return {?}
     */
    createFromHTML = function(html) {
        var tmpElement;
        return tmpElement = document.createElement("div"), tmpElement.innerHTML = html, tmpElement.children[0];
    };
    /**
     * @param {!Object} v
     * @param {string} e
     * @return {?}
     */
    removeClass = function(v, e) {
        return v.className = v.className.replace(new RegExp("(^| )" + e.split(" ").join("|") + "( |$)", "gi"), " ");
    };
    /**
     * @param {!Object} el
     * @param {string} name
     * @return {?}
     */
    addClass = function(el, name) {
        return removeClass(el, name), el.className += " " + name;
    };
    /**
     * @param {!EventTarget} elem
     * @param {string} name
     * @return {?}
     */
    trigger = function(elem, name) {
        var event;
        return null != document.createEvent ? (event = document.createEvent("HTMLEvents"), event.initEvent(name, true, true), elem.dispatchEvent(event)) : void 0;
    };
    /**
     * @return {?}
     */
    now = function() {
        var b;
        var ref;
        return null != (b = null != (ref = window.performance) ? "function" == typeof ref.now ? ref.now() : void 0 : void 0) ? b : +new Date;
    };
    /**
     * @param {number} value
     * @param {number} precision
     * @return {?}
     */
    round = function(value, precision) {
        return null == precision && (precision = 0), precision ? (value = value * Math.pow(10, precision), value = value + .5, value = Math.floor(value), value / Math.pow(10, precision)) : Math.round(value);
    };
    /**
     * @param {number} n
     * @return {?}
     */
    truncate = function(n) {
        return 0 > n ? Math.ceil(n) : Math.floor(n);
    };
    /**
     * @param {boolean} x
     * @return {?}
     */
    findSelectedData = function(x) {
        return x - round(x);
    };
    /** @type {boolean} */
    C = false;
    (wrapJQuery = function() {
        var plug;
        var _i;
        var _len;
        var _ref;
        var _results;
        if (!C && null != window.jQuery) {
            /** @type {boolean} */
            C = true;
            /** @type {!Array} */
            _ref = ["html", "text"];
            /** @type {!Array} */
            _results = [];
            /** @type {number} */
            _i = 0;
            /** @type {number} */
            _len = _ref.length;
            for (; _len > _i; _i++) {
                plug = _ref[_i];
                _results.push(function(o) {
                    var oi;
                    return oi = window.jQuery.fn[o], window.jQuery.fn[o] = function(b) {
                        var info;
                        return null == b || null == (null != (info = this[0]) ? info.odometer : void 0) ? oi.apply(this, arguments) : this[0].odometer.update(b);
                    };
                }(plug));
            }
            return _results;
        }
    })();
    setTimeout(wrapJQuery, 0);
    Odometer = function() {
        /**
         * @param {!Object} options
         * @return {?}
         */
        function Odometer(options) {
            var key;
            var index;
            var _base;
            var id;
            var _len2;
            var _ref;
            var _ref1;
            var _ref2;
            var _this = this;
            if (this.options = options, this.el = this.options.el, null != this.el.odometer) {
                return this.el.odometer;
            }
            this.el.odometer = this;
            _ref = Odometer.options;
            for (key in _ref) {
                options = _ref[key];
                if (null == this.options[key]) {
                    /** @type {!Object} */
                    this.options[key] = options;
                }
            }
            if (null == (_base = this.options).duration) {
                /** @type {number} */
                _base.duration = 2E3;
            }
            /** @type {number} */
            this.MAX_VALUES = this.options.duration / durationInMilliseconds / 2 | 0;
            this.resetFormat();
            this.value = this.cleanValue(null != (_ref1 = this.options.value) ? _ref1 : "");
            this.renderInside();
            this.render();
            try {
                /** @type {!Array} */
                _ref2 = ["innerHTML", "innerText", "textContent"];
                /** @type {number} */
                id = 0;
                /** @type {number} */
                _len2 = _ref2.length;
                for (; _len2 > id; id++) {
                    index = _ref2[id];
                    if (null != this.el[index]) {
                        ! function(name) {
                            return Object.defineProperty(_this.el, name, {
                                get: function() {
                                    var sequence_string;
                                    return "innerHTML" === name ? _this.inside.outerHTML : null != (sequence_string = _this.inside.innerText) ? sequence_string : _this.inside.textContent;
                                },
                                set: function(key) {
                                    return _this.update(key);
                                }
                            });
                        }(index);
                    }
                }
            } catch (L) {
                this.watchForMutations();
            }
        }
        return Odometer.prototype.renderInside = function() {
            return this.inside = document.createElement("div"), this.inside.className = "odometer-inside", this.el.innerHTML = "", this.el.appendChild(this.inside);
        }, Odometer.prototype.watchForMutations = function() {
            var _this = this;
            if (null != MutationObserver) {
                try {
                    return null == this.observer && (this.observer = new MutationObserver(function() {
                        var newVal;
                        return newVal = _this.el.innerText, _this.renderInside(), _this.render(_this.value), _this.update(newVal);
                    })), this.watchMutations = true, this.startWatchingMutations();
                } catch (G) {}
            }
        }, Odometer.prototype.startWatchingMutations = function() {
            return this.watchMutations ? this.observer.observe(this.el, {
                childList: true
            }) : void 0;
        }, Odometer.prototype.stopWatchingMutations = function() {
            var _ref;
            return null != (_ref = this.observer) ? _ref.disconnect() : void 0;
        }, Odometer.prototype.cleanValue = function(val) {
            var _ref;
            return "string" == typeof val && (val = val.replace(null != (_ref = this.format.radix) ? _ref : ".", "<radix>"), val = val.replace(/[.,]/g, ""), val = val.replace("<radix>", "."), val = parseFloat(val, 10) || 0), round(val, this.format.precision);
        }, Odometer.prototype.bindTransitionEnd = function() {
            var w;
            var isLoaded;
            var name;
            var i;
            var endEventNames;
            var _results;
            var m = this;
            if (!this.transitionEndBound) {
                /** @type {boolean} */
                this.transitionEndBound = true;
                /** @type {boolean} */
                isLoaded = false;
                /** @type {!Array} */
                endEventNames = ["transitionend", "webkitTransitionEnd", "oTransitionEnd", "otransitionend", "MSTransitionEnd"];
                /** @type {!Array} */
                _results = [];
                /** @type {number} */
                name = 0;
                /** @type {number} */
                i = endEventNames.length;
                for (; i > name; name++) {
                    w = endEventNames[name];
                    _results.push(this.el.addEventListener(w, function() {
                        return isLoaded ? true : (isLoaded = true, setTimeout(function() {
                            return m.render(), isLoaded = false, trigger(m.el, "odometerdone");
                        }, 0), true);
                    }, false));
                }
                return _results;
            }
        }, Odometer.prototype.resetFormat = function() {
            var c;
            var child_el;
            var s;
            var precision;
            var radix;
            var stmt;
            var format;
            var _ref1;
            if (c = null != (format = this.options.format) ? format : "(,ddd).dd", c || (c = "d"), s = b.exec(c), !s) {
                throw Error("Odometer: Unparsable digit format");
            }
            return _ref1 = s.slice(1, 4), stmt = _ref1[0], radix = _ref1[1], child_el = _ref1[2], precision = (null != child_el ? child_el.length : void 0) || 0, this.format = {
                repeating: stmt,
                radix: radix,
                precision: precision
            };
        }, Odometer.prototype.render = function(value) {
            var m;
            var d;
            var l;
            var list;
            var format;
            var i;
            var k;
            if (null == value) {
                value = this.value;
            }
            this.stopWatchingMutations();
            this.resetFormat();
            /** @type {string} */
            this.inside.innerHTML = "";
            format = this.options.theme;
            m = this.el.className.split(" ");
            /** @type {!Array} */
            list = [];
            /** @type {number} */
            i = 0;
            k = m.length;
            for (; k > i; i++) {
                d = m[i];
                if (d.length) {
                    if (l = /^odometer-theme-(.+)$/.exec(d)) {
                        /** @type {string} */
                        format = l[1];
                    } else {
                        if (!/^odometer(-|$)/.test(d)) {
                            list.push(d);
                        }
                    }
                }
            }
            list.push("odometer");
            if (!result) {
                list.push("odometer-no-transitions");
            }
            list.push(format ? "odometer-theme-" + format : "odometer-auto-theme");
            /** @type {string} */
            this.el.className = list.join(" ");
            this.ribbons = {};
            /** @type {!Array} */
            this.digits = [];
            /** @type {boolean} */
            m = !this.format.precision || !findSelectedData(value) || false;
            list = value.toString().split("").reverse();
            /** @type {number} */
            d = 0;
            l = list.length;
            for (; l > d; d++) {
                value = list[d];
                if ("." === value) {
                    /** @type {boolean} */
                    m = true;
                }
                this.addDigit(value, m);
            }
            return this.startWatchingMutations();
        }, Odometer.prototype.update = function(value) {
            var diff;
            var self = this;
            return value = this.cleanValue(value), (diff = value - this.value) ? (removeClass(this.el, "odometer-animating-up odometer-animating-down odometer-animating"), 0 < diff ? addClass(this.el, "odometer-animating-up") : addClass(this.el, "odometer-animating-down"), this.stopWatchingMutations(), this.animate(value), this.startWatchingMutations(), setTimeout(function() {
                return self.el.offsetHeight, addClass(self.el, "odometer-animating");
            }, 0), this.value = value) : void 0;
        }, Odometer.prototype.renderDigit = function() {
            return createFromHTML('<span class="odometer-digit"><span class="odometer-digit-spacer">8</span><span class="odometer-digit-inner"><span class="odometer-ribbon"><span class="odometer-ribbon-inner"><span class="odometer-value"></span></span></span></span></span>');
        }, Odometer.prototype.insertDigit = function(digit, before) {
            return null != before ? this.inside.insertBefore(digit, before) : this.inside.children.length ? this.inside.insertBefore(digit, this.inside.children[0]) : this.inside.appendChild(digit);
        }, Odometer.prototype.addSpacer = function(chr, before, extraClasses) {
            var spacer;
            return spacer = createFromHTML('<span class="odometer-formatting-mark"></span>'), spacer.innerHTML = chr, extraClasses && addClass(spacer, extraClasses), this.insertDigit(spacer, before);
        }, Odometer.prototype.addDigit = function(value, event) {
            var valueDigit;
            var digit;
            var _ref;
            if (null == event && (event = true), "-" === value) {
                return this.addSpacer(value, null, "odometer-negation-mark");
            }
            if ("." === value) {
                return this.addSpacer(null != (_ref = this.format.radix) ? _ref : ".", null, "odometer-radix-mark");
            }
            if (event) {
                /** @type {boolean} */
                event = false;
                for (;;) {
                    if (!this.format.repeating.length) {
                        if (event) {
                            throw Error("Bad odometer format without digits");
                        }
                        this.resetFormat();
                        /** @type {boolean} */
                        event = true;
                    }
                    if (valueDigit = this.format.repeating[this.format.repeating.length - 1], this.format.repeating = this.format.repeating.substring(0, this.format.repeating.length - 1), "d" === valueDigit) {
                        break;
                    }
                    this.addSpacer(valueDigit);
                }
            }
            return digit = this.renderDigit(), digit.querySelector(".odometer-value").innerHTML = value, this.digits.push(digit), this.insertDigit(digit);
        }, Odometer.prototype.animate = function(newValue) {
            return result && "count" !== this.options.animation ? this.animateSlide(newValue) : this.animateCount(newValue);
        }, Odometer.prototype.animateCount = function(newValue) {
            var i;
            var result;
            var lastTime;
            var start;
            var tick;
            var self = this;
            if (result = +newValue - this.value) {
                return start = lastTime = now(), i = this.value, (tick = function() {
                    var deltaTime;
                    var GROUPSIZE;
                    var sortOrder;
                    return now() - start > self.options.duration ? (self.value = newValue, self.render(), void trigger(self.el, "odometerdone")) : (deltaTime = now() - lastTime, 50 < deltaTime && (lastTime = now(), sortOrder = deltaTime / self.options.duration, GROUPSIZE = result * sortOrder, i = i + GROUPSIZE, self.render(Math.round(i))), null != requestAnimationFrame ? requestAnimationFrame(tick) : setTimeout(tick, 50));
                })();
            }
        }, Odometer.prototype.getDigitCount = function() {
            var k;
            var columns;
            var val;
            var ret;
            var s;
            var i;
            /** @type {!Array<?>} */
            ret = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            /** @type {number} */
            k = s = 0;
            /** @type {number} */
            i = ret.length;
            for (; i > s; k = ++s) {
                val = ret[k];
                /** @type {number} */
                ret[k] = Math.abs(val);
            }
            return columns = Math.max.apply(Math, ret), Math.ceil(Math.log(columns + 1) / Math.log(10));
        }, Odometer.prototype.getFractionalDigitCount = function() {
            var i;
            var tokenizer;
            var o;
            var ret;
            var _i;
            var _len;
            /** @type {!Array<?>} */
            ret = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            /** @type {!RegExp} */
            tokenizer = /^\-?\d*\.(\d*?)0*$/;
            /** @type {number} */
            i = _i = 0;
            /** @type {number} */
            _len = ret.length;
            for (; _len > _i; i = ++_i) {
                o = ret[i];
                ret[i] = o.toString();
                /** @type {(Array<string>|null)} */
                o = tokenizer.exec(ret[i]);
                /** @type {number} */
                ret[i] = null == o ? 0 : o[1].length;
            }
            return Math.max.apply(Math, ret);
        }, Odometer.prototype.resetDigits = function() {
            return this.digits = [], this.ribbons = [], this.inside.innerHTML = "", this.resetFormat();
        }, Odometer.prototype.animateSlide = function(newValue) {
            var n;
            var val;
            var diff;
            var w;
            var r;
            var dist;
            var end;
            var fractionalCount;
            var a;
            var i;
            var q;
            var oldValue;
            var start;
            var _base;
            var x;
            var j;
            var length;
            var bols;
            if (oldValue = this.value, fractionalCount = this.getFractionalDigitCount(oldValue, newValue), fractionalCount && (newValue = newValue * Math.pow(10, fractionalCount), oldValue = oldValue * Math.pow(10, fractionalCount)), diff = newValue - oldValue) {
                this.bindTransitionEnd();
                w = this.getDigitCount(oldValue, newValue);
                /** @type {!Array} */
                r = [];
                /** @type {number} */
                i = x = n = 0;
                for (; 0 <= w ? w > x : x > w; i = 0 <= w ? ++x : --x) {
                    if (start = truncate(oldValue / Math.pow(10, w - i - 1)), end = truncate(newValue / Math.pow(10, w - i - 1)), dist = end - start, Math.abs(dist) > this.MAX_VALUES) {
                        /** @type {!Array} */
                        a = [];
                        /** @type {number} */
                        i = dist / (this.MAX_VALUES + this.MAX_VALUES * n * .5);
                        val = start;
                        for (; 0 < dist && end > val || 0 > dist && val > end;) {
                            a.push(Math.round(val));
                            val = val + i;
                        }
                        if (a[a.length - 1] !== end) {
                            a.push(end);
                        }
                        n++;
                    } else {
                        a = function() {
                            /** @type {!Array} */
                            bols = [];
                            var pos = start;
                            for (; end >= start ? end >= pos : pos >= end; end >= start ? pos++ : pos--) {
                                bols.push(pos);
                            }
                            return bols;
                        }.apply(this);
                    }
                    /** @type {number} */
                    i = j = 0;
                    length = a.length;
                    for (; length > j; i = ++j) {
                        val = a[i];
                        /** @type {number} */
                        a[i] = Math.abs(val % 10);
                    }
                    r.push(a);
                }
                this.resetDigits();
                /** @type {!Array} */
                x = r.reverse();
                /** @type {number} */
                i = w = 0;
                /** @type {number} */
                r = x.length;
                for (; r > w; i = ++w) {
                    a = x[i];
                    if (!this.digits[i]) {
                        this.addDigit(" ", i >= fractionalCount);
                    }
                    if (null == (_base = this.ribbons)[i]) {
                        _base[i] = this.digits[i].querySelector(".odometer-ribbon-inner");
                    }
                    /** @type {string} */
                    this.ribbons[i].innerHTML = "";
                    if (0 > diff) {
                        a = a.reverse();
                    }
                    /** @type {number} */
                    newValue = oldValue = 0;
                    dist = a.length;
                    for (; dist > oldValue; newValue = ++oldValue) {
                        val = a[newValue];
                        /** @type {!Element} */
                        n = document.createElement("div");
                        /** @type {string} */
                        n.className = "odometer-value";
                        n.innerHTML = val;
                        this.ribbons[i].appendChild(n);
                        if (newValue === a.length - 1) {
                            addClass(n, "odometer-last-value");
                        }
                        if (0 === newValue) {
                            addClass(n, "odometer-first-value");
                        }
                    }
                }
                return 0 > start && this.addDigit("-"), q = this.inside.querySelector(".odometer-radix-mark"), null != q && q.parent.removeChild(q), fractionalCount ? this.addSpacer(this.format.radix, this.digits[fractionalCount - 1], "odometer-radix-mark") : void 0;
            }
        }, Odometer;
    }();
    Odometer.options = null != (_ref = window.odometerOptions) ? _ref : {};
    setTimeout(function() {
        var i;
        var node;
        var _base;
        var _ref;
        var newNodeLists;
        if (window.odometerOptions) {
            _ref = window.odometerOptions;
            /** @type {!Array} */
            newNodeLists = [];
            for (i in _ref) {
                node = _ref[i];
                newNodeLists.push(null != (_base = Odometer.options)[i] ? (_base = Odometer.options)[i] : _base[i] = node);
            }
            return newNodeLists;
        }
    }, 0);
    /**
     * @return {?}
     */
    Odometer.init = function() {
        var el;
        var keyPathEls;
        var i;
        var countRep;
        var _ref1;
        var availableAnimals;
        if (null != document.querySelectorAll) {
            /** @type {!NodeList<Element>} */
            keyPathEls = document.querySelectorAll(Odometer.options.selector || ".odometer");
            /** @type {!Array} */
            availableAnimals = [];
            /** @type {number} */
            i = 0;
            /** @type {number} */
            countRep = keyPathEls.length;
            for (; countRep > i; i++) {
                /** @type {!Element} */
                el = keyPathEls[i];
                availableAnimals.push(el.odometer = new Odometer({
                    el: el,
                    value: null != (_ref1 = el.innerText) ? _ref1 : el.textContent
                }));
            }
            return availableAnimals;
        }
    };
    if (null != (null != (root = document.documentElement) ? root.doScroll : void 0) && null != document.createEventObject) {
        /** @type {function(): ?} */
        _onreadystatechange = document.onreadystatechange;
        /**
         * @return {?}
         */
        document.onreadystatechange = function() {
            return "complete" === document.readyState && false !== Odometer.options.auto && Odometer.init(), null != _onreadystatechange ? _onreadystatechange.apply(this, arguments) : void 0;
        };
    } else {
        document.addEventListener("DOMContentLoaded", function() {
            return false !== Odometer.options.auto ? Odometer.init() : void 0;
        }, false);
    }
    if ("function" == typeof define && define.amd) {
        define(["jquery"], function() {
            return Odometer;
        });
    } else {
        window.Odometer = Odometer;
    }
}).call(this);
(function(window, $) {
    /**
     * @return {undefined}
     */
    function hasNoFhAd() {
        t = $(".tooltip:not(.tooltip-initialized)");
        b = $(document);
    }
    /**
     * @return {undefined}
     */
    function init() {
        if (0 !== t.length) {
            t.tooltip({
                track: true,
                showURL: false,
                bodyHandler: function() {
                    return "<div>" + $(this).find(".tooltip_content").html() + "</div>";
                }
            });
            t.on("touchstart", function(event) {
                event.preventDefault();
                event.stopPropagation();
                t.find(".tooltip_content:not(:hidden)").css("cssText", "display: none !important;");
                var npl = $(this).find(".tooltip_content");
                npl.css("cssText", "display: block !important;");
                $(document).one("touchstart", function() {
                    npl.css("cssText", "display: none !important;");
                });
            });
            t.on("click", function(event) {
                event.preventDefault();
            });
            t.addClass("tooltip-initialized");
        }
    }
    var t;
    var b;
    b = t = void 0;
    window.tooltips = {
        init: function() {
            hasNoFhAd();
            init();
            b.on("search.update", function() {
                hasNoFhAd();
                init();
            });
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @param {!Object} data
     * @param {!Object} res
     * @return {undefined}
     */
    function show(data, res) {
        res.addClass("qv-active");
        if (data % 2) {
            if (res.next().hasClass("load_more_box")) {
                res.after(exports.bind(null, data));
            } else {
                res.next().after(exports.bind(null, data));
            }
        } else {
            res.after(exports.bind(null, data));
        }
    }
    /**
     * @param {string} execFile_opt
     * @return {?}
     */
    function exports(execFile_opt) {
        return "<div class='quickview-mobile-wrapper quickview-wrapper-" + execFile_opt + "'></div>";
    }
    /**
     * @return {undefined}
     */
    function init_gallery_w_preview() {
        that.qvButton.off("click touchstart").on("click touchstart", function(a) {
            a.preventDefault();
            a = $(this);
            var item;
            var $text;
            var parentNode;
            url = a.attr("href").toString();
            url = self.util.removeParamFromURL(url, "cgid");
            /** @type {!Object} */
            m = a;
            if (self.isMobileUserAgent || self.isTabletUserAgent) {
                $text = a.parents(".b-product_tile-wrapper").data("tilecount");
                parentNode = a.parents(".b-product_tile-wrapper");
                if (!(parentNode.hasClass("qv-active") || self.quickView.exists())) {
                    show($text, parentNode);
                }
            }
            item = {
                url: url,
                source: "quickview",
                container: parentNode,
                tileCount: $text
            };
            if (self.quickView.exists() && (self.isMobileUserAgent || self.isTabletUserAgent)) {
                if (self.quickView.exists() && !parentNode.hasClass("qv-active")) {
                    that.document.find(".b-product_tile-wrapper.qv-active").removeClass("qv-active");
                    self.quickView.close();
                    show($text, parentNode);
                    self.quickView.show(item);
                } else {
                    a.removeClass("active");
                    self.quickView.close();
                }
            } else {
                self.quickView.show(item);
            }
        });
    }
    /**
     * @return {undefined}
     */
    function init() {
        self.carousel.init(that.quickView);
    }
    var that = {
        document: $(document)
    };
    var url;
    var m;
    that.productsWrapper = that.document.find("#clp-products-section");
    self.quickView = {
        initializeButton: function(d, f, platform) {
            platform = platform || {};
            var related_node_ids = platform.quickviewDisallowedDevices || [];
            if (!platform.quickviewDisableButton) {
                $(d).on("mouseenter touchstart touchend", function() {
                    if (-1 == related_node_ids.indexOf(self.page.screenSizeDeviceType)) {
                        self.quickView.initializeButtonSingle($(this), f, platform);
                    } else {
                        if (that.qvButton && that.qvButton.length) {
                            $(".js-quickviewbutton ").remove();
                        }
                    }
                });
            }
        },
        initializeButtonSingle: function(d, i, tag) {
            /** @type {boolean} */
            var item = "customQuickViewLabel" in tag && !!tag.customQuickViewLabel;
            var url = d.find(".js-quickviewbutton ");
            /** @type {boolean} */
            var options = 0 < url.length;
            that.qvButton = options ? url : $("<a class='js-quickviewbutton quickviewbutton '>" + (item ? tag.customQuickViewLabel : self.resources.QUICKVIEW) + "</a>");
            init_gallery_w_preview();
            i = d.find(i);
            d = $(d.find(".product_tile"));
            item = d.data();
            url = i.length ? i.attr("href").toString() : null;
            url = item && item.producturl ? item.producturl : url;
            var opt_pathToBitJS = item && item.itemid ? item.itemid : null;
            /** @type {string} */
            tag = JSON.stringify(tag.dialogOptions);
            if (url) {
                if ("https:" == window.location.protocol) {
                    url = url.replace(/^http:/, "https:");
                }
                if ("forabox" in item && item.forabox) {
                    url = self.util.appendParamToURL(url, "forabox", "true");
                }
                that.qvButton.attr({
                    href: url,
                    title: i.attr("title"),
                    productId: opt_pathToBitJS || "",
                    dialogOptions: tag
                });
                if (!options) {
                    if (i.length) {
                        that.qvButton.insertAfter(i);
                    } else {
                        d.append(that.qvButton);
                    }
                }
                if ("discontinued" in item && item.discontinued) {
                    that.qvButton.remove();
                }
            }
        },
        getUrl: function() {
            return url;
        },
        init: function() {
            if (self.quickView.exists()) {
                return that.quickView;
            }
            that.document.on("quickview.open", function(canCreateDiscussions, d) {
                if (d.url) {
                    self.quickView.show(d);
                }
            });
            if (!self.quickView.exists()) {
                that.quickView = $("<div/>").attr({
                    id: "QuickViewDialog"
                });
            }
            return that.quickView;
        },
        show: function(item) {
            var g = "currentProduct" in self.page ? self.page.currentProduct : {};
            var ns = self.page.ns;
            var currentPage = self.page.currentPage;
            var savedType = self.page.type;
            var p = item.container;
            var num = item.tileCount;
            var otweets = $(document).find(".quickview-wrapper-" + num + "");
            self.progress.show();
            url = item.url;
            item.target = self.quickView.init(p);
            /**
             * @return {undefined}
             */
            item.callback = function() {
                /** @type {string} */
                var opts = "quickview";
                if ("cart" == item.source) {
                    /** @type {string} */
                    opts = opts + " dialog_cart_edit";
                }
                if ("string" === typeof item.dialogClass) {
                    /** @type {string} */
                    opts = opts + (" " + item.dialogClass);
                }
                opts = {
                    target: that.quickView,
                    options: {
                        height: "auto",
                        width: "auto",
                        dialogClass: opts,
                        title: self.resources.MOBILE_QV_TITLE,
                        resizable: false,
                        position: "center",
                        emptyOnClose: false,
                        appendTo: (self.isMobileUserAgent || self.isTabletUserAgent) && "cart" !== item.source && "gwp" != item.feature ? otweets : "body",
                        open: function() {
                            self.progress.hide();
                            self.componentsMgr.loadns("product", true);
                            if (item.pageContext) {
                                self.page.setContext(item.pageContext);
                            }
                            if (self.isMobileUserAgent || self.isTabletUserAgent) {
                                $(document).find("body").attr("style", "");
                            }
                            if (item.recomendationsPage && "quickViewTrackerData" in self.page) {
                                /** @type {string} */
                                self.page.quickViewTrackerData.categoryID = "xsell" + item.recomendationsPage + "Ymal";
                            }
                            $(".main").trigger("dialog.opened", {
                                recomendationsPage: item.recomendationsPage,
                                target: item.target,
                                ns: "trackerData" in self.page && "ns" in self.page.trackerData ? self.page.trackerData.ns : null,
                                pageContext: item.pageContext
                            });
                            self.page.params.source = ns;
                            that.quickView.trigger("quickview.opened");
                            that.document.on("product.variationChanged", init);
                            if ("gwp" != item.feature) {
                                that.document.trigger("mobilequickview.opened");
                            }
                            self.progress.hide();
                        },
                        close: function() {
                            $(".main").trigger("dialog.closed");
                            that.quickView.trigger("closeQuickview.dialog");
                            self.product.refreshCache();
                            if ("quickViewTrackerData" in self.page) {
                                /** @type {null} */
                                self.page.quickViewTrackerData = null;
                            }
                            self.page.currentPage = currentPage;
                            self.page.type = savedType;
                            self.page.ns = currentPage;
                            if (g) {
                                self.page.currentProduct = g;
                            }
                            if (0 < otweets.length && "gwp" != item.feature) {
                                otweets.remove();
                            }
                            if ("gwp" != item.feature && (self.isMobileUserAgent || self.isTabletUserAgent)) {
                                p.removeClass("qv-active");
                                $(document).find(".js-quickviewbutton.active").removeClass("active");
                                if (otweets.length) {
                                    otweets.remove();
                                }
                            }
                        }
                    }
                };
                if (that.qvButton && that.qvButton.attr("dialogOptions")) {
                    $.extend(opts.options, JSON.parse(that.qvButton.attr("dialogOptions")));
                }
                if (!item.hasOwnProperty("useMaxHeight") || item.useMaxHeight) {
                    opts.options.maxHeight = jQuery(window).height();
                }
                self.dialog.create(opts);
                that.quickView.dialog("open");
                if ("gwp" != item.feature) {
                    that.document.trigger("openQuickview.dialog", {
                        quickviewUrl: item.url,
                        productId: item.productId
                    });
                }
                if ("OG" in window && "QuickviewController" in window.OG && "init" in window.OG.QuickviewController) {
                    window.OG.QuickviewController.init();
                }
                self.recommendations.init();
                self.carousel.init(that.quickView);
                if (self.components.global.quantity && "init" in self.components.global.quantity) {
                    self.components.global.quantity.init();
                }
            };
            self.product.get(item);
            self.componentsMgr.loadComponent("global.selectboxit");
            that.quickView.trigger("quickview.beforeopen");
            return that.quickView;
        },
        close: function() {
            if (that.quickView) {
                return that.quickView.dialog().dialog("close"), that.quickView.empty(), that.document.off("product.variationChanged", init), that.quickView;
            }
        },
        exists: function() {
            return $("#QuickViewDialog").length;
        },
        isActive: function() {
            that.quickView = $("#QuickViewDialog");
            return that.quickView.length && that.quickView.children.length && that.quickView.is(":visible");
        }
    };
    that.document.on("mobilequickview.opened", function() {
        if (self.isMobileUserAgent || self.isTabletUserAgent) {
            that.productsWrapper.find(".quickview-mobile__button.active").removeClass("active");
            m.addClass("active");
        }
    });
})(window.app = window.app || {}, jQuery);
(function($scope, $) {
    var _this = {};
    $scope.util = {
        get: function(a, tokens, options) {
            tokens = tokens.split(".");
            var n;
            for (; tokens.length;) {
                if (n = tokens.shift(), "object" === typeof a && null !== a) {
                    a = a[n];
                } else {
                    a = "string" === typeof a ? a[n] : options;
                    break;
                }
            }
            return a;
        },
        filterEvent: function(event, value, exec) {
            return function(args, options) {
                if (options.action === event) {
                    if ("function" === typeof value) {
                        return value.call(this, args, options);
                    }
                    if (options.id === value) {
                        return exec.call(this, args, options);
                    }
                }
            };
        },
        hasStateChanged: function(type, target, property) {
            var tmpData = {};
            if ("string" === typeof type) {
                /** @type {!Array} */
                type = [type];
            }
            return function(a2) {
                /** @type {boolean} */
                var l = false;
                $.each(type, function(b, d) {
                    b = $scope.util.get(a2, d);
                    if (b !== tmpData[d]) {
                        /** @type {boolean} */
                        l = true;
                        tmpData[d] = b;
                    }
                });
                if (l) {
                    target.apply(property, arguments);
                }
            };
        },
        trimPrefix: function(str, prefix) {
            return str.substring(prefix.length);
        },
        setDialogify: function(dom) {
            /**
             * @return {undefined}
             */
            function remove() {
                if (self.closeParentDialog) {
                    $(document).trigger("parentDialog.close");
                }
                _this.dlg.dialog("open");
                $scope.validator.init();
                $(document).trigger("dialog.opened", {
                    container: _this.thisNode
                });
                if (self.triggerCustomEvent) {
                    $(document).trigger({
                        type: self.triggerCustomEvent,
                        dialog: _this.dlg
                    });
                }
                if ($scope.components.profile && $scope.components.profile.experian && 0 < $("form#edit-address-form").length && $scope.page && $scope.page.currentPage && -1 != "accountlanding|account|account_show|address_list".indexOf($scope.page.currentPage.toLowerCase())) {
                    $scope.components.profile.experian.init();
                }
            }
            dom.preventDefault();
            dom = $(this);
            var body = $(dom).data("dlg-options");
            var urlOrData;
            if ("string" == typeof body && 0 < body.length) {
                /** @type {*} */
                body = JSON.parse(body);
            } else {
                if ("object" != typeof body) {
                    body = {};
                }
            }
            var self = $(dom).data("dlg-action") || {};
            var options = $.extend({}, $scope.dialog.settings, body);
            if (dom.data("page-title")) {
                options.pageTitle = dom.data("page-title");
            }
            _this.thisNode = $(this);
            options.title = options.title || $(dom).attr("title") || "";
            if (self.is_PS) {
                /** @type {string} */
                options.dialogClass = "resetpassword_submit_modal";
            }
            body = self.url || (self.isForm ? $(dom).closest("form").attr("action") : null) || $(dom).attr("href");
            /** @type {boolean} */
            var type = !!body && "#" !== body;
            if (type || self.target) {
                if (_this.dlg = $scope.dialog.create({
                        target: self.target,
                        options: options
                    }), type) {
                    if (options = $(this).parents("form"), type = options.attr("method") || "POST", $(this).hasClass("attributecontentlink") && (body = $scope.util.getUri(body), body = $scope.urls.pageInclude + body.query), type && "POST" == type.toUpperCase() ? urlOrData = options.serialize() + "&" + $(this).attr("name") + "=submit" : (body = body + (-1 == body.indexOf("?") ? "?" : "&"), body = body + options.serialize(), body = $scope.util.appendParamToURL(body, $(this).attr("name"), "submit")), _this.dlg.trigger("dialog.beforecontentload"),
                        $scope.ajax.load({
                            url: $(dom).attr("href") || $(dom).closest("form").attr("action"),
                            target: _this.dlg,
                            callback: remove,
                            data: $(dom).attr("href") ? {} : urlOrData,
                            type: self.isForm ? $(dom).closest("form").attr("method") : "GET"
                        }).done(function() {
                            _this.dlg.trigger("dialog.contentloaded");
                        }), self.is_PS) {
                        $("body").on("click", ".password_reset_modal .submit_button", function() {
                            if (_this.dlg.dialog().dialog("isOpen")) {
                                _this.dlg.dialog().dialog("close");
                            }
                            if ($(this).data("goback")) {
                                $(document).trigger("resetPasswordPopup");
                            }
                        });
                    }
                } else {
                    remove();
                }
            }
        },
        padLeft: function(str, char, len) {
            str = str.toString();
            /** @type {number} */
            len = (len || 10) - str.length;
            for (; 0 < len;) {
                str = char + str;
                len--;
            }
            return str;
        },
        appendParamToURL: function(s, name, type) {
            if (!s) {
                return null;
            }
            /** @type {string} */
            var _ = "?";
            if (-1 !== s.indexOf(_)) {
                /** @type {string} */
                _ = "&";
            }
            return s + _ + name + "=" + encodeURIComponent(type);
        },
        appendParamsToUrl: function(config, result, next) {
            if (config) {
                return next = next || false, config = $scope.util.getUri(config), result = $.extend(config.queryParams, result), result = (config.protocol ? config.protocol : "") + (config.hostname ? "//" + config.hostname : "") + (config.path ? ("/" !== config.path.charAt(0) ? "/" : "") + config.path : "") + "?" + $.param(result), next && (result = result + config.hash), 0 > result.indexOf("http") && "/" !== result.charAt(0) && (result = "/" + result), result;
            }
        },
        removeParamFromURL: function(url, str) {
            if (url) {
                var v = url.split("?");
                if (2 <= v.length) {
                    url = v.shift();
                    v = v.join("?");
                    /** @type {string} */
                    str = encodeURIComponent(str) + "=";
                    v = v.split(/[&;]/g);
                    var i = v.length;
                    for (; 0 < i--;) {
                        if (-1 !== v[i].lastIndexOf(str, 0)) {
                            v.splice(i, 1);
                        }
                    }
                    url = v.length ? url + "?" + v.join("&") : url;
                }
                return url;
            }
        },
        staticUrl: function(url) {
            return url && 0 !== $.trim(url).length ? $scope.urls.staticPath + ("/" === url.charAt(0) ? url.substr(1) : url) : $scope.urls.staticPath;
        },
        ajaxUrl: function(o) {
            return $scope.util.appendParamToURL(o, "format", "ajax");
        },
        toAbsoluteUrl: function(url) {
            if (url && 0 !== url.indexOf("http") && "/" !== url.charAt(0)) {
                /** @type {string} */
                url = "/" + url;
            }
            return url;
        },
        toRelativeURL: function(url) {
            return 0 === url.indexOf("http") || "/" !== url.charAt(0) ? url.replace(/^(?:\/\/|[^\/]+)*/, "") : url;
        },
        loadDynamicCss: function(object) {
            var k;
            var f = object.length;
            /** @type {number} */
            k = 0;
            for (; k < f; k++) {
                $scope.util.loadedCssFiles.push($scope.util.loadCssFile(object[k]));
            }
        },
        loadCssFile: function(file) {
            return $("<link/>").appendTo($("head")).attr({
                type: "text/css",
                rel: "stylesheet"
            }).attr("href", file);
        },
        loadedCssFiles: [],
        clearDynamicCss: function() {
            var k = $scope.util.loadedCssFiles.length;
            for (; 0 > k--;) {
                $($scope.util.loadedCssFiles[k]).remove();
            }
            /** @type {!Array} */
            $scope.util.loadedCssFiles = [];
        },
        getQueryStringParams: function(b) {
            if (!b || 0 === b.length) {
                return {};
            }
            var result = {};
            b.replace(/([^?=&]+)(=([^&]*))?/g, function(b, key, canCreateDiscussions, value) {
                try {
                    /** @type {string} */
                    result[decodeURIComponent(key)] = decodeURIComponent(value);
                } catch (conv_reverse_sort) {
                    console.log(conv_reverse_sort);
                }
            });
            return result;
        },
        getParameterValueFromUrl: function(str, s) {
            return this.getQueryStringParams(s || window.location.search)[str];
        },
        getURL: function(href) {
            /** @type {!Element} */
            var a = document.createElement("a");
            a.setAttribute("href", href);
            return {
                hostname: a.hostname,
                port: a.port,
                search: a.search,
                pathname: a.pathname,
                protocol: a.protocol
            };
        },
        getURLData: function(url) {
            url = url || window.location.href;
            /** @type {!Element} */
            var a = document.createElement("a");
            a.setAttribute("href", url);
            return {
                hostname: a.hostname,
                port: a.port,
                search: a.search,
                pathname: a.pathname,
                protocol: a.protocol
            };
        },
        getUri: function(node) {
            var options;
            if (node.tagName && $(node).attr("href")) {
                /** @type {!Object} */
                options = node;
            } else {
                if ("string" === typeof node) {
                    /** @type {!Element} */
                    options = document.createElement("a");
                    /** @type {!Object} */
                    options.href = node;
                } else {
                    return null;
                }
            }
            if ("" == options.host) {
                options.href = options.href;
            }
            if (":" === options.protocol) {
                /** @type {string} */
                options.protocol = window.location.protocol;
            }
            if (0 != options.pathname.indexOf("/")) {
                /** @type {string} */
                options.pathname = "/" + options.pathname;
            }
            return {
                protocol: options.protocol,
                host: options.host,
                hostname: options.hostname,
                port: options.port,
                path: options.pathname,
                query: options.search,
                queryParams: 1 < options.search.length ? $scope.util.getQueryStringParams(options.search.substr(1)) : {},
                hash: options.hash,
                url: options.protocol + "//" + options.host + options.pathname,
                urlWithQuery: options.protocol + "//" + options.host + options.port + options.pathname + options.search
            };
        },
        empty: function(options) {
            return null == options ? true : /(string|array|object|number)/.test(typeof options) && 0 < options.length ? false : true;
        },
        postForm: function(options) {
            var form = $("<form>").attr({
                action: options.url,
                method: "post"
            }).appendTo("body");
            var name;
            for (name in options.fields) {
                $("<input>").attr({
                    name: name,
                    value: options.fields[name]
                }).appendTo(form);
            }
            form.submit();
        },
        getMessage: function(data, id, callback) {
            if (callback && data && 0 !== data.length) {
                data = {
                    key: data
                };
                if (id && 0 === id.length) {
                    data.bn = id;
                }
                id = $scope.util.appendParamsToUrl($scope.urls.appResources, data);
                $.getJSON(id, callback);
            }
        },
        updateStateOptions: function(d) {
            d = $(d);
            if (0 !== d.length) {
                var value = d.closest("form");
                /** @type {(Array<string>|null)} */
                var element = /(shipping|billing)Address/.exec(d.attr("name"));
                if (element) {
                    /** @type {string} */
                    element = element[0];
                }
                element = value.find("select[name*='_state']" + (element ? "[name*='" + element + "']" : ""));
                var isDisabled = element.prop("disabled");
                if (0 !== element.length) {
                    if ($scope.countries[d.val()]) {
                        if (element.prop("disabled")) {
                            element.prop("disabled", false);
                            /** @type {boolean} */
                            isDisabled = false;
                            if (!element.hasClass("required")) {
                                element.addClass("required");
                            }
                        }
                        element.prop("disabled", true);
                        var group = $scope.countries[d.val()];
                        /** @type {!Array} */
                        var outChance = [];
                        value.find("label[for='" + element[0].id + "'] span").not(".required_indicator").html(group.label);
                        $(".formfield_state .error_message i").html(group.label);
                        if (element.hasClass("required")) {
                            if (!group.ismandatory) {
                                element.removeClass("required");
                            }
                        } else {
                            if (group.ismandatory) {
                                element.addClass("required");
                            }
                        }
                        var key;
                        var i;
                        /** @type {string} */
                        var current_tag_name = "";
                        value = element.val();
                        /** @type {boolean} */
                        var v = false;
                        var elem;
                        if (element.is("select") && !group.isselect) {
                            element.prop("disabled", false);
                            elem = $(document.createElement("input"));
                            key = element.prop("attributes");
                            $.each(key, function() {
                                elem.attr(this.name, this.value);
                            });
                            element.replaceWith(elem);
                            element = elem;
                        } else {
                            if (element.is("input") && !group.isselect) {
                                element.prop("disabled", false);
                            } else {
                                var type;
                                if (element.is("input") && group.isselect) {
                                    elem = $(document.createElement("select"));
                                    key = element.prop("attributes");
                                    type = $(document.createElement("option")).attr("value", "").text($scope.resources.SELECT_STATE_DEFAULT_VALUE);
                                    $.each(key, function() {
                                        elem.attr(this.name, this.value);
                                    });
                                    element.replaceWith(elem);
                                } else {
                                    type = element.children().first().clone().removeAttr("selected");
                                    type = $scope.resources["SELECT_STATE_VALUE_" + d.val()] && "" != $scope.resources["SELECT_STATE_VALUE_" + d.val()] ? element.children().first().text($scope.resources["SELECT_STATE_VALUE_" + d.val()]) : element.children().first().text($scope.resources.SELECT_STATE_DEFAULT_VALUE);
                                }
                                for (i in group.regions) {
                                    key = group.regions[i];
                                    /** @type {string} */
                                    current_tag_name = "";
                                    if (value && key.val === value) {
                                        /** @type {string} */
                                        current_tag_name = ' selected="selected"';
                                        /** @type {boolean} */
                                        v = true;
                                    }
                                    outChance.push('<option value="' + key.val + '"' + current_tag_name + ">" + key.label + "</option>");
                                }
                                element.html(outChance.join("")).prepend(type).prop("disabled", isDisabled);
                                if (element.hasClass("selectBoxIt_hiddenOriginalSelect")) {
                                    element.prop("disabled", false).css("visibility", "visible");
                                }
                                if (!v) {
                                    /** @type {number} */
                                    element[0].selectedIndex = 0;
                                }
                            }
                        }
                        element.attr("name", element.attr("name").replace(/[A-Z]{2}$/, "") + d.val());
                    } else {
                        element.val("");
                        if (element.is("select")) {
                            /** @type {number} */
                            element[0].selectedIndex = 0;
                        }
                        element.prop("disabled", true);
                        element.removeClass("required");
                    }
                    element.trigger("util.selectOptionsUpdate");
                }
            }
        },
        limitCharacters: function() {
            $("form").find("[data-character-limit]").each(function() {
                if (!$(this).hasClass("js_hasCharCount")) {
                    $(this).addClass("js_hasCharCount");
                    var d = $(this).data("character-limit");
                    d = String.format($scope.resources.CHAR_LIMIT_MSG, '<span class="char-remain-count">' + d + "</span>", '<span class="char-allowed-count">' + d + "</span>");
                    var g = $(this).next("div.char-count");
                    if (0 === g.length) {
                        g = $('<div class="char-count"/>').insertAfter($(this));
                    }
                    g.html(d);
                    $(this).change();
                }
            });
        },
        setDeleteConfirmation: function(query, error) {
            var props = $.extend({
                deleteConfirmationType: "default"
            }, "account" in $scope.components && "custom" in $scope.components.account && "confirmSetup" in $scope.components.account.custom ? $scope.components.account.custom.confirmSetup : {});
            /** @type {boolean} */
            var svg = false;
            var usedOptions = $.extend({
                width: 300,
                dialogClass: "dialog_confirm_delete",
                closeOnEscape: false,
                title: error,
                open: function() {
                    $(".ui-dialog-titlebar-close, .ui-dialog-titlebar").hide();
                },
                close: function() {
                    /** @type {boolean} */
                    svg = false;
                }
            }, "options" in props ? props.options : {});
            switch (props.deleteConfirmationType) {
                case "app.dialog":
                    $(query).on("click", ".delete", function(event) {
                        if (svg) {
                            return svg;
                        }
                        event.preventDefault();
                        event.stopPropagation();
                        var overlay = $scope.dialog.open({
                            url: $scope.urls.modalConfirmDelete,
                            options: usedOptions,
                            callback: function() {
                                $("div#delete_confirm_message").html(error);
                                $(document).delegate("#deleteConfirmedBtn", "click", function() {
                                    /** @type {boolean} */
                                    svg = true;
                                    $(query).find(".delete").click();
                                });
                                $(document).delegate("#deleteCanceledBtn", "click", function() {
                                    if (overlay.dialog("isOpen")) {
                                        overlay.dialog("close");
                                    }
                                    return false;
                                });
                            }
                        });
                        return false;
                    });
                    break;
                default:
                    $(query).on("click", ".delete", function() {
                        return confirm(error);
                    });
            }
        },
        confirm: function(element, event, title, message, icons) {
            event = event || $scope.resources.BUTTON_OK;
            title = title || $scope.resources.BUTTON_CANCEL;
            message = message || $scope.resources.CONFIRM_TITLE;
            var ioDeferred = $.Deferred();
            var $existing_results = $(".dialog_confirm_content");
            var drop = (0 < $existing_results.length ? $existing_results : $('<div class="dialog_confirm_content"/>')).text(element);
            element = {
                dialogClass: "util_dialog_confirm",
                closeOnEscape: false,
                title: message,
                draggable: false,
                resizable: false,
                modal: true,
                open: function() {
                    $(".ui-dialog-titlebar-close").hide();
                    if (!message) {
                        $(".ui-dialog-titlebar").hide();
                    }
                },
                close: function() {
                    ioDeferred.resolve(false);
                },
                buttons: [{
                    text: event,
                    click: function() {
                        ioDeferred.resolve(true);
                        drop.dialog("close");
                    }
                }, {
                    text: title,
                    click: function() {
                        drop.dialog("close");
                    }
                }]
            };
            $.extend(element, icons);
            drop.dialog(element);
            return ioDeferred.promise();
        },
        scrollBrowser: function(to, message) {
            $("html, body").animate({
                scrollTop: to
            }, 500).promise().done(message);
        },
        getCookie: function(value) {
            /** @type {(Array<string>|null)} */
            value = RegExp(String(value + "[^;]+")).exec(document.cookie);
            return unescape(value ? value.toString().replace(/^[^=]+./, "") : "");
        },
        setCookie: function(str, value, options) {
            options = options || {};
            var expires = options.expires;
            if ("number" == typeof expires && expires) {
                /** @type {!Date} */
                var d = new Date;
                d.setTime(d.getTime() + 1E3 * expires);
                /** @type {!Date} */
                expires = options.expires = d;
            }
            if (expires && expires.toUTCString) {
                options.expires = expires.toUTCString();
            }
            /** @type {string} */
            value = encodeURIComponent(value);
            /** @type {string} */
            str = str + "=" + value;
            var option;
            for (option in options) {
                /** @type {string} */
                str = str + ("; " + option);
                value = options[option];
                if (true !== value) {
                    /** @type {string} */
                    str = str + ("=" + value);
                }
            }
            /** @type {string} */
            document.cookie = str;
        },
        deleteCookie: function(name) {
            /** @type {string} */
            document.cookie = name + "=;path=/;expires=Thu, 01-Jan-70 00:00:01 GMT;";
        },
        formatMoney: function(value) {
            return isNaN(value) ? "N/A" : $scope.resources.formatMoneyPattern.replace(/(\d(?!\d)[.,]?\d*)(?!;)/g, parseFloat(value).toFixed(2));
        },
        formatMoneyAjax: function(type, result) {
            $.ajax({
                data: {
                    priceValue: type
                },
                dataType: "json",
                type: "GET",
                url: $scope.urls.formatPrice,
                success: function(name) {
                    if (name) {
                        result.html(name.formattedPrice);
                    }
                }
            });
        },
        getMaxChildHeight: function(haystack) {
            /** @type {number} */
            var theHeight = 0;
            (haystack instanceof jQuery ? haystack : $(haystack)).children().each(function() {
                var h = $scope.util.actualDimension($(this), "outerHeight", {
                    includeMargin: false
                });
                if (h > theHeight) {
                    theHeight = h;
                }
            });
            return theHeight;
        },
        actualDimension: function(handleIssues, method, h) {
            var configs = $.extend({
                absolute: false,
                clone: false,
                includeMargin: false
            }, h);
            var $target = handleIssues.eq(0);
            if (true === configs.clone) {
                /**
                 * @return {undefined}
                 */
                h = function() {
                    $target = $target.clone().attr("style", "position: absolute !important; top: -1000 !important; ").appendTo("body");
                };
                /**
                 * @return {undefined}
                 */
                handleIssues = function() {
                    $target.remove();
                };
            } else {
                /** @type {!Array} */
                var body = [];
                /** @type {string} */
                var value = "";
                var syncedAnimals;
                /**
                 * @return {undefined}
                 */
                h = function() {
                    syncedAnimals = $target.parents().addBack().filter(":hidden");
                    value = value + "visibility: hidden !important; display: block !important; ";
                    if (true === configs.absolute) {
                        /** @type {string} */
                        value = value + "position: absolute !important; ";
                    }
                    syncedAnimals.each(function() {
                        var section = $(this);
                        body.push(section.attr("style"));
                        section.attr("style", value);
                    });
                };
                /**
                 * @return {undefined}
                 */
                handleIssues = function() {
                    syncedAnimals.each(function(b) {
                        var d = $(this);
                        b = body[b];
                        if (void 0 === b) {
                            d.removeAttr("style");
                        } else {
                            d.attr("style", b);
                        }
                    });
                };
            }
            h();
            method = /(outer)/.test(method) ? $target[method](configs.includeMargin) : $target[method]();
            handleIssues();
            return method;
        },
        getTotalChildrenWidth: function(haystack) {
            /** @type {number} */
            var next_tick_ts = 0;
            (haystack instanceof jQuery ? haystack : $(haystack)).children().each(function() {
                next_tick_ts = next_tick_ts + $(this).outerWidth(true);
            });
            return next_tick_ts;
        },
        isElementInViewport: function(el) {
            el = el.getBoundingClientRect();
            return 0 <= el.bottom && 0 <= el.right && el.top <= (window.innerHeight || document.documentElement.clientHeight) && el.left <= (window.innerWidth || document.documentElement.clientWidth);
        },
        eventDelay: function(fn, a, ud, un) {
            if (!a) {
                /** @type {number} */
                a = 250;
            }
            var c;
            var i;
            return function() {
                var elem = ud || this;
                /** @type {number} */
                var g = (new Date).getTime();
                /** @type {!Arguments} */
                var originalArguments = arguments;
                if (c && g < c + a) {
                    clearTimeout(i);
                    /** @type {number} */
                    i = setTimeout(function() {
                        /** @type {number} */
                        c = g;
                        fn.apply(elem, originalArguments);
                    }, a);
                } else {
                    /** @type {number} */
                    c = g;
                    if (!un) {
                        fn.apply(elem, originalArguments);
                    }
                }
            };
        },
        throttle: function(fn, b, thisArg) {
            clearTimeout(fn._tId);
            /** @type {number} */
            fn._tId = setTimeout(function() {
                fn.call(thisArg);
            }, b || 100);
        },
        now: Date.now || function() {
            return (new Date).getTime();
        },
        debounce: function(fn, wait, immediate) {
            var timeout;
            var arg;
            var module;
            var timestamp;
            var result;
            /**
             * @return {undefined}
             */
            var later = function() {
                /** @type {number} */
                var last = $scope.util.now() - timestamp;
                if (last < wait && 0 <= last) {
                    /** @type {number} */
                    timeout = setTimeout(later, wait - last);
                } else {
                    /** @type {null} */
                    timeout = null;
                    if (!immediate) {
                        result = fn.apply(module, arg);
                        if (!timeout) {
                            /** @type {null} */
                            module = arg = null;
                        }
                    }
                }
            };
            return function() {
                module = this;
                /** @type {!Arguments} */
                arg = arguments;
                timestamp = $scope.util.now();
                var callNow = immediate && !timeout;
                if (!timeout) {
                    /** @type {number} */
                    timeout = setTimeout(later, wait);
                }
                if (callNow) {
                    result = fn.apply(module, arg);
                    /** @type {null} */
                    module = arg = null;
                }
                return result;
            };
        },
        objectSize: function(object) {
            /** @type {number} */
            var size = 0;
            var i;
            for (i in object) {
                if (object.hasOwnProperty(i)) {
                    size++;
                }
            }
            return size;
        },
        updateUrl: function(url) {
            if (-1 < url.indexOf("?") && -1 == url.indexOf("%")) {
                url = url.replace("+", " ");
                var m = url.split("?");
                /** @type {!Array} */
                var responseGroup = [];
                $(String(m[1]).split("&")).each(function() {
                    var s = this.split("=");
                    if (0 < s.length) {
                        responseGroup.push(s[0] + "=" + (2 == s.length ? encodeURI(s[1]) : ""));
                    }
                });
                url = m[0];
                if (1 < m.length && 0 < responseGroup.length) {
                    /** @type {string} */
                    url = url + ("?" + responseGroup.join("&"));
                }
            }
            if (window.history && history.pushState) {
                history.pushState(null, null, url);
            } else {
                this.updateHash(url);
            }
        },
        updateHash: function(s) {
            var c = s.split("?")[0].split("#")[0];
            s = s.replace(c, "");
            c = c.split("/");
            window.location.hash = "!" + c[c.length - 1] + s;
        },
        removeHTMLEntities: function(avatar) {
            return avatar ? avatar.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, "") : "";
        },
        escapeHtml: function(value) {
            if (null === value || "undefined" === typeof value) {
                return "";
            }
            var entityMap = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#39;",
                "/": "&#x2F;"
            };
            return String(value).replace(/[&<>"'/]/g, function(s) {
                return entityMap[s];
            });
        },
        observeDOMModification: function(config, type, url, observer) {
            if (config.length && $scope.util.objectSize(type) && "function" === typeof url) {
                return observer = new MutationObserver($scope.util.eventDelay(function(qsItem) {
                    url.call(config, qsItem);
                }, observer || 500)), observer.observe(config.get(0), type), observer;
            }
        },
        getObjectValues: function(object) {
            /** @type {!Array} */
            var values = [];
            object = object || {};
            var property;
            for (property in object) {
                if (object.hasOwnProperty(property)) {
                    values.push(object[property]);
                }
            }
            return values;
        },
        getArrayQueryString: function() {
            var data = {};
            /** @type {!Array<string>} */
            var filesToSort = window.location.search.substring(1).split("&");
            /** @type {number} */
            var f = 0;
            for (; f < filesToSort.length; f++) {
                /** @type {!Array<string>} */
                var chunks = filesToSort[f].split("=");
                if ("undefined" === typeof data[chunks[0]]) {
                    /** @type {string} */
                    data[chunks[0]] = decodeURIComponent(chunks[1]);
                } else {
                    if ("string" === typeof data[chunks[0]]) {
                        /** @type {!Array} */
                        var travis_job = [data[chunks[0]], decodeURIComponent(chunks[1])];
                        /** @type {!Array} */
                        data[chunks[0]] = travis_job;
                    } else {
                        data[chunks[0]].push(decodeURIComponent(chunks[1]));
                    }
                }
            }
            return data;
        },
        requireLogin: function(method, apiUrl) {
            /**
             * @param {!Object} name
             * @return {undefined}
             */
            function fn(name) {
                $scope.dialog.close();
                if (name.success) {
                    logInDeferred.resolve();
                } else {
                    logInDeferred.reject();
                }
            }
            var logInDeferred = $.Deferred();
            if ($scope.isUserAuthenticated) {
                return logInDeferred.resolve(), logInDeferred.promise();
            }
            /** @type {function(!Object): ?} */
            var t = $scope.components.account.login.loginCallback;
            /**
             * @param {!Object} req
             * @return {?}
             */
            $scope.components.account.login.loginCallback = function(req) {
                if ("function" === typeof t) {
                    t.apply($scope.components.account.login, arguments);
                }
                if (req.isGigyaFlow && req.redirect && req.redirect.path) {
                    var maindata3 = $.extend($scope.util.getQueryStringParams(req.redirect.path), {
                        source: "default.embedded"
                    });
                    /** @type {(Element|null)} */
                    var iframe = document.getElementById("optimized_login_iframe");
                    if (iframe) {
                        pm({
                            target: iframe.contentWindow,
                            type: "loginiframe.gigyalogin",
                            data: maindata3
                        });
                    } else {
                        $scope.ajax.getJson({
                            url: $scope.urls.gigyaRedirectURL,
                            data: maindata3,
                            callback: fn
                        });
                    }
                } else {
                    $scope.dialog.close();
                    if ($scope.isUserAuthenticated) {
                        logInDeferred.resolve();
                    } else {
                        logInDeferred.reject();
                    }
                }
                return false;
            };
            $(document).trigger("globalLogin.openModal", {
                iframeType: apiUrl || "login",
                customDialogClass: method || ""
            });
            pm.bind("gigya.link.account.success", fn);
            return logInDeferred.promise();
        },
        removeInvalidXMLCharacters: function(stringIn) {
            return this.stripTags(stringIn.replace(new RegExp($scope.preferences.invalidXMLCharactersRegexp, "g"), ""));
        },
        stripJSfromURL: function(val) {
            return val ? val.toString().replace(/javascript:/i, "") : "";
        },
        stripTags: function(value) {
            return value ? value.toString().replace(/<\/?[^>]+>/g, "") : "";
        },
        getEllipsisStr: function(precision, specifier) {
            if (specifier.length > precision) {
                return specifier.trim().substring(0, precision) + "\u2026";
            }
        },
        getUpdatedMinicart: function() {
            $scope.ajax.load({
                url: $scope.urls.getMiniCart,
                callback: function(name) {
                    $(document).trigger("global.showMinicart", name);
                }
            });
        }
    };
    $.event.special.doubletap = {
        bindType: "touchend",
        delegateType: "touchend",
        handle: function(event) {
            var handleObj = event.handleObj;
            var touches = event.changedTouches;
            var self = jQuery.data(event.target);
            /** @type {number} */
            var currTime = Date.now();
            /** @type {number} */
            var m = self.lastTouch ? currTime - self.lastTouch : 0;
            var andTmp = self.screenX && self.screenX + 15 > touches[0].screenX && self.screenX - 15 < touches[0].screenX;
            var tmp = self.screenY && self.screenY + 15 > touches[0].screenY && self.screenY - 15 < touches[0].screenY;
            if (300 > m && 30 < m && andTmp && tmp) {
                /** @type {null} */
                self.lastTouch = null;
                /** @type {null} */
                self.screenX = null;
                /** @type {null} */
                self.screenY = null;
                handleObj.handler.apply(this, arguments);
            } else {
                /** @type {number} */
                self.lastTouch = currTime;
                self.screenX = touches[0].screenX;
                self.screenY = touches[0].screenY;
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @param {!Object} d
     * @return {undefined}
     */
    function next(d) {
        if (self.page.eeProductsOnPage && d.eeProductsOnPage) {
            $.extend(self.page.eeProductsOnPage, d.eeProductsOnPage);
            $.each(g, function(canCreateDiscussions, $) {
                $(self.page, {
                    eeProductsOnPage: d.eeProductsOnPage
                });
            });
            delete d.eeProductsOnPage;
        }
    }
    var json = {};
    /** @type {!Array} */
    var g = [];
    self.page = {
        title: "",
        type: "",
        setContext: function(value) {
            var e = $(".page_context_data");
            if (e.length) {
                e.each(function() {
                    var d = $(this).data();
                    next(d);
                    $.extend(self.page, d);
                });
            }
            next(value);
            self.page.dispatch(value);
        },
        dispatch: function(params) {
            $.extend(self.page, params);
            $.each(g, function(canCreateDiscussions, $) {
                $(self.page, params);
            });
        },
        subscribe: function(callback) {
            if ("function" !== typeof callback) {
                throw Error("Expected listener to be a function.");
            }
            /** @type {boolean} */
            var d = true;
            g.push(callback);
            callback(self.page);
            return function() {
                if (d) {
                    /** @type {boolean} */
                    d = false;
                    /** @type {number} */
                    var to = g.indexOf(callback);
                    g.splice(to, 1);
                }
            };
        },
        setEeProductsOnPage: function(b) {
            this.eeProductsOnPage = this.eeProductsOnPage || {};
            next({
                eeProductsOnPage: b
            });
        },
        params: self.util.getQueryStringParams(window.location.search.substr(1)),
        redirect: function(name) {
            setTimeout(function() {
                /** @type {!Object} */
                window.location.href = name;
            }, 0);
        },
        refresh: function() {
            $(document).trigger("page.refresh");
            setTimeout(function() {
                window.location.reload();
            }, 500);
        },
        addElement: function(index, data) {
            json[index] = data;
            return this;
        },
        getElement: function(param) {
            return json[param] || {};
        },
        setContexAfterAjaxCall: function() {
            var d = $(".page_context_data").last();
            if (0 < d.length) {
                try {
                    var moduleName = d.html().trim().replace(/\x3c!--(.*?)--\x3e/gm, "$1");
                    /** @type {*} */
                    var module = moduleName ? JSON.parse(moduleName) : {};
                    self.page.setContext(module);
                } catch (responseObj) {
                    console.error(responseObj.message);
                }
                d.remove();
            }
        },
        isMobileScreenSize: false
    };
})(window.app = window.app || {}, jQuery);
(function(api, $) {
    /**
     * @param {?} data
     * @return {undefined}
     */
    function download(data) {
        api.ajax.getJson({
            url: api.urls.giftRegAdd + data,
            callback: function(name) {
                if (!name || !name.address) {
                    return window.alert(api.resources.REG_ADDR_ERROR), false;
                }
                that.addressBeforeFields.filter("[name$='_addressid']").val(name.address.ID);
                that.addressBeforeFields.filter("[name$='_firstname']").val(name.address.firstName);
                that.addressBeforeFields.filter("[name$='_lastname']").val(name.address.lastName);
                that.addressBeforeFields.filter("[name$='_address1']").val(name.address.address1);
                that.addressBeforeFields.filter("[name$='_address2']").val(name.address.address2);
                that.addressBeforeFields.filter("[name$='_city']").val(name.address.city);
                that.addressBeforeFields.filter("[name$='_zip']").val(name.address.postalCode);
                that.addressBeforeFields.filter("[name$='_state']").val(name.address.stateCode);
                that.addressBeforeFields.filter("[name$='_country']").val(name.address.countryCode);
                that.addressBeforeFields.filter("[name$='_phone']").val(name.address.phone);
                that.registryForm.validate().form();
            }
        });
    }
    /**
     * @param {?} earlyAlertId
     * @return {undefined}
     */
    function initialize(earlyAlertId) {
        api.ajax.getJson({
            url: api.urls.giftRegAdd + earlyAlertId,
            callback: function(name) {
                if (!name || !name.address) {
                    return window.alert(api.resources.REG_ADDR_ERROR), false;
                }
                that.addressAfterFields.filter("[name$='_addressid']").val(name.address.ID);
                that.addressAfterFields.filter("[name$='_firstname']").val(name.address.firstName);
                that.addressAfterFields.filter("[name$='_lastname']").val(name.address.lastName);
                that.addressAfterFields.filter("[name$='_address1']").val(name.address.address1);
                that.addressAfterFields.filter("[name$='_address2']").val(name.address.address2);
                that.addressAfterFields.filter("[name$='_city']").val(name.address.city);
                that.addressAfterFields.filter("[name$='_zip']").val(name.address.postalCode);
                that.addressAfterFields.filter("[name$='_state']").val(name.address.stateCode);
                that.addressAfterFields.filter("[name$='_country']").val(name.address.countryCode);
                that.addressAfterFields.filter("[name$='_phone']").val(name.address.phone);
                that.registryForm.validate().form();
            }
        });
    }
    /**
     * @return {undefined}
     */
    function getObjectOfForm() {
        that.addressBeforeFields.each(function() {
            var widget = $(this).attr("name");
            that.addressAfterFields.filter("[name='" + widget.replace("Before", "After") + "']").val($(this).val());
        });
    }
    /**
     * @return {undefined}
     */
    function load() {
        api.util.setDeleteConfirmation("table.item_list", String.format(api.resources.CONFIRM_DELETE, api.resources.TITLE_GIFTREGISTRY));
        that.copyAddress.on("click", function() {
            if (this.checked) {
                getObjectOfForm();
            }
        });
        that.registryForm.on("change", "select[name$='_addressBeforeList']", function() {
            var out = $(this).val();
            if (0 !== out.length) {
                download(out);
                if (that.copyAddress[0].checked) {
                    getObjectOfForm();
                }
            }
        }).on("change", "select[name$='_addressAfterList']", function() {
            var name = $(this).val();
            if (0 !== name.length) {
                initialize(name);
            }
        }).on("change", that.addressBeforeFields.filter(":not([name$='_country'])"), function() {
            if (that.copyAddress[0].checked) {
                getObjectOfForm();
            }
        });
        $("form").on("change", "select[name$='_country']", function() {
            api.util.updateStateOptions(this);
            if (0 < that.copyAddress.length && that.copyAddress[0].checked && 0 < this.id.indexOf("_addressBefore")) {
                getObjectOfForm();
                that.addressAfterFields.filter("[name$='_country']").trigger("change");
            }
        });
        that.registryItemsTable.on("click", ".item_details a", function(event) {
            event.preventDefault();
            var e = $("input[name=productListID]").val();
            api.quickView.show({
                url: event.target.href,
                source: "giftregistry",
                productlistid: e
            });
        });
    }
    var that = {};
    api.registry = {
        init: function() {
            that = {
                registryForm: $("form[name$='_giftregistry']"),
                registryItemsTable: $("form[name$='_giftregistry_items']"),
                registryTable: $("#registry-results")
            };
            that.copyAddress = that.registryForm.find("input[name$='_copyAddress']");
            that.addressBeforeFields = that.registryForm.find("fieldset[name='address_before'] input:not(:checkbox), fieldset[name='address_before'] select");
            that.addressAfterFields = that.registryForm.find("fieldset[name='address_after'] input:not(:checkbox), fieldset[name='address_after'] select");
            that.addressBeforeFields.filter("[name$='_country']").data("stateField", that.addressBeforeFields.filter("[name$='_state']"));
            that.addressAfterFields.filter("[name$='_country']").data("stateField", that.addressAfterFields.filter("[name$='_state']"));
            if (that.copyAddress.length && that.copyAddress[0].checked) {
                getObjectOfForm();
                that.addressAfterFields.attr("disabled", "disabled");
            }
            load();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(exports, $) {
    exports.progress = {
        show: function(obj) {
            obj = obj && 0 !== $(obj).length ? $(obj) : $("body");
            var o = obj.children(".loader");
            if (0 === o.length) {
                o = $("<div/>").addClass("loader").append($("<div/>").addClass("loader_indicator"), $("<div/>").addClass("loader_bg"));
                o = o.clone().appendTo(obj).show();
            } else {
                o.show();
            }
            $(document).trigger("progress.show", {
                target: o
            });
            return o;
        },
        hide: function(options) {
            options = options && 0 !== $(options).length ? $(options) : $("body");
            $(".loader", options).hide();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @param {!Object} sub
     * @return {undefined}
     */
    function init(sub) {
        /**
         * @param {!Object} e
         * @return {undefined}
         */
        function render(e) {
            if (!e.attr("src")) {
                try {
                    var s = self.components.global.responsive.settings;
                    var newClassNames = e.data()[s.device + "Src"];
                    e.attr("src", newClassNames);
                } catch (Oa) {
                    e.hide();
                }
            }
        }
        var root = $(this);
        var el = root.children("." + opts.cssCarousel);
        var options = $.extend({}, opts.optionsDefault, root.data() || {});
        var uiElem = options.autoScroll || false;
        /** @type {boolean} */
        var v = "stopAutoScrollOnHover" in options ? !!options.stopAutoScrollOnHover : false;
        /** @type {boolean} */
        var L = "controlsEnabled" in options ? !!options.controlsEnabled : true;
        var Z = options.showCarouselCount || false;
        var state = options.slideWidthSample || false;
        var x = options.showPaginationContent || false;
        /** @type {boolean} */
        var reverseValue = "recalculateHeight" in options ? !!options.recalculateHeight : true;
        /** @type {boolean} */
        var z = 0 === +options.animationDuration && "scrollFade" in options && !!options.scrollFade;
        /** @type {boolean} */
        var H = "isFullWidthCarousel" in options ? !!options.isFullWidthCarousel : false;
        /** @type {boolean} */
        var I = "isScrollBackToFirstEnabled" in options ? !!options.isScrollBackToFirstEnabled : true;
        /** @type {boolean} */
        var ctrlRoot = "domPrepopulate" in options ? !!options.domPrepopulate : true;
        var body = "visibleondevices" in options ? options.visibleondevices : "";
        var currentRow = "carouselWrap" in options ? options.carouselWrap : "";
        var map = options.startPosition || 0;
        var vertical = root.hasClass(opts.cssCarouselVertical);
        var reverseIsSingle = root.hasClass(opts.cssCarouselHorizontal);
        var width = self.util.getMaxChildHeight(el);
        var value = state ? root.find(state) : null;
        var eName = "paginationEvent" in options ? options.paginationEvent : "click";
        /** @type {number} */
        var nbProblems = 0;
        var namedCol = "maxCircularIterations" in options ? options.maxCircularIterations : 0;
        /** @type {boolean} */
        var transitions = false;
        /** @type {boolean} */
        var X = !!options.lazyLoad;
        if ((!body || !body.length || -1 !== body.indexOf(self.currentDevice)) && el.children("ul").length && (reverseIsSingle || vertical) && width) {
            if (state && !value.length) {
                value = $("<div>").addClass(opts.cssSlideWidthSample).appendTo(root);
                root.data("slideWidthSample", value);
            }
            if (ctrlRoot && !root.children("." + opts.cssControl).length) {
                ctrlRoot = $(document.createElement("a")).attr({
                    class: opts.cssControlPrev + " " + opts.cssControl,
                    "data-control-direction": "prev"
                });
                body = $(document.createElement("a")).attr({
                    class: opts.cssControlNext + " " + opts.cssControl,
                    "data-control-direction": "next"
                });
                root.append(ctrlRoot, body);
            }
            if (sub && sub.hasOwnProperty("data") && sub.data.delayedInitialization) {
                root.on("createend.jcarousel", function(b, config) {
                    b = config.fullyvisible();
                    config = config.element();
                    var a = $(sub.target);
                    if (b.length && a.hasClass(opts.cssControl)) {
                        /** @type {string} */
                        a = "next" === a.data().controlDirection ? "+" : "-";
                        config.jcarousel("scroll", a + "=" + b.length);
                    }
                    $(this).removeClass(opts.cssCarouselInitializationDelayed);
                });
            }
            if (Z) {
                root.on("createend.jcarousel scrollend.jcarousel", function(type, count) {
                    /** @type {string} */
                    var context = count;
                    type = root;
                    count = options.countLabel || opts.controlLabel;
                    context = context instanceof jQuery ? context.data("jcarousel") : context;
                    type = type || context.element().parent();
                    count = count || opts.controlLabel;
                    var lineno = context.items().length;
                    context = context.last().index() + 1;
                    /** @type {number} */
                    lineno = lineno - context;
                    type.children("." + opts.cssControlNext).html("+" + lineno + " " + count);
                });
            }
            if (map) {
                root.on("jcarousel:createend", t.bind(null, el, map));
            }
            if (reverseIsSingle && reverseValue) {
                el.css("height", width + "px");
            }
            if (state && value && value.length) {
                el.find("> ul > li").outerWidth(value.width());
            }
            if (z) {
                connect(root);
            }
            el.on("jcarousel:targetin jcarousel:targetout", "li", function(verifiedEvent) {
                $(this).toggleClass(opts.cssActiveSlide, "jcarousel:targetin" === verifiedEvent.type);
            });
            if (X) {
                el.on("jcarousel:targetin", "li", function(p) {
                    p = $(p.currentTarget).find("img:not(.lazyload-carousel-image)");
                    render(p);
                });
            } else {
                el.find("img").each(function() {
                    render($(this));
                });
            }
            if (opts.useCSS3Transitions && "undefined" !== typeof window.Modernizr && Modernizr.csstransitions) {
                transitions = {
                    transforms: Modernizr.csstransforms,
                    transforms3d: Modernizr.csstransforms3d,
                    easing: "ease"
                };
            } else {
                if (opts.useCSS3Transitions && head.csstransitions) {
                    transitions = {
                        transforms: !!head.csstransforms,
                        transforms3d: !!head.csstransforms3d,
                        easing: "ease"
                    };
                }
            }
            el.on("jcarousel:createend", f).on("jcarousel:targetout", "li", selectSection).jcarousel({
                vertical: vertical,
                wrap: currentRow,
                list: function() {
                    return this.element().children("ul");
                },
                animation: {
                    duration: "number" === typeof options.animationDuration ? options.animationDuration : opts.animationDuration,
                    easing: "number" === typeof options.carouselEasing ? options.carouselEasing : opts.animationEasing,
                    complete: function() {}
                },
                transitions: transitions
            });
            main(root, el);
            if (L) {
                run(root, el, {
                    isScrollBackToFirstEnabled: I
                });
            }
            if (uiElem) {
                callback(root, el, {
                    interval: "undefined" !== typeof options.autoScrollInterval ? options.autoScrollInterval : 3E3,
                    autostart: "undefined" !== typeof options.autoScrollAutostart ? !!options.autoScrollInterval : true
                });
                if ("circular" === currentRow && 0 < namedCol) {
                    root.on("jcarousel:scrollend", function(b, references2) {
                        nbProblems++;
                        if (nbProblems == references2.items().length) {
                            /** @type {number} */
                            nbProblems = 0;
                            namedCol--;
                        }
                        if (0 >= namedCol) {
                            el.jcarouselAutoscroll("stop");
                        }
                    });
                }
                if (v) {
                    el.on("mouseenter", function() {
                        $(this).jcarouselAutoscroll("stop");
                    }).on("mouseleave", function() {
                        $(this).jcarouselAutoscroll("start");
                    });
                }
            }
            if (options.paginationEnabled) {
                if (!root.find("." + opts.cssPagination).length) {
                    uiElem = $(document.createElement("ul")).attr({
                        class: opts.cssPagination
                    });
                    root.append(uiElem);
                }
                get(root, el, {
                    extendPagination: x,
                    paginationEvent: eName
                });
            }
            if (H) {
                update(root, el);
            }
        }
    }
    /**
     * @param {?} d
     * @param {?} a
     * @return {undefined}
     */
    function t(d, a) {
        d.jcarousel("scroll", parseInt(a, 10), false);
    }
    /**
     * @return {undefined}
     */
    function handler() {
        $(this).find("." + opts.cssCarouselWrapper).not("." + opts.cssCarouselInitializationDelayed).each(init);
    }
    /**
     * @param {?} n
     * @param {!Object} r
     * @return {undefined}
     */
    function f(n, r) {
        r.element().addClass(opts.cssCarouselInitalized);
    }
    /**
     * @return {undefined}
     */
    function selectSection() {
        $(this).addClass(opts.cssActiveSlideOut).siblings("li").removeClass(opts.cssActiveSlideOut);
    }
    /**
     * @return {undefined}
     */
    function setup() {
        var root = $(this);
        var el = root.children("." + opts.cssCarousel);
        var t = $.extend({}, opts.optionsDefault, root.data() || {});
        /** @type {boolean} */
        var g = "controlsEnabled" in t ? !!t.controlsEnabled : true;
        var a = t.slideWidthSample || false;
        var l = t.showPaginationContent || false;
        /** @type {boolean} */
        var m = "recalculateHeight" in t ? !!t.recalculateHeight : true;
        var type = root.hasClass(opts.cssCarouselHorizontal);
        /** @type {boolean} */
        t = "isFullWidthCarousel" in t ? !!t.isFullWidthCarousel : false;
        var width = self.util.getMaxChildHeight(el);
        var b = a ? root.find(a) : null;
        if (el.data("jcarousel")) {
            if (type && m) {
                el.css("height", width + "px");
            }
            if (a && b && b.length) {
                el.find("> ul > li").outerWidth(b.width());
            }
            if (t) {
                update(root, el);
            }
            el.jcarousel("reload");
            if (g) {
                render(root, el);
            }
            reset(root, el, {
                extendPagination: l
            });
        }
    }
    /**
     * @return {undefined}
     */
    function fn() {
        $(this).find("." + opts.cssCarouselWrapper).each(setup);
    }
    /**
     * @param {!Object} resource
     * @param {number} instance
     * @param {?} self
     * @return {undefined}
     */
    function get(resource, instance, self) {
        if (instance.jcarousel("fullyvisible")) {
            var utils = resource.find("." + opts.cssPagination);
            var size = resource.data().paginationPerpage || instance.jcarousel("fullyvisible").length;
            if (!(instance.jcarousel("items").length <= size)) {
                utils.on("jcarouselpagination:inactive", "li", function(me) {
                    $(this).removeClass(opts.cssPaginationActive, "active" === me.type);
                }).on("jcarouselpagination:active", "li", function() {
                    $(this).addClass(opts.cssPaginationActive);
                }).one("jcarouselpagination:createend", function(canCreateDiscussions, levelID) {
                    if (self.extendPagination && 1 === size) {
                        log(resource, instance, levelID);
                    }
                });
                try {
                    utils.jcarouselPagination({
                        perPage: size,
                        carousel: instance,
                        item: function(name) {
                            return "<li class='" + opts.cssPaginationItem + "'><a data-carousel-step='" + name + "' class='" + opts.cssPaginationItemLink + "'><span class='navigation_item_number'>" + name + "</span></a></li>";
                        },
                        event: self.paginationEvent
                    });
                } catch (K) {}
            }
        }
    }
    /**
     * @param {!Object} val
     * @param {undefined} el
     * @param {?} data
     * @return {undefined}
     */
    function reset(val, el, data) {
        if (el.jcarousel("fullyvisible")) {
            var dispatcher = val.children("." + opts.cssPagination);
            var number = val.data().paginationPerpage || el.jcarousel("fullyvisible").length;
            if (0 != dispatcher.length) {
                dispatcher.one("jcarouselpagination:reloadend", function(canCreateDiscussions, levelID) {
                    if (data.extendPagination && 1 === number) {
                        log(val, el, levelID);
                    }
                });
                try {
                    dispatcher.jcarouselPagination("reload", {
                        perPage: number
                    });
                } catch (K) {}
            }
        }
    }
    /**
     * @param {!Object} object
     * @param {number} el
     * @param {?} lineClamp
     * @return {undefined}
     */
    function run(object, el, lineClamp) {
        if (el.jcarousel("visible")) {
            var pageSize = object.data("carouselStep") && 0 < parseInt(object.data("carouselStep")) ? parseInt(object.data("carouselStep")) : el.jcarousel("fullyvisible").length;
            object.on("jcarouselcontrol:active", "." + opts.cssControl, function() {
                $(this).removeClass(opts.cssControlDisabled);
            }).on("jcarouselcontrol:inactive", "." + opts.cssControl, function() {
                $(this).addClass(opts.cssControlDisabled);
            });
            object.children("." + opts.cssControl).each(function() {
                var $w = $(this);
                /** @type {string} */
                var mark = "next" === $w.data().controlDirection ? "+" : "-";
                var defaults = {
                    carousel: el,
                    target: mark + "=" + pageSize
                };
                if (lineClamp.isScrollBackToFirstEnabled) {
                    /**
                     * @return {undefined}
                     */
                    defaults.method = function() {
                        pageSize = parseInt(object.data("carouselStep"), 10) || el.jcarousel("fullyvisible").length;
                        var result = el.jcarousel("items");
                        /** @type {number} */
                        var remainder = result.length % pageSize;
                        var text = pageSize;
                        if ("-" == mark && 0 < remainder && result.index(el.jcarousel("last")) == result.length - 1) {
                            /** @type {number} */
                            text = remainder;
                        }
                        this.carousel().jcarousel("scroll", mark + "=" + text);
                    };
                }
                $w.jcarouselControl(defaults);
            });
        }
    }
    /**
     * @param {!Object} val
     * @param {?} el
     * @return {undefined}
     */
    function render(val, el) {
        if (el.jcarousel("visible")) {
            var id = val.data("carouselStep") && 0 < parseInt(val.data("carouselStep")) ? parseInt(val.data("carouselStep")) : el.jcarousel("fullyvisible").length;
            val.children("." + opts.cssControl).each(function() {
                var el = $(this);
                /** @type {string} */
                var label = "next" === el.data().controlDirection ? "+" : "-";
                el.jcarouselControl("reload", {
                    target: label + "=" + id
                });
            });
            $(val).trigger("carouselcontrols.reloaded");
        }
    }
    /**
     * @param {!Object} id
     * @param {?} $
     * @param {!Object} elem
     * @return {undefined}
     */
    function callback(id, $, elem) {
        if ($.jcarousel("visible")) {
            id = id.data("carouselStep") && 0 < parseInt(id.data("carouselStep")) ? parseInt(id.data("carouselStep")) : $.jcarousel("fullyvisible").length;
            elem = elem || {};
            /** @type {string} */
            elem.target = "+=" + id;
            $.jcarouselAutoscroll(elem).on("start.jcarouselautoscroll", function() {
                $(this).jcarouselAutoscroll("start");
            }).on("stop.jcarouselautoscroll", function() {
                $(this).jcarouselAutoscroll("stop");
            });
        }
    }
    /**
     * @return {undefined}
     */
    function initializeUIComponents() {
        if (self.ui && self.ui.main) {
            self.ui.main.on("quickview.open", function(b, scope) {
                if (scope.target) {
                    handler.call(scope.target);
                }
            });
            self.ui.main.on("click", "." + opts.cssCarouselInitializationDelayed, {
                delayedInitialization: true
            }, init);
        }
        $(window).on(opts.resizeEventName, function() {
            var new_curr_val = $(window).width();
            if (!(new_curr_val == curr_val && opts.checkHeightAndWidthChanges)) {
                if (_takingTooLongTimeout) {
                    clearTimeout(_takingTooLongTimeout);
                }
                /** @type {number} */
                _takingTooLongTimeout = setTimeout(function() {
                    fn.call(document);
                }, 101);
                curr_val = new_curr_val;
            }
        });
    }
    /**
     * @param {!Object} fn
     * @param {?} self
     * @return {undefined}
     */
    function main(fn, self) {
        if (self.jcarousel("visible")) {
            var rpp = fn.data("carouselStep") && 0 < parseInt(fn.data("carouselStep")) ? parseInt(fn.data("carouselStep")) : self.jcarousel("fullyvisible").length;
            var total = self.jcarousel("items").length;
            if ($.fn.hasOwnProperty("touchwipe")) {
                self.touchwipe({
                    wipeLeft: function(e) {
                        e.preventDefault();
                        /** @type {boolean} */
                        e = !!fn.data("swipeScrollDisabled");
                        rpp = parseInt(fn.data("carouselStep"), 10) || self.jcarousel("fullyvisible").length;
                        if (!e) {
                            self.jcarousel("scroll", "+=" + rpp);
                        }
                    },
                    wipeRight: function(e) {
                        e.preventDefault();
                        /** @type {boolean} */
                        e = !!fn.data("swipeScrollDisabled");
                        rpp = parseInt(fn.data("carouselStep"), 10) || self.jcarousel("fullyvisible").length;
                        if (!e) {
                            e = self.jcarousel("last").data("index") == total - 1 ? total % rpp || rpp : rpp;
                            self.jcarousel("scroll", "-=" + e);
                        }
                    },
                    preventDefaultEvents: false,
                    isMSPointerEvents: opts.isMSPointerEvents
                });
            }
        }
    }
    /**
     * @param {!Object} values
     * @param {number} value
     * @param {!Object} label
     * @return {undefined}
     */
    function log(values, value, label) {
        values = value.jcarousel("items");
        label = label.element();
        /** @type {number} */
        value = 0;
        var length = values.length;
        for (; value < length; value++) {
            var match = $(values[value]);
            var blockHostsStr = match.find("." + opts.cssSlide.pagingText).html();
            var css = match.find("." + opts.cssSlide.pagingColor).text();
            match = match.find("." + opts.cssSlide.pagingImage).text();
            var self = label.find("[data-carousel-step='" + (value + 1) + "']");
            if (self.length) {
                if (blockHostsStr && blockHostsStr.length) {
                    self.append("<span class='navigation_item_custom_text'>" + blockHostsStr + "</span>");
                }
                if (css && css.length) {
                    self.css("background-color", css);
                }
                if (match && match.length) {
                    self.css("background-image", "url(" + match + ")");
                }
            }
        }
    }
    /**
     * @param {!Object} container
     * @return {undefined}
     */
    function connect(container) {
        var outDuration = container.data("scrollFadeDuration") || opts.scrollFadeDuration;
        if (container && container.length) {
            container.on("jcarousel:createend jcarousel:reloadend", open);
            container.on("jcarousel:animateend", function(b, d) {
                if (d && d.inTail) {
                    $(d.list()).css({
                        left: 0,
                        top: 0
                    });
                }
            });
            container.on("jcarousel:scroll", function(b, update) {
                $(update.fullyvisible()).fadeOut(outDuration);
            });
            container.on("jcarousel:scrollend", function(b, data) {
                $(data.fullyvisible()).fadeIn({
                    duration: outDuration,
                    complete: function() {
                        data.carousel().trigger("jcarousel:animateend", data);
                    }
                });
            });
        }
    }
    /**
     * @param {?} embedPlayer
     * @param {!Object} data
     * @return {undefined}
     */
    function open(embedPlayer, data) {
        embedPlayer = data.items();
        var scrollWrapper = data.fullyvisible();
        var i = data.dimension(data.first());
        data = data.list();
        $(data).css({
            width: "auto"
        });
        $(embedPlayer).css({
            position: "absolute",
            top: 0,
            left: 0
        });
        $(embedPlayer).not(scrollWrapper).hide();
        $(scrollWrapper).show();
        if (1 < scrollWrapper.length) {
            /** @type {number} */
            var thumbWidth = 0;
            $(embedPlayer).each(function(b, entryEl) {
                $(entryEl).css({
                    left: thumbWidth * i
                });
                if (thumbWidth < scrollWrapper.length - 1) {
                    thumbWidth++;
                } else {
                    /** @type {number} */
                    thumbWidth = 0;
                }
            });
        }
    }
    /**
     * @param {!Object} w
     * @param {!Object} el
     * @return {undefined}
     */
    function update(w, el) {
        var carousel = el.data("jcarousel");
        el = carousel.items();
        carousel = carousel.list();
        if (w = w.width()) {
            el.width(w);
            carousel.width(w * el.size());
        }
    }
    /** @type {boolean} */
    var H = false;
    /** @type {number} */
    var curr_val = 0;
    /** @type {null} */
    var _takingTooLongTimeout = null;
    var opts = {
        optionsDefault: {},
        cssControl: "jcarousel-control",
        cssControlPrev: "jcarousel-prev",
        cssControlNext: "jcarousel-next",
        cssControlDisabled: "disabled",
        cssPagination: "carousel_navigation_list",
        cssPaginationItem: "carousel_navigation_list_item",
        cssPaginationItemLink: "carousel_navigation_list_link",
        cssPaginationActive: "selected",
        cssCarousel: "jcarousel-clip",
        cssCarouselInitalized: "jcarousel-clip--initialized",
        cssCarouselWrapper: "carousel",
        cssCarouselVertical: "vertical_carousel",
        cssCarouselHorizontal: "horizontal_carousel",
        cssCarouselInitializationDelayed: "carouselInitializationDelayed",
        cssSlideWidthSample: "carousel_slide_width_sample",
        cssSlide: {
            pagingText: "cta_navigationselectiontext",
            pagingColor: "cta_navigationselectioncolor",
            pagingImage: "cta_navigationselectionimg"
        },
        cssActiveSlide: "active",
        cssActiveSlideOut: "active--out",
        scrollFadeDuration: 800,
        animationDuration: 800,
        animationEasing: "linear",
        controlLabel: "&nbsp;",
        resizeEventName: "resize",
        checkHeightAndWidthChanges: true,
        isMSPointerEvents: $("html").hasClass("touch") ? !!window.navigator.msPointerEnabled : false,
        useCSS3Transitions: false
    };
    self.carousel = {
        settings: opts,
        init: function(name) {
            if (!H) {
                opts = $.extend(true, opts, self.carousel.customconfig || {});
                initializeUIComponents();
                /** @type {boolean} */
                H = true;
            }
            if (name && name.hasClass(opts.cssCarouselWrapper)) {
                init.call(name);
            } else {
                handler.call(name || document);
            }
        },
        reload: function(context) {
            if (context && context.hasClass(opts.cssCarouselWrapper)) {
                setup.call(context);
            } else {
                fn.call(context || document);
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @return {undefined}
     */
    function init() {
        if (self.dialog.settings.windowScrollDisabled) {
            that.document.on("dialogopen", function(el) {
                el = $(el.target);
                /** @type {number} */
                var radius = el.parent().position().top - $(window).scrollTop();
                var w;
                if (radius && el.dialog("option", "maxHeightRecalculation")) {
                    w = el.dialog("option", "maxHeight");
                    el.dialog("option", "maxHeight", w - radius);
                }
                if (self.preferences.enableGoogleReCaptcha) {
                    el.trigger("refreshRecaptcha");
                }
                value = that.documentBody.css("overflow-y");
                that.documentBody.css("overflow-y", "hidden");
                that.documentHtml.addClass("no-scroll");
                if (self.dialog.settings.dialogReposition) {
                    el.resize();
                }
            });
            that.document.on("dialogclose", function() {
                that.documentBody.css("overflow-y", value || "auto");
                that.documentHtml.removeClass("no-scroll");
                value = void 0;
            });
        }
        if (self.dialog.settings.fixPositionAfterResize) {
            that.window.resize(self.util.debounce(function() {
                $(":ui-dialog").each(function() {
                    var _this = $(this);
                    var position = _this.dialog("option", "position");
                    if (_this.dialog("isOpen")) {
                        _this.dialog("option", "position", position);
                    }
                });
            }, 200));
        }
        that.document.on("dialogclose", function(options) {
            options = $(options.target);
            if (options.dialog("option", "emptyOnClose")) {
                options.empty();
            }
        });
    }
    /**
     * @param {?} config
     * @return {?}
     */
    function prompt(config) {
        var e = {};
        var cls = config.dialogClass;
        if (!self.dialog.uniqueDefaults || !cls) {
            return config;
        }
        cls = cls.split(" ");
        /** @type {number} */
        var j = 0;
        var cols = cls.length;
        for (; j < cols; j++) {
            $.extend(e, self.dialog.uniqueDefaults[cls[j]] || {});
        }
        return $.extend({}, e, config, true);
    }
    var that = {};
    var value;
    var parameters = {};
    self.dialog = {
        init: function(name) {
            $.extend(parameters, name);
            that.documentBody = $("body");
            that.documentHtml = $("html");
            that.document = $(document);
            that.window = $(window);
            init();
        },
        create: function(config) {
            if (that.currentDialog && "true" === self.resources.CLOSE_CURRENT_DIALOG) {
                that.currentDialog.dialog("close");
            }
            var container = $(config.target || "#dialog-container");
            var data = prompt(config.options || {});
            var settings = $.extend(true, {}, self.dialog.settings, parameters, data);
            if (0 === container.length) {
                var elemTempFragments;
                if (container.selector && "#" === container.selector.charAt(0)) {
                    elemTempFragments = container.selector.substr(1);
                }
                container = $("<div>").attr("id", elemTempFragments).addClass("dialog_content").appendTo("body");
            }
            if (config.options && config.options.pageTitle) {
                /** @type {string} */
                that.currentPageTitle = document.title;
                document.title = config.options.pageTitle;
            }
            that.container = "options" in config && "cloneContainer" in config.options && config.options.cloneContainer ? container.clone() : container;
            if (!settings.autofocusOnFirst) {
                that.container.one("dialogopen", function() {
                    $(this).find(":tabbable:first").blur();
                });
            }
            if (settings.closeOnOutsideClick) {
                var $this = that.container;
                $this.on("dialog.opened dialogopen", function() {
                    /**
                     * @return {undefined}
                     */
                    var render = function() {
                        $this.dialog("close");
                    };
                    if (settings.closeCurrentDialogOnOutsideClick) {
                        $(this).one("clickoutside", render);
                    } else {
                        if (settings.modal) {
                            $(this).data("uiDialog").overlay.on("click", render);
                        }
                    }
                });
            }
            that.container.dialog(settings);
            that.container.trigger("dialog.created", {
                options: settings
            });
            $(".ui-dialog-titlebar-close").click(function(event) {
                if (that.container) {
                    if (that.currentPageTitle) {
                        document.title = that.currentPageTitle;
                    }
                    event.preventDefault();
                }
            });
            that.container.on("click", "button.close_dialog_button", function() {
                that.container.closest(".ui-dialog").find(".ui-dialog-titlebar-close").trigger("click");
            });
            return that.currentDialog = that.container;
        },
        refreshDialog: function() {
            if (that.container) {
                that.container.dialog(self.dialog.settings);
            }
        },
        open: function(options) {
            if (options.url && 0 !== options.url.length) {
                return that.container = self.dialog.create(options), self.ajax.load({
                    target: that.container,
                    url: options.url,
                    type: options.method || "GET",
                    data: options.data || {},
                    callback: function(name) {
                        if ((name = null != name && (name.trim && name.trim() || name.replace(/^\s+/, "").replace(/\s+$/, ""))) && "{" == name[0]) {
                            try {
                                if ((name = JSON.parse(name)) && !name.authenticated && name.authenticationRequired) {
                                    document.location.reload();
                                    return;
                                }
                            } catch (p) {}
                        }
                        if (!that.container.dialog("isOpen")) {
                            that.container.dialog("open");
                            if ("function" == typeof options.callback) {
                                options.callback(name);
                            }
                        }
                    }
                }), that.container;
            }
        },
        close: function(popup) {
            if (that.container) {
                if (popup) {
                    popup.dialog("close");
                    popup.empty();
                } else {
                    that.container.dialog("close");
                    that.container.empty();
                }
            }
        },
        triggerApply: function() {
            $(this).trigger("dialogApplied");
        },
        onApply: function(name) {
            if (name) {
                $(this).bind("dialogApplied", name);
            }
        },
        triggerDelete: function() {
            $(this).trigger("dialogDeleted");
        },
        onDelete: function(status) {
            if (status) {
                $(this).bind("dialogDeleted", status);
            }
        },
        submit: function(m, func) {
            var options = that.container.find("form:first");
            $("<input/>").attr({
                name: m,
                type: "hidden"
            }).appendTo(options);
            m = options.serialize();
            options = {
                type: "POST",
                url: options.attr("action"),
                data: m,
                dataType: "html"
            };
            if (func) {
                /**
                 * @param {!Object} name
                 * @param {!Function} value
                 * @param {string} key
                 * @return {undefined}
                 */
                options.callback = function(name, value, key) {
                    if ("function" == typeof func) {
                        func(name, value, key, that.container);
                    }
                };
            } else {
                options.target = that.container;
            }
            self.ajax.load(options).done(function() {
                that.document.trigger("dialog.submit.completed");
            });
        },
        settings: {
            autoOpen: false,
            resizable: false,
            bgiframe: true,
            modal: true,
            height: "auto",
            maxHeight: jQuery(window).height(),
            width: "800",
            buttons: {},
            title: "",
            position: "center",
            overlay: {
                opacity: .5,
                background: "black"
            },
            closeCurrentDialogOnOutsideClick: false,
            closeOnOutsideClick: false,
            emptyOnClose: true,
            autofocusOnFirst: true,
            maxHeightRecalculation: true,
            windowScrollDisabled: true,
            fixPositionAfterResize: true,
            dialogReposition: false
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @param {string} i
     * @param {string} position
     * @return {?}
     */
    function setUpSelectFolder(i, position) {
        return function(footer) {
            footer = $(footer).closest(".f_field");
            if (footer.length) {
                footer.addClass(this.settings[i]).removeClass(this.settings[position]);
            }
        };
    }
    /**
     * @param {string} key
     * @return {?}
     */
    function get(key) {
        return function(fname, element) {
            return this.optional(element) ? true : data[key].test($.trim(fname));
        };
    }
    /**
     * @param {string} name
     * @return {?}
     */
    function g(name) {
        return (name = "true" === self.resources.PROFILEFORM_REGEXVALIDATE ? /(billing|shipping|profile)/.exec(name) : /(billing|shipping)/.exec(name)) ? name[0] : null;
    }
    /**
     * @param {string} element
     * @return {?}
     */
    function f(element) {
        var input = $(element);
        element = input.closest("form").find(".country:input");
        if (1 < element.length) {
            input = element.filter("[name*='" + g(input.attr("name")) + "']");
            if (input.length) {
                element = input;
            }
        }
        return element = (element = element.length ? element.val() : self.resources.SITE_CURRENT_COUNTRY || null) && element.toLowerCase();
    }
    /**
     * @param {?} a
     * @param {string} c
     * @return {?}
     */
    function format(a, c) {
        return this.optional(c) ? true : (data.phone[f(c)] || ca).test(a);
    }
    /**
     * @param {string} value
     * @return {?}
     */
    function parse(value) {
        var actions = {
            0: 1,
            1: 0,
            2: 5,
            3: 7,
            4: 9,
            5: 13,
            6: 15,
            7: 17,
            8: 19,
            9: 21,
            I: 19,
            R: 8,
            A: 1,
            J: 21,
            S: 12,
            B: 0,
            K: 2,
            T: 14,
            C: 5,
            L: 4,
            U: 16,
            D: 7,
            M: 18,
            V: 10,
            E: 9,
            N: 20,
            W: 22,
            F: 13,
            O: 11,
            X: 25,
            G: 15,
            P: 3,
            Y: 24,
            H: 17,
            Q: 6,
            Z: 23
        };
        var keys = {
            0: 0,
            9: 9,
            I: 8,
            R: 17,
            1: 1,
            A: 0,
            J: 9,
            S: 18,
            2: 2,
            B: 1,
            K: 10,
            T: 19,
            3: 3,
            C: 2,
            L: 11,
            U: 20,
            4: 4,
            D: 3,
            M: 12,
            V: 21,
            5: 5,
            E: 4,
            N: 13,
            W: 22,
            6: 6,
            F: 5,
            O: 14,
            X: 23,
            7: 7,
            G: 6,
            P: 15,
            Y: 24,
            8: 8,
            H: 7,
            Q: 16,
            Z: 25
        };
        return {
            0: "A",
            7: "H",
            14: "O",
            21: "V",
            1: "B",
            8: "I",
            15: "P",
            22: "W",
            2: "C",
            9: "J",
            16: "Q",
            23: "X",
            3: "D",
            10: "K",
            17: "R",
            24: "Y",
            4: "E",
            11: "L",
            18: "S",
            25: "Z",
            5: "F",
            12: "M",
            19: "T",
            6: "G",
            13: "N",
            20: "U"
        }[value.slice(0, -1).toUpperCase().split("").map(function(index, canCreateDiscussions) {
            return 0 === canCreateDiscussions % 2 ? actions[index] : keys[index];
        }).reduce(function(baseGeohash, c) {
            return baseGeohash + c;
        }) % 26] === value[value.length - 1].toUpperCase();
    }
    /**
     * @param {string} a
     * @param {string} v
     * @param {boolean} b
     * @return {?}
     */
    function func(a, v, b) {
        v = $(v).data("confirmId");
        v = $("#" + v).val();
        if (b) {
            v = v.toLowerCase();
            a = a.toLowerCase();
        }
        return !v || v == a;
    }
    /**
     * @param {?} deps
     * @return {?}
     */
    function fn(deps) {
        return data.creditCard.test(deps);
    }
    /**
     * @param {string} parts
     * @param {!Object} value
     * @return {?}
     */
    function update(parts, value) {
        var values = $(value).closest("form");
        var $hashcashField = values.find("select[name*='_day']");
        value = {
            day: void 0,
            month: void 0,
            year: void 0
        };
        if (0 < $hashcashField.length) {
            value.day = $hashcashField.val();
            value.month = values.find("select[name*='_month']").val();
            value.year = values.find("select[name*='_year']").val();
        } else {
            values = parts.match(/\D/);
            if (null !== values) {
                parts = parts.split(values[0]);
                if (3 === parts.length) {
                    value.day = parts[self.resources.BIRTHDAY_ORDER.indexOf("D")];
                    value.month = parts[self.resources.BIRTHDAY_ORDER.indexOf("M")];
                    value.year = parts[self.resources.BIRTHDAY_ORDER.indexOf("Y")];
                }
            }
        }
        return value;
    }
    /**
     * @param {string} d
     * @param {number} n
     * @return {?}
     */
    function init(d, n) {
        var a = update(d, n);
        /** @type {number} */
        d = parseInt(a.day, 10);
        /** @type {number} */
        n = parseInt(a.month, 10);
        /** @type {number} */
        var year = parseInt(a.year, 10);
        /** @type {!Date} */
        a = new Date;
        /** @type {!Date} */
        var dt = new Date(year, n - 1, d);
        /** @type {boolean} */
        d = dt.getDate() === d && dt.getMonth() + 1 === n && dt.getFullYear() === year;
        return !isNaN(dt) && d && dt.getFullYear() < a.getFullYear() && dt.getFullYear() >= a.getFullYear() - 150;
    }
    /** @type {!RegExp} */
    var ca = new RegExp(self.resources.REGEXP_PHONE);
    var data = {
        phone: {
            us: ca,
            ca: ca,
            gr: new RegExp(self.resources.REGEXP_GR_PHONE),
            cn: new RegExp(self.resources.REGEXP_CN_PHONE),
            de: new RegExp(self.resources.REGEXP_DE_PHONE),
            gb: new RegExp(self.resources.REGEXP_GB_PHONE),
            fr: new RegExp(self.resources.REGEXP_FR_PHONE),
            pl: new RegExp(self.resources.REGEXP_PL_PHONE),
            cz: new RegExp(self.resources.REGEXP_CZ_PHONE),
            sk: new RegExp(self.resources.REGEXP_SK_PHONE),
            it: new RegExp(self.resources.REGEXP_IT_PHONE),
            es: new RegExp(self.resources.REGEXP_ES_PHONE),
            lu: new RegExp(self.resources.REGEXP_LU_PHONE),
            at: new RegExp(self.resources.REGEXP_AT_PHONE),
            be: new RegExp(self.resources.REGEXP_BE_PHONE),
            nl: new RegExp(self.resources.REGEXP_NL_PHONE),
            dk: new RegExp(self.resources.REGEXP_DK_PHONE),
            se: new RegExp(self.resources.REGEXP_SE_PHONE),
            no: new RegExp(self.resources.REGEXP_NO_PHONE),
            fi: new RegExp(self.resources.REGEXP_FI_PHONE),
            tw: new RegExp(self.resources.REGEXP_TW_PHONE),
            ae: new RegExp(self.resources.REGEXP_AE_PHONE),
            br: new RegExp(self.resources.REGEXP_BR_PHONE),
            ro: new RegExp(self.resources.REGEXP_RO_PHONE),
            sa: new RegExp(self.resources.REGEXP_SA_PHONE)
        },
        postal: {
            us: new RegExp(self.resources.REGEXP_US_ZIP),
            ca: new RegExp(self.resources.REGEXP_CA_ZIP),
            gb: new RegExp(self.resources.REGEXP_GB_ZIP),
            br: new RegExp(self.resources.REGEXP_BR_ZIP),
            de: new RegExp(self.resources.REGEXP_DE_ZIP),
            cn: new RegExp(self.resources.REGEXP_CN_ZIP),
            sg: new RegExp(self.resources.REGEXP_SG_ZIP),
            au: new RegExp(self.resources.REGEXP_AU_ZIP),
            pl: new RegExp(self.resources.REGEXP_PL_ZIP),
            cz: new RegExp(self.resources.REGEXP_CZ_ZIP),
            sk: new RegExp(self.resources.REGEXP_SK_ZIP),
            fr: new RegExp(self.resources.REGEXP_FR_ZIP),
            es: new RegExp(self.resources.REGEXP_ES_ZIP),
            it: new RegExp(self.resources.REGEXP_IT_ZIP),
            be: new RegExp(self.resources.REGEXP_BE_ZIP),
            gr: new RegExp(self.resources.REGEXP_GR_ZIP),
            nl: new RegExp(self.resources.REGEXP_NL_ZIP),
            ch: new RegExp(self.resources.REGEXP_CH_ZIP),
            dk: new RegExp(self.resources.REGEXP_DK_ZIP),
            se: new RegExp(self.resources.REGEXP_SE_ZIP),
            no: new RegExp(self.resources.REGEXP_NO_ZIP),
            fi: new RegExp(self.resources.REGEXP_FI_ZIP),
            at: new RegExp(self.resources.REGEXP_AT_ZIP),
            lu: new RegExp(self.resources.REGEXP_LU_ZIP),
            tw: new RegExp(self.resources.REGEXP_TW_ZIP),
            ro: new RegExp(self.resources.REGEXP_RO_ZIP),
            sa: new RegExp(self.resources.REGEXP_SA_ZIP),
            za: new RegExp(self.resources.REGEXP_ZA_ZIP)
        },
        fiscalCode: {
            it: {
                legal: new RegExp(self.resources.REGEXP_IT_FISCALCODE_LEGAL),
                natural: new RegExp(self.resources.REGEXP_IT_FISCALCODE_NATURAL)
            },
            es: {
                nif: new RegExp(self.resources.REGEXP_ES_FISCALCODE_NIF),
                cif1: new RegExp(self.resources.REGEXP_ES_FISCALCODE_CIF1),
                cif2: new RegExp(self.resources.REGEXP_ES_FISCALCODE_CIF2),
                cif3: new RegExp(self.resources.REGEXP_ES_FISCALCODE_CIF3)
            },
            pl: new RegExp(self.resources.REGEXP_PL_FISCALCODE)
        },
        vat: {
            it: new RegExp(self.resources.REGEXP_IT_VAT)
        },
        pobox: {
            us: new RegExp(self.resources.REGEXP_US_POBOX),
            ca: new RegExp(self.resources.REGEXP_CA_POBOX)
        },
        url: /^((https?|ftp):\/\/)?(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i,
        password: new RegExp(self.resources.REGEXP_PASSWORD),
        address1: new RegExp(self.resources.REGEXP_ADDRESS1),
        email: new RegExp(self.resources.REGEXP_EMAIL),
        emailormobile: /^([\w-\.]{1,}@([\da-zA-Z-]{1,}\.){1,}[\da-zA-Z-]{2,4})|((13[0-9]|15[012356789]|17[0678]|18[0-9]|14[57])[0-9]{8})$/i,
        multipleemails: new RegExp(self.resources.REGEXP_EMAILS),
        smsverifycode: /^\d{6}$/,
        characterSet: new RegExp(self.resources.REGEXP_CHARACTERSET),
        forbiddenCharacterSet: new RegExp(self.resources.REGEXP_FORBIDDEN_CHARACTERSET),
        SDICode: new RegExp(self.resources.REGEXP_SDICODE),
        PECAddress: new RegExp(self.resources.REGEXP_PECADDRESS),
        characterSetValidation: self.resources.REGEXP_CHARACTERSET_VALIDATION,
        creditCard: new RegExp(self.resources.REGEXP_CREDIT_CARD),
        mobilePhone: {
            cn: new RegExp(self.resources.REGEXP_CN_MOBILEPHONE),
            pl: new RegExp(self.resources.REGEXP_PL_MOBILEPHONE),
            cz: new RegExp(self.resources.REGEXP_CZ_MOBILEPHONE),
            sk: new RegExp(self.resources.REGEXP_SK_MOBILEPHONE),
            fr: new RegExp(self.resources.REGEXP_FR_MOBILEPHONE),
            gb: new RegExp(self.resources.REGEXP_GB_MOBILEPHONE),
            es: new RegExp(self.resources.REGEXP_ES_MOBILEPHONE),
            it: new RegExp(self.resources.REGEXP_IT_MOBILEPHONE),
            de: new RegExp(self.resources.REGEXP_DE_MOBILEPHONE),
            be: new RegExp(self.resources.REGEXP_BE_MOBILEPHONE),
            gr: new RegExp(self.resources.REGEXP_GR_MOBILEPHONE),
            nl: new RegExp(self.resources.REGEXP_NL_MOBILEPHONE),
            ch: new RegExp(self.resources.REGEXP_CH_MOBILEPHONE),
            no: new RegExp(self.resources.REGEXP_NO_MOBILEPHONE),
            fi: new RegExp(self.resources.REGEXP_FI_MOBILEPHONE),
            dk: new RegExp(self.resources.REGEXP_DK_MOBILEPHONE),
            at: new RegExp(self.resources.REGEXP_AT_MOBILEPHONE),
            se: new RegExp(self.resources.REGEXP_SE_MOBILEPHONE),
            lu: new RegExp(self.resources.REGEXP_LU_MOBILEPHONE),
            ae: new RegExp(self.resources.REGEXP_AE_MOBILEPHONE),
            ro: new RegExp(self.resources.REGEXP_RO_MOBILEPHONE),
            sa: new RegExp(self.resources.REGEXP_SA_MOBILEPHONE)
        },
        name: /^(s)*[A-Za-z]+([-'\s]*[A-Za-z])*(s)*$/,
        firstname: new RegExp(self.resources.REGEXP_FIRSTNAME),
        lastname: new RegExp(self.resources.REGEXP_LASTNAME),
        nospecchars: new RegExp(self.resources.REGEXP_NO_SPECIAL_CHARACTERS),
        cardownername: new RegExp(self.resources.REGEXP_CARD_OWNER_NAME),
        address: /^[A-Za-z0-9\u20ac\u0153\u00c0\u00c1\u00c2\u00c9\u00c8\u00c7\u00ca\u00ce\u00f9\u00fb\u00fc\u00ff\u00e0\u00e2\u00e7\u00e1\u00e9\u00e8\u00e6\u00ea\u00eb\u00ef\u00ee\u00f4\s!@#$%^&*()-_+=-`~\\\]\[{}|';:/.,?><]*$/,
        giftmessage: /^[\u0001-\u00FF]*$/,
        date: new RegExp(self.resources.REGEXP_DATE),
        city: /^[A-Za-z]+([-'\s]*[A-Za-z])*$/,
        ordernumber: new RegExp(self.resources.REGEXP_ORDERNUMBER_VALIDATION),
        controlchar: /[\u0000-\u001F]/g
    };
    var settings = {
        containerErrorClass: "f_state_error",
        containerValidClass: "f_state_valid",
        errorClass: "f_error_message",
        errorElement: self.resources.GLOBAL_HTMLTAG_ERRORCONTAINER,
        onkeyup: false,
        onclick: false,
        onfocusout: function(element) {
            var d = $(element);
            if (!(this.checkable(element) || d.hasClass("validator_onfocusout_disable"))) {
                if ("password" !== d.attr("type")) {
                    d.val($.trim(d.val()));
                }
                this.element(element);
            }
        },
        highlight: setUpSelectFolder("containerErrorClass", "containerValidClass"),
        unhighlight: setUpSelectFolder("containerValidClass", "containerErrorClass")
    };
    var navCommonStyle = {
        minlength: $.validator.format(self.resources.VALIDATOR_MINLENGTH),
        digits: self.resources.VALIDATOR_DIGITS
    };
    var loc = get("city");
    var name = get("address");
    var assertKeys = get("address1");
    var assertLength = get("nospecchars");
    var assertInstanceOf = get("cardownername");
    var code = get("name");
    var assertMost = get("smsverifycode");
    var assertOwnProperty = get("emailormobile");
    var assertThrows = get("multipleemails");
    var method = get("email");
    var target = get("url");
    var assertEql = get("characterSet");
    var assertEqual = get("forbiddenCharacterSet");
    var m = get("SDICode");
    var assertBelow = get("PECAddress");
    var value = get("date");
    var entry = get("ordernumber");
    $.validator.addMethod("phone", format, self.resources.INVALID_PHONE);
    $.validator.addMethod("firstName", get("firstname"), self.resources.INVALID_FIRSTNAME);
    $.validator.addMethod("lastName", get("lastname"), self.resources.INVALID_LASTNAME);
    $.validator.addMethod("mobile_phone", function(a, c) {
        return this.optional(c) ? true : (data.mobilePhone[f(c)] || ca).test(a);
    }, self.resources.INVALID_MOBILEPHONE);
    $.validator.addMethod("hidden_phone", format, self.resources.INVALID_PHONE);
    $.validator.addMethod("f_emailormobile", assertOwnProperty, self.resources.INVALID_EMAIL_OR_MOBILE);
    $.validator.addMethod("f_sms_verify_code", assertMost, self.resources.INVALID_SMS_VERIFY_CODE);
    $.validator.addMethod("newsletter_email", method, self.resources.INVALID_NEWSLETTER_EMAIL);
    $.validator.addMethod("email", method, self.resources.INVALID_EMAIL);
    $.validator.addMethod("address1", assertKeys, self.resources.INVALID_ADDRESS1);
    $.validator.addMethod("multipleemails", assertThrows, self.resources.INVALID_EMAILS);
    $.validator.addMethod("gift_message_box", get("giftmessage"), self.resources.GIFT_CERT_SPECIAL_CHAR);
    $.validator.addMethod("customurl", target, self.resources.INVALID_URL);
    $.validator.addMethod("val_send_to_friend_email", method, self.resources.SEND_TO_FRIEND_INVALID_EMAIL);
    $.validator.addMethod("send_to_friend_email_confirmation", func, self.resources.SEND_TO_FRIEND_NOT_CONFIRMED_EMAIL);
    $.validator.addMethod("send_to_friend_email", function(b, galleryitem) {
        var $input = $("#" + $(galleryitem).data("confirmId"));
        if ("" !== $input.val()) {
            setTimeout(function() {
                $input.trigger("focusout");
            }, 100);
        }
        return true;
    }, null);
    $.validator.addMethod("giftcert_email", method, self.resources.GIFT_CERT_RECIPIENT_EMAIL_VALUE_ERROR);
    $.validator.addMethod("giftcert_recipient_email_confirmation", func, self.resources.GIFT_CERT_CONFIRMRECIPIENTEMAILVALUEERROR);
    $.validator.addMethod("create_account_email", method, self.resources.CREATE_ACCOUNT_INVALID_EMAIL);
    $.validator.addMethod("create_account_customdate", value, self.resources.CREATE_ACCOUNT_INVALID_DATE);
    $.validator.addMethod("password", function(context, element) {
        var document = $(element);
        document = document.data("validation-type") && "password" == document.data("validation-type");
        element = this.optional(element);
        /** @type {boolean} */
        context = data.password.test($.trim(context));
        return element || context || document;
    }, self.resources.INVALID_PASSWORD);
    $.validator.addMethod("postal", function(key, i) {
        var h = $(i);
        var currentNick = h.data("validationcountrycode") || f(i);
        if (!currentNick || !data.postal[currentNick.toLowerCase()]) {
            return true;
        }
        if (key && self.preferences.enableRegexpGBZipToUppercase) {
            key = key.toUpperCase();
            h.val(key);
        }
        h = data.postal[currentNick.toLowerCase()];
        i = this.optional(i);
        key = h.test($.trim(key));
        return i || key;
    }, self.resources.INVALID_ZIP);
    $.validator.addMethod("credit_card_owner", get("lastname"), self.resources.PAYMENTMETHOD_ERROR_CARDOWNER);
    $.validator.addMethod("credit_card_number", fn, self.resources.PAYMENTMETHOD_ERROR_WRONGCARD);
    $.validator.addMethod("credit_card_add_number", fn, self.resources.PAYMENTMETHOD_ERROR_WRONGCARD);
    $.validator.addMethod("poboxenabled", function(name, d) {
        return (d = $(d).data("validationcountrycode") || f(d)) && data.pobox[d.toLowerCase()] ? !data.pobox[d.toLowerCase()].test($.trim(name).toUpperCase()) : true;
    }, self.resources.PAYMENTMETHOD_ERROR_POBOX);
    $.validator.addMethod("specialCharName", code, self.resources.INVALID_NAME);
    $.validator.addMethod("specialCharCardName", assertInstanceOf, self.resources.INVALID_NAME);
    $.validator.addMethod("noSpecialCharacters", assertLength, self.resources.INVALID_NO_SPECIAL_CHARACTERS_INPUT);
    $.validator.addMethod("specialCharAddress", name, self.resources.INVALID_ADDRESS);
    $.validator.addMethod("specialCityName", loc, self.resources.INVALID_CITY);
    $.validator.addMethod("textinput", function(b, a) {
        b = b.replace(data.controlchar, "");
        /** @type {string} */
        a.value = b;
        return true;
    }, "");
    $.validator.addMethod("fiscal_code", function(value, name) {
        if (this.optional(name)) {
            return true;
        }
        name = f(name);
        if ("es" === name) {
            name = value.replace(/-/g, "").toUpperCase();
            /** @type {!RegExp} */
            var testRxp = data.fiscalCode.es.cif2;
            /** @type {!RegExp} */
            var TAGS_ADDED = data.fiscalCode.es.cif3;
            if (!(name = data.fiscalCode.es.cif1.test(name) || testRxp.test(name) || TAGS_ADDED.test(name))) {
                name = self.resources.FISCALCODE_LETTERS.split(",");
                /** @type {boolean} */
                name = data.fiscalCode.es.nif.test(value) && value.charAt(8).toUpperCase() === name[value.substring(0, 8) % 23];
            }
            return name;
        }
        return "it" === name ? data.fiscalCode[name].legal.test(value) || data.fiscalCode[name].natural.test(value) && parse(value) : data.fiscalCode[name] ? data.fiscalCode[name].test(value) : false;
    }, self.resources.INVALID_FISCALCODE);
    $.validator.addMethod("primaryVATField", function(b, tr) {
        return b ? 0 < $(tr).closest("form").find(".secondaryVATField").filter(function(b, txtNameId) {
            return $(txtNameId).val();
        }).length : true;
    }, self.resources.INVALID_VAT_GROUP);
    $.validator.addMethod("VATNumber", function(b, instance) {
        var format = $(instance).data("validationcountrycode") || f(instance);
        format = data.vat[format.toLowerCase()];
        instance = this.optional(instance);
        format = format.test(b);
        return instance && 0 === b.length || format;
    }, self.resources.INVALID_VAT);
    $.validator.addMethod("orderNumber", entry, self.resources.INVALID_ORDER_NUMBER);
    $.validator.addMethod("giftcert_recipient_email_confirmation", function(tx, delta) {
        return func(tx, delta, true);
    }, self.resources.GIFT_CERT_CONFIRMRECIPIENTEMAILVALUEERROR);
    $.validator.addMethod("password_with_confirm", function(value) {
        var ruleOperatorSelect = $(".formfield_password_confirm").find("input").get(0);
        return "" !== value || !ruleOperatorSelect || !$(ruleOperatorSelect).val();
    }, self.resources.CREATE_ACCOUNT_NOT_PROVIDED_PASSWORD);
    $.validator.addMethod("password_confirm", function(value) {
        var ruleOperatorSelect = $(".formfield_password_first").find("input").get(0);
        return "" !== value || !ruleOperatorSelect || !$(ruleOperatorSelect).val();
    }, self.resources.CREATE_ACCOUNT_NOT_PROVIDED_PASSWORD_CONFIRM);
    $.validator.addMethod("password_equal_confirm", function() {
        var source = $(".formfield_password_first").find("input").get(0);
        var target = $(".formfield_password_confirm").find("input").get(0);
        source = source ? $(source).val() : null;
        target = target ? $(target).val() : null;
        return !source || !target || source == target;
    }, self.resources.CREATE_ACCOUNT_PASSWORD_NOT_EQUAL_CONFIRM);
    $.validator.addMethod("email_equal_confirm", function() {
        var m = $(".formfield_email_first").find("input").get(0);
        var k = $(".formfield_email_confirm").find("input").get(0);
        m = m ? $(m).val().toLowerCase() : null;
        k = k ? $(k).val().toLowerCase() : null;
        return !m || !k || m === k;
    }, self.resources.CREATE_ACCOUNT_EMAIL_NOT_EQUAL_CONFIRM);
    $.validator.addMethod("age_valid", init, self.resources.DOB_WRONG);
    $.validator.addMethod("age_control", function(value, key) {
        if (0 === self.preferences.minimumAgeLimit) {
            return true;
        }
        if (init(value, key) && (value = update(value, key), value = new Date(value.year, value.month - 1, value.day), !isNaN(value.getTime()))) {
            /** @type {!Date} */
            key = new Date;
            /** @type {number} */
            var e = key.getFullYear() - value.getFullYear();
            /** @type {number} */
            var i = self.preferences.minimumAgeLimitAddOneDay ? 1 : 0;
            if (new Date(key.getFullYear(), value.getMonth(), value.getDate() + i) > new Date(key.getFullYear(), key.getMonth(), key.getDate())) {
                e--;
            }
            return 0 < e && e >= self.preferences.minimumAgeLimit;
        }
        return false;
    }, self.resources.DOB_LESS_THAN_AGE_LIMIT);
    $.validator.addMethod("formfield_gift_certificate_amount", function(availableBalanceFiat, instance) {
        instance = this.optional(instance);
        /** @type {boolean} */
        availableBalanceFiat = !isNaN(availableBalanceFiat) && 5 <= parseFloat(availableBalanceFiat) && 5E3 >= parseFloat(availableBalanceFiat);
        return instance || availableBalanceFiat;
    }, self.resources.GIFT_CERT_AMOUNT_INVALID);
    $.validator.addMethod("positivenumber", function(b) {
        return 0 === $.trim(b).length ? true : !isNaN(b) && 0 <= Number(b);
    }, "");
    $.validator.addMethod("credit_card_cvn", function(pathToDestinationFile) {
        return /^[\d\*]{3,4}$/.test(pathToDestinationFile);
    }, self.resources.PAYMENTMETHOD_ERROR_CARDSECCODE);
    /**
     * @param {?} name
     * @param {?} element
     * @return {?}
     */
    $.validator.messages.required = function(name, element) {
        return $(element).parents(".formfield").attr("data-required-text") || "";
    };
    $.validator.addMethod("date_format", function(pathToDestinationFile, clicked_el) {
        return (new RegExp($(clicked_el).attr("regex") || self.resources.REGEXP_DATE_FORMAT)).test(pathToDestinationFile);
    }, function(canCreateDiscussions, tr) {
        return $(tr).closest(".formfield").attr("data-required-text") || self.resources.CREATE_ACCOUNT_INVALID_DATE;
    });
    if (data.characterSetValidation) {
        $.validator.addMethod("characterSet", assertEql, self.resources.ERROR_UNAUTHORIZED_CHARACTERS);
    }
    $.validator.addMethod("forbiddenCharacterSet", assertEqual, self.resources.ERROR_UNAUTHORIZED_CHARACTERS);
    $.validator.addMethod("SDICode", m, self.resources.ERROR_INVALID_SDICODE);
    $.validator.addMethod("PECAddress", assertBelow, self.resources.ERROR_INVALID_PECADDRESS);
    $.extend($.validator.prototype, {
        errorsFor: function(element) {
            var name = this.idOrName(element);
            element = $(element).attr("aria-describedby");
            /** @type {string} */
            name = this.settings.errorElement + '[data-for="' + name + '"], ' + this.settings.errorElement + '[for="' + name + '"] *';
            if (element) {
                /** @type {string} */
                name = name + ", #" + element.replace(/\s+/g, ", #");
            }
            return this.errors().filter(name);
        }
    });
    self.validator = {
        regex: data,
        settings: settings,
        init: function() {
            if (navCommonStyle) {
                $.extend($.validator.messages, navCommonStyle);
            }
            $("form:not(.suppress)").each(function() {
                var options = $(this).data();
                options = options && "object" === typeof options.validateSettings ? options.validateSettings : {};
                $(this).validate($.extend({}, self.validator.settings, options));
            }).on("reset", function() {
                var view = $(this).validate();
                view.elements().each(function(canCreateDiscussions, p1__3354_SHARP_) {
                    view.settings.unhighlight.call(view, p1__3354_SHARP_);
                });
            });
        },
        initForm: function(target, data) {
            $(target).validate("undefined" !== typeof data ? data : self.validator.settings);
        }
    };
})(window.app = window.app || {}, jQuery);
(function(_this, $) {
    /**
     * @param {!Object} request
     * @return {?}
     */
    function getContentType(request) {
        request = request.getResponseHeader("content-type") || "";
        if (-1 < request.indexOf("html")) {
            return "html";
        }
        if (-1 < request.indexOf("json")) {
            return "json";
        }
    }
    /** @type {!Array} */
    var windowUrls = [];
    _this.ajax = {
        getJson: function(options) {
            options.url = _this.util.toAbsoluteUrl(options.url);
            if (options.url && !windowUrls[options.url]) {
                return windowUrls[options.url] = true, $.ajax({
                    dataType: "json",
                    url: options.url,
                    async: "undefined" === typeof options.async || null === options.async ? true : options.async,
                    data: options.data || {},
                    type: options.type || "GET",
                    beforeSend: function(xhr) {
                        xhr.setRequestHeader("dw-x-requested-with", "XMLHttpRequest");
                    }
                }).done(function(b) {
                    if (options.callback) {
                        options.callback(b);
                    }
                }).fail(function(canCreateDiscussions, error_thrown) {
                    if ("parsererror" === error_thrown) {
                        window.alert(_this.resources.BAD_RESPONSE);
                    }
                    if (options.callback) {
                        options.callback(null);
                    }
                }).always(function() {
                    if (windowUrls[options.url]) {
                        delete windowUrls[options.url];
                    }
                });
            }
        },
        load: function(options) {
            options.url = _this.util.toAbsoluteUrl(options.url);
            if (!options.url || windowUrls[options.url]) {
                return $.Deferred().reject();
            }
            /** @type {boolean} */
            windowUrls[options.url] = true;
            var me = $.ajax({
                dataType: "undefined" !== typeof options.dataType ? options.dataType : "html",
                url: _this.util.appendParamToURL(options.url, "format", "ajax"),
                data: options.data,
                type: options.type || "GET",
                beforeSend: function(xhr) {
                    xhr.setRequestHeader("dw-x-requested-with", "XMLHttpRequest");
                }
            });
            me.done(function(context, status, url) {
                if (windowUrls[options.url]) {
                    delete windowUrls[options.url];
                }
                if ("function" === typeof options.beforeTargetUpdate) {
                    context = options.beforeTargetUpdate(context);
                }
                if (options.target) {
                    if (options.beforeLoad) {
                        options.beforeLoad(context, status, url);
                    }
                    $(options.target).empty().html(context).trigger("update", context);
                    _this.page.setContexAfterAjaxCall();
                }
                if (options.callback) {
                    options.callback(context, status, url);
                }
            }).fail(function(canCreateDiscussions, status) {
                if (options.data && "string" === typeof options.data && -1 !== options.data.search("loginRequired=true") && "error" === status) {
                    _this.page.redirect(_this.urls.accountOverviewPage);
                }
                if ("parsererror" === status) {
                    window.alert(_this.resources.BAD_RESPONSE);
                }
                if ("callback" in options) {
                    options.callback(null, status);
                }
            }).always(function() {
                if (_this.progress) {
                    _this.progress.hide();
                } else {
                    if (window.requirejs) {
                        requirejs(["LORA/app.progress"], function() {
                            _this.progress.hide();
                        });
                    }
                }
                if (windowUrls[options.url]) {
                    delete windowUrls[options.url];
                }
            });
            return me;
        },
        isHtmlResponse: function(file) {
            return "html" == getContentType(file);
        },
        isJsonResponse: function(url) {
            return "json" == getContentType(url);
        }
    };
})(window.app = window.app || {}, jQuery);
(function(b, $) {
    /**
     * @return {undefined}
     */
    function init() {
        self.compareTable.on("click", ".remove_link", function(event) {
            event.preventDefault();
            $.ajax({
                type: "POST",
                url: this.href,
                success: function() {
                    b.page.refresh();
                }
            });
        }).on("click", ".open-quick-view", function(options) {
            options.preventDefault();
            options = $(this).closest("form");
            b.quickView.show({
                url: options.attr("action"),
                source: "quickview",
                data: options.serialize()
            });
        });
        self.comparePage.on("change", "select[name=compare_add_new_product]", function() {
            var d = $(this).find('option[value!=""]:selected');
            if (d.length) {
                $.ajax({
                    type: "POST",
                    url: d.data("url"),
                    data: {
                        pid: d.val(),
                        category: d.data("category")
                    },
                    success: function() {
                        b.page.refresh();
                    }
                });
            }
        });
        self.categoryList.on("change", function() {
            $(this).closest("form").submit();
        });
    }
    var self = {};
    b.compare = {
        init: function() {
            self = {
                compareTable: $(".compare_table"),
                categoryList: $("#compare_category_list"),
                comparePage: $(".compare_page")
            };
            init();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @return {undefined}
     */
    function calculateTotalRam() {
        options = {
            defaultTarget: that.main,
            contentSearch: {
                customContentListingTarget: $(".custom_product_listing_container"),
                contentSorting: {
                    target: "search" in self.page && "contentSortingUpdateTarget" in self.page.search ? $(self.page.search.contentSortingUpdateTarget) : that.main,
                    sortingOptionsContainer: ".js_content_sorting"
                },
                contentRefinements: ".content_refinement a",
                contentListingTarget: "search" in self.page && "contentListingTarget" in self.page.search ? $(self.page.search.contentListingTarget) : that.main,
                contentResultItems: $(".content_result_items"),
                contentItemsPerPageList: ".items_per_page_list"
            },
            productSearch: {
                customProductListingTarget: $(".custom_content_listing_container"),
                productSorting: {
                    target: "search" in self.page && "productSortingUpdateTarget" in self.page.search ? $(self.page.search.productSortingUpdateTarget) : that.main,
                    sortingOptionsContainer: $(".product_sorting").length ? ".product_sorting" : ".sort_by_list"
                },
                productRefinements: ".refinement a, .pagination_list a, .breadcrumb_refinement a, .vew_all_articles, .refinements-mobile a",
                productListingTarget: "search" in self.page && "productListingTarget" in self.page.search ? $(self.page.search.productListingTarget) : that.main,
                productResultItems: $(".product_result_items").length ? ".product_result_items" : ".search_result_items",
                productItemsPerPageList: ".items_per_page_list"
            },
            updateListingCallback: function() {
                self.carousel.init(that.main);
                self.recommendations.init({
                    makeCall: true
                });
                that.document.trigger("refinement.update");
            },
            urlParams: null,
            enableRatingHash: false
        };
    }
    /**
     * @return {undefined}
     */
    function init() {
        /** @type {boolean} */
        var d = "state" in window.history && null !== window.history.state;
        $(window).on("popstate", function(token) {
            if (token.state && self.quickView) {
                self.quickView.close();
            }
            if (!(-1 < window.location.href.indexOf("#"))) {
                /** @type {boolean} */
                token = !d && location.href == self.search.startUrl;
                /** @type {boolean} */
                d = true;
                if (!token) {
                    update(window.location.href, true);
                }
            }
        });
        $(window).hashchange(function() {
            if (self.quickView) {
                self.quickView.close();
            }
            if (!("" === window.location.hash || "" !== window.location.hash && "#!" !== window.location.hash.slice(0, 2) || window.location.href.endsWith("#"))) {
                if (that.hashChanged) {
                    /** @type {boolean} */
                    that.hashChanged = false;
                } else {
                    update(getState(window.location.href));
                }
            }
        });
        $(document).on("click", options.productSearch.productRefinements, function(data) {
            var me = $(this);
            if ("string" !== typeof me.data("accordion-title")) {
                var box = me.parents();
                if (box.hasClass("no_ajax") || me.parent().hasClass("no_ajax")) {
                    if ("undefined" !== typeof self.preferences.noajaxcategories && "undefined" !== me.data("categoryid")) {
                        if (0 <= self.preferences.noajaxcategories.indexOf(me.data("categoryid"))) {
                            return true;
                        }
                    } else {
                        return true;
                    }
                }
                data.preventDefault();
                if (box.hasClass("unselectable")) {
                    return false;
                }
                data = $(this).attr("href");
                if ("alternative" == self.util.getCookie("searchgridview") && -1 == data.indexOf("sz=")) {
                    data = self.util.appendParamToURL(data, "sz", self.resources.ALTERNATIVE_GRID_PAGE_SIZE);
                }
                update(data, null, {
                    target: options.productSearch.customProductListingTarget.length ? options.productSearch.customProductListingTarget : options.productSearch.productListingTarget
                });
                if (window.location.href.indexOf("#!") + 1) {
                    /** @type {boolean} */
                    that.hashChanged = true;
                }
            }
        });
        $(document).on("click", options.contentSearch.contentRefinements, function(data) {
            var box = $(this).parents();
            if (box.hasClass("no_ajax")) {
                return true;
            }
            data.preventDefault();
            if (box.hasClass("unselectable")) {
                return false;
            }
            data = $(this).attr("href");
            update(data, null, {
                target: options.contentSearch.customContentListingTarget.length ? options.contentSearch.customContentListingTarget : options.contentSearch.contentListingTarget
            });
        });
        that.main.on("click", ".view_all_refinements", function(element) {
            element.preventDefault();
            element = $(this);
            var d = element.text();
            element.text(element.data("alttext"));
            element.data("alttext", d);
            element.closest(".refinement").find(".refinement_list_item.excluded").toggleClass("show");
        });
        that.main.on("click", ".product_tile a:not('.quickviewbutton, .swatch, .inline_rating_label_link')", function() {
            var link = $(this);
            if (!link.parents(".js-no-pdp-hash").length) {
                /** @type {!Location} */
                var list = window.location;
                var data = 1 < list.search.length ? self.util.getQueryStringParams(list.search.substr(1)) : {};
                list = 1 < list.hash.length ? self.util.getQueryStringParams(list.hash.substr(1)) : {};
                data = $.extend(list, data);
                if (!data.start) {
                    /** @type {number} */
                    data.start = 0;
                }
                if (options.enableRatingHash && 0 < link.parents(".bv-inline-rating-container").length) {
                    /** @type {string} */
                    data[options.ratingHashParam] = "";
                }
                list = link.closest(".product_tile");
                /** @type {number} */
                list = list.data("idx") ? +list.data("idx") : 0;
                /** @type {number} */
                data.start = +data.start + (list + 1);
                if (!data.cgid && self.page.currentCategory) {
                    data.cgid = self.page.currentCategory;
                }
                link[0].hash = $.param(data);
            }
        });
        that.main.on("change", options.productSearch.productSorting.sortingOptionsContainer, function() {
            var full = $(this).find("option:selected").val();
            update(full, null, {
                target: options.productSearch.productSorting.target
            });
            return false;
        }).on("change", options.productSearch.productItemsPerPageList, function() {
            var full = $(this).find("option:selected").val();
            update(full, null, {
                target: options.productSearch.productSorting.target
            });
            return false;
        });
        that.main.on("change", options.contentSearch.contentSorting.sortingOptionsContainer, function() {
            var full = $(this).find("option:selected").val();
            update(full, null, {
                target: options.contentSearch.contentSorting.target
            });
            return false;
        }).on("change", options.contentSearch.contentItemsPerPageList, function() {
            var full = $(this).find("option:selected").val();
            update(full, null, {
                target: options.contentSearch.contentSorting.target
            });
            return false;
        });
    }
    /**
     * @param {string} url
     * @param {string} version
     * @param {!Object} data
     * @return {undefined}
     */
    function update(url, version, data) {
        url = f(url);
        if (!version) {
            self.util.updateUrl(url);
        }
        if ("colorshades" == self.util.getCookie("searchgridview")) {
            url = self.util.appendParamToURL(url, "gridview", "colorshades");
        }
        if (options.urlParams) {
            url = self.util.appendParamsToUrl(url, options.urlParams);
        }
        self.progress.show(that.contentSelector);
        that.main.trigger("search.beforeUpdate", data);
        if (options.allowAjaxRefreshForInitialUrl) {
            /** @type {null} */
            self.search.startUrl = null;
        }
        self.ajax.load({
            url: url,
            target: data && data.target ? data.target : options.defaultTarget,
            callback: function() {
                self.progress.hide();
                options.updateListingCallback();
                that.main.trigger("search.update", {
                    container: that.main,
                    itemsOnly: false,
                    extParams: data
                });
            }
        });
    }
    /**
     * @param {string} x
     * @return {?}
     */
    function f(x) {
        /** @type {string} */
        var input = x;
        /** @type {number} */
        var i = 0;
        for (; i < inputs.length; i++) {
            input = inputs[i](input);
        }
        return input || x;
    }
    /**
     * @param {string} data
     * @return {?}
     */
    function getState(data) {
        var d = data.split("#")[0];
        if (self.constants.SEARCH_URL && d != self.constants.SEARCH_URL) {
            data = data.replace(d, self.constants.SEARCH_URL);
        }
        if (-1 < data.indexOf("#!")) {
            d = data.split("/");
            d[d.length - 1] = data.split("#!")[1];
            data = d.join("/");
        }
        return data;
    }
    var options = {};
    var that = {};
    /** @type {!Array} */
    var inputs = [];
    self.search = {
        init: function() {
            that.main = $(".main");
            /** @type {string} */
            that.contentSelector = ".main .content";
            that.items = $(".search_result_items");
            that.document = $(document);
            calculateTotalRam();
            init();
            /** @type {string} */
            self.search.startUrl = window.location.href;
            /** @type {boolean} */
            self.search.initialLoadingPerformed = false;
        },
        setUrlChangeHandler: function(name) {
            inputs.push(name);
        },
        getRealUrl: function(url) {
            return getState(url);
        },
        updateSearch: function(key, value) {
            update(key, null, value);
        },
        updateContentListing: function(address, version, callback) {
            update(address, version, callback);
        },
        applySearchUrlChanges: f,
        extendConfigs: function(addtions) {
            options = $.extend(true, options, addtions);
        },
        getConfigs: function() {
            return options;
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @return {undefined}
     */
    function create() {
        that.tabsContainers.each(function() {
            var b = $(this);
            var self = b.data("tabs-options") || {};
            b.tabs(self);
        });
    }
    /**
     * @return {undefined}
     */
    function set() {
        var master_settings_element = $(self.quickView && self.quickView.isActive() ? "#QuickViewDialog .js_pdpMain" : "#pdpMain");
        that = {
            pdpMain: master_settings_element,
            productId: $("input[name='pid']", master_settings_element),
            productContent: $("#product_content", master_settings_element),
            thumbnails: $("#thumbnails", master_settings_element),
            bonusProductGrid: $(".bonusproductgrid", master_settings_element),
            productSetList: $("#product_set_list", master_settings_element),
            addToWishlist: $(".wishlist_action", master_settings_element),
            addToFavorites: $(":not(.product_set) .favorites_action", master_settings_element),
            sendToFriend: $(":not(.product_set) .send_to_friend", master_settings_element),
            productTabs: $(".product_tabs", master_settings_element),
            currentTaazModelIndex: null,
            carouselLists: $(".product_image_container .contentcarousel_list li"),
            carouselActiveList: $(".product_image_container .contentcarousel_list li.active-list"),
            carouselTaazModelList: $(".product_image_container .contentcarousel_list li.taaz-model-image"),
            samplePlaceButton: $(".sampleplacelink")
        };
        that.pdpForm = that.pdpMain.find("form.pdpForm");
        that.swatches = that.pdpMain.find("ul.swatches");
        that.addToCart = that.pdpForm.find(".add_to_cart");
        that.document = $(document);
        that.tabsContainers = that.document.find(".product_tabs");
        that.addToCartDisabled = that.pdpMain.find(".add_to_cart[disabled]");
        if (1 < that.pdpMain.find(".availability_value").length) {
            that.addToCartText = $.trim(that.pdpMain.find(".availability_value")[0].textContent.replace(".", ""));
        } else {
            that.addToCartText = $.trim(that.pdpMain.find(".availability_value").text().replace(".", ""));
        }
    }
    /**
     * @return {undefined}
     */
    function update() {
        that.samplePlaceButton.on("click", function() {
            var url = $(this).data("samplelink");
            if (url) {
                window.open(url, "_blank");
            }
        });
        if (that.productTabs.find(".tab_reviews").length) {
            that.document.trigger("product.initReviewTab");
        }
        that.document.on("product.reloadSocialButtons", function() {
            /**
             * @return {undefined}
             */
            var remove = function() {
                self.ui.main.trigger("sociallinks.click", {
                    text: "Google"
                });
            };
            if ("undefined" !== typeof gapi && "undefined" !== typeof gapi.plusone) {
                var link = $("#plusone");
                var addSize = link.data("size");
                link = link.data("href");
                gapi.plusone.render("plusone", {
                    size: addSize,
                    href: link,
                    callback: remove
                });
            }
            if ("undefined" !== typeof FB) {
                FB.XFBML.parse();
            }
            if ("undefined" !== typeof twttr && "undefined" !== typeof twttr.widgets) {
                twttr.widgets.load();
            }
        });
        var readersLength = that.productSetList.length;
        /**
         * @param {!Object} e
         * @return {undefined}
         */
        var render = function(e) {
            var filterInput = $(e.currentTarget).is(":input") ? $(e.currentTarget) : that.pdpMain.find(settings.quantitySelector);
            var _;
            var x;
            var q = $(e.currentTarget).closest(".product_tile").length;
            var id;
            id = 0 < that.productSetList.length ? filterInput.closest("form").find("input[name='pid']").val() : q ? $(e.currentTarget).closest(".product_tile").data("itemid") : 2 <= $(".pdp_main").length && self.quickView && self.quickView.isActive() ? filterInput.closest(".product_detail").find("input[name='pid']").val() : $(".product_detail").find("input[name='pid']").val();
            if (readersLength) {
                e = $("#item-" + id);
                _ = e.find(".availability");
                x = e.find(".add_to_cart");
            } else {
                if (q) {
                    e = $(e.currentTarget).closest(".product_tile");
                    _ = e.find(".availability");
                    x = e.find(".add_to_cart");
                } else {
                    _ = that.pdpMain.find(".availability");
                    x = that.addToCart;
                }
            }
            /** @type {number} */
            e = parseInt(self.page.getElement("PLIs")[id], 10);
            if (isNaN(e) || "Update" == x.val()) {
                /** @type {number} */
                e = 0;
            }
            /** @type {number} */
            q = parseInt(filterInput.val(), 10);
            if (isNaN(q)) {
                /** @type {number} */
                q = 1;
            }
            self.product.getAvailability(id, q + e, function(data) {
                if (data) {
                    var t;
                    var f;
                    var a = _.find(".availability_value").html("");
                    if (0 < data.levels.IN_STOCK) {
                        t = a.find(".in_stock");
                        f = _.find(".shipping_estimate");
                        if (0 === t.length) {
                            t = $("<span/>").addClass("in_stock").appendTo(a);
                        }
                        if (!f.length && self.preferences.enableUncachedAddtoBagButtonOnPDP) {
                            f = $("<span/>").addClass("shipping_estimate").appendTo(_);
                            f.html(_.data("shipping"));
                        }
                        if (0 < data.levels.PREORDER || 0 < data.levels.BACKORDER) {
                            t.html(data.inStockMsg);
                        } else {
                            if (parseInt(data.ats, 10) > self.preferences.inventoryThreshold || data.perpetual) {
                                t.html(self.resources.IN_STOCK);
                            } else {
                                t.html(String.format(self.resources.INVENTORY_LIMIT, data.ats));
                            }
                        }
                    }
                    if (0 < data.levels.PREORDER) {
                        t = a.find(".preorder");
                        if (0 === t.length) {
                            t = $("<span/>").addClass("preorder").appendTo(a);
                        }
                        if (0 == data.levels.IN_STOCK && 0 == data.levels.BACKORDER && 0 == data.levels.NOT_AVAILABLE) {
                            t.html(self.resources.PREORDER);
                        } else {
                            t.html(data.preOrderMsg);
                        }
                    }
                    if (0 < data.levels.BACKORDER) {
                        t = a.find(".backorder");
                        if (0 === t.length) {
                            t = $("<span/>").addClass("backorder").appendTo(a);
                        }
                        if (0 == data.levels.IN_STOCK && 0 == data.levels.PREORDER && 0 == data.levels.NOT_AVAILABLE) {
                            t.html(self.resources.BACKORDER);
                        } else {
                            t.html(data.backOrderMsg);
                        }
                    }
                    if ("" != data.inStockDate && data.statusQuantity > data.levels.IN_STOCK) {
                        t = a.find(".in_stock_date_message");
                        if (0 === t.length) {
                            t = $("<span/>").addClass("in_stock_date_message").appendTo(a);
                        }
                        t.html(data.inStockDateMsg);
                    }
                    if (0 < data.levels.NOT_AVAILABLE) {
                        t = a.find(".not_available");
                        f = _.find(".shipping_estimate");
                        if (0 === t.length) {
                            t = $("<span/>").addClass("not_available").appendTo(a);
                        }
                        if (0 == data.levels.PREORDER && 0 == data.levels.BACKORDER && 0 == data.levels.IN_STOCK) {
                            t.html(self.resources.NOT_AVAILABLE);
                            if (f.length && self.preferences.enableUncachedAddtoBagButtonOnPDP) {
                                f.remove();
                            }
                        }
                    }
                    that.document.trigger("product.productSetPriceCalculate", data);
                    that.document.trigger("product.productSetCheckAvailability", data);
                    x.prop("disabled", !data.isAvailable && !x.hasClass("js-discontinued-find-similar"));
                    if (data.enhancedPLC) {
                        if (data.enhancedBackOrderable || data.enhancedPreOrderable) {
                            _.addClass("hidden");
                        }
                        if (data.enhancedDiscontinued || data.enhancedPreOrderableSample || data.enhancedOOS) {
                            that.productContent.find(settings.quantitySelector).prop("disabled", true);
                        }
                    }
                    that.document.trigger("afterProductAvailabilityCheck", {
                        pid: id,
                        availability: data
                    });
                    self.page.dispatch({
                        product: data
                    });
                } else {
                    x.prop("disabled", false);
                    _.find(".availability_quantity_available").html();
                    _.find(".availability_value").show();
                }
            });
            filterInput = {
                queryValue: filterInput.val(),
                cachedSelectorKey: "addToWishlist",
                queryParam: "qty"
            };
            load(filterInput);
        };
        that.pdpMain.on("change keyup", "form.pdpForm select[name='quantity'], form.pdpForm input[name='quantity']", render);
        that.document.on("callbackUpdateCartDone.productNamespace minicart.lineItemQtyChanged", render).trigger("callbackUpdateCartDone");
        that.document.off("callbackUpdateCartDone.productNamespace", render);
        that.document.on("product.variationChanged", render);
        that.pdpMain.on("click", "a.wl-action", function(res) {
            res.preventDefault();
            res = self.util.getQueryStringParams($("form.pdpForm").serialize());
            if (res.cartAction) {
                delete res.cartAction;
            }
            res = self.util.appendParamsToUrl(this.href, res);
            /** @type {string} */
            res = this.protocol + "//" + this.hostname + ("/" === res.charAt(0) ? res : "/" + res);
            /** @type {!Object} */
            window.location.href = res;
        });
        that.pdpMain.on("click", "li.unselectable a", false);
        that.pdpMain.on("change", ".product_options select", function() {
            var $e = that.pdpMain.find(".product_add_to_cart .sales_price");
            var results = $(this).children().filter(":selected").first().data("combined");
            $e.text(results);
        });
        that.pdpMain.on("click", "ul.variation-select li:not(.disabled)", done);
        if (!readersLength || !self.preferences.isProductEnhancedSetEnabled) {
            that.pdpMain.on("change", ".variation-select", done);
        }
        that.document.on("click", "div.product_detail a[href].swatchanchor", init);
        that.pdpMain.on("change", "[name='quantity']", function() {
            if (!$(this).closest(".product_tile").length) {
                that.document.trigger("product.qtyChanged", $(this).val());
            }
        });
        if (!(!self.preferences.enableDisabledAddToCartTitleModification || 0 == that.addToCartText.length || that.addToCartDisabled.hasClass(self.resources.DISCONTINUED_ADD_TO_CART_CLASS) || self.preferences.enableUncachedAddtoBagButtonOnPDP)) {
            that.addToCartDisabled.attr("title", that.addToCartText).find("span").text(that.addToCartText);
        }
        that.pdpMain.on("product.variationChanged", function() {
            if (self.components.product.PreorderButton) {
                self.components.product.PreorderButton.init({
                    element: ".js-preorder-button"
                });
            }
            that.document.trigger("product.reloadSocialButtons");
        });
    }
    /**
     * @return {undefined}
     */
    function done() {
        if (0 !== $(this).val().length && !$(this).closest(".product_tile").length) {
            var result = that.pdpForm.find("[name='quantity']").first().val();
            var url = that.pdpForm.find("input[name='productlistid']").first().val();
            var value = $(this).closest(".subProduct");
            result = {
                quantity: isNaN(result) ? "1" : result,
                format: "ajax"
            };
            /** @type {boolean} */
            var k = "va-color" == $(this).attr("id");
            if (url) {
                result.productlistid = url;
            }
            var element = that.productSetList.length ? value : that.productContent;
            url = $(this).val() || $(this).attr("url");
            url = self.util.appendParamsToUrl(url, result);
            value = {
                qty: element.find("[name=quantity]").val()
            };
            if (this.selectedOptions) {
                if (k) {
                    value.shadeName = this.selectedOptions[0].label;
                }
                value.pid = this.selectedOptions[0].getAttribute("data-productid");
                value.upc = this.selectedOptions[0].getAttribute("data-upc");
            }
            that.pdpMain.trigger("product.beforeVariationChange", value);
            self.progress.show(that.pdpMain);
            self.ajax.load({
                url: url,
                callback: function(name) {
                    element.html(name);
                    if (k) {
                        that.pdpMain.trigger("product.colorVariationChanged");
                    }
                    name = element.find("[name=pid]").val();
                    that.pdpMain.trigger("product.variationChanged", {
                        pid: name,
                        qty: element.find("[name=quantity]").val()
                    });
                    name = {
                        queryValue: name,
                        cachedSelectorKey: "addToFavorites",
                        queryParam: "pid"
                    };
                    load(name);
                    /** @type {string} */
                    name.cachedSelectorKey = "sendToFriend";
                    load(name);
                    self.tooltips.init();
                }
            });
        }
    }
    /**
     * @param {string} data
     * @return {undefined}
     */
    function load(data) {
        if (that[data.cachedSelectorKey].length && data.queryValue && data.queryParam) {
            var item = that[data.cachedSelectorKey].attr("href");
            item = self.util.removeParamFromURL(item, data.queryParam);
            item = self.util.appendParamToURL(item, data.queryParam, data.queryValue);
            that[data.cachedSelectorKey].attr("href", item);
        }
    }
    /**
     * @param {!Event} event
     * @param {!Object} el
     * @return {undefined}
     */
    function init(event, el) {
        event.preventDefault();
        event.stopPropagation();
        var ui = ui || {};
        var attrs = el && el.forceVariationLoad;
        ui.pdpMain = $(event.target).closest(".js_pdpMain");
        ui.carouselLists = $(".product_image_container .contentcarousel_list li");
        ui.carouselActiveList = $(".product_image_container .contentcarousel_list li.active-list");
        ui.carouselTaazModelList = $(".product_image_container .contentcarousel_list li.taaz-model-image");
        ui.customCaps = $(".custom_caps");
        if ("cloudzoom" == self.preferences.pdpImageMode) {
            ui.carouselActiveList = $(".product_primary_image .main_image");
            ui.carouselActiveThumbnail = $(".product_thumbnails .taaz-models-list.selected");
            ui.carouselTaazModelList = $(".product_thumbnails .taaz-models-list");
        }
        el = ui;
        el.productContent = el.pdpMain.find(".js_product_content");
        el.pdpForm = el.pdpMain.find("form.pdpForm");
        el.swatches = el.pdpMain.find("ul.swatches");
        el = $(this);
        if (!(el.parents("li").hasClass("unselectable") || !attrs && el.parent("li").hasClass("selected"))) {
            attrs = el.closest("div.swatches_box");
            var c = 0 < el.closest("ul.swatches").length ? el.closest("ul.swatches").attr("class").replace(/.*\s+/g, "") : "color";
            var callback = 0 < el.closest("ul.swatches").not(".size").length || "color" == c || el.hasClass("product_shades_mood");
            var slead = ui.pdpForm.find("input[name='productlistid']").first().val();
            var next = $(el).closest(".subProduct");
            var result = ui.pdpForm.find("[name='quantity']:input").first().val();
            result = {
                quantity: isNaN(result) ? "1" : result,
                action: "variationChanged"
            };
            if (el.data("customshades")) {
                result.customshades = el.data("customshades");
            }
            if (slead) {
                result.productlistid = slead;
            }
            if (ui.customCaps.length) {
                slead = ui.customCaps.find('.cap_wrapper input[type="radio"]:checked');
                result["dwopt_" + el.data("pid") + "_capOptionProduct"] = slead.val();
            }
            next = 0 < next.length && 0 < next.children.length ? next : ui.productContent;
            result = self.util.appendParamsToUrl(this.href, result);
            if (attrs.length && attrs.hasClass("expand")) {
                result = self.util.appendParamToURL(result, "choosed", c);
            }
            if ("undefined" !== typeof self.preferences.taaz) {
                if (self.preferences.taaz.enable && "imagecarousel" == self.preferences.pdpImageMode) {
                    if (ui.carouselActiveList.hasClass("taaz-model-image")) {
                        ui.currentTaazModelIndex = ui.carouselTaazModelList.index(ui.carouselActiveList);
                    } else {
                        /** @type {null} */
                        ui.currentTaazModelIndex = null;
                    }
                }
                if (self.preferences.taaz.enable && "cloudzoom" == self.preferences.pdpImageMode) {
                    if (ui.carouselActiveList.hasClass("taaz-model-image")) {
                        ui.currentTaazModelIndex = ui.carouselTaazModelList.index(ui.carouselActiveThumbnail);
                    } else {
                        /** @type {null} */
                        ui.currentTaazModelIndex = null;
                    }
                }
            }
            ui.pdpMain.trigger("product.beforeVariationChange", {
                upc: event.currentTarget.getAttribute("data-upc"),
                pid: event.currentTarget.getAttribute("data-pid"),
                qty: next.find("[name=quantity]").val(),
                currentTaazModelIndex: ui.currentTaazModelIndex,
                shadeName: el.attr("title") || el.data("title")
            });
            if (0 == self.preferences.productVariationChangeTimeout) {
                fn.apply(this, [result, next, callback]);
            } else {
                if (_takingTooLongTimeout) {
                    clearTimeout(_takingTooLongTimeout);
                    /** @type {null} */
                    _takingTooLongTimeout = null;
                }
                /** @type {number} */
                _takingTooLongTimeout = setTimeout(fn.bind(this, result, next, callback), self.preferences.productVariationChangeTimeout);
            }
        }
    }
    /**
     * @param {string} v
     * @param {!Object} p
     * @param {?} mu
     * @return {undefined}
     */
    function fn(v, p, mu) {
        var DIV_TAG = this;
        self.ajax.load({
            url: v,
            callback: function(name) {
                if ($.browser.msie && "8.0" == $.browser.version) {
                    /** @type {string} */
                    p.get(0).innerHTML = name;
                } else {
                    p.html(name);
                }
                if (mu) {
                    that.pdpMain.trigger("product.colorVariationChanged", {
                        swatchdata: $(DIV_TAG).data(),
                        pdpMainWrapper: that.pdpMainWrapper
                    });
                }
                name = p.find("[name=pid]").val() || $(DIV_TAG).data("pid");
                that.pdpMain.trigger("product.variationChanged", {
                    pid: name,
                    qty: p.find("[name=quantity]").val(),
                    currentTaazModelIndex: that.currentTaazModelIndex
                });
                name = {
                    queryValue: name,
                    cachedSelectorKey: "addToFavorites",
                    queryParam: "pid"
                };
                if ("true" === self.resources.TRIGGERSWATCHCHANGEEVENT) {
                    that.document.trigger("pdpSwatchScroll");
                }
                load(name);
                /** @type {string} */
                name.cachedSelectorKey = "sendToFriend";
                load(name);
                self.tooltips.init();
                self.page.dispatch({
                    currentPID: p.find("[name=pid]").val(),
                    container: p
                });
            }
        });
    }
    var that;
    var settings = {
        quantitySelector: "form.pdpForm select[name='quantity'], form.pdpForm input[name='quantity']"
    };
    var _takingTooLongTimeout;
    self.product = {
        init: function() {
            set();
            create();
            var c = that.pdpForm.find("input[name='pid']").last();
            var $submenuTarget = $(".product_pagination");
            if (!(1 >= window.location.hash.length || 0 === c.length || 0 === $submenuTarget.length)) {
                c = c.val();
                /** @type {string} */
                var code = window.location.hash.substr(1);
                if (0 > code.indexOf("pid=" + c)) {
                    /** @type {string} */
                    code = code + ("&pid=" + c);
                }
                /** @type {string} */
                c = self.urls.productPagination + (0 > self.urls.productPagination.indexOf("?") ? "?" : "&") + code;
                self.ajax.load({
                    url: c,
                    target: $submenuTarget
                });
            }
            self.tooltips.init();
            update();
        },
        refreshCache: function() {
            set();
        },
        get: function(c) {
            var $submenuTarget = c.target || self.quickView.init();
            var y = c.source || "";
            var res = c.productlistid || "";
            var file = c.url || self.util.appendParamToURL(self.urls.getProductUrl, "pid", c.id);
            if (0 < y.length) {
                file = self.util.appendParamToURL(file, "source", y);
            }
            if (0 < res.length) {
                file = self.util.appendParamToURL(file, "productlistid", res);
            }
            return self.ajax.load({
                target: $submenuTarget,
                url: file,
                data: c.data || "",
                callback: c.callback || self.product.init
            });
        },
        getAvailability: function(time, amount, newCallback) {
            if (void 0 != time && "" != time) {
                self.ajax.getJson({
                    url: self.util.appendParamsToUrl(self.urls.getAvailability, {
                        pid: time,
                        quantity: amount
                    }),
                    callback: newCallback
                });
            }
        },
        validateEmail: function(name) {
            return /^[\w-\.]{1,}@([\da-zA-Z-]{1,}\.){1,}[\da-zA-Z-]{2,4}$/.test(name);
        },
        settings: settings
    };
})(window.app = window.app || {}, jQuery);
var resx = resx || {};
(function($scope, $) {
    /**
     * @param {string} p2
     * @return {?}
     */
    function equals(p2) {
        if ("undefined" !== typeof window[p2]) {
            return true;
        }
        console.error("RichRelevance isn't configured correctly, please check the configuration. Method '" + p2 + "' is not available in global scope.");
        return false;
    }
    /**
     * @param {!Object} n
     * @param {!Array} f
     * @return {undefined}
     */
    function d(n, f) {
        if (!jQuery.isEmptyObject(n.itemsids) || !n) {
            /** @type {number} */
            var i = 0;
            for (; i < n.itemsids.length; i++) {
                f.addItemId(n.itemsids[i]);
            }
        }
    }
    var self = {
        dataGetters: {},
        providerSchemeConfig: {},
        fillProviderProductsConfig: {},
        cache: {},
        fillRecommendationBlockHandler: {},
        richRelevancePostLoadHandler: {},
        addToCartButtonHandler: {},
        quickViewButtonHandler: {}
    };
    $scope.recommendations = {
        makeCall: true,
        init: function(name) {
            if ($scope.preferences.enableDeferredScript && $scope.preferences.enableRecommenationDeferredScript) {
                loraDeferredScripts.push({
                    id: "Recommendations",
                    execute: function() {
                        $scope.recommendations.initializeRecommendations(name);
                    }
                });
            } else {
                $scope.recommendations.initializeRecommendations(name);
            }
        },
        initializeRecommendations: function(scope) {
            if (scope) {
                this.makeCall = scope.makeCall ? scope.makeCall : this.makeCall;
            }
            if ($scope.recommendations.globalconfig) {
                self.dataGetters = $scope.recommendations.globalconfig.getDataGetters();
                self.providerSchemeConfig = $scope.recommendations.globalconfig.getProviderSchemeConfig();
                self.fillProviderProductsConfig = $scope.recommendations.globalconfig.getFillProviderProductsConfig();
                self.cache = $scope.recommendations.globalconfig.getCache();
                self.fillRecommendationBlockHandler = $scope.recommendations.globalconfig.getFillRecommendationBlockHandler();
                self.quickViewButtonHandler = $scope.recommendations.globalconfig.getQuickViewButtonHandler();
                self.richRelevancePostLoadHandler = $scope.recommendations.globalconfig.getRichRelevancePostLoadHandler();
            }
            if ($scope.recommendations.customconfig) {
                self.dataGetters = $.extend(true, self.dataGetters, $scope.recommendations.customconfig.getDataGetters() || {});
                self.providerSchemeConfig = $.extend(true, self.providerSchemeConfig, $scope.recommendations.customconfig.getProviderSchemeConfig() || {});
                self.fillProviderProductsConfig = $.extend(true, self.fillProviderProductsConfig, $scope.recommendations.customconfig.getFillProviderProductsConfig() || {});
                self.cache = $.extend(true, self.cache, $scope.recommendations.customconfig.getCache() || {});
                self.fillRecommendationBlockHandler = $scope.recommendations.customconfig.getFillRecommendationBlockHandler() || self.fillRecommendationBlockHandler;
                self.quickViewButtonHandler = $scope.recommendations.customconfig.getQuickViewButtonHandler() || self.quickViewButtonHandler;
                self.richRelevancePostLoadHandler = $scope.recommendations.customconfig.getRichRelevancePostLoadHandler() || self.richRelevancePostLoadHandler;
            }
            $scope.recommendations.initializeRecommendationsBlocks();
        },
        getProviderData: function(c, data) {
            var provider = {};
            if (data && data.config && data.config.params) {
                /** @type {number} */
                var i = 0;
                for (; i < data.config.params.length; i++) {
                    var method = data.config.params[i];
                    if (self.dataGetters[method]) {
                        var value = self.dataGetters[method](c);
                        if (value) {
                            provider[method] = value;
                        }
                    }
                }
            }
            return provider;
        },
        initializeRecommendationsBlocks: function() {
            if ("recommendationsBlocks" in self.cache) {
                self.cache.recommendationsBlocks.each(function() {
                    var peersDiv = $(this);
                    $scope.recommendations.initializeRecommendationsSingleBlock(peersDiv, false);
                });
            }
            $(document).on("product.added", function() {
                $(document).one("global.showMinicart.opened", function() {
                    $scope.recommendations.init();
                });
            });
        },
        initializeRecommendationsSingleBlock: function(i, enableCache) {
            if ("true" != i.data("ready")) {
                var value = $scope.recommendations.getProviderForCurrentZone(i);
                if (value && value.config) {
                    if (1 == self.dataGetters.usefordatacollectiononly(i)) {
                        if ("RICHRELEVANCE" == i.data("recommendations-provider") && "undefined" != typeof $scope.page.richRelevance && equals("r3")) {
                            $scope.recommendations.collectRichRelevanceData(value, i, $scope.recommendations.getProviderData(i, value));
                            r3();
                        } else {
                            if ("CERTONA" == i.data("recommendations-provider") && "undefined" != typeof $scope.page.resx) {
                                $scope.recommendations.collectCertonaData(i, null, null);
                            }
                        }
                    } else {
                        if ("RICHRELEVANCE" == value.name && "undefined" == typeof $scope.page.richRelevance || "CERTONA" == value.name && "undefined" == typeof $scope.page.resx) {
                            $scope.recommendations.hideBlock(i);
                            return;
                        }
                        var debug = self.fillProviderProductsConfig[value.name];
                        if ("function" === typeof debug) {
                            var p = $scope.recommendations.getProviderData(i, value);
                            if ("RICHRELEVANCE" == i.data("recommendations-provider") && enableCache) {
                                /** @type {boolean} */
                                $scope.recommendations.makeCall = true;
                            }
                            debug(i, value, p, self.fillRecommendationBlockHandler, self.dataGetters, self.richRelevancePostLoadHandler, self.quickViewButtonHandler);
                            if (i.data("changeTitle") && self.cache.changeTitleProductName && 0 < i.find("h2 span span").length) {
                                i.find("h2 span span").html(self.cache.changeTitleProductName);
                            }
                        }
                    }
                    i.data("ready", "true");
                }
            }
        },
        getProviderForCurrentZone: function(name) {
            var id = name.data("recommendations-provider");
            var group = self.dataGetters.zone(name);
            if (!id || !group) {
                return false;
            }
            name = name.data("recommendations-type") || "demandwareCrossSell";
            id = id.toUpperCase();
            name = name.toUpperCase();
            var configs = self.providerSchemeConfig[id];
            if (configs) {
                return {
                    config: configs[group.toUpperCase()],
                    name: id,
                    type: name
                };
            }
        },
        replaceUrlsByRichRelevance: function(posts, _) {
            _.find(".product_tile_wrapper").each(function() {
                var d = $(this);
                var key = d.find(".capture_product_id").text();
                /** @type {number} */
                var i = 0;
                for (; i < posts.length; i++) {
                    if (posts[i].ID == key) {
                        d.find("a").filter(":not(.cta_quickview, .quickviewbutton)").filter(".product_name, .product_image_wrapper, .learnmorebutton, .ui-price, .product_tile_simple, .product_tile, .inline_rating_link").attr("href", posts[i].linkURL);
                        d.attr("data-richrelevance-url", posts[i].linkURL);
                    }
                }
            });
            _.find(".content_tile_wrapper").each(function() {
                var d = $(this);
                var key = d.find("div").data("containerid");
                /** @type {number} */
                var i = 0;
                for (; i < posts.length; i++) {
                    if (posts[i].ID == key) {
                        d.attr("data-richrelevance-url", posts[i].linkURL);
                    }
                }
            });
        },
        addDataCollectionRichRelevanceEvents: function(tests) {
            $(document).on("click", ".quickviewbutton, .cta_quickview, .love-button, .product_add_to_cart", function() {
                var value = $(this).closest(".product_tile_wrapper").data("richrelevance-url");
                if ("undefined" != typeof value && null != value) {
                    rr.log_event(value);
                }
            });
            tests.find("a").click(function() {
                var value = $(this).closest(".content_tile_wrapper").data("richrelevance-url");
                if ("undefined" != typeof value && null != value) {
                    rr.log_event(value);
                }
            });
        },
        getRecommendedProducts: function(names) {
            if (names) {
                names = names.toString().split("|");
                /** @type {!Array} */
                var eventPrototypes = [];
                /** @type {number} */
                var i = 0;
                for (; i < names.length; i++) {
                    var a = {};
                    a.ID = names[i];
                    eventPrototypes.push(a);
                }
                return eventPrototypes;
            }
        },
        initializeEvents: function(options, xhr) {
            xhr(options);
        },
        setLoaderBar: function(name) {
            $scope.progress.show(name);
        },
        removeLoaderBar: function() {
            $scope.progress.hide();
        },
        hideBlock: function(b) {
            b.hide();
            b.parent().find(".you_may_also_like_title").hide();
            b.parent().find(".recommendation_message").hide();
            if ("recommendationsBlocksParentClass" in self.cache) {
                b.closest("." + self.cache.recommendationsBlocksParentClass).hide();
            }
        },
        collectRichRelevanceData: function(index, name, data) {
            /** @type {!Array} */
            var item = [];
            switch (self.providerSchemeConfig[index.name][self.dataGetters.zone(name)].r3_page) {
                case "r3_item":
                    if (!equals("r3_item")) {
                        break;
                    }
                    R3_ITEM = new r3_item;
                    R3_ITEM.setId(self.dataGetters.pid());
                    if (data.categoryid) {
                        R3_COMMON.addCategoryHintId(data.categoryid);
                    }
                    break;
                case "r3_home":
                    if (!equals("r3_home")) {
                        break;
                    }
                    new r3_home;
                    break;
                case "r3_category":
                    if (!equals("r3_category")) {
                        break;
                    }
                    item = new r3_category;
                    item.setId(data.categoryid);
                    item.setName(data.categorydisplayname);
                    d(data, item);
                    break;
                case "r3_brand":
                    if (!equals("r3_brand")) {
                        break;
                    }
                    item = new r3_brand;
                    R3_COMMON.setPageBrand(data.categoryid);
                    d(data, item);
                    break;
                case "r3_search":
                    if (!equals("r3_search")) {
                        break;
                    }
                    item = new r3_search;
                    item.setTerms(data.terms);
                    d(data, item);
                    break;
                case "r3_cart":
                    if (!equals("r3_cart") || "cart" != $scope.page.currentPage) {
                        break;
                    }
                    data = new r3_cart;
                    item = self.dataGetters.productsincartids();
                    /** @type {number} */
                    index = 0;
                    for (; index < item.length; index++) {
                        data.addItemId(item[index]);
                    }
                    R3_COMMON.setCartValue(self.dataGetters.subtotal());
                    break;
                case "r3_error":
                    if (!equals("r3_error")) {
                        break;
                    }
                    new r3_error;
                    break;
                case "r3_purchased":
                    if (!equals("r3_purchased")) {
                        break;
                    }
                    R3_PURCHASED = new r3_purchased;
                    R3_PURCHASED.setOrderNumber(data.ordernumber);
                    if ("ordereditems" in data) {
                        data = data.ordereditems;
                        /** @type {number} */
                        item = 0;
                        for (; item < data.length; item++) {
                            R3_PURCHASED.addItemIdPriceQuantity(data[item].ID, data[item].adjustedNetPrice, data[item].quantity);
                        }
                    }
                    break;
                case "r3_profile":
                    if (!equals("r3_personal")) {
                        break;
                    }
                    new r3_personal;
                    break;
                case "r3_addtocart":
                    if (!equals("r3_addtocart")) {
                        break;
                    }
                    R3_ADDTOCART = new r3_addtocart;
                    if (data.minicartproductsids) {
                        item = data.minicartproductsids.toString().split(";");
                    } else {
                        if (data.productsincartids) {
                            item = data.productsincartids.toString().split(";");
                        }
                    }
                    /** @type {number} */
                    data = 0;
                    for (; data < item.length; data++) {
                        R3_ADDTOCART.addItemIdToCart(item[data]);
                    }
                    break;
                case "r3_empty_cart":
                    if (!equals("r3_cart")) {
                        break;
                    }
                    new r3_cart;
                    break;
                case "r3_registry":
                    if (!equals("r3_registry")) {
                        break;
                    }
                    new r3_registry;
                    break;
                case "r3_generic":
                    if (equals("r3_generic")) {
                        new r3_generic;
                    }
            }
        },
        renderItemTilesSingleBlock: function(d) {
            var e = d.placementType || d.placement_name;
            var server = d.message;
            var i = $(".recommendations_block[data-richrelevance-placement='" + e + "']");
            if (0 != $(".recommendations_block[data-richrelevance-placement='" + e + "']").length) {
                if (e = self.dataGetters.maxrecommendations(i), d = d.items, jQuery.isEmptyObject(d)) {
                    this.hideBlock(i);
                } else {
                    /** @type {!Array} */
                    var p = [];
                    /** @type {number} */
                    var k = 0;
                    for (; k < Math.min(e, d.length); k++) {
                        if (d[k]) {
                            var m = {};
                            m.ID = d[k].id;
                            m.linkURL = d[k].linkURL;
                            p.push(m);
                        }
                    }
                    self.fillRecommendationBlockHandler(i, p, void 0, server, self.dataGetters, self.richRelevancePostLoadHandler, self.quickViewButtonHandler);
                }
            }
        },
        renderItemTiles: function() {
            var crossfilterable_layers = RR.data.JSON.placements;
            /** @type {number} */
            var layer_i = 0;
            for (; layer_i < crossfilterable_layers.length; layer_i++) {
                $scope.recommendations.renderItemTilesSingleBlock(crossfilterable_layers[layer_i]);
            }
        },
        renderPromo: function(data) {
            if (data) {
                var i;
                for (i in data.placements) {
                    if (data.placements[i].placementType && -1 !== data.placements[i].placementType.indexOf("promo")) {
                        var files = $("body").find("[data-richrelevance-placement='" + data.placements[i].placementType + "']");
                        if (0 != files.lenght) {
                            files.html(data.placements[i].html);
                            if ($(files).is(":hidden")) {
                                $(files).show();
                            }
                        }
                    }
                }
            }
        },
        collectCertonaData: function(str, c, data) {
            resx.appid = self.dataGetters.certonaappid();
            resx.host = self.dataGetters.certonahost();
            resx.top1 = self.dataGetters.certonatop1();
            resx.top2 = self.dataGetters.certonatop2();
            resx.customerid = self.dataGetters.customerid();
            if (null != c) {
                /** @type {string} */
                resx.pageid = c;
            }
            var w = self.dataGetters.scheme(str);
            /** @type {!Array} */
            c = [];
            if (!self.dataGetters.usefordatacollectiononly(str)) {
                /** @type {number} */
                var i = 0;
                for (; i < data.length; i++) {
                    c.push(data[i].ID + "|" + w);
                }
            }
            switch (self.dataGetters.zone(str)) {
                case "PDP":
                    /** @type {string} */
                    resx.links = c.join(";");
                    /** @type {string} */
                    resx.event = "product";
                    resx.itemid = self.dataGetters.masterpid();
                    break;
                case "CART":
                    data = self.dataGetters.masterproductsincartids();
                    if (self.dataGetters.usefordatacollectiononly(str)) {
                        /** @type {number} */
                        resx.links = data;
                    } else {
                        /** @type {string} */
                        resx.links = c.join(";") + ";" + data;
                    }
                    if (0 < data.length) {
                        /** @type {string} */
                        resx.event = "viewcart";
                        /** @type {number} */
                        resx.itemid = data;
                    }
                    break;
                case "NOHITS":
                    if (c) {
                        /** @type {string} */
                        resx.links = c.join(";");
                    }
                    break;
                case "SEARCH":
                    resx.links = c ? c.join(";") : self.dataGetters.productsearchresultids();
                    break;
                case "PLP":
                    str = self.dataGetters.productsearchresultids();
                    resx.links = c ? c.join(";") + ";" + str : str;
                    break;
                case "WISHLIST":
                    if ((str = self.dataGetters.productlistitems()) && 0 < str.length) {
                        /** @type {string} */
                        resx.event = "wishlist";
                        resx.itemid = str.join(";");
                    }
                    break;
                case "ORDER_CONFIRMATION":
                    /** @type {string} */
                    resx.links = "";
                    /** @type {string} */
                    resx.event = "purchase";
                    resx.itemid = self.dataGetters.productlist().join(";");
                    resx.qty = self.dataGetters.qtylist().join(";");
                    resx.price = self.dataGetters.pricelist().join(";");
                    resx.total = self.dataGetters.total();
                    resx.transactionid = self.dataGetters.transactionid();
                    break;
                case "HOMEPAGE":
                    resx.links = self.dataGetters.nonrecomendedtiles();
                    break;
                case "QUICKVIEW":
                    /** @type {string} */
                    resx.event = "product";
                    resx.itemid = self.dataGetters.masterpid();
                    /** @type {string} */
                    resx.links = "";
            }
            $scope.recommendations.processCertonaDataCollection();
        },
        processCertonaDataCollection: function() {
            if ("ajax" == self.dataGetters.format()) {
                resx.pageid = void 0;
                resx.event = void 0;
                resx.itemid = void 0;
                var c = self.dataGetters.masterpid();
                if (!jQuery.isEmptyObject(c)) {
                    /** @type {string} */
                    resx.event = "product";
                    resx.itemid = c;
                }
                certonaResx.run();
            } else {
                /** @type {(Element|null)} */
                c = document.getElementsByTagName("head").item(0);
                /** @type {!Element} */
                var script = document.createElement("script");
                script.setAttribute("type", "text/javascript");
                script.setAttribute("src", $scope.urls.certonaDataCollectionScript);
                c.appendChild(script);
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(data, $) {
    var parsed;
    var d;
    var g;
    var scope;
    var initialize;
    var parse;
    var insertDeleteLink;
    var get;
    var createElement;
    parsed = {
        pid: function() {
            return data.page && data.page.currentProduct && data.page.currentProduct ? data.page.currentProduct.pid : "";
        },
        masterpid: function() {
            return data.page.currentProduct.masterID;
        },
        scheme: function(context) {
            return context.data("certona-scheme");
        },
        maxrecommendations: function(b) {
            return b.data("maxrecommendations");
        },
        search: function() {
            return data.util.getParameterValueFromUrl("q");
        },
        category: function() {
            return data.page.category;
        },
        productsearchresultids: function() {
            return data.page && "productSearchResultIDs" in data.page ? data.page.productSearchResultIDs.join(";") : "";
        },
        productsincartids: function() {
            return data.page.productsInCartIDs ? data.page.productsInCartIDs : {};
        },
        masterproductsincartids: function() {
            return data.page.masterProductsInCartIDs ? data.page.masterProductsInCartIDs : {};
        },
        zone: function(test) {
            return test.data("zone");
        },
        minicartproductsids: function() {
            return scope.minicartRecommendationsInfo.data("minicart-products-ids");
        },
        minicartplacements: function() {
            return scope.minicartRecommendationsInfo && scope.minicartRecommendationsInfo.data("minicart-richrelevance-placements") ? scope.minicartRecommendationsInfo.data("minicart-richrelevance-placements").split(";") : [];
        },
        placements: function() {
            return data.page.richRelevance.placements ? data.page.richRelevance.placements : [];
        },
        categoryid: function() {
            return data.page.richRelevance.categoryID ? data.page.richRelevance.categoryID : "";
        },
        categorydisplayname: function() {
            return data.page.richRelevance.categoryDisplayName ? data.page.richRelevance.categoryDisplayName : "";
        },
        isrecommendable: function() {
            return data.page.richRelevance.isRecommendable || false;
        },
        terms: function() {
            return data.page.richRelevance.terms ? data.page.richRelevance.terms : "";
        },
        itemsids: function() {
            return data.page.richRelevance.itemsIDs ? data.page.richRelevance.itemsIDs : "";
        },
        ordereditems: function() {
            return data.page.richRelevance.orderedItems ? data.page.richRelevance.orderedItems : {};
        },
        ordernumber: function() {
            return data.page.richRelevance.orderNumber ? data.page.richRelevance.orderNumber : "";
        },
        richrelevanceplacement: function(val) {
            return val.data("richrelevance-placement");
        },
        format: function() {
            return data.util.getParameterValueFromUrl("format");
        },
        slotcontentproductsids: function(theta) {
            return theta.data("slotcontent-products-ids") ? theta.data("slotcontent-products-ids") : "";
        },
        showselectedswatchonly: function(val) {
            return val.data("showselectedswatchonly");
        },
        showswatches: function(tokens) {
            return tokens.data("showswatches");
        },
        disableswatches: function(tokens) {
            return tokens.data("disableswatches");
        },
        viewtype: function(viewClick) {
            return viewClick.data("viewtype") || "default";
        },
        disablename: function(tokens) {
            return tokens.data("disablename");
        },
        showsubtitle: function(val) {
            return val.data("showsubtitle");
        },
        disablesubtitle: function(tokens) {
            return tokens.data("disablesubtitle");
        },
        disablepricing: function(tokens) {
            return tokens.data("disablepricing");
        },
        disablepromotion: function(tokens) {
            return tokens.data("disablepromotion");
        },
        showaddtocart: function(val) {
            return val.data("showaddtocart");
        },
        showratings: function(val) {
            return val.data("showratings");
        },
        productimagemode: function(val) {
            return val.data("productimagemode");
        },
        forceproductlink: function(tokens) {
            return tokens.data("forceproductlink");
        },
        certonaappid: function() {
            return data.page.resx.appid;
        },
        certonahost: function() {
            return data.page.resx.host;
        },
        certonatop1: function() {
            return data.page.resx.top1;
        },
        certonatop2: function() {
            return data.page.resx.top2;
        },
        usefordatacollectiononly: function(val) {
            return val.data("usefordatacollectiononly");
        },
        productlistitems: function() {
            return data.page.resx.productListItems;
        },
        pricelist: function() {
            return data.page.resx.priceList;
        },
        productlist: function() {
            return data.page.resx.productList;
        },
        qtylist: function() {
            return data.page.resx.qtyList;
        },
        customerid: function() {
            return data.page.resx.customerid || "";
        },
        transactionid: function() {
            return data.page.resx.transactionid;
        },
        total: function() {
            return data.page.resx.total;
        },
        producttiletype: function(val) {
            return val.data("producttiletype");
        },
        showquickviewbutton: function(tokens) {
            return tokens.data("showquickviewbutton");
        },
        showseedetailslink: function(tokens) {
            return tokens.data("showseedetailslink");
        },
        viewdetailstitle: function(tokens) {
            return tokens.data("viewdetailstitle");
        },
        customClasses: function(context) {
            return context.data("customclasses");
        },
        contentwrapperclass: function(tokens) {
            return tokens.data("contentwrapperclass");
        },
        actionswrapperclass: function(tokens) {
            return tokens.data("actionswrapperclass");
        },
        nonrecomendedtiles: function() {
            /** @type {!Array} */
            var elem3 = [];
            data.ui.main.find(".capture_product_id").each(function() {
                var div = $(this).data("master-id") || null;
                if (null != div) {
                    elem3.push(div);
                }
            });
            return elem3.join(";");
        },
        producttilecustomcssclasses: function(tokens) {
            return tokens.data("producttilecustomcssclasses");
        },
        producttilecustomimagetypes: function(tokens) {
            return tokens.data("producttilecustomimagetypes");
        },
        producturlparameters: function(tokens) {
            return tokens.data("producturlparameters");
        },
        productnameclasses: function(val) {
            return val.data("productNameClasses");
        },
        productnamewrapper: function(tokens) {
            return tokens.data("productNameWrapper");
        },
        productnamemode: function(tokens) {
            return tokens.data("productnamemode");
        },
        totalprice: function() {
            return data.page.totalPrice;
        },
        subtotal: function() {
            return 100 * data.page.cart.subtotal;
        },
        ishtmlplacement: function(b) {
            return b.data("ishtmlplacement") ? b.data("ishtmlplacement") : "false";
        },
        showhostedratings: function(tokens) {
            return tokens.data("showhostedratings");
        },
        removebadge: function(tokens) {
            return tokens.data("removebadge");
        }
    };
    d = {
        CERTONA: {
            PDP: {
                params: ["masterpid", "scheme", "maxrecommendations"]
            },
            CART: {
                params: ["scheme", "maxrecommendations", "masterproductsincartids"]
            },
            EMPTY_CART: {
                params: ["scheme", "maxrecommendations"]
            },
            NOHITS: {
                params: ["scheme", "maxrecommendations", "search"]
            },
            SEARCH: {
                params: ["scheme", "maxrecommendations", "search", "productsearchresultids"]
            },
            PLP: {
                params: ["scheme", "maxrecommendations", "search", "productsearchresultids", "category"]
            },
            MINICART: {
                params: ["scheme", "maxrecommendations", "minicartproductsids", "minicartplacements"]
            },
            HOMEPAGE: {
                params: []
            },
            CLP: {
                params: []
            },
            PROFILE: {
                params: []
            },
            WISHLIST: {
                params: []
            },
            ORDER_CONFIRMATION: {
                params: []
            },
            QUICKVIEW: {
                params: []
            },
            MINICART_OVERLAY: {
                params: ["placements", "minicartproductsids"],
                r3_page: "r3_addtocart"
            }
        },
        DEMANDWARE: {
            PDP: {
                params: ["pid", "maxrecommendations"]
            },
            CART: {
                params: ["maxrecommendations", "productsincartids"]
            },
            NOHITS: {
                params: ["slotcontentproductsids"]
            },
            SEARCH: {
                params: ["maxrecommendations", "search", "productsearchresultids"]
            },
            PLP: {
                params: ["maxrecommendations", "category", "productsearchresultids"]
            },
            MINICART: {
                params: ["maxrecommendations", "minicartproductsids", "minicartplacements"]
            },
            EMPTY_CART: {
                params: ["slotcontentproductsids"]
            },
            MINICART_OVERLAY: {
                params: ["placements", "minicartproductsids"],
                r3_page: "r3_addtocart"
            },
            HOMEPAGE: {
                params: ["slotcontentproductsids"]
            }
        },
        RICHRELEVANCE: {
            HOMEPAGE: {
                params: ["placements"],
                r3_page: "r3_home"
            },
            PDP: {
                params: ["placements", "pid", "categoryid", "categorydisplayname", "isrecommendable"],
                r3_page: "r3_item"
            },
            PLP: {
                params: ["placements", "categoryid", "categorydisplayname"],
                r3_page: "r3_category"
            },
            BRAND: {
                params: ["placements", "categoryid", "categorydisplayname"],
                r3_page: "r3_brand"
            },
            SEARCH: {
                params: ["placements", "terms", "itemsids"],
                r3_page: "r3_search"
            },
            CART: {
                params: ["placements", "productsincartids", "totalprice"],
                r3_page: "r3_cart"
            },
            ERROR: {
                params: ["placements"],
                r3_page: "r3_error"
            },
            ORDER_CONFIRMATION: {
                params: ["placements", "ordereditems", "ordernumber"],
                r3_page: "r3_purchased"
            },
            CLP: {
                params: ["placements", "categoryid", "categorydisplayname"],
                r3_page: "r3_category"
            },
            PROFILE: {
                params: ["placements"],
                r3_page: "r3_profile"
            },
            MINICART: {
                params: ["richrelevanceplacement", "minicartproductsids", "minicartplacements"],
                r3_page: "r3_cart"
            },
            NOHITS: {
                params: ["placements", "terms"],
                r3_page: "r3_search"
            },
            EMPTY_CART: {
                params: ["placements"],
                r3_page: "r3_empty_cart"
            },
            REGISTRY: {
                params: ["placements"],
                r3_page: "r3_registry"
            },
            GENERIC_PAGE: {
                params: ["placements"],
                r3_page: "r3_generic"
            },
            MINICART_OVERLAY: {
                params: ["placements", "minicartproductsids"],
                r3_page: "r3_addtocart"
            }
        }
    };
    g = {
        CERTONA: function(i, o, c, debug, error, us, pr) {
            c = data.recommendations.getProviderData(i, o);
            if (jQuery.isEmptyObject(c)) {
                data.recommendations.hideBlock(i);
            } else {
                data.recommendations.setLoaderBar(i);
                $.ajax({
                    type: "GET",
                    dataType: "json",
                    url: data.urls.getCertonaRecommendations,
                    data: c,
                    success: function(name) {
                        if (name.recommendedProductsIDs) {
                            var choices = name.recommendedProductsIDs.toString().split("|");
                            /** @type {!Array} */
                            var f = [];
                            /** @type {number} */
                            var j = 0;
                            for (; j < choices.length; j++) {
                                var m = {};
                                m.ID = choices[j];
                                f.push(m);
                            }
                            debug(i, f, name.pageID, null, error, us, pr);
                        } else {
                            data.recommendations.hideBlock(i);
                        }
                    },
                    error: function() {
                        data.recommendations.hideBlock(i);
                    }
                });
            }
        },
        DEMANDWARE: function(mml, node, func, parameters, res, prop, sourceVal) {
            get(mml, node, func, parameters, res, prop, sourceVal, {
                DEMANDWARELASTVISITED: {
                    url: data.urls.getDWLastVisited,
                    isProviderDataRequired: false,
                    restrictedZones: []
                },
                DEMANDWARECROSSSELL: {
                    url: data.urls.getDWRecommendations
                },
                DEMANDWAREUPSELL: {
                    url: data.urls.getDWRecommendationsUpSell
                },
                DEMANDWAREOTHERS: {
                    url: data.urls.getDWRecommendationsOthers
                },
                DEMANDWAREALSOVIEW: {
                    url: data.urls.getDWRecommendationsAlsoView
                },
                DEMANDWAREALSOBOUGHT: {
                    url: data.urls.getDWRecommendationsAlsoBought
                },
                DEMANDWARETOPSELL: {
                    url: data.urls.getDWRecommendationsTopSell
                }
            }[node.type]);
        },
        RICHRELEVANCE: function(i, lang) {
            /** @type {boolean} */
            var results = false;
            var colorAtoms;
            if ("undefined" != typeof RR && RR && RR.data) {
                colorAtoms = RR.data.JSON.placements;
                var g = i.data("richrelevancePlacement");
                /** @type {number} */
                var r = 0;
                for (; r < colorAtoms.length; r++) {
                    if ((colorAtoms[r].placementType || colorAtoms[r].placement_name) == g) {
                        /** @type {boolean} */
                        results = true;
                        data.recommendations.renderItemTilesSingleBlock(colorAtoms[r]);
                        break;
                    }
                }
            }
            if (data.recommendations.makeCall && !results) {
                if (data.page.richRelevance = data.page.richRelevance || {}, results = data.recommendations.getProviderData(i, lang), jQuery.isEmptyObject(results) || "undefined" == typeof R3_COMMON || null == R3_COMMON) {
                    data.recommendations.hideBlock(i);
                } else {
                    /** @type {string} */
                    R3_COMMON.placementTypes = "";
                    if (i.data("rrForceThisPlacementOnly") && "true" == i.data("rrForceThisPlacementOnly")) {
                        R3_COMMON.addPlacementType(i.data("richrelevancePlacement"));
                        i.data("rrForceThisPlacementOnly", "false");
                    } else {
                        if ((colorAtoms = results.minicartplacements && 0 < results.minicartplacements.length ? results.minicartplacements : results.placements) && 0 < colorAtoms.length) {
                            /** @type {number} */
                            g = 0;
                            for (; g < colorAtoms.length; g++) {
                                R3_COMMON.addPlacementType(colorAtoms[g]);
                            }
                        }
                    }
                    R3_COMMON.setClickthruServer(window.location.protocol + "//" + window.location.host);
                    data.recommendations.collectRichRelevanceData(lang, i, results);
                    if (1 == parsed.ishtmlplacement(i)) {
                        r3();
                        rr_flush_onload();
                    } else {
                        RR.jsonCallback = data.recommendations.renderItemTiles;
                        RR.defaultCallback = data.recommendations.renderPromo;
                        rr_flush_onload();
                        r3();
                    }
                    if (!(results.minicartplacements && 0 < results.minicartplacements.length)) {
                        /** @type {boolean} */
                        data.recommendations.makeCall = false;
                    }
                }
            }
        }
    };
    /**
     * @param {!Object} value
     * @param {string} tile
     * @param {!Object} config
     * @param {?} f
     * @param {!Object} p
     * @param {?} message
     * @param {?} path
     * @param {string} response
     * @return {undefined}
     */
    get = function(value, tile, config, f, p, message, path, response) {
        var options = "undefined" !== typeof response ? response : [];
        tile = "url" in options ? options.url : data.urls.getDWRecommendations;
        response = "restrictedZones" in options ? options.restrictedZones : ["EMPTY_CART", "NOHITS", "HOMEPAGE"];
        if (("isProviderDataRequired" in options ? options.isProviderDataRequired : 1) && jQuery.isEmptyObject(config)) {
            data.recommendations.hideBlock(value);
        } else {
            data.recommendations.setLoaderBar(value);
            options = p.zone(value);
            if (response instanceof Array && -1 === response.indexOf(options)) {
                jQuery.ajax({
                    type: "GET",
                    dataType: "json",
                    url: tile,
                    data: config,
                    cache: false,
                    success: function(name) {
                        if (name) {
                            f(value, data.recommendations.getRecommendedProducts(name), null, null, p, message, path);
                        } else {
                            data.recommendations.hideBlock(value);
                        }
                    },
                    error: function() {
                        data.recommendations.hideBlock(value);
                    }
                });
            } else {
                f(value, data.recommendations.getRecommendedProducts(p.slotcontentproductsids(value)), null, null, p, message, path);
            }
        }
    };
    /**
     * @param {!Object} str
     * @param {undefined} version
     * @param {string} w
     * @param {?} d
     * @param {!Object} options
     * @param {?} callback
     * @param {string} checked
     * @return {undefined}
     */
    initialize = function(str, version, w, d, options, callback, checked) {
        var value = function() {
            if (options.richrelevanceplacement(str) && -1 != options.richrelevanceplacement(str).indexOf("content")) {
                return {
                    zone: options.zone(str),
                    contenttile: true
                };
            }
            var params = {
                viewtype: options.viewtype(str),
                zone: options.zone(str),
                showselectedswatchonly: options.showselectedswatchonly(str),
                showswatches: options.showswatches(str),
                disableswatches: options.disableswatches(str),
                disablename: options.disablename(str),
                showsubtitle: options.showsubtitle(str),
                disablesubtitle: options.disablesubtitle(str),
                disablepricing: options.disablepricing(str),
                disablepromotion: options.disablepromotion(str),
                showaddtocart: options.showaddtocart(str),
                showratings: options.showratings(str),
                showhostedratings: options.showhostedratings(str),
                productimagemode: options.productimagemode(str),
                producttiletype: options.producttiletype(str),
                producttilecustomcssclasses: options.producttilecustomcssclasses(str),
                producttilecustomimagetypes: options.producttilecustomimagetypes(str),
                producturlparameters: options.producturlparameters(str),
                productnameclasses: options.productnameclasses(str),
                productnamewrapper: options.productnamewrapper(str),
                productnamemode: options.productnamemode(str),
                richrelevanceplacement: options.richrelevanceplacement(str),
                showquickviewbutton: options.showquickviewbutton(str),
                showseedetailslink: options.showseedetailslink(str),
                viewdetailstitle: options.viewdetailstitle(str),
                customClasses: options.customClasses(str),
                contentwrapperclass: options.contentwrapperclass(str),
                actionswrapperclass: options.actionswrapperclass(str),
                forceproductlink: options.forceproductlink(str),
                removebadge: options.removebadge(str)
            };
            if (scope.customParamsFillRecommendationBlock && "object" === typeof scope.customParamsFillRecommendationBlock) {
                params = $.extend(params, scope.customParamsFillRecommendationBlock);
            }
            return params;
        }();
        var maindata3 = {
            recommendedItems: JSON.stringify(version)
        };
        if (str.data("appendAssets")) {
            /** @type {string} */
            maindata3.recommendedAppendAssets = JSON.stringify(str.data("appendAssets"));
        }
        if (str.data("prependAssets")) {
            /** @type {string} */
            maindata3.recommendedPrependAssets = JSON.stringify(str.data("prependAssets"));
        }
        if (str.data("richrelevance-placement")) {
            str.data("richrelevance-placement").indexOf("content");
        }
        value = data.util.appendParamsToUrl(data.urls.getProductTiles, value);
        $.ajax({
            url: value,
            data: maindata3,
            success: function(name) {
                var res = str.find("ul:first");
                var justDebugged = str.find(".recommendation_title");
                var removeCritText = res.closest("." + data.carousel.settings.cssCarouselWrapper);
                data.recommendations.removeLoaderBar(str);
                res.html(name);
                data.components.product.tile.init();
                if (res.hasClass("productcarousel_list") || res.hasClass("product_list")) {
                    data.carousel.init(removeCritText);
                }
                if ("RICHRELEVANCE" == str.data("recommendations-provider")) {
                    callback(str, version, justDebugged, d, options);
                }
                if ("CERTONA" == str.data("recommendations-provider")) {
                    data.recommendations.collectCertonaData(str, w, version);
                }
                if (data.ui) {
                    data.ui.main.trigger("imageReplace.globalResponsive");
                }
                data.recommendations.initializeEvents(str, checked);
                $(document).trigger("recommendations.loaded", [str]);
            },
            always: function() {
                data.progress.hide();
            },
            type: "POST"
        });
    };
    /**
     * @param {!Object} name
     * @param {string} html
     * @param {!Object} actions
     * @param {undefined} type
     * @param {!Object} metadata
     * @return {undefined}
     */
    parse = function(name, html, actions, type, metadata) {
        data.recommendations.replaceUrlsByRichRelevance(html, name);
        if (actions.length) {
            actions.find("span").html(type);
        }
        if (-1 != metadata.richrelevanceplacement(name).indexOf("content")) {
            $(document).trigger("contentrecommendations.load");
            data.components.search.howto.initForRecommendations(name);
        }
        if ("PROFILE" == metadata.zone(name) && jQuery().packery) {
            $(".grid").packery({
                itemSelector: ".item",
                gutter: 0
            });
        }
        data.recommendations.addDataCollectionRichRelevanceEvents(name);
    };
    /**
     * @return {undefined}
     */
    createElement = function() {
        scope = {
            recommendationsBlocks: jQuery(".recommendations_block"),
            minicartRecommendationsInfo: jQuery("#minicartRecommendationsInfo")
        };
    };
    /**
     * @return {undefined}
     */
    insertDeleteLink = function() {
        jQuery(".cta_quickview").click(function() {
            data.quickView.show({
                url: this.href,
                source: "quickview",
                recomendationsPage: $(this).parents(".recommendations_block").data("zone")
            });
            return false;
        });
    };
    data.recommendations = data.recommendations || {};
    data.recommendations.globalconfig = {
        getDataGetters: function() {
            return parsed;
        },
        getProviderSchemeConfig: function() {
            return d;
        },
        getFillProviderProductsConfig: function() {
            return g;
        },
        getCache: function() {
            createElement();
            return scope;
        },
        getFillRecommendationBlockHandler: function() {
            return initialize;
        },
        getRichRelevancePostLoadHandler: function() {
            return parse;
        },
        getQuickViewButtonHandler: function() {
            return insertDeleteLink;
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    var data;
    var init;
    /**
     * @return {undefined}
     */
    initCustomCache = function() {
        data = {
            recommendationsBlocksParentClass: "product_section",
            changeTitleProductName: $(".show_also_view_bought").data("pdpproductname"),
            customParamsFillRecommendationBlock: {
                producttilecustomimagetypes: "recommendation"
            }
        };
    };
    /**
     * @param {!Object} block
     * @return {undefined}
     */
    init = function(block) {
        if ("quickView" in self && self.quickView) {
            var blockName = block.data("recommendationsType") || "";
            if ("" != blockName) {
                self.quickView.initializeButton($("." + blockName.toLowerCase()), "a.product_image_wrapper");
            }
            self.quickView.initializeButton(block.find(".product_tile_wrapper"), "a.product_image_wrapper");
        }
        $(document).trigger("recommendations_loaded", {
            block: block
        });
    };
    /**
     * @param {!Object} i
     * @param {undefined} res
     * @param {string} fields
     * @param {?} config
     * @param {!Object} options
     * @param {?} fn
     * @param {string} domain
     * @return {undefined}
     */
    var get = function(i, res, fields, config, options, fn, domain) {
        var data = function() {
            if (options.richrelevanceplacement(i) && -1 != options.richrelevanceplacement(i).indexOf("content")) {
                return {
                    zone: options.zone(i),
                    contenttile: true
                };
            }
            var result = i.data("recommendationsType") || "";
            result = {
                zone: options.zone(i),
                showselectedswatchonly: options.showselectedswatchonly(i),
                showsubtitle: options.showsubtitle(i),
                showaddtocart: options.showaddtocart(i),
                showratings: options.showratings(i),
                productimagemode: options.productimagemode(i),
                producttiletype: options.producttiletype(i),
                productnameclasses: options.productnameclasses(i),
                richrelevanceplacement: options.richrelevanceplacement(i),
                customTag: "PLP" == options.zone(i) ? "div" : "li",
                customClasses: result.toLowerCase()
            };
            if (data.customParamsFillRecommendationBlock && "object" === typeof data.customParamsFillRecommendationBlock) {
                result = $.extend(result, data.customParamsFillRecommendationBlock);
            }
            return result;
        }();
        if (i.data("richrelevance-placement")) {
            i.data("richrelevance-placement").indexOf("content");
        }
        data = self.util.appendParamsToUrl(self.urls.getProductTiles, data);
        data = {
            url: data,
            data: {
                recommendedItems: JSON.stringify(res)
            },
            success: function(name) {
                var blockName = i.data("recommendationsType") || "";
                if ("" != blockName) {
                    i.parent().find("." + blockName.toLowerCase()).remove();
                }
                name = $(name);
                self.recommendations.removeLoaderBar(i);
                if ("PLP" == options.zone(i)) {
                    if ("" != $.trim(i.data("badge"))) {
                        name.find(".product_badge").text(i.data("badge"));
                    }
                    i.html(name);
                    self.recommendations.replaceUrlsByRichRelevance(res, i);
                    i.before(i.find(name));
                    self.recommendations.hideBlock(i);
                } else {
                    i.find("ul:first").html(name);
                }
                if ("RICHRELEVANCE" == i.data("recommendations-provider")) {
                    name = i.find(".recommendation_title");
                    fn(i, res, name, config, options);
                }
                if ("CERTONA" == i.data("recommendations-provider")) {
                    self.recommendations.collectCertonaData(i, fields, res);
                }
                self.ui.main.trigger("imageReplace.globalResponsive");
                self.recommendations.initializeEvents(i, domain);
                $(document).trigger("recommendations.loaded");
            },
            always: function() {
                self.progress.hide();
            },
            type: "POST"
        };
        $.ajax(data);
    };
    self.recommendations = self.recommendations || {};
    self.recommendations.customconfig = {
        getDataGetters: function() {},
        getDataGetters: function() {},
        getProviderSchemeConfig: function() {},
        getFillProviderProductsConfig: function() {},
        getCache: function() {
            initCustomCache();
            return data;
        },
        getFillRecommendationBlockHandler: function() {
            if ("hasCustomSlots" in self.page && self.page.hasCustomSlots && "ns" in self.page && "search" == self.page.ns) {
                return get;
            }
        },
        getRichRelevancePostLoadHandler: function() {},
        getQuickViewButtonHandler: function() {
            return init;
        }
    };
})(window.app = window.app || {}, jQuery);
(function(options, $) {
    var self = {};
    options.searchsuggest = {
        init: function(name) {
            options.searchsuggest.initializeCache(name);
            options.searchsuggest.initializeEvents();
            options.searchsuggest.nonDesktopInit();
        },
        nonDesktopInit: function() {
            if (options.isTabletUserAgent || options.isMobileUserAgent) {
                self.searchForm.on("touchstart", "button[type='submit']", function() {
                    self.searchForm.submit();
                    return true;
                });
            }
        },
        initializeCache: function(name) {
            self.searchContainer = $(".search_suggestions_container, .no_hits_search");
            self.searchForm = self.searchContainer.find("form[name='simpleSearch']");
            self.searchField = self.searchForm.find("input[name='q']");
            self.fieldDefault = options.resources.SIMPLE_SEARCH ? options.resources.SIMPLE_SEARCH.toLowerCase() : null;
            /** @type {!Object} */
            self.additionalWrapper = name;
            /** @type {number} */
            self.delay = 300;
            /** @type {number} */
            self.qlen = 0;
            /** @type {null} */
            self.typingTimer = null;
        },
        initializeEvents: function() {
            self.searchField.attr("autocomplete", "off");
            self.searchField.focus(function() {
                options.searchsuggest.clearResults();
            });
            self.searchField.blur(function() {
                setTimeout(function() {
                    options.searchsuggest.clearResults();
                }, self.delay);
            });
            self.searchField.keyup(function(event) {
                event = event.keyCode || window.event.keyCode;
                if (!options.searchsuggest.handleArrowKeys(event, $(this))) {
                    if (13 === event || 27 === event) {
                        options.searchsuggest.clearResults();
                    } else {
                        var version = $(this).val();
                        var option = $(this);
                        clearTimeout(self.typingTimer);
                        /** @type {number} */
                        self.typingTimer = setTimeout(function() {
                            options.searchsuggest.suggest(version, option);
                        }, self.delay);
                    }
                }
            });
        },
        suggest: function(input, value) {
            var e = value.val();
            $(document).trigger("search.searchSuggestionFieldChange", {
                fieldLength: e.length
            });
            if (0 === e.length) {
                options.searchsuggest.clearResults();
            } else {
                if (input === e) {
                    self.qlen = e.length;
                    if (self.qlen >= options.preferences.searchWhenMinChars) {
                        options.searchsuggest.request(input, e, value);
                    }
                }
            }
        },
        getCache: function() {
            return self;
        },
        clearResults: function() {
            if (self.resultsContainer) {
                self.resultsContainer.remove();
            }
        },
        createResultsContainer: function(b) {
            self.resultsContainer = $(document.createElement("div")).addClass("suggestions").attr("id", "suggestions");
            if (self.additionalWrapper) {
                /** @type {number} */
                var i = 0 < b.parents(self.additionalWrapper).length ? 1 : 0;
                self.resultsContainer.appendTo(self.searchContainer[i]).css({
                    top: $(self.searchContainer[i]).offset().height,
                    left: b.position().left
                });
            } else {
                if (0 != b.parents(".search_suggestions_container, .no_hits_search").length) {
                    self.searchContainer = b.parents(".search_suggestions_container, .no_hits_search");
                }
                self.resultsContainer.appendTo(self.searchContainer[0]).css({
                    top: $(self.searchContainer[0]).offset().height,
                    left: b.position().left
                });
            }
            $(document).trigger("search.searchSuggestionContainerChange", [self.resultsContainer]);
        },
        handleArrowKeys: function(type, e) {
            switch (type) {
                case 38:
                    /** @type {number} */
                    self.listCurrent = 0 >= self.listCurrent ? self.listTotal - 1 : self.listCurrent - 1;
                    break;
                case 40:
                    /** @type {number} */
                    self.listCurrent = self.listCurrent >= self.listTotal - 1 ? 0 : self.listCurrent + 1;
                    break;
                default:
                    return self.listCurrent = -1, false;
            }
            options.searchsuggest.moveInList(type, e);
            return true;
        },
        request: function() {},
        formSubmit: function() {},
        selectionClick: function() {},
        moveInList: function() {}
    };
})(window.app = window.app || {}, jQuery);
(function(window, $) {
    /**
     * @return {undefined}
     */
    function click() {
        $("input:checked").parent().addClass("f_checked");
        $("input:checkbox:not(:checked)").parent().removeClass("f_checked");
    }
    /**
     * @return {undefined}
     */
    function initialize() {
        click();
        that.document.on("change", 'input[type="checkbox"]', function() {
            $(this).parent().toggleClass("f_checked", this.checked);
        }).on("change", 'input[type="radio"]', function() {
            var $holder = $(this);
            var frm = $holder.closest("form");
            if (!frm.length) {
                frm = $(document);
            }
            if ($holder.is(":checked")) {
                frm.find('[name="' + $holder.attr("name") + '"]').parent().removeClass("f_checked");
                $holder.parent().addClass("f_checked");
            }
        }).on("focusin focusout", 'input[type="radio"], input[type="checkbox"]', function(verifiedEvent) {
            $(this).parent().toggleClass("f_focused", "focusin" === verifiedEvent.type);
        }).on("mouseenter mouseleave", 'input[type="radio"], input[type="checkbox"]', function(e) {
            $(this).parent().toggleClass("f_hover", "mouseenter" === e.type);
        }).on("product.variationChanged", click).on("change", "select.age_control", remove).on("click", ".button.submit_button", handleScrollTop).on("click", ".button.send", handleScrollTop).on("click", ".button.section_submit_button", handleScrollTop).on("click", ".button.next_process", handleScrollTop);
    }
    /**
     * @return {?}
     */
    function remove() {
        if (0 === that.birthDateError.length) {
            updateMaxSelectedMessage();
        }
        /** @type {boolean} */
        var index = true;
        if (that.birthDateError.length) {
            if (initTimeshift()) {
                if (init()) {
                    that.birthDateError.hide();
                    var view = that.birthdaySelectDay.closest("form").data("validator") || window.validator;
                    view.settings.unhighlight.call(view, that.birthdaySelectDay);
                    view.settings.unhighlight.call(view, that.birthdaySelectMonth);
                    view.settings.unhighlight.call(view, that.birthdaySelectYear);
                } else {
                    that.birthDateError.text(window.resources.DOB_LESS_THAN_AGE_LIMIT).show();
                    /** @type {boolean} */
                    index = false;
                }
            } else {
                that.birthDateError.text(window.resources.DOB_WRONG).show();
                /** @type {boolean} */
                index = false;
            }
        }
        return index;
    }
    /**
     * @return {?}
     */
    function handleScrollTop() {
        return 0 < $(this).parents("form").find(".age_control").length ? remove() : true;
    }
    /**
     * @return {undefined}
     */
    function updateMaxSelectedMessage() {
        that.document = $(document);
        that.birthdaySelectDay = $("select[name*='_day']");
        that.birthdaySelectMonth = $("select[name*='_month']");
        that.birthdaySelectYear = $("select[name*='_year']");
        that.birthDateError = $("#dobError");
    }
    /**
     * @return {?}
     */
    function getDate() {
        /** @type {number} */
        var dtDate = parseInt(that.birthdaySelectDay.val(), 10);
        /** @type {number} */
        var month = parseInt(that.birthdaySelectMonth.val(), 10);
        /** @type {number} */
        var d = parseInt(that.birthdaySelectYear.val(), 10);
        return new Date(d, month - 1, dtDate);
    }
    /**
     * @return {?}
     */
    function initTimeshift() {
        /** @type {!Date} */
        var dCurrent = new Date;
        var date = getDate();
        return !isNaN(date) && date.getFullYear() < dCurrent.getFullYear() && date.getFullYear() >= dCurrent.getFullYear() - 150;
    }
    /**
     * @return {?}
     */
    function init() {
        if (0 === window.preferences.minimumAgeLimit) {
            return true;
        }
        if (initTimeshift()) {
            var date = getDate();
            if (!isNaN(date.getTime())) {
                /** @type {!Date} */
                var d = new Date;
                /** @type {number} */
                var e = d.getFullYear() - date.getFullYear();
                /** @type {number} */
                var i = window.preferences.minimumAgeLimitAddOneDay ? 1 : 0;
                if (new Date(d.getFullYear(), date.getMonth(), date.getDate() + i) > new Date(d.getFullYear(), d.getMonth(), d.getDate())) {
                    e--;
                }
                return 0 < e && e >= window.preferences.minimumAgeLimit;
            }
        }
        return false;
    }
    var that = {};
    window.customforms = {
        init: function() {
            updateMaxSelectedMessage();
            initialize();
        },
        dialogOpen: function() {
            click();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(me, $) {
    /**
     * @return {undefined}
     */
    function init() {
        x = me.page.quickViewTrackerData || me.page.trackerData || null;
        d = me.page.currentPage || me.page.type || null;
        s = {};
        o = {};
        data = {};
        if ("customconfig" in me.googletagmanagement) {
            s = me.googletagmanagement.customconfig.getCustomPageVariableConfig();
            data = me.googletagmanagement.customconfig.getTagViewObjectConfig();
        } else {
            if ("globalconfig" in me.googletagmanagement) {
                s = me.googletagmanagement.globalconfig.getCustomPageVariableConfig();
                data = me.googletagmanagement.globalconfig.getTagViewObjectConfig();
            }
        }
        o = s[d];
        o = $.merge($(s.global).slice() || [], o || []);
    }
    /**
     * @param {undefined} type
     * @return {undefined}
     */
    function create(type) {
        $.each(type, function(elem, canCreateDiscussions) {
            /** @type {!Window} */
            elem = window;
            elem.superDataLayer = elem.superDataLayer || [];
            elem.superDataLayer.push({
                "gtm.start": (new Date).getTime(),
                event: "gtm.js"
            });
            /** @type {!Element} */
            elem = document.getElementsByTagName("script")[0];
            /** @type {!Element} */
            var node = document.createElement("script");
            /** @type {boolean} */
            node.async = true;
            /** @type {string} */
            node.src = "//www.googletagmanager.com/gtm.js?id=" + canCreateDiscussions + "&l=superDataLayer";
            elem.parentNode.insertBefore(node, elem);
        });
    }
    /**
     * @param {undefined} xy
     * @return {undefined}
     */
    function end(xy) {
        $.each(xy, function(b, isBgroundImg) {
            (function(obj, s, name, key, next, isBgroundImg, result) {
                /** @type {string} */
                obj.AnalyticsBy55 = key;
                obj[key] = obj[key] || function() {
                    (obj[key].q = obj[key].q || []).push(arguments);
                };
                obj[key]("config", "dataLayer", next);
                /** @type {string} */
                obj[key].dln = next;
                if ((result || []).length) {
                    /** @type {!Array} */
                    obj[key].r = result;
                }
                obj[key].dl = obj[next] = obj[next] || [];
                /** @type {!Array} */
                obj[next] = [{
                    event: "core.js"
                }];
                (function(space, s, name, v, altClass) {
                    /** @type {!Element} */
                    space = s.getElementsByTagName(name)[0];
                    /** @type {!Element} */
                    s = s.createElement(name);
                    /** @type {boolean} */
                    s.async = true;
                    /** @type {string} */
                    s.src = "//www.googletagmanager.com/gtm.js?id=" + altClass + ("dataLayer" != v ? "&l=" + v : "");
                    space.parentNode.insertBefore(s, space);
                })(obj, s, name, next, isBgroundImg);
            })(window, document, "script", "_55", "dataLayer", isBgroundImg, []);
        });
    }
    /**
     * @param {number} value
     * @return {undefined}
     */
    function fn(value) {
        var options = value in self.eventsConfig ? self.eventsConfig[value] : [];
        value = "customEventsConfig" in self ? self.customEventsConfig[value] : {};
        if (options.length && value) {
            options = $.merge($(options).slice(), value);
        } else {
            if (!options.length && value && value.length) {
                /** @type {number} */
                options = value;
            }
        }
        if (self.customEventsConfig) {
            options = $.merge($(self.customEventsConfig.global).slice() || [], options || []);
        }
        options = $.merge($(self.eventsConfig.global).slice() || [], options || []);
        /** @type {number} */
        value = 0;
        for (; value < options.length; value++) {
            var action = options[value];
            if (-1 == seenNonDefaultActions.indexOf(action) && (seenNonDefaultActions.push(action), action && action in self.eventsLib)) {
                self.eventsLib[action](x);
            }
        }
    }
    /**
     * @return {?}
     */
    function pack() {
        var o = {};
        var keys;
        /** @type {number} */
        var j = 0;
        for (; j < o.length; j++) {
            keys = data[o[j]];
            /** @type {number} */
            var i = 0;
            for (; i < keys.length; i++) {
                if (x && null != x[keys[i]] && void 0 !== x[keys[i]]) {
                    o[keys[i]] = me.preferences.gtmGroupsLowercase && "string" === typeof x[keys[i]] ? x[keys[i]].toLowerCase() : x[keys[i]];
                }
            }
        }
        return o;
    }
    /**
     * @return {undefined}
     */
    function success() {
        var X;
        if (me.preferences.gtmPlan && "cardinal" == me.preferences.gtmPlan) {
            window.superDataLayer = window.superDataLayer || [];
            X = pack();
            superDataLayer.push(X);
        } else {
            window.dataLayer = window.dataLayer || [];
            X = pack();
            dataLayer.push(X);
        }
    }
    var x;
    var d;
    var s;
    var o;
    var data;
    data = o = s = d = x = void 0;
    var self = {
        eventsConfig: {},
        eventsLib: {},
        componentInited: false
    };
    var navCommonStyle = {
        pushDataBeforeInit: false
    };
    /** @type {!Array} */
    var seenNonDefaultActions = [];
    me.googletagmanagement = {
        init: function() {
            if (!self.componentInited && me.preferences.enableGoogleTagManagement) {
                if (me.googletagmanagement.customconfig && "getGlobalConfig" in me.googletagmanagement.customconfig) {
                    navCommonStyle = $.extend(true, navCommonStyle, me.googletagmanagement.customconfig.getGlobalConfig() || {});
                }
                init();
                if (navCommonStyle.pushDataBeforeInit) {
                    success(d);
                }
                var e = me.preferences.googleTagManagementMultipleAccounts;
                e = "customGoogleTagManagerID" in me ? me.customGoogleTagManagerID : e && 0 < me.preferences.googleTagManagementIDs.length ? me.preferences.googleTagManagementIDs : me.preferences.googleTagManagementID;
                var event = $.isArray(e) ? e : [e];
                if (e) {
                    if (me.preferences.gtmPlan && "cardinal" == me.preferences.gtmPlan) {
                        if (me.googletagmanagement.customconfig && me.googletagmanagement.customconfig.GTMInit) {
                            me.googletagmanagement.customconfig.GTMInit(e);
                        } else {
                            create(event);
                        }
                    } else {
                        if (me.googletagmanagement.customconfig && me.googletagmanagement.customconfig.GTMInit) {
                            me.googletagmanagement.customconfig.GTMInit(e);
                        } else {
                            end(event);
                        }
                    }
                }
                if (!navCommonStyle.pushDataBeforeInit) {
                    success(d);
                }
                if ("globalconfig" in me.googletagmanagement) {
                    self.eventsConfig = me.googletagmanagement.globalconfig.getEventsConfig();
                    self.eventsLib = me.googletagmanagement.globalconfig.getEventsLib();
                }
                if ("customconfig" in me.googletagmanagement) {
                    self.customEventsConfig = me.googletagmanagement.customconfig.getEventsConfig();
                    self.eventsLib = $.extend(true, self.eventsLib, me.googletagmanagement.customconfig.getEventsLib() || {});
                }
                me.googletagmanagement.globalconfig.initListeners(d, x);
                fn(d);
                /** @type {boolean} */
                self.componentInited = true;
                $(document).trigger("gtm.initialized");
            }
        },
        initCache: function() {
            init();
        },
        pushEventData: function(text) {
            if (me.preferences.gtmPlan && "cardinal" == me.preferences.gtmPlan) {
                if (superDataLayer) {
                    superDataLayer.push(text);
                }
            } else {
                if (dataLayer) {
                    dataLayer.push(text);
                }
            }
        },
        pushPageData: function(data) {
            success(d || data);
        },
        initEvents: function(data) {
            fn(d || data);
        }
    };
})(window.app = window.app || {}, jQuery);
(function(options, $) {
    /**
     * @param {?} frames
     * @return {undefined}
     */
    function build(frames) {
        if (frames) {
            /** @type {!NodeList<Element>} */
            frames = document.getElementsByTagName("iframe");
            /** @type {number} */
            var i = frames.length;
            for (; i--;) {
                if (/youtube.com\/embed/.test(frames[i].src) && "function" === typeof window.YT.Player) {
                    newNodeLists.push(new YT.Player(frames[i], {
                        events: {
                            onStateChange: onPlayerStateChange,
                            onError: onError
                        }
                    }));
                    /** @type {string} */
                    YT.gtmLastAction = "p";
                }
            }
        } else {
            if (window.YT && "function" === typeof window.YT.Player) {
                build(true);
            } else {
                /**
                 * @return {undefined}
                 */
                window.onYouTubeIframeAPIReady = function() {
                    build(true);
                };
            }
        }
    }
    /**
     * @param {!Object} name
     * @return {undefined}
     */
    function onPlayerStateChange(name) {
        if (name.data == YT.PlayerState.PLAYING) {
            setTimeout(play, 1E3, name.target);
        }
    }
    /**
     * @param {string} id
     * @return {undefined}
     */
    function onError(id) {
        superDataLayer.push({
            event: "error",
            action: "GTM",
            label: "youtube:" + id
        });
    }
    /**
     * @param {!Object} self
     * @return {undefined}
     */
    function play(self) {
        if (self.getPlayerState() == YT.PlayerState.PLAYING) {
            /** @type {(number|string)} */
            var totalRecs = 1.5 >= self.getDuration() - self.getCurrentTime() ? 1 : (Math.floor(self.getCurrentTime() / self.getDuration() * 4) / 4).toFixed(2);
            if (!self.lastP || totalRecs > self.lastP) {
                var v = self.getVideoData();
                /** @type {string} */
                v = v.title + " (ID: " + v.video_id + ")";
                /** @type {(number|string)} */
                self.lastP = totalRecs;
                superDataLayer.push({
                    event: "youtube",
                    action: "0.00" == totalRecs ? "Play: " + totalRecs + "%" : 100 * totalRecs + "%",
                    label: v
                });
            }
            if (1 != self.lastP) {
                setTimeout(play, 1E3, self);
            }
        }
    }
    /**
     * @return {undefined}
     */
    function _initYTAPI() {
        /** @type {!Element} */
        var node = document.createElement("script");
        /** @type {!Element} */
        var wafCss = document.getElementsByTagName("script")[0];
        /** @type {string} */
        node.src = "//www.youtube.com/iframe_api";
        /** @type {boolean} */
        node.async = true;
        wafCss.parentNode.insertBefore(node, wafCss);
    }
    /**
     * @return {?}
     */
    function l() {
        var type;
        if (options.hasOwnProperty("custombagtracking") && void 0 != options.custombagtracking && "" != options.custombagtracking) {
            type = options.custombagtracking;
            /** @type {string} */
            options.custombagtracking = "";
        } else {
            type = options.page.type;
        }
        return self.addToBagType[type] || "Also may like";
    }
    /**
     * @param {!Object} item
     * @param {?} context
     * @return {?}
     */
    function cb(item, context) {
        item = item || {};
        var data = {
            price: item.price ? item.price.toString() : "0",
            brand: item.categoryName,
            category: item.subcategoryName,
            name: item.productwithSubTitle,
            id: item.masterProductId,
            dimension89: item.personalEngravingEnabled
        };
        var _layerId;
        _layerId = item.id;
        var eCity = $(document);
        var eZipCode;
        /** @type {boolean} */
        var viewportCenter = false;
        if ("product" == options.page.ns || "product" == options.page.type) {
            eZipCode = eCity.find('input[name="virtualPreviewActive"]');
            eCity = 1 == eCity.find('input[name="pid"]').length ? eCity.find('input[name="pid"]') : eCity.find('.pdpForm input[name="pid"]');
            if (eZipCode.length && eCity.length && _layerId == eCity.val()) {
                viewportCenter = eZipCode.val();
            }
        }
        if (_layerId = viewportCenter) {
            data.dimension97 = _layerId;
        }
        if ("dimension88" in item && "" != item.dimension88) {
            /** @type {string} */
            data.dimension88 = "Yes";
        }
        if ("variant" in item && "" != item.variant) {
            data.variant = item.variant;
        }
        if ("dimension23" in item && "" != item.dimension23) {
            data.dimension23 = item.dimension23;
        }
        if ("dimension27" in item && "" != item.dimension27) {
            data.dimension27 = item.dimension27;
        }
        if (context) {
            /** @type {string} */
            data.dimension74 = "Yes";
        }
        if (null != item && "undefined" != typeof item && "dimension16" in item) {
            data.dimension16 = item.dimension16;
        }
        if (options.preferences.addDimension48) {
            data.dimension48 = item.variantID || item.id;
        } else {
            data.dimension22 = null != item && "id" in item && null != item.id ? item.id : "";
        }
        if (null != item && "undefined" != typeof item && "dimension40" in item && "" != item.dimension40) {
            data.dimension40 = item.dimension40;
        }
        return data;
    }
    /**
     * @param {string} name
     * @param {string} value
     * @param {!Object} data
     * @return {undefined}
     */
    function init(name, value, data) {
        /** @type {!Array} */
        var a = [];
        var val;
        var s;
        var $sharepreview = $(document);
        /** @type {number} */
        var i = 0;
        for (; i < data.length; i++) {
            if (val = options.page.eeProductsOnPage && options.page.eeProductsOnPage[data[i].pid]) {
                val.variant = data[i].variant || val.variant;
                s = cb(val, value.storePickupData);
                s.quantity = data[i].qty || 1;
                if (value.storePickupData) {
                    /** @type {string} */
                    s.dimension74 = "Yes";
                }
                if ("listName" in value && !options.util.empty(value.listName)) {
                    s.list = value.listName;
                }
                if ($sharepreview.find(".capOptionProduct .caps_list").length) {
                    s.dimension186 = $("li.cap_wrapper.cap_selected").data("cap-name");
                }
                s.dimension30 = $(".delivercustom").parent().hasClass("f_checked") ? $("span#arMounthSelectBoxItText").text() + "month" : "none";
                s.dimension88 = data[i].isProductEngraved;
                if (options.preferences.addDimension91) {
                    /** @type {string} */
                    var value = "none";
                    if (void 0 != options.optsofferChange && val.id == options.optsofferChange.offerInfo.product) {
                        value = options.optsofferChange.data.frequency.every;
                    }
                    /** @type {string} */
                    value = 0 != value && "none" != value ? value + " " + options.preferences.replenishIntervalUnit : "none";
                    /** @type {string} */
                    s.dimension91 = value;
                }
                a.push(s);
            }
        }
        if (null != $scope && "source" in $scope && "update" == $scope.source) {
            val = options.page.eeProductsOnPage && options.page.eeProductsOnPage[$scope.pid];
            /** @type {!Array} */
            data = [];
            a = cb(val, value.storePickupData);
            /** @type {boolean} */
            s = false;
            if (value.storePickupData) {
                /** @type {string} */
                a.dimension74 = "Yes";
            }
            a.dimension30 = $scope.autoReplenishmentInterval;
            if ($scope.newQuantity > $scope.qty) {
                /** @type {boolean} */
                s = true;
            }
            /** @type {number} */
            a.quantity = Math.abs($scope.qty - $scope.newQuantity);
            data.push(a);
            /** @type {({e_addToBagLocation: ?, ecommerce: {add: {products: !Array}, currencyCode: ??}, event: ?}|{e_addToBagLocation: ?, ecommerce: {currencyCode: ??, remove: {products: !Array}}, event: ?})} */
            name = s ? {
                event: options.preferences.enableEETagsForUpdateCartEvent ? "e_addToBag" : name,
                e_addToBagLocation: l(),
                ecommerce: {
                    currencyCode: value.currencyCode || "",
                    add: {
                        products: data
                    }
                }
            } : {
                event: options.preferences.enableEETagsForUpdateCartEvent ? "e_removeFromBag" : name,
                e_addToBagLocation: l(),
                ecommerce: {
                    currencyCode: value.currencyCode || "",
                    remove: {
                        products: data
                    }
                }
            };
        } else {
            /** @type {({e_addToBagLocation: ?, ecommerce: {add: {products: !Array}, currencyCode: ??}, event: ?}|{e_addToBagLocation: string, ecommerce: {add: {actionField: {list: string}, products: !Array}, currencyCode: ??}, event: ?})} */
            name = options.preferences.enableTrackingOnComparePage && "compare" == value.pageID ? {
                event: name,
                e_addToBagLocation: "Comparison Page",
                ecommerce: {
                    currencyCode: value.currencyCode || "",
                    add: {
                        actionField: {
                            list: "Product Comparison - " + options.page.params.category
                        },
                        products: a
                    }
                }
            } : {
                event: name,
                e_addToBagLocation: l(),
                ecommerce: {
                    currencyCode: value.currencyCode || "",
                    add: {
                        products: a
                    }
                }
            };
        }
        data = {};
        if (options.preferences.taaz.enable && $("#thumbnails ul li.thumb.selected").hasClass("taaz-models-list")) {
            data = options.components.product.taaz.currentProduct();
            a = $("#thumbnails ul li.thumb.taaz-models-list").index($("#thumbnails ul li.thumb.selected"));
            data = {
                imageId: data.productImages[a],
                modelIndex: a,
                modelName: data.details.modelData[a].name,
                productShade: data.productName
            };
        }
        name = $.extend(data, name);
        if (value.storePickupData) {
            $.extend(name, value.storePickupData);
        }
        name = save(name, val);
        options.googletagmanagement.pushEventData(name);
        if (options.preferences.isUaEventRequired) {
            /** @type {string} */
            value = "none";
            if (void 0 != options.optsofferChange && val.id == options.optsofferChange.offerInfo.product) {
                value = options.optsofferChange.data.frequency.every;
            }
            if (0 != value && "none" != value) {
                options.googletagmanagement.pushEventData({
                    event: "uaevent",
                    ecommerce: "undefined",
                    eventCategory: "auto replenish",
                    eventAction: "pdp auto replenish selection",
                    eventLabel: val.name + "::" + value + " " + options.preferences.replenishIntervalUnit
                });
            }
        }
    }
    /**
     * @param {!Object} res
     * @param {!Object} obj
     * @return {?}
     */
    function save(res, obj) {
        res = res || {};
        if (options.preferences.enableEETagsForUpdateCartEvent && null != res && null != obj) {
            res.productPrice = null != obj.price ? obj.price.toString() : "";
            res.productName = obj.name || "";
        }
        return res;
    }
    /**
     * @param {!Object} data
     * @param {boolean} index
     * @param {number} value
     * @param {?} parent
     * @return {undefined}
     */
    function callback(data, index, value, parent) {
        if (index && "eeProductsOnPage" in options.page && "eeProductsInCart" in options.page) {
            var opts = options.page.eeProductsOnPage[index] || {};
            /** @type {!Array} */
            var groups = [];
            var a = cb(opts, parent);
            var currentProcesses = options.page.eeProductsOnPage.eeProductsInCart || [];
            /** @type {number} */
            var i = 0;
            for (; i < currentProcesses.length; i++) {
                if (currentProcesses[i].pid == index) {
                    a.dimension88 = currentProcesses[i].isProductEngraved;
                    if (currentProcesses[i].isVirtualPreviewFlag) {
                        a.dimension97 = currentProcesses[i].isVirtualPreviewFlag;
                    }
                }
            }
            a.quantity = value || 1;
            if (parent) {
                /** @type {string} */
                a.dimension74 = "Yes";
            }
            groups.push(a);
            if (options.preferences.enableStandardTags) {
                options.googletagmanagement.pushEventData({
                    event: "e_removeFromBag",
                    productName: opts.name,
                    productPrice: (opts.price * value).toFixed(2)
                });
            } else {
                data = {
                    event: "e_removeFromBag",
                    ecommerce: {
                        currencyCode: data.currencyCode || "",
                        remove: {
                            products: groups
                        }
                    }
                };
                if (options.preferences.enableEETagsForUpdateCartEvent) {
                    data.productPrice = null != opts.price ? opts.price.toString() : "";
                    data.productName = opts.name || "";
                }
                data = save(data, opts);
                if (parent) {
                    $.extend(data, parent);
                }
                options.googletagmanagement.pushEventData(data);
            }
        }
    }
    /**
     * @param {!Object} user
     * @return {undefined}
     */
    function successFunc(user) {
        var data;
        data = {
            event: "e_emailSubscribe",
            emailSubscriber: user.success,
            signupLocation: user.source,
            userID: user.gmUserID,
            email: user.gmEmail,
            emailHash: user.gmEmailHash
        };
        if (options.preferences.addGtmUiEmailId256SHA) {
            data.uiEmailId_256SHA = user.uiEmailId_256SHA;
        }
        options.googletagmanagement.pushEventData(data);
    }
    /**
     * @return {undefined}
     */
    function set() {
        options.ui.main.on("search.update", function(data, callback) {
            if (!(callback && "string" === typeof callback.extParams && "initialLoad" === callback.extParams || "object" != typeof data || "" == data.namespace)) {
                options.googletagmanagement.initCache();
                options.googletagmanagement.pushPageData();
            }
        });
        options.ui.main.on("dialog.opened", function() {
            options.googletagmanagement.initCache();
            options.googletagmanagement.pushPageData();
            options.googletagmanagement.initEvents();
        });
    }
    var $scope = {};
    var i;
    var z;
    var defaults = {
        global: ["visitor", "section"],
        product: ["product", "eEcommerce"],
        search: ["category", "search", "eEcommerce"],
        orderconfirmation: ["orderconfirmation", "eEcommerce"],
        checkout: ["checkout", "eEcommerce"],
        cart: ["checkout", "eEcommerce"],
        samples: ["checkout", "eEcommerce"],
        customerservice: ["contactusform"],
        contactusform: ["contactusform"],
        error: ["error"],
        giftcert: ["giftcert", "eEcommerce"],
        Favorites: ["eEcommerce"]
    };
    var data = {
        global: "accountRegistration eeEditProfile eeAddAddress eeAddCard addToBag addAllToBag addToWishlist clickOnTumblr addToFavoritelist removeWishlist removeFavorite notifyMe sendTofriend newsletterSubscription eeRemoveFromCartEvents eventSocialLinksClick eventSocialLinksGigyaClick quickView eeGiftBalance productLinks addToBagGiftCert updateGiftCert searchSuggestionTracking richSearch navigationClicks internalSearchSort liveChatInitiate liveChatInitiateOnOrderConf checkOrder searchAutoCompletion accountLogin updateQuantity youtubeVideo updateQuantityMiniCart".split(" "),
        product: ["clickOnSocialIframe", "productImageClicked", "tabEvent", "eeProductDetail", "samplesAdded"],
        checkout: ["checkoutEvents", "interceptAccountLogin"],
        cart: ["checkoutEvents", "interceptAccountLogin", "samplesAdded"],
        homepage: ["clickOnSocialIframe", "eePromoOnloadList", "eePromoClickList", "eePromoSlideChange"],
        storelocator: ["storeLocatorSearch"],
        category: ["eeProductImpressions", "eePromoOnloadList", "eePromoClickList"],
        search: ["eeProductImpressions", "eePromoOnloadList", "eePromoClickList"],
        orderconfirmation: ["eeTransaction", "eeOrderDiscount", "eeGiftWithPurchase"],
        giftcert: ["eeGiftcertDetail"],
        giftwithpurchase: ["gwpLandingPageTracking"],
        onestepcheckout: ["samplesAdded"]
    };
    var item = {
        visitor: "userType guestID userID hashedEmail h1 h2 geoIPLocation".split(" "),
        section: ["section", "subSection", "pageType", "categoryBreakout", "pgName"],
        product: "productSku productName productCategory productType productStatus productListing numberReviews percentRecommended numberStars".split(" "),
        eEcommerce: ["ecommerce"],
        category: ["categoryBreakout", "numberResults", "searchResultsBreakdown", "productType"],
        search: ["event", "numberResults", "searchResultsBreakdown", "searchTerm", "productType"],
        contactusform: ["event", "contactSubject"],
        checkout: ["cartAbandonner"],
        orderconfirmation: "shippingMethod shippingDiscount orderID orderDiscount egift giftWrap giftwrapPrice numSamples samples autoReplenish firstTimePurchase engraving".split(" "),
        error: ["event"]
    };
    var self = {
        addToBagType: {
            product: "Product page",
            quickview: "Quick shop",
            storefront: "Homepage",
            Cart: "Cart page",
            stickybanner: "Sticky Banner"
        },
        cartStepsNumber: {
            login: 1,
            samples: 2,
            processaddresses: 3,
            addresses: 2,
            processmethods: 4,
            methods: 3,
            processrevieworder: 5,
            revieworder: 4
        },
        cartStepsName: {
            login: options.resources.GTM_CHECKOUT_LOGIN,
            samples: options.resources.GTM_CHECKOUT_SAMPLES,
            processaddresses: options.resources.GTM_CHECKOUT_PROCESSADDRESSES,
            addresses: options.resources.GTM_CHECKOUT_ADDRESSES,
            processmethods: options.resources.GTM_CHECKOUT_PROCESSMETHODS,
            methods: options.resources.GTM_CHECKOUT_METHODS,
            processrevieworder: options.resources.GTM_CHECKOUT_PROCESSREVIEWORDER,
            revieworder: options.resources.GTM_CHECKOUT_REVIEWORDER
        }
    };
    $("body").append('<div style="position:fixed; top:0; left:0; overflow:hidden;"><input style="position:absolute; left:-300px;" type="text" value="" id="focus_retriever" /></div>');
    var fakeInputElement = $("#focus_retriever");
    /** @type {!Array} */
    var newNodeLists = [];
    /**
     * @param {!Object} event
     * @return {?}
     */
    window.onbeforeunload = function(event) {
        if (event = event || window.event) {
            /** @type {string} */
            event.returnValue = "na";
        }
        return "na";
    };
    /**
     * @return {undefined}
     */
    window.onbeforeunload = function() {
        if ("undefined" !== typeof gtmYTplayers) {
            /** @type {number} */
            var layer_i = 0;
            for (; layer_i < gtmYTplayers.length; layer_i++) {
                if (1 === gtmYTlisteners[layer_i].getPlayerState()) {
                    var parameters = gtmYTlisteners[layer_i].getVideoData();
                    superDataLayer.push({
                        event: "youtube",
                        action: "exit",
                        label: parameters.title + " (ID: " + parameters.video_id + ")"
                    });
                }
            }
        }
    };
    $(document).on("gtm.initialized", function() {
        var i;
        i = options.page.ns;
        var width = options.preferences.youtubeAllowedNamespaces;
        var height = options.preferences.youtubeUnallowedNamespaces;
        /** @type {boolean} */
        i = i ? !width && height ? -1 === height.indexOf(i) : width ? -1 < width.indexOf(i) : true : true;
        if (i) {
            if ("undefined" !== typeof options.preferences.enableDeferredScript && options.preferences.enableDeferredScript) {
                loraDeferredScripts.push({
                    id: "iframe_api",
                    execute: _initYTAPI
                });
            } else {
                _initYTAPI();
            }
        }
    });
    var list = {
        addToBag: function(item) {
            $(document).on("product.addToCartTracking", function(result, data) {
                if (null != $scope && "source" in $scope && "wishlist" == $scope.source && null != item) {
                    return options.page && "eeProductsOnPage" in options.page && null != options.page.eeProductsOnPage && (result = cb(options.page.eeProductsOnPage && options.page.eeProductsOnPage[data.productID]), options.googletagmanagement.pushEventData({
                        event: "e_updateWishlistQty",
                        productName: result.name,
                        quantity: data.qty
                    })), false;
                }
                if (data.storePickupData) {
                    item.storePickupData = data.storePickupData;
                }
                if (!(result = data.productID)) {
                    try {
                        result = data.trackingJSON.productID;
                    } catch (R) {
                        /** @type {null} */
                        result = null;
                    }
                }
                /** @type {string} */
                data.productID = result;
                result = $("#product-dynamic-tracking-" + data.productID);
                if (null != item) {
                    result = result.data("fromated-price") || data.price || item.unitPrice;
                    if (null != result) {
                        result.toString().replace(/[^\d.]/g, "");
                    }
                    result = $(".product-variations").find("li.selected").find(".swatch_text_color").text();
                    var coloring;
                    /** @type {string} */
                    coloring = null != $scope && "source" in $scope && "update" == $scope.source ? "e_updateBag" : "currentPage" in options.page && -1 < options.page.currentPage.indexOf("wishlist") || "currentPgName" in options.page && -1 < options.page.currentPgName.indexOf("account") ? "e_buyFromWishlist" : "e_addToBag";
                    init(coloring, item, [{
                        pid: data.productID || item.masterProductID || item.productID,
                        qty: data.qty,
                        variant: result || ""
                    }]);
                    return false;
                }
            });
            $(document).on("product.addToCartEngravingTracking", function(result, event) {
                if (!(result = event.productID)) {
                    try {
                        result = event.trackingJSON.productID;
                    } catch (L) {
                        /** @type {null} */
                        result = null;
                    }
                }
                /** @type {!Array} */
                event.productID = result;
                if (null != item) {
                    /** @type {!Array} */
                    result = [];
                    var a;
                    var quantity;
                    quantity = event.quantity;
                    a = "eeProductsOnPage" in options.page && options.page.eeProductsOnPage[event.productID];
                    /** @type {string} */
                    a.dimension88 = "Yes";
                    a = cb(a, {
                        quantity: quantity
                    });
                    result.push(a);
                    options.googletagmanagement.pushEventData({
                        event: "event" in event ? event.event : "e_addToBag",
                        ecommerce: {
                            currencyCode: item.currencyCode,
                            add: {
                                products: result,
                                quantity: quantity
                            }
                        }
                    });
                }
                return false;
            });
        },
        addAllToBag: function(res) {
            if (null !== res) {
                $(document).on("product.addedProductSetToCart", function(callback, result) {
                    result = result || {};
                    callback = (JSON.parse(result.products) || {}).productSetProducts || [];
                    init("e_addAllToBag", res, callback, res.productName);
                });
            }
        },
        addToBagGiftCert: function(self) {
            if (null !== self) {
                $(document).on("giftcert.addedToCart", function(extra, result) {
                    result = result || {};
                    extra = result.amount ? result.amount.toString().replace(/[^\d.]/g, "") : "";
                    /** @type {!Array} */
                    result = [];
                    result.push({
                        name: self.productName,
                        productCategory: self.productCategory,
                        pageType: self.pageType,
                        productType: self.productType,
                        price: extra
                    });
                    options.googletagmanagement.pushEventData({
                        event: "e_addGiftcert",
                        ecommerce: {
                            currencyCode: self.currencyCode || "",
                            add: {
                                products: result
                            }
                        }
                    });
                });
            }
        },
        updateQuantityMiniCart: function(exports) {
            $(document).on("change", ".cart_action_checkout .quantity_select", function() {
                if (exports && "eeProductsOnPage" in options.page && "eeProductsInCart" in options.page.eeProductsOnPage) {
                    var id = $(this).attr("data-productid");
                    var data = $(this).parents(".mini_cart_product").find("select.quantity_select option:selected").val();
                    var set = options.page.eeProductsOnPage.eeProductsInCart || [];
                    var newActionsTemplate;
                    var qty;
                    /** @type {number} */
                    var i = 0;
                    for (; i < set.length; i++) {
                        if (set[i].pid == id) {
                            qty = set[i].qty;
                            newActionsTemplate = set[i].autoReplenishmentInterval;
                        }
                    }
                    if (set = $(this).closest(".cart_row").data("selectedStoreInfo")) {
                        exports.storePickupData = set;
                    }
                    $scope.pid = id;
                    $scope.qty = qty;
                    if (options.preferences.enableEETagsForUpdateCartEvent) {
                        /** @type {string} */
                        $scope.source = "update";
                        $scope.newQuantity = data;
                        $scope.autoReplenishmentInterval = newActionsTemplate;
                        init("e_updateBag", exports, [{
                            pid: id,
                            qty: data
                        }]);
                    } else {
                        /** @type {!Array} */
                        data = [{
                            pid: id,
                            qty: data
                        }];
                        id = options.page.eeProductsOnPage && options.page.eeProductsOnPage[data[0].pid];
                        id.quantity = data[0].qty || 1;
                        data = options.page.eeProductsOnPage && options.page.eeProductsOnPage[$scope.pid];
                        if (options.preferences.enableStandardTags) {
                            /** @type {({event: string, productName: ?, productPrice: number})} */
                            id = $scope.qty > id.quantity ? {
                                event: "e_removeFromBag",
                                productName: data.name,
                                productPrice: data.price * ($scope.qty - id.quantity)
                            } : {
                                event: "e_addToBag",
                                productName: data.name,
                                productPrice: id.price * (id.quantity - $scope.qty)
                            };
                            options.googletagmanagement.pushEventData(id);
                        }
                    }
                    return false;
                }
            });
        },
        eeOrderDiscount: function(data) {
            var $refCode;
            if (options.preferences.enableStandardTags && null != data.discountCode) {
                /** @type {number} */
                var i = 0;
                for (; i < data.discountCode.length; i++) {
                    $refCode = data.discountCode[i].code;
                    options.googletagmanagement.pushEventData({
                        event: "e_discount",
                        transactionId: data.transactionId,
                        discountCode: $refCode,
                        orderDiscount: data.discountCode[i].discount
                    });
                }
            }
            if (options.preferences.enableStandardTags && null != data.productDiscount) {
                /** @type {number} */
                i = 0;
                for (; i < data.productDiscount.length; i++) {
                    $refCode = data.productDiscount[i].code;
                    options.googletagmanagement.pushEventData({
                        event: "e_discount",
                        transactionId: data.transactionId,
                        discountCode: $refCode,
                        orderDiscount: data.productDiscount[i].discount
                    });
                }
            }
        },
        eeGiftWithPurchase: function(req) {
            if ("undefined" !== typeof req.ecommerce && "purchase" in req.ecommerce) {
                req.ecommerce.purchase.products.forEach(function(self) {
                    if ("gift with purchase" == self.variant) {
                        options.googletagmanagement.pushEventData({
                            event: "uaevent",
                            eventCategory: "giftWithPurchase",
                            eventAction: "purchase",
                            eventLabel: self.name
                        });
                    }
                });
            }
        },
        samplesAdded: function() {
            $(document).on("click", ".samples_add_button ,.add_sample_btn", function() {
                var label = $(this).attr("data-samplename") || $(this).parents("li").find(".sample_title").text().trim();
                if (void 0 != label) {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "sample",
                        eventAction: "select::request sample",
                        eventLabel: label,
                        ecommerce: void 0
                    });
                }
            });
        },
        updateGiftCert: function(value) {
            $(document).on("giftcert.handleCartUpdate", function(plist, data) {
                data = data.giftCertForm.find("#dwfrm_giftcert_purchase_amount").val() || "";
                /** @type {!Array} */
                plist = [];
                data = {
                    name: "egift card",
                    productCategory: "egift card",
                    pageType: "Product",
                    productType: "egift card",
                    price: data ? data.toString().replace(/[^\d.]/g, "") : ""
                };
                plist.push(data);
                options.googletagmanagement.pushEventData({
                    event: "e_updateGiftcert",
                    ecommerce: {
                        currencyCode: value.currencyCode || "",
                        add: {
                            products: plist
                        }
                    }
                });
            });
        },
        productLinks: function(config) {
            if (null !== config) {
                $(document).on("click", ".product_image_wrapper, .product_name, .button_shop_now, .learnmorebutton", function() {
                    var ret;
                    var groups;
                    ret = $(this).closest(".product_tile").attr("data-itemid");
                    groups = "listName" in config ? config.listName : $(this).parents(".recommendations_block").find("h2").first().text();
                    config.listName = groups;
                    $(this).closest(".product_tile").find(".b-product_tile-subtitle-link").text().trim();
                    if (void 0 == ret && -1 < ["cart", "checkout"].indexOf(options.page.currentPage)) {
                        ret = $(this).find(".product_id").find(".product_id_value").text();
                        $(this).find(".product_id").find(".product_subtitle").text();
                    }
                    if (ret && "eeProductsOnPage" in options.page) {
                        /** @type {!Array} */
                        groups = [];
                        var h = options.page.eeProductsOnPage[ret] || {};
                        ret = cb(h);
                        if ($("body").hasClass("clp")) {
                            var g = $(".search_result_items  .product_tile_wrapper");
                            h = g.find("[data-itemid=" + h.id + "]").parent();
                            ret.position = g.index(h) + 1;
                        }
                        groups.push(ret);
                        ret = "ecommerce" in config && 0 < config.ecommerce.impressions.length || "advanceEcommerce" in config && 0 < config.advanceEcommerce.advanceImpressions.length ? "ecommerce" in config && 0 < config.ecommerce.impressions.length ? config.ecommerce.impressions.pop().list : config.advanceEcommerce.advanceImpressions.pop().list : config.listName;
                        options.googletagmanagement.pushEventData({
                            event: "e_productClick",
                            ecommerce: {
                                click: {
                                    actionField: {
                                        list: ret
                                    },
                                    products: groups
                                }
                            }
                        });
                    }
                });
            }
        },
        tabEvent: function(res) {
            var content = $("#product-dynamic-tracking-" + (options.page.currentProduct && options.page.currentProduct.masterID));
            if (options.preferences.enableTabEvent) {
                options.googletagmanagement.pushEventData({
                    event: "e_tab",
                    productTab: $(".product_tabs li.ui-state-active,.product_tabs li.selected").find("a").first().text().trim(),
                    productName: content.data("product-name") || res.productName || ""
                });
            }
            $(document).on("click", ".product_tabs li", function() {
                options.googletagmanagement.pushEventData({
                    event: "e_tab",
                    productTab: $(this).find("a").text().trim(),
                    productName: content.data("product-name") || res.productName || ""
                });
            });
        },
        addToWishlist: function() {
            $(document).on("click", ".wishlist_action", function() {
                var result;
                result = -1 < ["cart", "checkout"].indexOf(options.page.currentPage) ? $(this).attr("data-pid") : $(this).parents("#pdpMain").find("input[name=pid]").val();
                result = cb(options.page.eeProductsOnPage[result] || {});
                if (null != result) {
                    options.googletagmanagement.pushEventData({
                        event: "e_addWish",
                        productName: result.name || "",
                        price: result.price || "0"
                    });
                }
            });
        },
        addToFavoritelist: function() {
            $(document).on("click", ".favorites_action", function() {
                var val = $(this).attr("data-pid");
                if (void 0 == val) {
                    val = $(this).attr("href").match(/(?!.+pid)=[^&]+/)[0].split("=")[1];
                }
                val = cb(options.page.eeProductsOnPage[val] || {});
                if (null != val) {
                    options.googletagmanagement.pushEventData({
                        event: "e_addFav",
                        favoriteType: "products",
                        productName: val.name || "",
                        price: val.price || "0"
                    });
                }
            });
        },
        removeWishlist: function(canCreateDiscussions) {
            $(document).on("click", ".button[name$=_deleteItem]", function() {
                if (null != canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_removeWish",
                        productName: $(this).closest("tr").find(".product_name").text() || $(this).closest(".item_details").find(".product_name").text() || ""
                    });
                }
            });
        },
        removeFavorite: function(data) {
            $(document).on("click", ".product_favorite_remove", function() {
                if (null != data) {
                    options.googletagmanagement.pushEventData({
                        event: "e_removeFav",
                        favoriteType: "products",
                        productName: $(this).closest(".product_tile").find(".product_name").text() || ""
                    });
                }
            });
        },
        notifyMe: function(pkg) {
            $(document).on("notifyme_done", function(canCreateDiscussions, opts) {
                if (opts) {
                    options.googletagmanagement.pushEventData({
                        event: "e_stockReminder",
                        productName: opts.productName || pkg.productName || ""
                    });
                }
            });
        },
        sendTofriend: function() {
            $(document).on("click", ".send_to_friend_page .send_button", function() {
                var res;
                var e = $(this).parents("#send-to-friend-form").find("input[name='source']").attr("value");
                var i = $(this).parents("#send-to-friend-form").find("input[name='pid']").val();
                if (void 0 != i) {
                    res = options.page.eeProductsOnPage[i];
                    res = cb(res);
                }
                if (void 0 != e && "favoriteProductsList" in options.page) {
                    /** @type {!Array} */
                    e = [];
                    /** @type {number} */
                    i = 0;
                    for (; i < options.page.favoriteProductsList.toString().split(",").length; i++) {
                        res = options.page.eeProductsOnPage[options.page.favoriteProductsList.toString().split(",")[i]] || {};
                        res = cb(res);
                        e.push(res.name);
                    }
                    options.googletagmanagement.pushEventData({
                        event: "e_shareFav",
                        productName: e.join("|")
                    });
                } else {
                    if (void 0 != e && "wishlist" == e) {
                        options.googletagmanagement.pushEventData({
                            event: "e_shareWish",
                            productName: res.name || ""
                        });
                    } else {
                        if (void 0 != i) {
                            options.googletagmanagement.pushEventData({
                                event: "e_shareFav",
                                productName: res.name || ""
                            });
                        }
                    }
                }
            });
        },
        quickView: function(name) {
            $(document).on("openQuickview.dialog", function(record, input) {
                if (null != name && "quickviewUrl" in input && input.quickviewUrl) {
                    if (null != input.quickviewUrl.match(/uuid=([^&]+)/) && null != input.quickviewUrl.match(/quantity=([^&]+)/)) {
                        /** @type {string} */
                        $scope.source = "update";
                        $scope.pid = input.quickviewUrl.match(/(?!.*\/)[^.]+/);
                        /** @type {number} */
                        $scope.qty = parseInt(input.quickviewUrl.match(/quantity=([^&]+)/)[1]);
                    }
                    if (null != input.quickviewUrl.match(/productlistowner=([^&]+)/)) {
                        /** @type {string} */
                        $scope.source = "wishlist";
                    }
                    input = 0 < input.quickviewUrl.indexOf(".html") ? input.productId || input.quickviewUrl.match(/(?!.*\/)[^.]+/) : input.quickviewUrl.match(/(?!.+pid)=[^&]+/)[0].split("=")[1];
                    record = $("#product-dynamic-tracking-" + input);
                    var section = record.data("top-category");
                    var index = record.data("category");
                    var product_name = record.data("product-name");
                    var discount_amount = record.data("fromated-price");
                    var p = record.data("product-number-reviews");
                    var n = record.data("product-number-stars");
                    var q = record.data("product-listing");
                    var u = record.data("product-status");
                    var productType = record.data("product-type");
                    var oilSections = record.data("product-section");
                    var brand = record.data("product-brand");
                    var breakout = record.data("category-breakout");
                    name.quickView = {
                        sku: input,
                        category: section,
                        subcategory: index,
                        name: product_name,
                        price: discount_amount,
                        numberReviews: p,
                        numberStars: n,
                        productListing: q,
                        productStatus: u,
                        productType: productType,
                        pageType: "Product Quickview",
                        subSection: index,
                        brand: brand,
                        breakout: breakout,
                        section: oilSections
                    };
                    /** @type {!Array} */
                    section = [];
                    section.push(input);
                    /** @type {!Array} */
                    input = [];
                    var value;
                    var data;
                    /** @type {number} */
                    index = 0;
                    for (; index < section.length; index++) {
                        value = options.page.eeProductsOnPage[section[index]] || {};
                        data = cb(value);
                        if (options.preferences.addDimension22) {
                            data.dimension22 = value.variantID;
                        }
                        input.push(data);
                    }
                    data = {
                        event: "vpv_quickshop",
                        virtualPage: "/quickshop" + name.page,
                        virtualTitle: "QUICK SHOP | " + name.quickView.name || data.name,
                        productName: name.quickView.name || data.name,
                        productCategory: data.category || "",
                        productStatus: name.quickView.productStatus || "",
                        productListing: name.quickView.productListing || "",
                        numberReviews: name.quickView.numberReviews ? name.quickView.numberReviews.toString() : "",
                        numberStars: name.quickView.numberStars ? name.quickView.numberStars.toString() : "",
                        productType: name.quickView.productType || "",
                        section: name.quickView.section || "",
                        subSection: name.quickView.subSection || "",
                        brand: name.quickView.brand || "",
                        categoryBreakout: name.quickView.breakout || "",
                        pageType: name.quickView.pageType || "",
                        UPC: name.quickView.sku,
                        ecommerce: {
                            detail: {
                                products: input
                            }
                        }
                    };
                    if (options.preferences.addDimension22) {
                        data.dimension22 = value.variantID;
                    } else {
                        data.productSKU = name.quickView.sku;
                    }
                    options.googletagmanagement.pushEventData(data);
                    value = $(".product_tabs li.ui-state-active,.product_tabs li.selected").find("a").first().text().trim();
                    if (void 0 != value && "" != value && options.preferences.enableTabEvent) {
                        options.googletagmanagement.pushEventData({
                            event: "e_tab",
                            productTab: $(".product_tabs li.ui-state-active,.product_tabs li.selected").find("a").first().text().trim(),
                            productName: record.data("product-name") || name.productName || ""
                        });
                    }
                }
            });
            $(document).on("click", "#QuickViewDialog .product_tabs li", function() {
                var content = $("#product-dynamic-tracking-" + (options.page.currentProduct && options.page.currentProduct.masterID));
                options.googletagmanagement.pushEventData({
                    event: "e_tab",
                    productTab: $(this).find("a").text().trim(),
                    productName: content.data("product-name") || name.productName || ""
                });
            });
        },
        updateQuantity: function(input) {
            $(document).on("change", "#cart-items-form .quantity_select", function() {
                if (input && "eeProductsOnPage" in options.page && "eeProductsInCart" in options.page) {
                    var $memoCell = $(this).closest(".cart_row");
                    var pid = $memoCell.find(".product_id_value").text().trim() || $(this).data("ogProduct");
                    var qty = $memoCell.find(".quantity_select option:selected").val();
                    var opt_pathToBitJS = $memoCell.find(".attribute_size .value").text().trim();
                    var data = options.page.eeProductsInCart || [];
                    var newActionsTemplate;
                    var $qty;
                    /** @type {number} */
                    var i = 0;
                    for (; i < data.length; i++) {
                        if (data[i].pid == pid) {
                            $qty = data[i].qty;
                            newActionsTemplate = data[i].autoReplenishmentInterval;
                        }
                    }
                    /** @type {string} */
                    $scope.source = "update";
                    $scope.pid = pid;
                    $scope.qty = $qty;
                    $scope.autoReplenishmentInterval = newActionsTemplate;
                    $scope.newQuantity = qty;
                    if ((data = $memoCell.data("selectedStoreInfo")) && data.PUiSName) {
                        input.storePickupData = $memoCell.data("selectedStoreInfo");
                    }
                    init("e_updateBag", input, [{
                        pid: pid,
                        qty: qty,
                        variant: opt_pathToBitJS || ""
                    }]);
                    return false;
                }
            });
        },
        newsletterSubscription: function(obj) {
            $(document).on("newsletter.success", function(value, data) {
                value = "subscribedEmail" in data ? data.subscribedEmail : "";
                var html = $(".js_newsletter_subscribe_form input").val();
                if (null != obj) {
                    obj.source = data.source;
                    /** @type {string} */
                    obj.success = "true";
                    obj.gmEmail = html || value || "";
                    obj.gmEmailHash = obj.gmEmail ? hex_md5(obj.gmEmail) : "";
                    obj.gmUserID = obj.guestID || obj.userID || "";
                    if (options.preferences.addGtmUiEmailId256SHA) {
                        obj.uiEmailId_256SHA = data.uiEmailId_256SHA;
                    }
                    successFunc(obj);
                }
            });
            $(document).on("newsletter.fail", function(canCreateDiscussions, data) {
                if (null != obj) {
                    obj.source = data.source;
                    if ("error" in data.response && null != data.response.error && -1 != data.response.error.indexOf("already")) {
                        /** @type {string} */
                        obj.source = "Already in Database Notification";
                        /** @type {string} */
                        obj.success = "true";
                    } else {
                        /** @type {string} */
                        obj.success = "false";
                    }
                    obj.gmEmail = "subscribedEmail" in data ? data.subscribedEmail : "";
                    obj.gmEmailHash = obj.gmEmail ? hex_md5(obj.gmEmail) : "";
                    obj.gmUserID = obj.guestID || obj.userID || "";
                    if (options.preferences.addGtmUiEmailId256SHA) {
                        obj.uiEmailId_256SHA = data.response.uiEmailId_256SHA;
                    }
                    successFunc(obj);
                }
            });
        },
        navigationClicks: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                $(document).on("click", ".navigation a", function() {
                    /** @type {string} */
                    var moveMenu = "";
                    if (0 != $(this).parents(".level_1_list_item").length) {
                        moveMenu = moveMenu + $(this).parents(".level_1_list_item").find(".level_1_list_item_link").text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    }
                    if (0 != $(this).parents(".level_2_list_item").length) {
                        moveMenu = moveMenu + (" > " + $(this).parents(".level_2_list_item").find(".level_2_list_item_link").text().replace(/(\r\n|\n|\r)/gm, "").trim());
                    }
                    if (0 != $(this).parents(".level_3_list_item").length) {
                        moveMenu = moveMenu + (" > " + $(this).parents(".level_3_list_item").find(".level_3_list_item_link").text().replace(/(\r\n|\n|\r)/gm, "").trim());
                    }
                    options.googletagmanagement.pushEventData({
                        event: "e_nav",
                        menuType: "Main Menu",
                        menu: moveMenu
                    });
                });
                $(document).on("click", ".footer_navigation_asset a", function() {
                    var fontMenu = $(this).text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    options.googletagmanagement.pushEventData({
                        event: "e_nav",
                        menuType: "Footer Menu",
                        menu: fontMenu
                    });
                });
                $(document).on("click", ".utility_navigation_list a", function() {
                    var fontMenu = $(this).text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    options.googletagmanagement.pushEventData({
                        event: "e_nav",
                        menuType: "Header Menu",
                        menu: fontMenu
                    });
                });
                $(document).on("click", ".account-navigation-registered a", function() {
                    var fontMenu = $(this).text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    options.googletagmanagement.pushEventData({
                        event: "e_nav",
                        menuType: "Account Menu",
                        menu: fontMenu
                    });
                });
            }
        },
        internalSearchSort: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                $(document).on("click", ".refinement_list_link", function() {
                    var d = $(this).text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    var category = $(this).parents(".refinement").find("h3").text().replace(/(\r\n|\n|\r)/gm, "").trim() || "";
                    options.googletagmanagement.pushEventData({
                        event: "e_searchFilter",
                        filterSelected: d,
                        filterCategory: category
                    });
                });
                $("body .main").on("change", "select.sort_by_list", function() {
                    var d = $(this).find("option:selected").first().text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    options.googletagmanagement.pushEventData({
                        event: "e_searchSort",
                        filterSelected: d,
                        filterCategory: "Sort By"
                    });
                });
            }
        },
        eventSocialLinksClick: function(canCreateDiscussions) {
            options.ui.main.on("sociallinks.click", function(url, socialNetwork) {
                url = $(".product_social_networking").find(".txtGigyaShareBarLinkUrl").val();
                if (null != canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_social",
                        socialNetwork: socialNetwork.text,
                        socialAction: "Share",
                        socialTarget: url
                    });
                }
            });
        },
        eventSocialLinksGigyaClick: function(background) {
            $(document).on("click", ".product_social_networking .gig-button-container", function() {
                var value = $(this).attr("class").match(/(pinterest|facebook|twitter|tumblr)/);
                var url = $(this).parents(".product_social_networking").find(".txtGigyaShareBarLinkUrl").val();
                if (null != background && value && value.length) {
                    options.googletagmanagement.pushEventData({
                        event: "e_social",
                        socialAction: "share",
                        socialNetwork: _sites[value[1]],
                        socialTarget: url
                    });
                }
            });
        },
        storeLocatorSearch: function() {
            $(document).on("storelocator.search", function(canCreateDiscussions, data) {
                options.googletagmanagement.pushEventData({
                    event: "e_storeLocator",
                    locatorSearchTerms: data.keyword,
                    locatorResults: data.resultNumber
                });
            });
        },
        clickOnSocialIframe: function(testItemData) {
            if ($("html").hasClass("lt-ie9")) {
                fakeInputElement.on("blur", function() {
                    options.googletagmanagement.social.processClickOnSocialIframe(testItemData);
                });
            } else {
                try {
                    $(top).on("blur", function() {
                        options.googletagmanagement.social.processClickOnSocialIframe(testItemData);
                    });
                } catch (M) {}
            }
        },
        clickOnTumblr: function(canCreateDiscussions) {
            $(document).on("click", ".addthis_button_tumblr", function(repObject) {
                if (null !== canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_social",
                        socialNetwork: "Tumblr",
                        socialAction: "like",
                        socialTarget: repObject.href || ""
                    });
                }
            });
        },
        accountRegistration: function(data) {
            if (null != data && "event" in data && "accountCreation" == data.event) {
                var newValue = "birthday" in data && !options.util.empty(data.birthday) ? data.birthday : "";
                options.googletagmanagement.pushEventData({
                    event: "e_accountCreated",
                    accountType: data.accountType,
                    emailSubscriber: data.emailSubscriber,
                    smsSubscriber: data.smsSubscriber,
                    smsNotifications: data.smsNotifications,
                    dob: newValue,
                    emailAction: data.emailAction,
                    userID: data.accountCustomerId,
                    email: data.email || "",
                    emailHash: data.email ? hex_md5(data.email) : ""
                });
                /** @type {string} */
                data.source = "Account Creation";
                data.success = data.emailSubscriber;
                data.gmEmail = data.email || "";
                data.gmEmailHash = data.gmEmail ? hex_md5(data.gmEmail) : "";
                data.gmUserID = "userID" in data ? data.userID : "";
                if ("true" == data.emailSubscriber) {
                    successFunc(data);
                }
            }
        },
        eeEditProfile: function(data) {
            if (null != data && "userType" in data && "member" === data.userType) {
                $(document).on("click", "#RegistrationForm .submit_button", function() {
                    var result = $("input[name$=profile_customer_addtoemaillist]").length ? $("input[name$=profile_customer_addtoemaillist]").prop("checked").toString() || "false" : "";
                    var id = $("input[name$=profile_customer_sendmobilealerts]").length ? $("input[name$=profile_customer_sendmobilealerts]").prop("checked").toString() || "false" : "";
                    /** @type {number} */
                    var h = void 0 != id && "true" == id ? 1 : 0;
                    var ret = void 0 != result ? result : "";
                    id = {
                        event: "e_accountAction",
                        interactionType: $(this).parents(".main").find("h1").first().text().trim(),
                        emailSubscriber: result,
                        smsSubscriber: id,
                        smsNotifications: h,
                        emailAction: ret
                    };
                    options.googletagmanagement.pushEventData(id);
                    /** @type {string} */
                    data.source = "Personal Info Update";
                    data.success = result;
                    data.gmEmail = data.email || "";
                    data.gmEmailHash = data.gmEmail ? hex_md5(data.gmEmail) : "";
                    data.gmUserID = "userID" in data ? data.userID : "";
                    if ("true" == result) {
                        successFunc(data);
                    }
                });
            }
        },
        eeAddAddress: function(event) {
            if (null != event && "userType" in event && "member" === event.userType) {
                $(document).on("click", "#edit-address-form .submit_button", function() {
                    var questionType = $(".account_address_detail_page h1").text() || "";
                    var data = $("input[name=dwfrm_profile_address_city]").val() || "";
                    var filepath = $("input[name=dwfrm_profile_address_zip]").val() || "";
                    var modelValue = $("#dwfrm_profile_address_states_state").val() || "";
                    var countryCode = $("#dwfrm_profile_address_country").val() || "";
                    options.googletagmanagement.pushEventData({
                        event: "e_accountAction",
                        interactionType: questionType,
                        city: data,
                        zip: filepath,
                        state: modelValue,
                        country: countryCode
                    });
                });
            }
        },
        eeAddCard: function(event) {
            if (null != event && "userType" in event && "member" === event.userType) {
                $(document).on("click", "#newcreditcard .submit_button", function() {
                    if ($("#newcreditcard").valid()) {
                        var data = {
                            event: "e_accountAction",
                            interactionType: $(".account_payment_details_page h1").text()
                        };
                        options.googletagmanagement.pushEventData(data);
                    }
                });
            }
        },
        accountLogin: function(name) {
            if (null != name && "loginStatus" in name && null != name.loginStatus && -1 == ["cart", "checkout"].indexOf(options.page.currentPage)) {
                options.googletagmanagement.pushEventData({
                    event: "e_login",
                    loginStatus: name.loginStatus
                });
            }
        },
        interceptAccountLogin: function(data) {
            if (null != data && "loginStatus" in data && null != data.loginStatus && 2 == data.stepNumber) {
                options.googletagmanagement.pushEventData({
                    event: "e_login",
                    loginStatus: data.loginStatus
                });
            }
        },
        eeGiftBalance: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                $(document).on("click", ".js_checkBalance, #CheckBalanceButton", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_giftBalance"
                    });
                });
            }
        },
        eeRemoveFromCartEvents: function(s) {
            if (null !== s && ($(document).on("minicart.lineItemRemoved", function(b, data) {
                    if (data && data.pid && !data.isGiftCert) {
                        callback(s, data.pid, data.qty, data.selectedStoreInfo);
                    }
                }), -1 < ["cart", "checkout"].indexOf(options.page.currentPage))) {
                $("#cart-items-form, form.submit_order").on("click", ".item_user_actions button", function() {
                    if (void 0 != $(this).data("giftcert-id")) {
                        var value = $(this).parents(".rowgiftcert").find(".item_price").text().trim();
                        value = value ? value.toString().replace(/[^\d.]/g, "") : "";
                        /** @type {!Array} */
                        var groups = [];
                        groups.push({
                            name: "egift card",
                            productCategory: "egift card",
                            pageType: "Product",
                            productType: "egift card",
                            price: value
                        });
                        options.googletagmanagement.pushEventData({
                            event: "e_removeFromBag",
                            ecommerce: {
                                currencyCode: s.currencyCode || "",
                                remove: {
                                    products: groups
                                }
                            }
                        });
                    } else {
                        value = $(this).parents(".cart_row");
                        groups = value.find("select.quantity_select, input.quantity_select").val() || 1;
                        var firstGroup = value.data("selectedStoreInfo");
                        s.variant = value.find(".attribute .value").text().trim() || "";
                        callback(s, $(this).data("pid"), groups, firstGroup);
                    }
                });
            }
        },
        checkoutEvents: function(canCreateDiscussions) {
            if (null !== canCreateDiscussions) {
                $(document).on("spcheckout.saveObj", function(item, context) {
                    var point;
                    item = window.location.href.replace(/.+\/+\/[^\/]+/, "").replace("on/demandware.store/", "") + "?stepName=" + self.cartStepsName[context.currentStep] + "&checkout=" + self.cartStepsNumber[context.currentStep];
                    /** @type {number} */
                    options.page.trackerData.page = item;
                    if ("eeProductsOnPage" in options.page && "eeProductsInCart" in options.page) {
                        /** @type {!Array} */
                        point = [];
                        item = options.page.eeProductsInCart || [];
                        var data;
                        /** @type {number} */
                        var i = 0;
                        for (; i < item.length; i++) {
                            data = options.page.eeProductsOnPage[item[i].pid] || {};
                            if ("name" in data && "giftcertificate" === data.name) {
                                data = {
                                    name: "egift card",
                                    productCategory: "egift card",
                                    pageType: "Product",
                                    productType: "egift card",
                                    price: data.price
                                };
                            } else {
                                data = cb(data);
                                data.dimension88 = item[i].isProductEngraved;
                                if (item[i].isVirtualPreviewFlag) {
                                    data.dimension97 = item[i].isVirtualPreviewFlag;
                                }
                                data.quantity = item[i].qty;
                                data.coupon = item[i].coupon ? item[i].coupon : "";
                                data.metric3 = item[i].productDiscount ? item[i].productDiscount.toString() : "";
                            }
                            point.push(data);
                        }
                    }
                    point = {
                        event: "vpv_checkout",
                        virtualTitle: self.cartStepsName[context.currentStep],
                        virtualPage: "Cart-Show/" + self.cartStepsName[context.currentStep],
                        ecommerce: {
                            checkout: {
                                actionField: {
                                    step: self.cartStepsNumber[context.currentStep]
                                },
                                products: point
                            }
                        }
                    };
                    if ("loginsuccess" == context.currentStep) {
                        options.googletagmanagement.pushEventData({
                            event: "e_login",
                            loginStatus: "regular"
                        });
                    } else {
                        if ("samples" == context.currentStep) {
                            options.googletagmanagement.pushEventData(point);
                        } else {
                            if ("processaddresses" == context.currentStep || "addresses" == context.currentStep) {
                                options.googletagmanagement.pushEventData(point);
                            } else {
                                if ("processmethods" == context.currentStep || "methods" == context.currentStep) {
                                    options.googletagmanagement.pushEventData(point);
                                } else {
                                    if ("processrevieworder" == context.currentStep || "revieworder" == context.currentStep) {
                                        options.googletagmanagement.pushEventData(point);
                                    } else {
                                        if ("login" == context.currentStep) {
                                            options.googletagmanagement.pushEventData(point);
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
            }
        },
        eeProductDetail: function(canCreateDiscussions) {
            if (canCreateDiscussions && "eeProductsOnPage" in options.page) {
                options.googletagmanagement.pushEventData({
                    event: "e_ProductDetail"
                });
            }
        },
        eeProductImpressions: function(canCreateDiscussions) {
            if ("advanceEcommerce" in canCreateDiscussions && 0 < canCreateDiscussions.advanceEcommerce.advanceImpressions.length) {
                /** @type {!Array} */
                var message = [];
                /** @type {number} */
                var kind = 1;
                /** @type {number} */
                i = 0;
                for (; i < canCreateDiscussions.advanceEcommerce.advanceImpressions.length; i++) {
                    message.push(canCreateDiscussions.advanceEcommerce.advanceImpressions[i]);
                    if (0 == (i + 1) % 14) {
                        if (null != canCreateDiscussions) {
                            message = {
                                event: "e_productImpression_" + kind,
                                ecommerce: {
                                    impressions: message
                                }
                            };
                            options.googletagmanagement.pushEventData(message);
                            /** @type {!Array} */
                            message = [];
                        }
                        kind++;
                    }
                }
                if (null != message && 0 < message.length && null != canCreateDiscussions) {
                    message = {
                        event: "e_productImpression_" + kind,
                        ecommerce: {
                            impressions: message
                        }
                    };
                    options.googletagmanagement.pushEventData(message);
                }
            }
        },
        eeGiftcertDetail: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                options.googletagmanagement.pushEventData({
                    event: "e_ProductDetail"
                });
            }
        },
        eeTransaction: function(canCreateDiscussions) {
            if (canCreateDiscussions && "eeProductsOnPage" in options.page && "eeProductsInCart" in options.page) {
                options.googletagmanagement.pushEventData({
                    event: "e_Transaction"
                });
            }
        },
        eePromoOnloadList: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                /** @type {!Array} */
                var transactionIDList = [];
                $("body").find("a[data-contentType],a[data-contentName],a[data-contentID],a[data-contentPosition],area[data-contentType],area[data-contentName],area[data-contentID],area[data-contentPosition]").each(function() {
                    var data = $(this).attr("data-contentName") || "";
                    var d = $(this).attr("data-contentType") || "";
                    var location = $(this).attr("data-contentPosition") || "";
                    var id = $(this).attr("data-contentID") || "";
                    data = {
                        name: data || "",
                        position: location || "",
                        id: id || "",
                        creative: d || ""
                    };
                    if (1 > $(this).parents(".carousel").length) {
                        transactionIDList.push(data);
                    }
                });
                if (0 < transactionIDList.length) {
                    options.googletagmanagement.pushEventData({
                        event: "e_promoImpression",
                        ecommerce: {
                            promoView: {
                                promotions: transactionIDList
                            }
                        }
                    });
                }
            }
        },
        eePromoClickList: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                $(document).on("click", "a[data-contentType],a[data-contentName],a[data-contentID],a[data-contentPosition],area[data-contentType],area[data-contentName],area[data-contentID],area[data-contentPosition]", function() {
                    var $ev = $(this);
                    var t = $ev.closest("li").data("index");
                    var result = $ev.closest(".carousel").data("prefixPosition");
                    var s = $ev.attr("data-contentName") || "";
                    var spec = $ev.attr("data-contentType") || "";
                    t = $ev.attr("data-contentPosition") || (t ? 1 + t : 1);
                    var k = $ev.attr("data-contentID") || "";
                    if (!$ev.attr("data-ignorePromoClick")) {
                        if ($ev.parents(".carousel:not(.enablePromoImpressionTag)").length) {
                            /** @type {string} */
                            $ev = "e_carouselClick";
                            if (result) {
                                /** @type {string} */
                                s = t + "_" + s;
                            }
                        } else {
                            /** @type {string} */
                            $ev = "e_promotionClick";
                        }
                        /** @type {!Array} */
                        result = [];
                        result.push({
                            name: s,
                            position: t.toString(),
                            id: k,
                            creative: spec
                        });
                        if (options.preferences.enableStandardTags) {
                            options.googletagmanagement.pushEventData({
                                event: $ev,
                                contentName: s,
                                contentPosition: t
                            });
                        } else {
                            options.googletagmanagement.pushEventData({
                                event: $ev,
                                ecommerce: {
                                    promoClick: {
                                        promotions: result
                                    }
                                }
                            });
                        }
                    }
                });
            }
        },
        viewSlides: [],
        PromoSlideChange: function(n) {
            if (n.index) {
                n.index++;
            }
            var d = n.item.find("a[data-contentName]").attr("data-contentName") || n.item.find("area[data-contentName]").attr("data-contentName") || "";
            var spec = n.item.find("a[data-contentName]").attr("data-contentType") || n.item.find("area[data-contentName]").attr("data-contentType") || "";
            var default_favicon = n.item.find("a[data-contentName]").attr("data-contentPosition") || n.item.find("area[data-contentName]").attr("data-contentPosition") || n.index || 1;
            var h = n.item.find("a[data-contentName]").attr("data-contentID") || n.item.find("area[data-contentName]").attr("data-contentID") || "";
            /** @type {!Array} */
            var result = [];
            result.push({
                name: d,
                position: default_favicon.toString(),
                id: h,
                creative: spec
            });
            if (options.preferences.enableStandardTags) {
                options.googletagmanagement.pushEventData({
                    event: "e_carouselView",
                    contentName: d,
                    contentPosition: default_favicon
                });
            } else {
                options.googletagmanagement.pushEventData({
                    event: "e_carouselView",
                    promoslideChange: {
                        ecommerce: {
                            promoView: {
                                promotions: result
                            }
                        }
                    }
                });
            }
            list.viewSlides.push(n.index);
        },
        eePromoSlideChange: function(listEl) {
            if (null != listEl) {
                listEl = $(".jcarousel-clip li:first-child");
                if (0 != listEl.length) {
                    list.PromoSlideChange({
                        index: "0",
                        item: listEl
                    });
                    $(document).on("promoSlideChange", function(b, c) {
                        if (void 0 != c.index && -1 === list.viewSlides.indexOf(c.index)) {
                            list.PromoSlideChange(c);
                        }
                    });
                }
            }
        },
        liveChatInitiate: function(data) {
            $(document).on("liveChatInitiate", function() {
                if (null != data) {
                    options.googletagmanagement.pushEventData({
                        event: "livechatInitiate",
                        page: options.page.trackerData.page,
                        livechatSessionId: data.liveAgentSessionId,
                        liveChatStartTime: data.liveChatStartTime,
                        amount: data.cartAmount
                    });
                }
            });
        },
        liveChatInitiateOnOrderConf: function(data) {
            $(document).on("liveChatInitiateOnOrderConf", function() {
                if (null != data) {
                    options.googletagmanagement.pushEventData({
                        event: "livechatInitiate",
                        page: options.page.trackerData.page,
                        livechatSessionId: data.liveAgentSessionId,
                        liveChatStartTime: data.liveChatStartTime,
                        amount: data.liveagentordertotal,
                        demandwareOrderNumber: data.liveagentdemandwareordernumber,
                        productsPurchased: data.liveagentproductspurchased,
                        promoCodeName: data.liveagentcodename
                    });
                }
            });
        },
        checkOrder: function(callback) {
            if (null != callback) {
                $(document).on("click", "#dwfrm_ordertrack .submit_button", function() {
                    if ($("#dwfrm_ordertrack").valid()) {
                        var data = {
                            event: "e_checkOrder",
                            orderNumber: $("input[id=dwfrm_ordertrack_orderNumber]").val()
                        };
                        options.googletagmanagement.pushEventData(data);
                    }
                });
            }
        },
        searchSuggestionTracking: function(latSidePrev) {
            $(document).on("search.searchSuggestionTracking", function(isSlidingUp, lonSidePrev, gamma) {
                if (null != latSidePrev && null != lonSidePrev && void 0 != gamma) {
                    /** @type {string} */
                    z = gamma;
                }
            });
        },
        searchAutoCompletion: function() {
            $(document).on("click", ".suggestions div .suggestionterm", function() {
                options.googletagmanagement.pushEventData({
                    event: "e_autoSearch",
                    numberResults: z,
                    autoKeyword: $(this).text().trim()
                });
            });
        },
        richSearch: function(latSidePrev) {
            $(document).on("search.richSearch", function(isSlidingUp, lonSidePrev, gamma) {
                if (null != latSidePrev && null != lonSidePrev && void 0 != gamma) {
                    /** @type {string} */
                    z = gamma;
                }
            });
        },
        productImageClicked: function(canCreateDiscussions) {
            $(document).on("click", ".product_thumbnails .thumbnail_link", function() {
                var srcAngle = $(this).find("img").attr("src");
                var successToast = $(this).find("img").attr("title");
                if (null != canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_imageClick",
                        productName: successToast,
                        productImage: srcAngle
                    });
                }
            });
        },
        youtubeVideo: function() {
            build();
        },
        gwpLandingPageTracking: function(exports) {
            var e = $(document);
            e.on("click", ".gw-step-product-container, .option_tile", function() {
                var to = $(this);
                var stepName = "step" + to.closest(".gwp-step").data("step-number");
                var p = to.find(".b-product-tile").data("pid");
                to = "undefined" !== typeof options.page.eeProductsOnPage[p] ? options.page.eeProductsOnPage[p].productName : to.find(".product-tile__name").text().trim();
                options.googletagmanagement.pushEventData({
                    event: "uaevent",
                    eventCategory: "giftWithPurchase",
                    eventAction: stepName + "::select",
                    eventLabel: to + "::" + p
                });
            });
            e.on("click", ".gwp-add-to-bag", function() {
                /** @type {!Array} */
                var props = [];
                $(this).closest(".gwp-content").find(".gw-step-product-container.selected:not(.option_tile)").each(function() {
                    props.push({
                        pid: $(this).find(".b-product-tile").data("pid"),
                        qty: 1,
                        variant: "gift with purchase"
                    });
                });
                if (props.length) {
                    init("e_addToBag", exports, props);
                }
            });
        }
    };
    var _sites = {
        pinterest: "pinterest",
        facebook: "facebook_share",
        twitter: "twitter_share"
    };
    var answerFontParts = function($) {
        var $this = {
            hoverHref: null
        };
        $(document).ready(function() {
            $("body").on("mouseenter", 'a[class^="addthis_button"] iframe', function(jEvent) {
                $this.hoverHref = $(jEvent.target).parents("a");
                fakeInputElement.focus();
            });
            $("body").on("mouseleave", 'a[class^="addthis_button"] iframe', function() {
                /** @type {null} */
                $this.hoverHref = null;
                fakeInputElement.focus();
            });
        });
        return $this;
    }($);
    options.googletagmanagement = options.googletagmanagement || {};
    options.googletagmanagement.globalconfig = {
        getCustomPageVariableConfig: function() {
            return defaults;
        },
        getTagViewObjectConfig: function() {
            return item;
        },
        getEventsConfig: function() {
            return data;
        },
        getEventsLib: function() {
            return list;
        },
        initListeners: function() {
            set();
        },
        initYouTubeIframeAPI: function() {
            build();
        },
        getBasicProductTrackingObj: function(b) {
            return cb(b);
        }
    };
    options.googletagmanagement.social = {
        processClickOnSocialIframe: function(data) {
            var target = options.googletagmanagement.social.iframeHoverController.hoverHref;
            if (null !== target && null !== data) {
                data = {
                    event: "e_social",
                    socialNetwork: options.googletagmanagement.social.socialNetworkNamesMap[target.attr("class").split(" ")[0]],
                    socialTarget: target,
                    socialAction: "share"
                };
                options.googletagmanagement.pushEventData(data);
            }
        },
        iframeHoverController: answerFontParts,
        socialNetworkNamesMap: {
            addthis_button_facebook_like: "Facebook_like",
            addthis_button_tweet: "Tweet",
            addthis_button_pinterest_pinit: "Pinterest_pin-it",
            addthis_button_google_plusone: "Google+_+1",
            addthis_button_tumblr: "Tumblr"
        }
    };
})(window.app = window.app || {}, jQuery);
(function(options, $) {
    /**
     * @return {undefined}
     */
    function save() {
        var record = options.components.product.taaz.currentProduct();
        var e = $("#thumbnails ul li.thumb").index($("#thumbnails ul li.thumb.selected")) + 1;
        /** @type {number} */
        var id = 0;
        /** @type {string} */
        var modelName = "";
        if ($("#thumbnails ul li.thumb.selected").hasClass("taaz-models-list")) {
            id = $("#thumbnails ul li.thumb.taaz-models-list").index($("#thumbnails ul li.thumb.selected"));
            modelName = record.details.modelData[id].name;
            imageId = record.productImages[id];
            options.preferences.taaz.preferedModelObj["model" + id] = "model" + id in options.preferences.taaz.preferedModelObj ? options.preferences.taaz.preferedModelObj["model" + id] + 1 : 1;
            options.googletagmanagement.pushEventData({
                event: "e_productVariantClick",
                productName: record.productLineName,
                productImage: e,
                modelName: modelName,
                productShade: record.productName
            });
            $.each(options.preferences.taaz.preferedModelObj, function(isSlidingUp, canCreateDiscussions) {
                if (canCreateDiscussions == options.preferences.taaz.taazconsumerpreference) {
                    options.googletagmanagement.pushEventData({
                        event: "e_consumerProfilePreference",
                        imageId: imageId,
                        modelIndex: id,
                        modelName: modelName,
                        productShade: record.productName
                    });
                }
            });
        }
    }
    /**
     * @return {undefined}
     */
    function success() {
        var record = options.components.product.taaz.currentProduct();
        var e = $("#thumbnails ul li.thumb").index($("#thumbnails ul li.thumb.selected")) + 1;
        var name;
        if ($("#thumbnails ul li.thumb.selected").hasClass("taaz-models-list")) {
            name = $("#thumbnails ul li.thumb.taaz-models-list").index($("#thumbnails ul li.thumb.selected"));
            name = record.details.modelData[name].name;
            options.googletagmanagement.pushEventData({
                event: "e_imageClick",
                productName: record.productLineName,
                productImage: e,
                modelName: name
            });
        }
    }
    /**
     * @return {?}
     */
    function disablePagination() {
        var type;
        if (options.hasOwnProperty("custombagtracking") && void 0 != options.custombagtracking && "" != options.custombagtracking) {
            type = options.custombagtracking;
            /** @type {string} */
            options.custombagtracking = "";
        } else {
            type = options.page.type;
        }
        return gltypes.addToBagType[type] || "Also may like";
    }
    /**
     * @param {!Object} data
     * @param {boolean} index
     * @param {number} value
     * @param {?} range
     * @return {undefined}
     */
    function callback(data, index, value, range) {
        if (index && "eeProductsOnPage" in options.page && "eeProductsInCart" in options.page) {
            var item = options.page.eeProductsOnPage[index] || {};
            /** @type {!Array} */
            var groups = [];
            var a = cb(item, range);
            var currentProcesses = options.page.eeProductsOnPage.eeProductsInCart || [];
            /** @type {number} */
            var i = 0;
            for (; i < currentProcesses.length; i++) {
                if (currentProcesses[i].pid == index) {
                    a.dimension88 = currentProcesses[i].isProductEngraved;
                }
                if (currentProcesses[i].isVirtualPreviewFlag) {
                    a.dimension97 = currentProcesses[i].isVirtualPreviewFlag;
                }
            }
            a.quantity = value || 1;
            if (range) {
                /** @type {string} */
                a.dimension74 = "Yes";
            }
            groups.push(a);
            if (options.preferences.enableStandardTags) {
                options.googletagmanagement.pushEventData({
                    event: "e_removeFromBag",
                    productName: item.name,
                    productPrice: (item.price * value).toFixed(2)
                });
            } else {
                data = {
                    event: "e_removeFromBag",
                    ecommerce: {
                        currencyCode: data.currencyCode || "",
                        remove: {
                            products: groups
                        }
                    }
                };
                if (options.preferences.enableEETagsForUpdateCartEvent) {
                    data.productPrice = null != item.price ? item.price.toString() : "";
                    data.productName = item.name || "";
                }
                data = send(data, item);
                if (range) {
                    $.extend(data, range);
                }
                options.googletagmanagement.pushEventData(data);
            }
        }
    }
    /**
     * @param {!Object} res
     * @param {!Object} a
     * @return {?}
     */
    function send(res, a) {
        res = res || {};
        if (options.preferences.enableEETagsForUpdateCartEvent && null != res && null != a) {
            res.productPrice = null != a.price ? a.price.toString() : "";
            res.productName = a.name || "";
        }
        return res;
    }
    /**
     * @param {!Object} item
     * @param {?} container
     * @return {?}
     */
    function cb(item, container) {
        item = item || {};
        var data = {
            price: item.price ? item.price.toString() : "0",
            brand: item.categoryName,
            category: item.subcategoryName,
            name: item.productwithSubTitle,
            id: item.masterProductId,
            dimension22: null != item && "id" in item && null != item.id ? item.id : "",
            dimension89: item.personalEngravingEnabled
        };
        var last;
        last = item.id;
        var $checkbox;
        var $link_title;
        /** @type {boolean} */
        var term = false;
        if ("product" == options.page.ns || "product" == options.page.type) {
            $checkbox = $(document).find('input[name="virtualPreviewActive"]');
            $link_title = 1 == $(document).find('input[name="pid"]').length ? $(document).find('input[name="pid"]') : $(document).find('.pdpForm input[name="pid"]');
            if ($checkbox.length && $link_title.length && last == $link_title.val()) {
                term = $checkbox.val();
            }
        }
        /** @type {(boolean|string)} */
        term = "yes" == term ? "present" : "no" == term ? "not present" : false;
        if (0 < $(".c-modiface--ready").length || -1 < self.indexOf(last)) {
            /** @type {string} */
            term = "activated";
        }
        create();
        if (last = term) {
            /** @type {(boolean|string)} */
            data.dimension49 = last;
        }
        if ("dimension88" in item && "" != item.dimension88) {
            /** @type {string} */
            data.dimension88 = "Yes";
        }
        if ("variant" in item && "" != item.variant) {
            data.variant = item.variant;
        }
        if ("dimension23" in item && "" != item.dimension23) {
            data.dimension23 = item.dimension23;
        }
        if ("dimension27" in item && "" != item.dimension27) {
            data.dimension27 = item.dimension27;
        }
        if ("dimension49" in item && "" != item.dimension49) {
            data.dimension49 = item.dimension49;
        }
        if (container) {
            /** @type {string} */
            data.dimension74 = "Yes";
        }
        if (null != item && "undefined" != typeof item && "dimension16" in item) {
            data.dimension16 = item.dimension16;
        }
        return data;
    }
    /**
     * @param {!Object} req
     * @param {string} i
     * @return {undefined}
     */
    function render(req, i) {
        /** @type {!Array} */
        var result = [];
        var additiveNodes;
        var data;
        /** @type {number} */
        var i1 = 0;
        for (; i1 < i.length; i1++) {
            additiveNodes = options.page.eeProductsOnPage[i[i1]] || {};
            data = cb(additiveNodes);
            result.push(data);
        }
        options.googletagmanagement.pushEventData({
            event: "vpv_quickshop",
            virtualPage: "/quickshop" + req.page,
            virtualTitle: "QUICK SHOP | " + req.quickView.name || data.name,
            productName: req.quickView.name || data.name,
            productCategory: data.category || "",
            productStatus: req.quickView.productStatus || "",
            productListing: req.quickView.productListing || "",
            numberReviews: req.quickView.numberReviews ? req.quickView.numberReviews.toString() : "",
            numberStars: req.quickView.numberStars ? req.quickView.numberStars.toString() : "",
            productType: req.quickView.productType || "",
            section: req.quickView.section || "",
            subSection: req.quickView.subSection || "",
            brand: req.quickView.brand || "",
            categoryBreakout: req.quickView.breakout || "",
            pageType: req.quickView.pageType || "",
            UPC: req.quickView.sku,
            productSKU: req.quickView.sku,
            ecommerce: {
                detail: {
                    products: result
                }
            }
        });
        i = req.quickView.sku;
        result = $(this);
        data = get(result, data);
        options.googletagmanagement.pushEventData({
            event: "e_productClick",
            ecommerce: {
                click: {
                    actionField: {
                        list: data || ""
                    },
                    products: [{
                        name: req.quickView.name || "",
                        id: i,
                        quantity: req.quickView.quantity || "1",
                        price: req.quickView.price,
                        category: req.quickView.category || options.page.trackerData.productCategory,
                        brand: req.quickView.brand || options.page.eeProductsOnPage[i].brand || "",
                        variant: options.page.eeProductsOnPage[req.quickView.sku].variantID || "",
                        position: add(req.quickView.sku) || "",
                        dimension22: options.page.eeProductsOnPage[i].variantID || "",
                        dimension51: options.page.eeProductsOnPage[i].shade || "",
                        dimension54: options.page.eeProductsOnPage[i].color || "",
                        dimension55: options.page.eeProductsOnPage[i].style || "",
                        dimension89: additiveNodes.personalEngravingEnabled,
                        position: add(i)
                    }]
                }
            }
        });
    }
    /**
     * @param {!Object} value
     * @param {!Object} obj
     * @return {?}
     */
    function get(value, obj) {
        var self = options.page.quickViewTrackerData || options.page.trackerData || {};
        var item = value && value.closest(".recommendations_block");
        if (item && item.length) {
            return item.find(".recommendation_title").text();
        }
        if ("ecommerce" in self && "impressions" in self.ecommerce && 0 < self.ecommerce.impressions.length && (item = self.ecommerce.impressions[0], "list" in item && null != item.list)) {
            return item.list;
        }
        item = self.pageID || options.pageContextObject.trackerData.pageID || "";
        if ("genericlandingpage" === self.pgName) {
            return "Category Page List (SubCLP: " + obj.category + ")";
        }
        if (value) {
            if (value.parents(".carousel").length || value.parents(".productcarousel").length) {
                return "Carousel - " + item;
            }
            if (value.parents(".navigation_dropdown").length) {
                return "Dropdown Menu " + item;
            }
        }
        return item;
    }
    /**
     * @param {string} c
     * @param {!Object} match
     * @return {?}
     */
    function add(c, match) {
        return (match = match && match.closest("[data-gtm-position]")) && match.length ? match.data("gtm-position") : ("search" == options.page.currentPage ? $(".search_result_items [data-itemid=" + c + "]").index(".search_result_items [data-itemid]") : $("[data-itemid=" + c + "]").index("[data-itemid]")) + 1 || 0;
    }
    /**
     * @param {string} data
     * @param {!Array} res
     * @return {undefined}
     */
    function next(data, res) {
        var anEncryptedData = options.page.trackerData.virtualTitle;
        var final_download = options.page.trackerData.virtualPage;
        var args = options.page.trackerData.steps;
        if ("samples" == data) {
            data = {
                event: "vpv_checkout",
                virtualTitle: anEncryptedData[data],
                virtualPage: final_download[data],
                ecommerce: {
                    currencyCode: options.page.trackerData.currencyCode,
                    checkout: {
                        actionField: {
                            step: args[data]
                        },
                        products: res
                    }
                }
            };
            if ("abTestVariation" in options.page.trackerData && "" != options.page.trackerData.abTestVariation) {
                data.abTestVariation = options.page.trackerData.abTestVariation;
            }
            options.googletagmanagement.pushEventData(data);
        } else {
            options.googletagmanagement.pushEventData({
                event: "vpv_checkout",
                virtualTitle: anEncryptedData[data],
                virtualPage: final_download[data],
                ecommerce: {
                    currencyCode: options.page.trackerData.currencyCode,
                    checkout: {
                        actionField: {
                            step: args[data]
                        },
                        products: res
                    }
                }
            });
        }
    }
    /**
     * @param {string} query
     * @param {string} type
     * @param {string} action
     * @return {undefined}
     */
    function insert(query, type, action) {
        options.googletagmanagement.pushEventData({
            event: "uaevent",
            eventCategory: query,
            eventAction: type,
            eventLabel: action || options.pageContextObject.currentPage || options.page.title || ""
        });
    }
    /**
     * @param {?} inputField
     * @return {?}
     */
    function init(inputField) {
        /** @type {!Array} */
        var result = [];
        inputField.parent().siblings("[data-js-slots-number]").children("[data-js-slot-content]").each(function() {
            var i = $(this);
            i = (JSON.parse(i.attr("data-js-slot-content")) || null).pid;
            var style = {};
            if (options && options.page && options.page.eeProductsOnPage && options.page.eeProductsOnPage[i]) {
                style = options.page.eeProductsOnPage[i];
            }
            result.push({
                price: "0",
                brand: "reward",
                category: style.category || "",
                name: style.name || "",
                id: style.id || "",
                dimension22: style.dimension22 || "",
                dimension89: style.dimension89 || "",
                variant: style.variant || "",
                quantity: 1,
                dimenstion30: "none"
            });
        });
        return result;
    }
    /**
     * @param {!Object} list
     * @return {?}
     */
    function onMessage(list) {
        /** @type {!Array} */
        var result = [];
        if ((list = list.data("basket-vault-content") || "") && list.length) {
            /** @type {number} */
            var i = 0;
            for (; i < list.length; i++) {
                var data = list[i];
                var id = data.pid;
                var params = {};
                if (options && options.page && options.page.eeProductsOnPage && options.page.eeProductsOnPage[id]) {
                    params = options.page.eeProductsOnPage[id];
                }
                result.push({
                    price: "0",
                    brand: "reward",
                    category: params.category || "",
                    name: params.name || "",
                    id: params.id || "",
                    dimension22: params.dimension22 || id,
                    dimension88: data.engravingMessage ? "Yes" : "No",
                    dimension89: params.dimension89 || "",
                    dimension97: params.dimension97 || "No",
                    variant: params.variant || "",
                    quantity: 1
                });
            }
        }
        return result;
    }
    /**
     * @param {?} query
     * @return {undefined}
     */
    function show(query) {
        var data = {
            event: "uaevent",
            ecommerce: "undefined",
            eventCategory: "loyalty",
            eventAction: "",
            eventLabel: options.pageContextObject.currentPage || options.page.title || ""
        };
        data = $.extend(data, query);
        options.googletagmanagement.pushEventData(data);
    }
    /**
     * @param {!Object} config
     * @return {undefined}
     */
    function getCount(config) {
        options.googletagmanagement.pushEventData({
            event: "e_addToBag",
            e_addToBagLocation: config.e_addToBagLocation,
            ecommerce: {
                currencyCode: config.currencyCode || "USD",
                add: {
                    products: config.products || []
                }
            }
        });
    }
    /**
     * @param {!Object} config
     * @return {undefined}
     */
    function val(config) {
        options.googletagmanagement.pushEventData({
            event: "e_removeFromBag",
            ecommerce: {
                currencyCode: config.currencyCode || "USD",
                remove: {
                    products: config.products || []
                }
            }
        });
    }
    /**
     * @return {undefined}
     */
    function create() {
        var input = ctx.document.find('input[name="vtoStatus"]');
        var $hashcashField = ctx.document.find('.product_add_to_cart input[name="pid"]').first();
        if (!input.length) {
            ctx.document.find(".js_addtocartform").append('<input type="hidden" name="vtoStatus">');
            input = ctx.document.find('input[name="vtoStatus"]');
        }
        if (0 < $(".c-modiface__wrap").length) {
            input.val("present");
            if (0 < ctx.document.find(".c-modiface--ready").length || $hashcashField.length && -1 < self.indexOf($hashcashField.val())) {
                input.val("activated");
            }
        } else {
            input.val("not present");
        }
    }
    /**
     * @param {string} options
     * @param {!Object} query
     * @return {undefined}
     */
    function q(options, query) {
        options = ctx.document.find('.product_add_to_cart input[name="pid"]').first();
        if (0 < ctx.document.find(".c-modiface--ready").length) {
            if (options.length && -1 == self.indexOf(options.val())) {
                self.push(options.val());
            }
            if (query.pid && -1 == self.indexOf(query.pid)) {
                self.push(query.pid);
            }
        }
    }
    /**
     * @return {undefined}
     */
    function processReview() {
        var $hashcashField = ctx.document.find('.product_add_to_cart input[name="pid"]').first();
        if (0 < $(".c-modiface__wrap").length && $hashcashField.length && -1 == self.indexOf($hashcashField.val())) {
            self.push($hashcashField.val());
        }
    }
    /**
     * @param {!Object} e
     * @return {undefined}
     */
    function update(e) {
        window.impressionsOnScroll = window.impressionsOnScroll || {};
        $("[data-itemid]:not(.js-gtm-processed)").each(function() {
            var tabs = $(this);
            var id = tabs.attr("data-itemid");
            var data;
            /** @type {(undefined|{brand: ??, category: ??, dimension22: ??, dimension51: ??, dimension54: ??, dimension55: ??, dimension89: ??, id: ??, list: ?, name: ??, position: ?, price: ??, quantity: ??, variant: ??})} */
            data = id ? (data = "eeProductsOnPage" in options.page && options.page.eeProductsOnPage[id]) ? {
                name: data.name,
                id: data.masterProductId,
                brand: data.categoryName || "",
                price: data.price.toString() || "",
                category: data.subcategoryName || "",
                variant: data.variantID || "",
                quantity: data.quantity || "1",
                position: add(data.variantID) || "",
                dimension22: data.variantID || "",
                dimension51: data.shade || "",
                dimension54: data.color || "",
                dimension55: data.style || "",
                dimension89: data.personalEngravingEnabled
            } : void 0 : void 0;
            if (data) {
                data.position = add(id);
                e.category = data.category;
                data.list = get(tabs, e);
                window.impressionsOnScroll[id] = data;
                tabs.addClass("js-gtm-processed");
            }
        });
    }
    var ctx = {};
    var globalConfig = {
        pushDataBeforeInit: true
    };
    var $scope = {};
    var defaults = {
        global: ["visitor", "section"],
        product: ["product", "eEcommerce"],
        search: ["category", "search"],
        checkout: ["checkout", "eEcommerce"],
        cart: ["checkout", "eEcommerce"],
        customerservice: ["contactusform"],
        contactusform: ["contactusform"],
        error: ["error"],
        giftcert: ["giftcert", "eEcommerce"],
        Favorites: ["eEcommerce"],
        confirmation: ["confirmation"],
        loyalty: ["product", "checkout", "eEcommerce"]
    };
    var data = {
        global: "addtobag quickView foundationFinderEvents tryOnEventImg lipWardrobeEvent tryOnEvent liveChatHeaderLinkClick liveChatCustomerServiceLinkClick liveChatToasterPopUp liveChatStickyTabOnMobile clickLivechatCloseHandler accountRegistration searchWishlist updateWishlist internalSearchSort shadeTool colorMirror removeFavorite moodboards addToWishlist footerExternalSocialLink myBeautyProfile signupPopup dramming customEvents loyaltyPush navigationClicks expiviEvents eeProductImpressions eePromoClickList carouselView landingPageCTA landingPageContentClick promoBarClick".split(" "),
        product: ["setVirtualPreviewActive"],
        cart: ["interceptAccountLogin", "promoCodeEvents", "vaultRewardEvents", "cartVaultRewardEvents"],
        onestepcheckout: ["checkoutEvents", "promoCodeEvents"],
        confirmation: ["confirmationEvents"],
        search: ["searchEvent"],
        error: ["errorEvent"],
        contactusform: ["contactusFormEvent"],
        loyalty: ["loyaltyEvents", "rewardLinks", "vaultRewardEvents"],
        homepage: ["eePromoClickList"]
    };
    var item = {
        visitor: "userType guestID userID hashedEmail h1 h2 geoIPLocation event".split(" "),
        section: ["section", "subSection", "pageType", "categoryBreakout", "pgName"],
        product: "productSku productName productCategory productType productStatus productListing numberReviews percentRecommended numberStars".split(" "),
        eEcommerce: ["ecommerce"],
        category: ["categoryBreakout", "numberResults", "searchResultsBreakdown"],
        search: ["numberResults", "searchResultsBreakdown", "searchTerm"],
        contactusform: ["contactSubject"],
        checkout: ["cartAbandonner"],
        error: ["event"],
        giftcert: ["giftcert"],
        confirmation: "ecommerce bonusItem bundle discountCode paymentMethod totalDiscount virtualPage".split(" ")
    };
    var gltypes = {
        addToBagType: {
            product: "Product page",
            quickview: "Quick shop",
            storefront: "Homepage",
            Cart: "Cart page",
            stickybanner: "Sticky Banner"
        },
        cartStepsNumber: {
            login: 1,
            samples: 2,
            processaddresses: 3,
            addresses: 2,
            processmethods: 4,
            methods: 3,
            processrevieworder: 5,
            revieworder: 4
        },
        cartStepsName: {
            login: options.resources.GTM_CHECKOUT_LOGIN,
            samples: options.resources.GTM_CHECKOUT_SAMPLES,
            processaddresses: options.resources.GTM_CHECKOUT_PROCESSADDRESSES,
            addresses: options.resources.GTM_CHECKOUT_ADDRESSES,
            processmethods: options.resources.GTM_CHECKOUT_PROCESSMETHODS,
            methods: options.resources.GTM_CHECKOUT_METHODS,
            processrevieworder: options.resources.GTM_CHECKOUT_PROCESSREVIEWORDER,
            revieworder: options.resources.GTM_CHECKOUT_REVIEWORDER
        }
    };
    /** @type {!Array} */
    var self = [];
    $(document).on("moodboard.popupcontent.loaded", function() {
        options.googletagmanagement.globalconfig.initYouTubeIframeAPI();
    });
    $(document).on("click", ".row_tile_link", function() {
        var data = {
            event: "e_giftClick",
            giftButton: JSON.parse($(this).find(".row_tile").attr("data-tile")).cgid
        };
        options.googletagmanagement.pushEventData(data);
    });
    var R = {
        setVirtualPreviewActive: function() {
            ctx.document.on("product.quantityValidation", create);
            ctx.document.on("product.beforeVariationChange", "#pdpMain", q);
            ctx.document.on("modiface.ready", ".c-modiface__wrap", processReview);
        },
        addToBag: function(self) {
            $(document).on("product.addToCartTracking", function(name, data) {
                if (null != $scope && "source" in $scope && "wishlist" == $scope.source && null != self) {
                    return updateWishlist(data), false;
                }
                if (data.storePickupData) {
                    self.storePickupData = data.storePickupData;
                }
                if (!(name = data.productID)) {
                    try {
                        name = data.trackingJSON.productID;
                    } catch (T) {
                        /** @type {null} */
                        name = null;
                    }
                }
                /** @type {string} */
                data.productID = name;
                name = $("#product-dynamic-tracking-" + data.productID);
                if (null != self) {
                    name = name.data("fromated-price") || data.price || self.unitPrice;
                    if (null != name) {
                        name.toString().replace(/[^\d.]/g, "");
                    }
                    var a = $(".product-variations").find("li.selected").find(".swatch_text_color").text();
                    /** @type {string} */
                    name = null != $scope && "source" in $scope && "update" == $scope.source ? "e_updateBag" : "currentPage" in options.page && -1 < options.page.currentPage.indexOf("wishlist") || "currentPgName" in options.page && -1 < options.page.currentPgName.indexOf("account") ? "e_buyFromWishlist" : "e_addToBag";
                    /** @type {!Array} */
                    data = [{
                        pid: data.productID || self.masterProductID || self.productID,
                        qty: data.qty,
                        variant: a || ""
                    }];
                    /** @type {!Array} */
                    a = [];
                    var item;
                    var root = $(document);
                    /** @type {number} */
                    var i = 0;
                    for (; i < data.length; i++) {
                        var res;
                        if (item = options.page.eeProductsOnPage && options.page.eeProductsOnPage[data[i].pid]) {
                            item.variant = data[i].variant || item.variant;
                            res = cb(item, self.storePickupData);
                            res.quantity = data[i].qty || 1;
                            res.dimension22 = item.dimension22;
                            if (self.storePickupData) {
                                /** @type {string} */
                                res.dimension74 = "Yes";
                            }
                            if (root.find(".capOptionProduct .caps_list").length) {
                                res.dimension186 = $("li.cap_wrapper.cap_selected").data("cap-name");
                            }
                            res.dimension30 = $(".delivercustom").parent().hasClass("f_checked") ? $("span#arMounthSelectBoxItText").text() + "month" : "none";
                            res.dimension88 = data[i].isProductEngraved;
                            if (options.preferences.addDimension91) {
                                /** @type {string} */
                                var value = "none";
                                if (void 0 != options.optsofferChange && item.id == options.optsofferChange.offerInfo.product) {
                                    value = options.optsofferChange.data.frequency.every;
                                }
                                /** @type {string} */
                                value = 0 != value && "none" != value ? value + " " + options.preferences.replenishIntervalUnit : "none";
                                /** @type {string} */
                                res.dimension91 = value;
                            }
                            a.push(res);
                        }
                    }
                    if (null != $scope && "source" in $scope && "update" == $scope.source) {
                        item = options.page.eeProductsOnPage && options.page.eeProductsOnPage[$scope.pid];
                        /** @type {!Array} */
                        data = [];
                        a = cb(item, self.storePickupData);
                        /** @type {boolean} */
                        root = false;
                        if (self.storePickupData) {
                            /** @type {string} */
                            a.dimension74 = "Yes";
                        }
                        a.dimension30 = $scope.autoReplenishmentInterval;
                        if ($scope.newQuantity > $scope.qty) {
                            /** @type {boolean} */
                            root = true;
                        }
                        /** @type {number} */
                        a.quantity = Math.abs($scope.qty - $scope.newQuantity);
                        data.push(a);
                        /** @type {({e_addToBagLocation: ?, ecommerce: {add: {products: !Array}, currencyCode: ??}, event: string}|{e_addToBagLocation: ?, ecommerce: {currencyCode: ??, remove: {products: !Array}}, event: string})} */
                        name = root ? {
                            event: options.preferences.enableEETagsForUpdateCartEvent ? "e_addToBag" : name,
                            e_addToBagLocation: disablePagination(),
                            ecommerce: {
                                currencyCode: self.currencyCode || "",
                                add: {
                                    products: data
                                }
                            }
                        } : {
                            event: options.preferences.enableEETagsForUpdateCartEvent ? "e_removeFromBag" : name,
                            e_addToBagLocation: disablePagination(),
                            ecommerce: {
                                currencyCode: self.currencyCode || "",
                                remove: {
                                    products: data
                                }
                            }
                        };
                    } else {
                        name = {
                            event: name,
                            e_addToBagLocation: disablePagination(),
                            ecommerce: {
                                currencyCode: self.currencyCode || "",
                                add: {
                                    products: a
                                }
                            }
                        };
                    }
                    data = {};
                    if (options.preferences.taaz.enable && $("#thumbnails ul li.thumb.selected").hasClass("taaz-models-list")) {
                        data = options.components.product.taaz.currentProduct();
                        a = $("#thumbnails ul li.thumb.taaz-models-list").index($("#thumbnails ul li.thumb.selected"));
                        data = {
                            imageId: data.productImages[a],
                            modelIndex: a,
                            modelName: data.details.modelData[a].name,
                            productShade: data.productName
                        };
                    }
                    name = $.extend(data, name);
                    if (self.storePickupData) {
                        $.extend(name, self.storePickupData);
                    }
                    name = send(name, item);
                    options.googletagmanagement.pushEventData(name);
                    if (options.preferences.isUaEventRequired) {
                        /** @type {string} */
                        name = "none";
                        if (void 0 != options.optsofferChange && item.id == options.optsofferChange.offerInfo.product) {
                            name = options.optsofferChange.data.frequency.every;
                        }
                        if (0 != name && "none" != name) {
                            options.googletagmanagement.pushEventData({
                                event: "uaevent",
                                ecommerce: "undefined",
                                eventCategory: "auto replenish",
                                eventAction: "pdp auto replenish selection",
                                eventLabel: item.name + "::" + name + " " + options.preferences.replenishIntervalUnit
                            });
                        }
                    }
                    return false;
                }
            });
            $(document).on("product.addToCartEngravingTracking", function(result, event) {
                if (!(result = event.productID)) {
                    try {
                        result = event.trackingJSON.productID;
                    } catch (qa) {
                        /** @type {null} */
                        result = null;
                    }
                }
                /** @type {!Array} */
                event.productID = result;
                if (null != self) {
                    /** @type {!Array} */
                    result = [];
                    var a;
                    var quantity;
                    quantity = event.quantity;
                    a = "eeProductsOnPage" in options.page && options.page.eeProductsOnPage[event.productID];
                    /** @type {string} */
                    a.dimension88 = "Yes";
                    a = cb(a, {
                        quantity: quantity
                    });
                    result.push(a);
                    options.googletagmanagement.pushEventData({
                        event: "event" in event ? event.event : "e_addToBag",
                        ecommerce: {
                            currencyCode: self.currencyCode,
                            add: {
                                products: result,
                                quantity: quantity
                            }
                        }
                    });
                }
                return false;
            });
        },
        accountRegistration: function(regex) {
            if (null != regex && "accountEvent" in regex && "accountCreation" == regex.accountEvent) {
                options.googletagmanagement.pushEventData({
                    event: "uaevent",
                    ecommerce: void 0,
                    eventCategory: "registration",
                    eventAction: "account signup::" + ("visitorStatus" in regex && "regular logged" == regex.visitorStatus ? "regular" : "social"),
                    eventLabel: "section" in regex && "onestepcheckout" == regex.section ? "cart page" : "header"
                });
                options.util.deleteCookie("userRegisteredExternally");
                options.util.deleteCookie("userRegistered");
            }
        },
        tryOnEventImg: function(canCreateDiscussions) {
            $(document).on("click", ".thumbnail_link img", function() {
                if (null != canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Try On",
                        eventAction: "Image Selected",
                        eventLabel: options.page.trackerData.productName || options.page.title || ""
                    });
                }
            });
        },
        lipWardrobeEvent: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-1 .wd_question_1 .wd_answer", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 1",
                        eventLabel: "1::" + $(this).data("answer")
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-1 .wd_question_2 .wd_answer", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 1",
                        eventLabel: "2::" + $(this).data("answer")
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-1 .wd_question_3 .wd_question_answers .wd_options_menu .wd_answer_label", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 1",
                        eventLabel: "3::" + $(this).prop("innerHTML")
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-1 .wd_question_3 .wd_question_answers .wd_options_menu_wrapper_mobile .wd_options_menu_mobile .wd_answer_label", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 1",
                        eventLabel: "3::" + $(this).prop("innerHTML").split("<span")[0].trim()
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-1 .wd_question_3 .wd_question_answers .wd_sample_wrapper .wd_options_sample .wd_answer", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 1",
                        eventLabel: "3::" + $(this).data("answer") + " model selected"
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-1 .wd_question_3 .wd_question_answers .wd_options_menu_wrapper_mobile .wd_options_menu_mobile .wd_options_sample .wd_answer", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 1",
                        eventLabel: "3::" + $(this).data("answer") + " model selected"
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-1 .cta_wrapper .wardrobe_next", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 2 button click",
                        eventLabel: "Step 2: Try on colors"
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-2 .wd_question_wrapper .color_families .color_family", function() {
                    $colorFamilySplit = $(this).prop("innerHTML").trim().split("amp;");
                    $colorFamily = $colorFamilySplit[0] + $colorFamilySplit[1];
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 2",
                        eventLabel: "1::Color Family " + $colorFamily + " selected"
                    });
                });
                $(document).on("gtm.shade.change", function() {
                    $color = $(".lip_wardrobe .wardrobe_content .step-2 .wd_question_wrapper .tryon_container .product_carousel .wd_carousel_item.active .wd_product_details .wd_product_color").prop("innerHTML");
                    if (($product = $(".lip_wardrobe .wardrobe_content .step-2 .wd_question_wrapper .tryon_container .product_carousel .wd_carousel_item.active .wd_product_details .wd_product_title").prop("innerHTML")) && $color) {
                        $splitColor = $color.split("<br>");
                        $colorName = ($splitColor[0].trim() + " " + $splitColor[1].trim()).trim();
                        options.googletagmanagement.pushEventData({
                            event: "uaevent",
                            eventCategory: "YSL Lip Wardrobe",
                            eventAction: "Step 2",
                            eventLabel: "2::" + $product + "::" + $colorName + " selected"
                        });
                    }
                });
                $(document).on("gtm.altCta.changed", function() {
                    $button = $(".lip_wardrobe .wardrobe_content .step-2 .wd_question_wrapper .tryon_container .product_carousel .wd_carousel_item.active .wd_product_cta button");
                    $color = $(".lip_wardrobe .wardrobe_content .step-2 .wd_question_wrapper .tryon_container .product_carousel .wd_carousel_item.active .wd_product_details .wd_product_color").prop("innerHTML");
                    $product = $(".lip_wardrobe .wardrobe_content .step-2 .wd_question_wrapper .tryon_container .product_carousel .wd_carousel_item.active .wd_product_details .wd_product_title").prop("innerHTML");
                    $data = $button.prop("innerHTML").split(" ")[0];
                    if ($product && $color) {
                        $splitColor = $color.split("<br>");
                        $colorName = ($splitColor[0].trim() + " " + $splitColor[1].trim()).trim();
                        switch ($data) {
                            case "Save":
                                /** @type {string} */
                                $label = "Remove this color";
                                break;
                            case "Saved":
                                /** @type {string} */
                                $label = "Save this color";
                        }
                        options.googletagmanagement.pushEventData({
                            event: "uaevent",
                            eventCategory: "YSL Lip Wardrobe",
                            eventAction: "Step 2",
                            eventLabel: $label + "::" + $product + "::" + $colorName
                        });
                    }
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-2 .wd_question_wrapper .tryon_container .tryon_cta", function() {
                    $color = $(".lip_wardrobe .wardrobe_content .step-2 .wd_question_wrapper .tryon_container .product_carousel .wd_carousel_item.active .wd_product_details .wd_product_color").prop("innerHTML");
                    $product = $(".lip_wardrobe .wardrobe_content .step-2 .wd_question_wrapper .tryon_container .product_carousel .wd_carousel_item.active .wd_product_details .wd_product_title").prop("innerHTML");
                    $splitColor = $color.split("<br>");
                    $colorName = ($splitColor[0].trim() + " " + $splitColor[1].trim()).trim();
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "YSL Lip Wardrobe",
                        eventLabel: $product + "::" + $colorName
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-2 .wd_question_wrapper .cta_wrapper button.wardrobe_next", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 3 Button click",
                        eventLabel: "Step 3: Make It Personal"
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-3 .wd_question_wrapper .saved_products .product_information .not_saved .personalize_product", function() {
                    $productName = $(this).parents(".saved_product_container").find(".saved_product_info .saved_product_name").prop("innerHTML").trim();
                    $colorName = $(this).parents(".saved_product_container").find(".saved_product_info .saved_variation_name").prop("innerHTML").trim();
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 3",
                        eventLabel: "Add Customization::" + $productName + "::" + $colorName
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-3 .wd_question_wrapper .saved_products .product_information .saved .edit_personalize_product", function() {
                    $productName = $(this).parents(".saved_product_container").find(".saved_product_info .saved_product_name").prop("innerHTML").trim();
                    $colorName = $(this).parents(".saved_product_container").find(".saved_product_info .saved_variation_name").prop("innerHTML").trim();
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 3",
                        eventLabel: "Edit Customization::" + $productName + "::" + $colorName
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-3 .wd_question_wrapper .saved_products .saved_product_container .product_remove", function() {
                    $productName = $(this).parents(".saved_product_container").find(".saved_product_info .saved_product_name").prop("innerHTML").trim();
                    $colorName = $(this).parents(".saved_product_container").find(".saved_product_info .saved_variation_name").prop("innerHTML").trim();
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 3",
                        eventLabel: "Remove Product::" + $productName + "::" + $colorName
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-3 .wd_question_wrapper .saved_products .add_product_container", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 3",
                        eventLabel: "Add Another Shade"
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-3 .wd_question_wrapper .cta_wrapper .wardrobe_save_all", function() {
                    $data = $(this).prop("innerHTML").trim().split(" ")[0];
                    switch ($data) {
                        case "Skip":
                            /** @type {string} */
                            $label = "Skip Personalization";
                            break;
                        case "Save":
                            /** @type {string} */
                            $label = "Save All";
                    }
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 4 Button click",
                        eventLabel: "Step 4: " + $label
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-4 .saved_list_wrapper .saved_products .product_information .not_saved .personalize_product", function() {
                    $productName = $(this).parents(".saved_product_tile").find(".naming_info .product_name").prop("innerHTML").trim();
                    $colorName = $(this).parents(".saved_product_tile").find(".naming_info .variation_name").prop("innerHTML").trim();
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 4",
                        eventLabel: "Add Customization::" + $productName + "::" + $colorName
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-4 .saved_list_wrapper .saved_products .product_information .saved .edit_personalize_product", function() {
                    $productName = $(this).parents(".saved_product_tile").find(".naming_info .product_name").prop("innerHTML").trim();
                    $colorName = $(this).parents(".saved_product_tile").find(".naming_info .variation_name").prop("innerHTML").trim();
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 4",
                        eventLabel: "Edit Customization::" + $productName + "::" + $colorName
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-4 .saved_list_wrapper .saved_products .product_remove", function() {
                    $productName = $(this).parents(".saved_product_tile").find(".naming_info .product_name").prop("innerHTML").trim();
                    $colorName = $(this).parents(".saved_product_tile").find(".naming_info .variation_name").prop("innerHTML").trim();
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 4",
                        eventLabel: "Remove Product::" + $productName + "::" + $colorName
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-4 .saved_list_wrapper .saved_products .product_add_to_bag", function() {
                    $productName = $(this).parents(".saved_product_tile").find(".naming_info .product_name").prop("innerHTML").trim();
                    $colorName = $(this).parents(".saved_product_tile").find(".naming_info .variation_name").prop("innerHTML").trim();
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 4",
                        eventLabel: "Add To Bag::" + $productName + "::" + $colorName
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-4 .saved_list_wrapper .saved_cta_wrapper .add_all_to_bag .add_all_to_cart_button", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 4",
                        eventLabel: "Add All To Bag"
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-4 .saved_list_wrapper .saved_header .header_cta_container .cta_email", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 4",
                        eventLabel: "Email My Wardrobe"
                    });
                });
                $(document).on("click", ".lip_wardrobe .wardrobe_content .step-4 .saved_list_wrapper .saved_header .header_cta_container .cta_wishlist", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        eventCategory: "YSL Lip Wardrobe",
                        eventAction: "Step 4",
                        eventLabel: "Add All To Wishlist"
                    });
                });
                $(document).on("gtm.action.upload", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "YSL Lip Wardrobe",
                        eventLabel: "Upload Photo"
                    });
                });
                $(document).on("gtm.action.live", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "YSL Lip Wardrobe",
                        eventLabel: "Live Camera"
                    });
                });
                $(document).on("gtm.action.facebook", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "YSL Lip Wardrobe",
                        eventLabel: "Share on Facebook"
                    });
                });
                $(document).on("gtm.action.twitter", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "YSL Lip Wardrobe",
                        eventLabel: "Share on Twitter"
                    });
                });
                $(document).on("gtm.action.pinterest", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "YSL Lip Wardrobe",
                        eventLabel: "Share on Pinterest"
                    });
                });
                $(document).on("gtm.action.download", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "YSL Lip Wardrobe",
                        eventLabel: "Download"
                    });
                });
            }
        },
        tryOnEvent: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                $(document).on("gtm.select.shade", function(canCreateDiscussions, pOptions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "Selected Color: " + (pOptions && pOptions.color ? pOptions.color : $("#va-colorSelectBoxIt span").text().trim() || ""),
                        eventLabel: options.page.trackerData.productName || options.page.title || ""
                    });
                });
                $(document).on("gtm.click.upload", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "Upload",
                        eventLabel: options.page.trackerData.productName || options.page.title || ""
                    });
                });
                $(document).on("gtm.click.live", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "Live Camera",
                        eventLabel: options.page.trackerData.productName || options.page.title || ""
                    });
                });
                $(document).on("gtm.click.tryon", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "Try On",
                        eventLabel: options.page.trackerData.productName || options.page.title || ""
                    });
                });
                $(document).on("gtm.click.exit", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "Exit",
                        eventLabel: options.page.trackerData.productName || options.page.title || ""
                    });
                });
                $(document).on("gtm.share.facebook", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "Share on Facebook",
                        eventLabel: options.page.trackerData.productName || options.page.title || ""
                    });
                });
                $(document).on("gtm.share.twitter", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "Share on Twitter",
                        eventLabel: options.page.trackerData.productName || options.page.title || ""
                    });
                });
                $(document).on("gtm.share.pinterest", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "Share on Pinterest",
                        eventLabel: options.page.trackerData.productName || options.page.title || ""
                    });
                });
                $(document).on("gtm.share.download", function() {
                    options.googletagmanagement.pushEventData({
                        event: "e_TryOn",
                        eventCategory: "Live Try On",
                        eventAction: "Download",
                        eventLabel: options.page.trackerData.productName || options.page.title || ""
                    });
                });
            }
        },
        liveChatHeaderLinkClick: function(canCreateDiscussions) {
            $("body").on("click", "#LPChatNavigationPushIn a,#LPChatHeaderLink a", function(canCreateDiscussions, isSlidingUp) {
                if (window.localStorage) {
                    window.localStorage.setItem("liveChatStartDate", (new Date).getTime());
                }
                if (null != canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_liveChatStart",
                        chatEntrance: "header"
                    });
                }
            });
        },
        liveChatCustomerServiceLinkClick: function(canCreateDiscussions) {
            $("body").on("click", "#LPChatCustomerService a", function(canCreateDiscussions, isSlidingUp) {
                if (window.localStorage) {
                    window.localStorage.setItem("liveChatStartDate", (new Date).getTime());
                }
                if (null != canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_liveChatStart",
                        chatEntrance: "customerservice"
                    });
                }
            });
        },
        liveChatStickyTabOnMobile: function(canCreateDiscussions) {
            $("body").on("click", ".LPMlabel", function(canCreateDiscussions, isSlidingUp) {
                if (window.localStorage) {
                    window.localStorage.setItem("liveChatStartDate", (new Date).getTime());
                }
                if (null != canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_liveChatStart",
                        chatEntrance: "sticky tab on mobile"
                    });
                }
            });
        },
        clickLivechatCloseHandler: function(canCreateDiscussions) {
            $(document).on("click", "#lpChat div[class='lp_close-icon lp_icon-white']", function(s, images) {
                /** @type {number} */
                s = 0;
                if (window.localStorage) {
                    /** @type {number} */
                    s = (new Date).getTime();
                    /** @type {(null|string)} */
                    images = window.localStorage.getItem("liveChatStartDate");
                    /** @type {number} */
                    s = (s - images) / 6E4;
                    window.localStorage.removeItem("liveChatStartDate");
                }
                if (null != canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_liveChatStop",
                        chatLength: s.toFixed()
                    });
                }
            });
        },
        liveChatToasterPopUp: function(canCreateDiscussions) {
            $(document).on("click", ".LPMimage", function(canCreateDiscussions, isSlidingUp) {
                if (window.localStorage) {
                    window.localStorage.setItem("liveChatStartDate", (new Date).getTime());
                }
                if (null != canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_liveChatStart",
                        chatEntrance: "toaster pop up"
                    });
                }
            });
        },
        quickView: function(name) {
            $(document).on("openQuickview.dialog", function(record, line) {
                if (null != name && "quickviewUrl" in line && line.quickviewUrl) {
                    if (null != line.quickviewUrl.match(/uuid=([^&]+)/) && null != line.quickviewUrl.match(/quantity=([^&]+)/)) {
                        /** @type {string} */
                        $scope.source = "update";
                        $scope.pid = line.quickviewUrl.match(/(?!.*\/)[^.]+/);
                        /** @type {number} */
                        $scope.qty = parseInt(line.quickviewUrl.match(/quantity=([^&]+)/)[1]);
                    }
                    if (null != line.quickviewUrl.match(/productlistowner=([^&]+)/)) {
                        /** @type {string} */
                        $scope.source = "wishlist";
                    }
                    line = 0 < line.quickviewUrl.indexOf(".html") ? line.productId || line.quickviewUrl.match(/(?!.*\/)[^.]+/) : line.quickviewUrl.match(/(?!.+pid)=[^&]+/)[0].split("=")[1];
                    record = $("#product-dynamic-tracking-" + line);
                    var val = record.data("top-category");
                    var subSection = record.data("category");
                    var product_name = record.data("product-name");
                    var discount_amount = record.data("fromated-price");
                    var n = record.data("product-number-reviews");
                    var q = record.data("product-number-stars");
                    var u = record.data("product-listing");
                    var r = record.data("product-status");
                    var productType = record.data("product-type");
                    var oilSections = record.data("product-section");
                    var brand = record.data("product-brand");
                    var breakout = record.data("category-breakout");
                    name.quickView = {
                        sku: line,
                        category: val,
                        subcategory: subSection,
                        name: product_name,
                        price: discount_amount,
                        numberReviews: n,
                        numberStars: q,
                        productListing: u,
                        productStatus: r,
                        productType: productType,
                        pageType: "Product Page",
                        subSection: subSection,
                        brand: brand,
                        breakout: breakout,
                        section: oilSections
                    };
                    /** @type {!Array} */
                    val = [];
                    val.push(line);
                    render(name, val);
                    line = $(".product_tabs li.ui-state-active,.product_tabs li.selected").find("a").first().text().trim();
                    if (void 0 != line && "" != line && options.preferences.enableTabEvent) {
                        options.googletagmanagement.pushEventData({
                            event: "e_tab",
                            productTab: $(".product_tabs li.ui-state-active,.product_tabs li.selected").find("a").first().text().trim(),
                            productName: record.data("product-name") || name.productName || ""
                        });
                    }
                }
            });
            $(document).on("click", "#QuickViewDialog .product_tabs li", function() {
                var content = $("#product-dynamic-tracking-" + (options.page.currentProduct && options.page.currentProduct.masterID));
                options.googletagmanagement.pushEventData({
                    event: "e_tab",
                    productTab: $(this).find("a").text().trim(),
                    productName: content.data("product-name") || name.productName || ""
                });
            });
        },
        foundationFinderEvents: function() {
            var d = $(document);
            d.on("click", ".ff-landing .landing-link", function() {
                var $example = $(this);
                options.googletagmanagement.pushEventData({
                    event: "uaevent",
                    ecommerce: void 0,
                    eventCategory: "foundation finder",
                    eventAction: "select",
                    eventLabel: $example.find("h4").text().toLowerCase()
                });
            });
            d.on("click", ".ff-body .step .choices", function() {
                var $quantity = $(this);
                options.googletagmanagement.pushEventData({
                    event: "uaevent",
                    ecommerce: void 0,
                    eventCategory: "foundation finder::" + $quantity.parents(".ff-body").siblings(".ff-head").find("h1").text().toLowerCase(),
                    eventAction: "select::step " + $quantity.parents(".step").data("step"),
                    eventLabel: $quantity.find(".choice.selected").find(".title").text().toLowerCase()
                });
            });
            d.on("click", ".button.go-to-select-shade", function() {
                var d = $(this);
                options.googletagmanagement.pushEventData({
                    event: "uaevent",
                    ecommerce: void 0,
                    eventCategory: "foundation finder::" + d.parents(".select-shade-dialog").siblings(".tp-body").find("h1").text().toLowerCase(),
                    eventAction: "select::step 4",
                    eventLabel: d.text().toLowerCase()
                });
            });
            $(".ff-body").on("change", "select", function() {
                var $axis = $(this);
                options.googletagmanagement.pushEventData({
                    event: "uaevent",
                    ecommerce: void 0,
                    eventCategory: "foundation finder::" + $axis.parents(".ff-body").siblings(".ff-head").find("h1").text().toLowerCase(),
                    eventAction: "select::step " + $axis.parents(".step").data("step"),
                    eventLabel: $axis.siblings(".selectboxit-container").find(".selectboxit-text").text().toLowerCase()
                });
            });
            d.on("click", ".ff-body .cta button", function() {
                var d = $(this);
                options.googletagmanagement.pushEventData({
                    event: "uaevent",
                    ecommerce: void 0,
                    eventCategory: "foundation finder::" + d.parents(".ff-body").siblings(".ff-head").find("h1").text().toLowerCase(),
                    eventAction: "select::step " + d.parents(".step").data("step"),
                    eventLabel: d.text().toLowerCase()
                });
            });
        },
        addtobag: function(value) {
            $(document).on("click", ".ctas_wrapper button", function(groups) {
                if (null != value) {
                    /** @type {!Array} */
                    groups = [];
                    var numberOfFrustums = $(".engraving_product_tile").length;
                    var result;
                    var match;
                    var item;
                    var quantity;
                    var opt_pathToBitJS;
                    var $contentCols = $(".product_image.caps_image");
                    /** @type {number} */
                    var n = 0;
                    for (; n < numberOfFrustums; n++) {
                        match = $(".engraving_product_tile").eq(n).attr("data-pid");
                        item = "eeProductsOnPage" in options.page && options.page.eeProductsOnPage[match];
                        quantity = $(".engraving_product_tile input").eq(2 + 3 * n).attr("value");
                        opt_pathToBitJS = $(".variation_name .name_swatch").eq(n).text().trim();
                        result = $(".engraving_product_tile").eq(n).attr("class");
                        match = "default" == $contentCols.eq(n).data("selectedcap") ? $contentCols.eq(n).data("capdefaultvalue") : $contentCols.eq(n).data("selectedcap");
                        /** @type {string} */
                        result = 0 <= result.indexOf("engraved") ? "Yes" : "No";
                        if (item) {
                            item = {
                                name: item.name,
                                id: item.id,
                                brand: options.page.currentProduct.brand || item.brand || "",
                                price: item.price || "",
                                category: item.category || "",
                                variant: item.variantID || "",
                                quantity: quantity,
                                dimension22: item.variantID || "",
                                dimension51: opt_pathToBitJS || "",
                                dimension54: opt_pathToBitJS || "",
                                dimension55: item.style || "",
                                dimension88: result || "",
                                dimension89: item.personalEngravingEnabled || ""
                            };
                            if (match) {
                                item.dimension186 = match;
                            }
                            match = item;
                        } else {
                            match = void 0;
                        }
                        groups.push(match);
                    }
                    options.googletagmanagement.pushEventData({
                        event: "e_addToBag",
                        ecommerce: {
                            currencyCode: value.currencyCode,
                            add: {
                                products: groups
                            }
                        }
                    });
                }
            });
            $(document).on("dramming_addtocart", ".pt_dramming .selected-shades-cta .add-bundle-to-cart", function(plist, opts) {
                /** @type {!Array} */
                plist = [];
                var result;
                if (null != value) {
                    result = "eeProductsOnPage" in options.page && options.page.eeProductsOnPage[opts.bundleId];
                    result = cb(result, value.storePickupData);
                    result.variant = opts.variant;
                    /** @type {number} */
                    result.quantity = 1;
                    plist.push(result);
                    options.googletagmanagement.pushEventData({
                        event: "e_addToBag",
                        ecommerce: {
                            currencyCode: value.currencyCode,
                            add: {
                                products: plist
                            }
                        }
                    });
                }
            });
        },
        signupPopup: function(result) {
            $(document).on("popup.show", function(canCreateDiscussions, f) {
                if ("modal-popup-2" === $(f.source).attr("id")) {
                    options.googletagmanagement.pushEventData({
                        event: "e_signupPopupShow",
                        pageType: result.pageType || "",
                        pageName: result.pgName || "",
                        section: result.section || "",
                        subSection: result.subSection || ""
                    });
                }
            });
        },
        addToWishlist: function(id) {
            $(document).on("click", ".wishlist_action", function() {
                var result;
                result = $(this).attr("data-pid");
                result = cb(options.page.eeProductsOnPage[result] || {});
                if (null != result) {
                    options.googletagmanagement.pushEventData({
                        event: "e_addWish",
                        productName: result.name || "",
                        price: result.price || "0"
                    });
                }
            });
        },
        searchWishlist: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                $(document).on("click", "#dwfrm_wishlist_search .button", function() {
                    if ("" != $("#dwfrm_wishlist_search_email").val()) {
                        options.googletagmanagement.pushEventData({
                            event: "e_searchWish"
                        });
                    }
                });
            }
        },
        updateWishlist: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                $(document).on("click", ".wishlist_add_to_cart_form_js .item_option.update .button", function() {
                    var module = {
                        event: "e_updateWishlist",
                        priority: $(this).closest(".wishlist_items").find(".priority select option:selected").text().trim(),
                        productName: $(this).closest(".wishlist_items").find(".item_details .product_name").text().trim()
                    };
                    options.googletagmanagement.pushEventData(module);
                });
            }
        },
        interceptAccountLogin: function(data) {
            if (null != data && "loginStatus" in data && null != data.loginStatus && 0 == data.stepNumber) {
                options.googletagmanagement.pushEventData({
                    event: "e_login",
                    loginStatus: data.loginStatus
                });
            }
        },
        internalSearchSort: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                $(document).on("click", ".refinement_list_link", function() {
                    var d = $(this).text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    var category = $(this).parents(".refinement").find("h3 .name").text().replace(/(\r\n|\n|\r)/gm, "").trim() || "";
                    options.googletagmanagement.pushEventData({
                        event: "e_searchFilter",
                        filterSelected: d,
                        filterCategory: category
                    });
                });
                $(document).on("click", ".refinement_sortby .refinement_list_item a", function() {
                    var d = $(this).text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    options.googletagmanagement.pushEventData({
                        event: "e_searchSort",
                        filterSelected: d
                    });
                });
            }
        },
        shadeTool: function(value) {
            $(document).on("searchforshade.start", function(canCreateDiscussions, result) {
                if (null != value) {
                    options.googletagmanagement.pushEventData({
                        event: "e_shadeTool",
                        step: "step 1",
                        selection: result.selection,
                        toolUser: "yes"
                    });
                }
            });
            $(document).on("click", ".sf_btn_next", function(canCreateDiscussions, isSlidingUp) {
                if (null != value) {
                    options.googletagmanagement.pushEventData({
                        event: "e_shadeTool",
                        step: "step 2",
                        toolUser: "yes"
                    });
                }
            });
            $(document).on("sfRecommendation.next", function(canCreateDiscussions, state) {
                if (null != value) {
                    options.googletagmanagement.pushEventData({
                        event: "e_shadeTool",
                        step: state.step,
                        selection: state.selection,
                        toolUser: "yes"
                    });
                }
            });
            $(document).on("sfRecommendation3b.next", function(app_name, state) {
                if (null != value) {
                    options.googletagmanagement.pushEventData({
                        event: "e_shadeTool",
                        step: state.step,
                        selection: state.selection,
                        toolUser: "yes"
                    });
                    $(".sf_step_recommendation").find(".sf_circle_text .sf_shade_id").text().trim();
                    /** @type {string} */
                    state.step = "step 3C";
                    app_name = state.selection + " - " + $(".sf_step_recommendation").find(".sf_circle_text .sf_shade_id").text().trim();
                    if (state.laststep) {
                        options.googletagmanagement.pushEventData({
                            event: "e_shadeTool",
                            step: "step 4",
                            selection: app_name,
                            toolUser: "yes"
                        });
                    }
                }
            });
            $(document).on("sf_saveToBeautyProfile", function(canCreateDiscussions, result) {
                if (null != value) {
                    options.googletagmanagement.pushEventData({
                        event: "e_shadeTool",
                        step: "beautyProfile",
                        selection: result.selection
                    });
                }
            });
            $(document).on("addedRoutine", function(selection, result) {
                result = result || {};
                selection = result.selection;
                var data = (JSON.parse(result.products) || {}).productSetProducts || [];
                /** @type {!Array} */
                result = [];
                /** @type {number} */
                var i = 0;
                for (; i < data.length; i++) {
                    var line;
                    line = options.googletagmanagement.globalconfig.getBasicProductTrackingObj(options.page.eeProductsOnPage && options.page.eeProductsOnPage[data[i].pid]);
                    line.quantity = data[i].qty;
                    result.push(line);
                }
                if (null != $scope && "source" in $scope && "update" == $scope.source) {
                    /** @type {!Array} */
                    data = [];
                    i = options.googletagmanagement.globalconfig.getBasicProductTrackingObj(options.page.eeProductsOnPage && options.page.eeProductsOnPage[$scope.pid]);
                    /** @type {number} */
                    i.quantity = $scope.qty;
                    data.push(i);
                    selection = {
                        event: "e_shadeTool",
                        step: "Add Routine",
                        selection: selection,
                        ecommerce: {
                            currencyCode: value.currencyCode || "",
                            remove: {
                                products: data
                            },
                            add: {
                                products: result
                            }
                        }
                    };
                } else {
                    selection = {
                        event: "e_shadeTool",
                        step: "Add Routine",
                        selection: selection,
                        ecommerce: {
                            currencyCode: value.currencyCode || "",
                            add: {
                                products: result
                            }
                        }
                    };
                }
                options.googletagmanagement.pushEventData(selection);
            });
        },
        colorMirror: function(canCreateDiscussions) {
            $(document).on("mousedown touchstart", "#color-mirror-main nav a", function(canCreateDiscussions, isSlidingUp) {
                options.googletagmanagement.pushEventData({
                    event: "e_colorMirror",
                    mirrorButton: $(this).text().trim(),
                    toolUser: "yes"
                });
            });
        },
        removeFavorite: function(data) {
            $(document).on("click", ".product_favorite_remove", function() {
                if (null != data) {
                    options.googletagmanagement.pushEventData({
                        event: "e_removeFav",
                        favoriteType: "products",
                        productName: $(this).siblings(".product_tile").find(".product_name").text().trim() || ""
                    });
                }
            });
        },
        moodboards: function(canCreateDiscussions) {
            $(document).on("click", ".push_content", function() {
                /** @type {*} */
                var x = JSON.parse($(this).closest(".moodboard_push").attr("data-configuration"));
                if (null != canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_moodboard",
                        moodboardAction: x.type,
                        widget: x.contentId
                    });
                }
            });
            $(document).on("mousedown touchstart", "#white-label-capture-container .formactions button", function() {
                /** @type {*} */
                var x = JSON.parse($(this).closest(".moodboard_push").attr("data-configuration"));
                if (null != canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_moodboard",
                        moodboardAction: x.type,
                        widget: x.contentId
                    });
                }
            });
        },
        footerExternalSocialLink: function(isSlidingUp) {
            $(document).on("click", ".footer_sosial_links a", function(canCreateDiscussions) {
                canCreateDiscussions = $(this).data("trackingtext");
                if (null != isSlidingUp) {
                    options.googletagmanagement.pushEventData({
                        event: "e_externalLink",
                        externalWebsiteName: canCreateDiscussions,
                        externalUrl: $(this).attr("href")
                    });
                }
            });
        },
        myBeautyProfile: function(canCreateDiscussions) {
            $(document).on("change", "#mybeautyprofile select", function(canCreateDiscussions) {
                if (null != canCreateDiscussions) {
                    if ("eye" === $(this).attr("name")) {
                        options.googletagmanagement.pushEventData({
                            event: "e_accountAction",
                            interactionType: "Update Beauty Profile",
                            eyeColor: $(this).find("option:selected").text().trim()
                        });
                    } else {
                        if ("hair" === $(this).attr("name")) {
                            options.googletagmanagement.pushEventData({
                                event: "e_accountAction",
                                interactionType: "Update Beauty Profile",
                                hair: $(this).find("option:selected").text().trim()
                            });
                        } else {
                            if ("skin" === $(this).attr("name")) {
                                options.googletagmanagement.pushEventData({
                                    event: "e_accountAction",
                                    interactionType: "Update Beauty Profile",
                                    skinTone: $(this).find("option:selected").text().trim()
                                });
                            }
                        }
                    }
                }
            });
        },
        taazQuickViewEvents: function() {
            $("body").off("taazProduct.variationChangedEvents").on("taazProduct.variationChangedEvents", function(b, canCreateDiscussions) {
                save();
            });
            $("body").off("taazModel.changed").on("taazModel.changed", function(b, canCreateDiscussions) {
                success();
            });
        },
        bindTaazEvents: function(b) {
            $("body").off("taazProduct.variationChangedEvents").on("taazProduct.variationChangedEvents", function(b, canCreateDiscussions) {
                save();
            });
            $("body").off("taazModel.changed").on("taazModel.changed", function(b, canCreateDiscussions) {
                success();
            });
        },
        confirmationEvents: function(canCreateDiscussions) {
            options.googletagmanagement.pushEventData({
                event: "e_Transaction"
            });
        },
        searchEvent: function(ev) {
            if (null != ev) {
                options.googletagmanagement.pushEventData({
                    event: "e_OnSiteSearch"
                });
            }
        },
        errorEvent: function(event) {
            if (null != event) {
                options.googletagmanagement.pushEventData({
                    event: "e_404"
                });
            }
        },
        contactusFormEvent: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                options.googletagmanagement.pushEventData({
                    event: "e_contactForm"
                });
            }
        },
        checkoutEvents: function(event) {
            if (null !== event) {
                var b = options.page.trackerData.currentSectionID;
                var currentProcesses = "eeProductsInCart" in options.page && options.page.eeProductsInCart;
                if ("cartProducts" in options.page.trackerData) {
                    /** @type {!Array} */
                    var h = [];
                    var annotationsData = options.page.trackerData.cartProducts || [];
                    var data;
                    var result;
                    /** @type {number} */
                    var i = 0;
                    for (; i < annotationsData.length; i++) {
                        data = annotationsData[i];
                        data.metric3 = currentProcesses[i] && currentProcesses[i].pid == data.variantID ? 0 < currentProcesses[i].productDiscount ? currentProcesses[i].productDiscount.toString() : "" : "";
                        data.coupon = 0 < data.metric3 ? data.coupon : "";
                        result = {
                            name: data.name,
                            id: data.masterProductId,
                            quantity: data.quantity,
                            brand: data.brand || data.categoryName || "",
                            price: data.isSample || data.isBonus ? "0" : data.price.toString(),
                            category: data.subcategoryName || "",
                            variant: data.size || data.color || "",
                            metric3: data.metric3,
                            coupon: data.isSample ? "Sample Product" : data.coupon,
                            dimension54: data.color || "",
                            dimension22: data.variantID || "",
                            dimension88: data.name,
                            dimension89: data.personalEngravingEnabled || ""
                        };
                        if (data.variant && 0 == data.variant.indexOf("dramming")) {
                            result.variant = data.variant;
                        }
                        if (currentProcesses[i] && "optionProductSelected" in currentProcesses[i]) {
                            result.dimension186 = currentProcesses[i].optionProductSelected;
                        }
                        if (currentProcesses[i] && "isVirtualPreviewFlag" in currentProcesses[i]) {
                            result.dimension97 = currentProcesses[i].isVirtualPreviewFlag;
                        }
                        h.push(result);
                    }
                }
                if ("cart" != options.page.ns) {
                    if (window.localStorage && window.localStorage.getItem("ysl-gtm-start-checkout") && "member" == event.userType) {
                        next("login", h);
                        window.localStorage.setItem("ysl-gtm-start-checkout", "");
                    }
                    if ("login" == b) {
                        window.localStorage.setItem("ysl-gtm-start-checkout", "");
                    }
                    if ("addresses" == b && "samples" != r && "member" == event.userType) {
                        next("samples", h);
                    }
                    next(b, h);
                }
                /** @type {!Array} */
                var steps = ["login", "addresses"];
                /** @type {string} */
                var r = "";
                $(document).on("section", function(b, job) {
                    b = job.obj.id;
                    if (!("loaded" != job.action || -1 != steps.indexOf(b) && "login" != r)) {
                        if ("addresses" == b && "login" == r) {
                            next("samples", h);
                        }
                        steps.push(b);
                        next(b, h);
                    }
                    r = b;
                });
            }
        },
        promoCodeEvents: function() {
            ctx.window.on("changeCouponsCallback", function(canCreateDiscussions, e) {
                var deploy;
                try {
                    /** @type {*} */
                    deploy = JSON.parse($($.trim(e)).find("#statuses").html());
                } catch (sa) {
                    return;
                }
                if ("add" == deploy.couponEvent) {
                    options.googletagmanagement.pushEventData({
                        event: "e_promo_code_submitted",
                        promoCodeValid: deploy.success && deploy.isApplyCoupon ? "Successful" : "Unsuccessful",
                        promoCode: $(".coupons .cartcoupon .value").text().trim()
                    });
                }
            });
            /** @type {null} */
            var d = null;
            ctx.document.on("module", function(a, b) {
                if ("couponcode" == b.id) {
                    a = $("#dwfrm_couponcode_couponCode");
                    if ("submited" == b.action) {
                        d = a.val();
                    } else {
                        if ("initialized" == b.action && d) {
                            b = a.closest(".chmodule_couponcode").find("button[value=" + d + "]").closest(".couponcode_item").hasClass("applied");
                            a = a.parents(".js_coupon_code").hasClass("f_state_error");
                            options.googletagmanagement.pushEventData({
                                event: "e_promo_code_submitted",
                                promoCodeValid: b && !a ? "Successful" : "Unsuccessful",
                                promoCode: d
                            });
                            /** @type {null} */
                            d = null;
                        }
                    }
                }
            });
        },
        notifyMe: function(data) {
            ctx.document.on("notifyme_done", function(canCreateDiscussions, manifest) {
                options.googletagmanagement.pushEventData({
                    event: "e_stockReminder",
                    productName: manifest.productName
                });
            });
        },
        dramming: function(canCreateDiscussions) {
            ctx.document.on("dramming_description_cta", ".pt_dramming .shade-description-container .js-add-shade", function(canCreateDiscussions, error) {
                options.googletagmanagement.pushEventData({
                    event: "uaevent",
                    eventCategory: "dramming",
                    eventAction: "select::" + error.action,
                    eventLabel: error.shadeName
                });
            });
        },
        customEvents: function(events) {
            $(document).on("module", function(canCreateDiscussions, items) {
                if ("completed" == items.action && "signin" == items.id && "true" == $("#isDWUserAuthenticated").val()) {
                    options.googletagmanagement.pushEventData({
                        event: "e_login",
                        loginStatus: "standard"
                    });
                }
            });
            $(document).on("checkout.register", function(canCreateDiscussions, req) {
                if (null != req) {
                    options.googletagmanagement.pushEventData({
                        event: "e_accountCreated",
                        emailSubscriber: "emailsubscribe" in req ? req.emailsubscribe : "",
                        signupLocation: "emailsubscribe" in req ? req.location : "",
                        dob: "birthday" in req ? req.birthday : "",
                        userType: "Signed",
                        accountType: "method" in req ? req.method : ""
                    });
                }
            });
        },
        loyaltyPush: function(canCreateDiscussions) {
            $(document).on("click", ".js_loyalty_cta", function(b) {
                if (null != canCreateDiscussions) {
                    insert("loyalty interest", $(this).text().trim().toLowerCase());
                }
            });
            $(document).on("enrollmentSuccess", function(b) {
                if (null != canCreateDiscussions) {
                    insert("registration", "loyalty");
                }
            });
            $(document).on("click", "#RegistrationForm .submit_button", function() {
                if (null != canCreateDiscussions && $(this).closest("form").find("#dwfrm_profile_customer_loyalty").is(":checked")) {
                    insert("registration", "loyalty");
                }
            });
            $(document).on("click", ".js_loyalty_footer_nav_link", function() {
                if (null != canCreateDiscussions) {
                    options.googletagmanagement.pushEventData({
                        event: "e_nav",
                        eventCategory: "Interaction with Navigation",
                        eventAction: $(this).closest("ul").data("menu-type") + "Click",
                        eventLabel: $(this).text().replace(/(\r\n|\n|\r)/gm, "").trim()
                    });
                }
            });
            $(document).on("profileCompleteSuccess", function(b) {
                if (null != canCreateDiscussions) {
                    insert("loyalty", "select", "complete profile");
                }
            });
        },
        loyaltyEvents: function(value) {
            $(document).on("loyaltyRewardAddedToBag", function(plist, item) {
                /** @type {!Array} */
                plist = [];
                var data;
                if (null != value) {
                    data = "eeProductsOnPage" in options.page && options.page.eeProductsOnPage[item.pid];
                    data = cb(data);
                    data.variant = item.pid;
                    /** @type {number} */
                    data.quantity = 1;
                    /** @type {string} */
                    data.brand = "rewards";
                    plist.push(data);
                    options.googletagmanagement.pushEventData({
                        event: "e_addToBag",
                        e_addToBagLocation: options.page.currentSectionID || "",
                        ecommerce: {
                            currencyCode: value.currencyCode,
                            add: {
                                products: plist
                            }
                        }
                    });
                }
            });
        },
        eeProductImpressions: function(files) {
            update(files);
            ctx.window.on("scroll", function() {
                setTimeout(function() {
                    update(files);
                }, 30);
            });
        },
        rewardLinks: function(value) {
            if (null !== value) {
                $(document).on("click", ".js_rewardtile_redeem_button, .js_rewardtile_learn_button", function() {
                    var e;
                    if ((e = $(this).attr("data-reward-id")) && "eeProductsOnPage" in options.page) {
                        /** @type {!Array} */
                        var groups = [];
                        e = options.page.eeProductsOnPage[e] || {};
                        var ret = cb(e);
                        var webmapLayers = void 0 !== value.advanceEcommerce ? value.advanceEcommerce.advanceImpressions : {};
                        /** @type {number} */
                        var i = 0;
                        /** @type {number} */
                        var j = 0;
                        for (; j < webmapLayers.length; j++) {
                            if (webmapLayers[j].id === e.id) {
                                /** @type {number} */
                                i = j + 1;
                            }
                        }
                        /** @type {number} */
                        ret.position = i;
                        /** @type {string} */
                        ret.brand = "rewards";
                        groups.push(ret);
                        e = "ecommerce" in value && 0 < value.ecommerce.impressions.length || "advanceEcommerce" in value && 0 < value.advanceEcommerce.advanceImpressions.length ? "ecommerce" in value && 0 < value.ecommerce.impressions.length ? value.ecommerce.impressions.pop().list : value.advanceEcommerce.advanceImpressions.pop().list : value.listName;
                        options.googletagmanagement.pushEventData({
                            event: "e_productClick",
                            ecommerce: {
                                click: {
                                    actionField: {
                                        list: e
                                    },
                                    products: groups
                                }
                            }
                        });
                    }
                });
            }
        },
        productLinks: function(value) {
            if (null !== value) {
                $(document).on("click", ".product_image_wrapper, .product_name, .button_shop_now, .learnmorebutton", function() {
                    var result;
                    var a;
                    var t = $(this);
                    result = t.closest(".product_tile").attr("data-itemid");
                    a = "listName" in value ? value.listName : t.parents(".recommendations_block").find("h2").first().text();
                    value.listName = a;
                    t.closest(".product_tile").find(".b-product_tile-subtitle-link").text().trim();
                    if (void 0 == result && -1 < ["cart", "checkout"].indexOf(options.page.currentPage)) {
                        result = t.find(".product_id").find(".product_id_value").text();
                        t.find(".product_id").find(".product_subtitle").text();
                    }
                    var i = result;
                    if (i && "eeProductsOnPage" in options.page) {
                        /** @type {!Array} */
                        result = [];
                        t = options.page.eeProductsOnPage[i] || {};
                        a = cb(t);
                        a.position = add(i);
                        a.dimension22 = t.dimension22;
                        if ($("body").hasClass("clp")) {
                            i = $(".search_result_items  .product_tile_wrapper");
                            t = i.find("[data-itemid=" + t.id + "]").parent();
                            a.position = i.index(t) + 1;
                        }
                        result.push(a);
                        options.googletagmanagement.pushEventData({
                            event: "e_productClick",
                            ecommerce: {
                                click: {
                                    actionField: {
                                        list: "Category Page List (SubCLP: " + a.category + ")"
                                    },
                                    products: result
                                }
                            }
                        });
                    }
                });
            }
        },
        eeRemoveFromCartEvents: function(value) {
            if (null !== value && ($(document).on("minicart.lineItemRemoved", function(b, data) {
                    if (data && data.pid && !data.isGiftCert) {
                        callback(value, data.pid, data.qty, data.selectedStoreInfo);
                    }
                }), -1 < ["cart", "checkout"].indexOf(options.page.currentPage))) {
                $("#cart-items-form, form.submit_order").on("click", ".item_user_actions button", function() {
                    if (!$(this).closest(".js_loyalty_vault_edit").length) {
                        if (void 0 != $(this).data("giftcert-id")) {
                            var data = $(this).parents(".rowgiftcert").find(".item_price").text().trim();
                            data = data ? data.toString().replace(/[^\d.]/g, "") : "";
                            /** @type {!Array} */
                            var groups = [];
                            groups.push({
                                name: "egift card",
                                productCategory: "egift card",
                                pageType: "Product",
                                productType: "egift card",
                                price: data
                            });
                            options.googletagmanagement.pushEventData({
                                event: "e_removeFromBag",
                                ecommerce: {
                                    currencyCode: value.currencyCode || "",
                                    remove: {
                                        products: groups
                                    }
                                }
                            });
                        } else {
                            data = $(this).parents(".cart_row");
                            groups = data.find("select.quantity_select, input.quantity_select").val() || 1;
                            var itemSkillKinds = data.data("selectedStoreInfo");
                            value.variant = data.find(".attribute .value").text().trim() || "";
                            callback(value, $(this).data("pid"), groups, itemSkillKinds);
                        }
                    }
                });
            }
        },
        vaultRewardEvents: function(value) {
            $(".js_rewards_carousel_container").on("click", ".js_rewards_select", function() {
                var pid = $(this).attr("data-pid");
                show({
                    eventAction: "select",
                    eventLabel: "choosedifferentreward :: " + (options && options.page && options.page.eeProductsOnPage && options.page.eeProductsOnPage[pid] ? options.page.eeProductsOnPage[pid].name : "").toLowerCase()
                });
            });
            $("[data-js-vault-reward]").click(function() {
                var label = ($(this).text().trim() || "").toLowerCase();
                show({
                    eventAction: "fill your box",
                    eventLabel: label
                });
            });
            $(document).on("click", "[data-js-vault-bonus-tile] a.product_image_wrapper, [data-js-vault-bonus-tile] a.product_name", function() {
                var course = ($(this).attr("title") || "").toLowerCase();
                show({
                    eventAction: "fillyourbox",
                    eventLabel: "pickyourfavoritelipsticks :: " + course
                });
            });
            $(document).on("click", "[data-js-product-edit]", function() {
                var course = ($(this).data("title") || "").toLowerCase();
                show({
                    eventAction: "fillyourbox",
                    eventLabel: "edit :: " + course
                });
            });
            $(document).on("click", "[data-js-product-remove]", function() {
                var course = ($(this).data("title") || "").toLowerCase();
                show({
                    eventAction: "fillyourbox",
                    eventLabel: "remove :: " + course
                });
            });
            $(document).on("click", ".redeem[data-js-redeem-button]", function() {
                getCount({
                    e_addToBagLocation: "cart" === options.page.currentPage ? "Cart Page" : "Product page",
                    currencyCode: value.currencyCode,
                    products: init($(this))
                });
            });
            $(document).on("click", "#minicart_removeproduct[data-js-minicart-vault-reward=true]", function() {
                var jField = $(this);
                val({
                    currencyCode: value.currencyCode,
                    products: onMessage(jField.closest(".mini-cart-product__info"))
                });
            });
        },
        cartVaultRewardEvents: function(value) {
            $(document).on("click", "[data-is-vault-reward=true]", function() {
                show({
                    eventAction: "select",
                    eventLabel: "cart :: filltoredeem"
                });
            });
            $(document).on("click", ".update[data-js-redeem-button]", function() {
                var input = $(this);
                /** @type {!Array} */
                var groups = [];
                /** @type {!Array} */
                var res = [];
                var results = init(input);
                input = onMessage(input.closest("[data-js-vault-edit-wrapper]"));
                /** @type {number} */
                var i = 0;
                for (; i < results.length; i++) {
                    var list = results[i];
                    var object = input[i];
                    if (list.id != object.id) {
                        groups.push(object);
                        res.push(list);
                    }
                }
                if (groups.length) {
                    val({
                        currencyCode: value.currencyCode,
                        products: groups
                    });
                }
                if (res.length) {
                    getCount({
                        e_addToBagLocation: "Cart page",
                        currencyCode: value.currencyCode,
                        products: res
                    });
                }
            });
            $("#cart-items-form").on("click", ".item_user_actions button", function() {
                var $last_br = $(this).closest(".js_loyalty_vault_edit");
                if ($last_br.length) {
                    val({
                        currencyCode: value.currencyCode,
                        products: onMessage($last_br.next("[data-js-vault-edit-wrapper]"))
                    });
                }
            });
        },
        eePromoClickList: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                $(document).on("click", "a[data-contentType],a[data-contentName],a[data-contentID],a[data-contentPosition],area[data-contentType],area[data-contentName],area[data-contentID],area[data-contentPosition]", function() {
                    var $ev = $(this);
                    var version = $ev.closest("li").data("index");
                    $ev.closest(".carousel").data("prefixPosition");
                    var f = $ev.attr("data-contentName") || "";
                    var spec = $ev.attr("data-contentType") || "";
                    version = $ev.attr("data-contentPosition") || (version ? 1 + version : 1);
                    var getdate = $ev.attr("data-contentID") || "";
                    if (!$ev.attr("data-ignorePromoClick")) {
                        /** @type {string} */
                        $ev = $ev.parents(".carousel:not(.enablePromoImpressionTag)").length || $ev.parents(".c-carousel") ? "e_carouselClick" : "e_promotionClick";
                        /** @type {!Array} */
                        var result = [];
                        result.push({
                            name: f,
                            position: version.toString(),
                            id: getdate,
                            creative: spec
                        });
                        if (options.preferences.enableStandardTags) {
                            options.googletagmanagement.pushEventData({
                                event: $ev,
                                contentName: f,
                                contentPosition: version
                            });
                        } else {
                            options.googletagmanagement.pushEventData({
                                event: $ev,
                                ecommerce: {
                                    promoClick: {
                                        promotions: result
                                    }
                                }
                            });
                        }
                    }
                });
            }
        },
        navigationClicks: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                $(document).on("click", ".main-nav a", function() {
                    /** @type {string} */
                    var moveMenu = "";
                    if (0 != $(this).parents(".level_1_list_item").length) {
                        moveMenu = moveMenu + $(this).parents(".level_1_list_item").find(".level_1_list_item_link").text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    }
                    if (0 != $(this).parents(".level_2_list_item").length) {
                        moveMenu = moveMenu + (" > " + $(this).parents(".level_2_list_item").find(".level_2_list_item_link").text().replace(/(\r\n|\n|\r)/gm, "").trim());
                    }
                    if (0 != $(this).parents(".level_3_list_item").length) {
                        moveMenu = moveMenu + (" > " + $(this).parents(".level_3_list_item").find(".level_3_list_item_link").text().replace(/(\r\n|\n|\r)/gm, "").trim());
                    }
                    options.googletagmanagement.pushEventData({
                        event: "e_nav",
                        menuType: "Main Menu",
                        menu: moveMenu
                    });
                });
                $(document).on("click", ".footer_navigation_asset a", function() {
                    var fontMenu = $(this).text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    options.googletagmanagement.pushEventData({
                        event: "e_nav",
                        menuType: "Footer Menu",
                        menu: fontMenu
                    });
                });
                $(document).on("click", ".utility_navigation_list a", function() {
                    var fontMenu = $(this).text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    options.googletagmanagement.pushEventData({
                        event: "e_nav",
                        menuType: "Header Menu",
                        menu: fontMenu
                    });
                });
                $(document).on("click", ".account-navigation-registered a", function() {
                    var fontMenu = $(this).text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    options.googletagmanagement.pushEventData({
                        event: "e_nav",
                        menuType: "Account Menu",
                        menu: fontMenu
                    });
                });
                $(document).on("click", ".mob-menu__list--main .mob-menu__submenu-link--level-3, .mob-menu__list--main .mob-menu__submenu-link--level-2, .mob-menu__item--main .custom_navigation_slot_3 a", function() {
                    /** @type {string} */
                    var moveMenu = "";
                    if (0 != $(this).parents(".mob-menu__item--main").length) {
                        moveMenu = moveMenu + $(this).parents(".mob-menu__item--main").find(".mob-menu__link--main").text().replace(/(\r\n|\n|\r)/gm, "").trim();
                    }
                    if (0 != $(this).parents(".mob-menu__submenu-item--level-2").length) {
                        moveMenu = moveMenu + (" > " + $(this).parents(".mob-menu__submenu-item--level-2").find(".mob-menu__submenu-link--level-2").text().replace(/(\r\n|\n|\r)/gm, "").trim());
                    }
                    if (0 != $(this).parents(".mob-menu__submenu-item--level-3").length) {
                        moveMenu = moveMenu + (" > " + $(this).parents(".mob-menu__submenu-item--level-3").find(".mob-menu__submenu-link--level-3").text().replace(/(\r\n|\n|\r)/gm, "").trim());
                    }
                    if ("" != moveMenu) {
                        options.googletagmanagement.pushEventData({
                            event: "e_nav",
                            menuType: "Main Menu",
                            menu: moveMenu
                        });
                    }
                });
            }
        },
        expiviEvents: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                $(document).on("click", ".js-expivi-alt-image a", function() {
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        ecommerce: "undefined",
                        eventCategory: "expivi",
                        eventAction: "click",
                        eventLabel: options.page.trackerData.productName || options.page.title || ""
                    });
                });
                $(document).on("touchstart mousedown", ".js-expivi-container-wrapper:not(.gtm-event-fired)", function() {
                    $(".js-expivi-container-wrapper:not(.gtm-event-fired)").addClass("gtm-event-fired");
                    options.googletagmanagement.pushEventData({
                        event: "uaevent",
                        ecommerce: "undefined",
                        eventCategory: "expivi",
                        eventAction: "interaction",
                        eventLabel: options.page.trackerData.productName || options.page.title || ""
                    });
                });
            }
        },
        carouselView: function(canCreateDiscussions) {
            if (null != canCreateDiscussions) {
                ctx.document.find(".c-carousel").has("a[data-contentName]").on("afterChange init", function(d, newPrinter, authorsStr) {
                    d = $(d.target).find(".slick-active .c-button");
                    if (0 < d.length && d.data("contentname") && !d.hasClass(".js-gtm-processed")) {
                        newPrinter = d.attr("data-contentName") || "";
                        authorsStr = d.attr("data-contentType") || "";
                        var h = d.attr("data-contentPosition") || "";
                        var getdate = d.attr("data-contentID") || "";
                        /** @type {!Array} */
                        var result = [];
                        result.push({
                            name: newPrinter,
                            position: h.toString(),
                            id: getdate,
                            creative: authorsStr
                        });
                        options.googletagmanagement.pushEventData({
                            event: "e_carouselView",
                            promoSlideChange: {
                                ecommerce: {
                                    promoView: {
                                        promotions: result
                                    }
                                }
                            }
                        });
                        d.addClass(".js-gtm-processed");
                    }
                });
            }
        },
        landingPageCTA: function(canCreateDiscussions) {
            var d = ctx.document.find(".c-sustainable__content a");
            d.on("click", function() {
                options.googletagmanagement.pushEventData({
                    event: "uaevent",
                    ecommerce: void 0,
                    eventCategory: "lp",
                    eventAction: d.text(),
                    eventLabel: d.attr("href")
                });
            });
        },
        landingPageContentClick: function(canCreateDiscussions) {
            var $lastTab = ctx.document.find(".content-item .content-item_link a");
            $lastTab.on("click", function() {
                options.googletagmanagement.pushEventData({
                    event: "uaevent",
                    ecommerce: void 0,
                    eventCategory: "lp",
                    eventAction: "content click",
                    eventLabel: $lastTab.attr("href")
                });
            });
        },
        promoBarClick: function() {
            $(document).on("click", ".header_promo_slot .promo_banner a", function() {
                var trk;
                var label;
                trk = $(this).parent().clone().children().remove().end().text().trim();
                label = options.pageContextObject && options.pageContextObject.currentPage ? options.pageContextObject.currentPage : "";
                if (options.page && "product" == options.page.type) {
                    /** @type {string} */
                    label = "PDP: " + options.page.title;
                }
                options.googletagmanagement.pushEventData({
                    event: "uaevent",
                    ecommerce: void 0,
                    eventCategory: "promo banner",
                    eventAction: "select::" + trk,
                    eventLabel: label
                });
            });
        }
    };
    options.googletagmanagement = options.googletagmanagement || {};
    options.googletagmanagement.customconfig = {
        getCustomPageVariableConfig: function() {
            ctx = {
                window: $(window),
                document: $(document)
            };
            return defaults;
        },
        getTagViewObjectConfig: function() {
            return item;
        },
        getEventsConfig: function() {
            return data;
        },
        getEventsLib: function() {
            return R;
        },
        initListeners: function() {
            initListeners();
        },
        getGlobalConfig: function() {
            if (options.page.updatedPageContext) {
                options.page.setContext($.extend(true, {}, options.page, options.page.updatedPageContext));
            }
            return globalConfig;
        },
        GTMInit: function(a22) {
            /** @type {!Window} */
            var last = window;
            last.superDataLayer = last.superDataLayer || [];
            last.superDataLayer.push({
                "gtm.start": (new Date).getTime(),
                event: "gtm.js"
            });
            /** @type {!Element} */
            last = document.getElementsByTagName("script")[0];
            /** @type {!Element} */
            var node = document.createElement("script");
            /** @type {boolean} */
            node.async = true;
            /** @type {string} */
            node.src = "//www.googletagmanager.com/gtm.js?id=" + a22 + "&l=superDataLayer";
            last.parentNode.insertBefore(node, last);
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @param {string} type
     * @return {?}
     */
    function validate(type) {
        return function(fname, element) {
            return this.optional(element) ? true : context.validator.regex[type].test($.trim(fname));
        };
    }
    var assertThrows = validate("multipleemails");
    var data = validate("email");
    /**
     * @return {?}
     */
    var func = function() {
        $(".loyalty_birthdate_day, .loyalty_birthdate_month, .loyalty_birthdate_year").parent().find(".error_message").html("");
        if ($(".loyalty_birthdate_day option:selected").val() && $(".loyalty_birthdate_month option:selected").val() && $(".loyalty_birthdate_year option:selected").val()) {
            /** @type {number} */
            var day = parseInt($(".loyalty_birthdate_day option:selected").val(), 10);
            /** @type {number} */
            var month = parseInt($(".loyalty_birthdate_month option:selected").val(), 10);
            /** @type {number} */
            var date = parseInt($(".loyalty_birthdate_year option:selected").val(), 10);
            /** @type {!Date} */
            date = new Date(date, month - 1, day);
            return date.getMonth() + 1 == month && date.getDate() == Number(day);
        }
        return true;
    };
    /**
     * @return {?}
     */
    var fn = function() {
        $(".loyalty_birthdate_year").parent().find(".error_message").html("");
        if ($(".loyalty_birthdate_year option:selected").val()) {
            /** @type {number} */
            var dtDate = parseInt($(".loyalty_birthdate_day option:selected").val(), 10);
            /** @type {number} */
            var month = parseInt($(".loyalty_birthdate_month option:selected").val(), 10);
            /** @type {number} */
            var t = parseInt($(".loyalty_birthdate_year option:selected").val(), 10);
            /** @type {number} */
            var q = (new Date).getFullYear();
            return (new Date(t, month - 1, dtDate)).getFullYear() == t && q - t > context.preferences.minimumAgeLimit;
        }
        return true;
    };
    if ($.validator) {
        $.validator.addMethod("showroomemail", data, context.resources.showroomEmailInvalid);
        $.validator.addMethod("showroomemails", assertThrows, context.resources.showroomEmailInvalid);
        $.validator.addMethod("loyalty_birthdate_day", func, context.resources.DOB_WRONG);
        $.validator.addMethod("loyalty_birthdate_month", func, context.resources.DOB_WRONG);
        $.validator.addMethod("loyalty_birthdate_year", fn, function() {
            /** @type {number} */
            var whiteRating = parseInt($(".loyalty_birthdate_year option:selected").val(), 10);
            return (new Date).getFullYear() - whiteRating > context.preferences.minimumAgeLimit ? context.resources.DOB_WRONG : context.resources.DOB_LESS_THAN_AGE_LIMIT;
        });
    }
    context.validator = context.validator || {};
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @param {!Array} src
     * @param {!NodeList} cb
     * @return {undefined}
     */
    function create(src, cb) {
        src.forEach(function(options) {
            /**
             * @return {undefined}
             */
            var create = function() {
                if (options.dependencies && options.dependencies.length) {
                    var ajaxArr = options.dependencies.map(function(cbfn) {
                        return cb[cbfn];
                    });
                    $.when.apply($, ajaxArr).done(f.bind(null, options));
                } else {
                    f(options);
                }
            };
            if (window.ScriptLazyloadConfig && window.ScriptLazyloadConfig.scripts[options.id] && window.ScriptLazyloadConfig.scripts[options.id].enabled) {
                exec(window.ScriptLazyloadConfig.scripts[options.id], create);
            } else {
                create();
            }
        });
    }
    /**
     * @return {undefined}
     */
    function render() {
        var data = {};
        var d = $(document);
        var pipelets = loraDeferredScripts.filter(function(options) {
            if (options.id) {
                data[options.id] = $.Deferred();
            }
            return options.url;
        });
        var defaultConfig = loraDeferredScripts.filter(function(b) {
            return !b.url;
        });
        pipelets.forEach(function(options) {
            /**
             * @return {undefined}
             */
            var callback = function() {
                $.ajax({
                    url: options.url,
                    dataType: "script",
                    cache: true
                }).done(function() {
                    d.trigger("scriptLoaded." + options.id);
                    if (options.id) {
                        data[options.id].resolve();
                    }
                });
            };
            if (window.ScriptLazyloadConfig && window.ScriptLazyloadConfig.scripts[options.id] && window.ScriptLazyloadConfig.scripts[options.id].enabled) {
                exec(window.ScriptLazyloadConfig.scripts[options.id], callback);
            } else {
                callback();
            }
        });
        create(defaultConfig, data);
    }
    /**
     * @param {!Object} opt
     * @param {!Function} cb
     * @return {undefined}
     */
    function exec(opt, cb) {
        if (parseOption(opt)) {
            /**
             * @return {undefined}
             */
            var update = function() {
                var i;
                for (i in opt.events) {
                    if (!opt.events[i].loaded && ("all" === opt.events[i].pages || -1 !== opt.events[i].pages.indexOf(self.pageContextObject.currentPage || self.pageContextObject.ns))) {
                        /** @type {(Element|null)} */
                        var element = document.querySelector(opt.events[i].viewportElement);
                        if (element) {
                            intersectionObserver.observe(element);
                            /** @type {boolean} */
                            opt.events[i].loaded = true;
                        }
                    }
                }
            };
            /** @type {!IntersectionObserver} */
            var intersectionObserver = new IntersectionObserver(function(siteContext) {
                var prop;
                for (prop in siteContext) {
                    if (siteContext[prop].isIntersecting) {
                        cb();
                        observer.disconnect();
                        intersectionObserver.disconnect();
                        break;
                    }
                }
            });
            update();
            /** @type {!MutationObserver} */
            var observer = new MutationObserver(update);
            observer.observe(document.body, {
                childList: true
            });
        }
    }
    /**
     * @param {!Object} config
     * @return {undefined}
     */
    function f(config) {
        if ("undefined" !== typeof config.params) {
            config.execute(config.params);
        } else {
            config.execute();
        }
        $(document).trigger("scriptLoaded." + config.id);
    }
    /**
     * @param {!Object} n
     * @return {?}
     */
    function parseOption(n) {
        return "all" === n.pagesIncluded && -1 === n.pagesExcluded.indexOf(self.pageContextObject.currentPage || self.pageContextObject.ns) || -1 !== n.pagesIncluded.indexOf(self.pageContextObject.currentPage || self.pageContextObject.ns) ? true : false;
    }
    /** @type {boolean} */
    var l = false;
    self.deferred = {
        init: function() {
            if ("undefined" != typeof loraDeferredScripts && loraDeferredScripts.length) {
                if ("complete" === document.readyState) {
                    render();
                } else {
                    $(window).on("load", render);
                }
                /** @type {boolean} */
                l = true;
            }
        },
        isInitiated: l
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @param {string} i
     * @return {undefined}
     */
    function test(i) {
        config[i] = config[i] || {};
        config[i].components = config[i].components || {};
        if (config[i].pages && self.page.currentPage && config[i].pages.hasOwnProperty(self.page.currentPage) && config[i].pages[self.page.currentPage].components) {
            config[i].components = $.extend(true, config[i].components, config[i].pages[self.page.currentPage].components);
        }
    }
    /**
     * @param {string} i
     * @return {undefined}
     */
    function get(i) {
        config[i] = $.extend(true, self.componentsconfig.global[i], self.componentsconfig.specific[i] || {});
        test(i);
    }
    /**
     * @param {string} type
     * @return {undefined}
     */
    function fn(type) {
        config.global = $.extend(true, self.componentsconfig.global.global, self.componentsconfig.specific.global || {});
        test("global");
        config[type].components = "extendMode" in self.componentsconfig.options ? $.extend(true, self.componentsconfig.options.extendMode, config.global.components, config[type].components) : $.extend(true, config.global.components, config[type].components);
    }
    /**
     * @param {string} type
     * @return {undefined}
     */
    function f(type) {
        /** @type {!Array} */
        var f = [];
        /** @type {!Array} */
        var g = [];
        /** @type {!Array} */
        var k = [];
        var id;
        for (id in config[type].components) {
            /** @type {!Array<string>} */
            var i = id.split(".");
            /** @type {string} */
            var j = i[0];
            /** @type {string} */
            i = i[1];
            if (config[type].components[j + "." + i].hasOwnProperty("enabled") && !config[type].components[j + "." + i].enabled) {
                g.push(j + "." + i);
            } else {
                if (self.components[j] && self.components[j][i] && self.components[j][i].init) {
                    self.components[j][i].init(config[type].components[j + "." + i]);
                    f.push(j + "." + i);
                } else {
                    k.push(j + "." + i);
                }
            }
        }
        console.debug("Initialized components: ", f);
        if (g.length) {
            console.debug("Disabled components: ", g);
        }
        if (k.length) {
            console.debug("Undefined components: ", k);
        }
        console.debug("Configuration Object:", config[type].components);
        $(document).trigger("AllJsInitialized");
    }
    var config = {};
    self.componentsMgr = {
        load: function(name) {
            if (name || config[name]) {
                console.debug("AutoInit " + name + " components");
                get(name);
                fn(name);
                f(name);
            }
        },
        loadns: function(name) {
            if (name || config[name]) {
                console.debug("Force Init " + name + " components");
                self[name].init();
                config[name] = {};
                get(name);
                f(name);
            }
        },
        loadComponent: function(name, args) {
            if (name) {
                var p = name.split(".");
                var id = self.page.ns;
                var prop = p[0];
                p = p[1];
                get(id);
                fn(id);
                if (config[id] && config[id].components[name]) {
                    args = "object" === typeof args ? args : {};
                    args = $.extend({}, config[id].components[name], args);
                    if (args.hasOwnProperty("enabled") && !args.enabled) {
                        console.debug("Force init. Component " + name + " is disabled");
                    } else {
                        if (self.components[prop] && self.components[prop][p] && self.components[prop][p].init) {
                            self.components[prop][p].init(args);
                            console.debug("Force init. Component " + name + " has been initialized");
                        } else {
                            console.debug("Force init. Component " + name + " is undefined");
                        }
                    }
                } else {
                    console.debug("Force init. Component " + name + " is missed in components configuration object");
                }
            }
        },
        isComponentEnabled: function(name) {
            /** @type {boolean} */
            var c = false;
            var prop = name.split(".")[0];
            if (!(prop in config && name in config[prop].components)) {
                return c;
            }
            name = config[prop].components[name];
            return c = !name.hasOwnProperty("enabled") || !!name.enabled;
        },
        isProviderEnabled: function(fieldToVerify, expectedVerifiedValue) {
            return fieldToVerify && expectedVerifiedValue ? (self.preferences.providers || {})[fieldToVerify] === expectedVerifiedValue : false;
        },
        getActiveProvider: function(ballNumber) {
            return (self.preferences.providers || {})[ballNumber];
        }
    };
})(window.app = window.app || {}, jQuery);
(function(data, klass) {
    data.componentsconfig = data.componentsconfig || {};
    data.componentsconfig.global = {
        global: {
            components: {
                "global.all": {
                    initlist: "tooltips validator carousel recommendations dialog fancybox customforms coremetrics mercenttracker googletagmanagement deferred".split(" ")
                },
                "global.applepay": {},
                "global.searchsuggest": {},
                "global.searchsuggestrich": {},
                "global.minicart": {},
                "global.logout": {},
                "global.gigya": {},
                "global.placeholder": {},
                "global.responsive": {},
                "global.login": {},
                "global.loginoptimized": {
                    enabled: false
                },
                "global.newsletter": {},
                "global.promotionalbanner": {},
                "product.tile": {},
                "product.productset": {},
                "account.login": {
                    pm: false
                },
                "global.selectboxit": {
                    enabled: false
                },
                "global.googleanalytics": {},
                "global.liveagent": {},
                "global.facebooktracking": {},
                "global.geoip": {},
                "global.editorialmode": {},
                "global.searchfilters": {},
                "minicart.taxes": {},
                "cart.persistent": {},
                "product.orderreplenishment": {
                    enabled: true
                },
                "producttile.swatches": {}
            }
        },
        storefront: {
            components: {
                "global.addtocart": {
                    config: {
                        wrapper: ".product_tile"
                    }
                },
                "product.notifyme": {
                    wrapper: ".product_tile"
                }
            }
        },
        search: {
            components: {
                "product.tile": {},
                "compare.search": {},
                "search.priceslider": {},
                "search.colorshades": {
                    enable: false
                },
                "search.alternativegrid": {},
                "search.pagination": {},
                "global.addtocart": {
                    config: {
                        wrapper: ".product_tile, form"
                    }
                },
                "product.notifyme": {
                    wrapper: ".product_tile_wrapper"
                }
            },
            pages: {
                nohits: {
                    components: {
                        "global.searchsuggest": {
                            additionalWrapper: ".no_hits_search"
                        },
                        "global.searchsuggestrich": {
                            additionalWrapper: ".no_hits_search"
                        }
                    }
                }
            }
        },
        cart: {
            components: {
                "product.notifyme": {
                    wrapper: "#cart_table, .recommendations_block",
                    removeProductLineItem: true
                },
                "cart.estimatetax": {},
                "cart.logincheckout": {
                    checkOnlyGuestUser: true
                },
                "cart.partialcheckout": {},
                "global.minicart": {
                    disableMinicart: true
                },
                "global.addtocart": {},
                "cart.customgift": {},
                "cart.giftorder": {}
            }
        },
        compare: {
            components: {
                "product.tile": {}
            }
        },
        customerservice: {
            components: {
                "global.all": {
                    initlist: ["realdialog", "giftcert", "validator", "recommendations", "carousel"]
                },
                "customerservice.contactus": {}
            },
            pages: {}
        },
        product: {
            components: {
                "global.all": {
                    initlist: ["demandwarerr"]
                },
                "product.writereview": {
                    wrapper: ".content",
                    initializeSelect: false
                },
                "product.image": {},
                "product.swatches": {},
                "product.turnTo": {},
                "product.notifyme": {
                    wrapper: "#pdpMain"
                },
                "product.sendtofriend": {},
                "product.videotab": {},
                "product.socialnetworking": {},
                "product.navigation": {},
                "global.addtocart": {},
                "global.CountdownExtended": {
                    element: ".countdown"
                },
                "product.Modiface": {
                    element: ".c-modiface__wrap",
                    options: {
                        dataLayerContainer: "superDataLayer",
                        scrollOffset: 60,
                        dialogType: "dialog",
                        productThumb: ".thumb",
                        requireConsent: true,
                        dataLayerCategory: "virtual try on::modiface",
                        dataLayerUPCAction: "select::shade",
                        dataLayerLiveCameraAction: "select",
                        dataLayerLiveCameraLabel: "live camera",
                        useStandardTaggingPlan: true
                    }
                },
                "product.ratingsandreviews": {
                    isEnabled: true
                }
            }
        },
        account: {
            components: {
                "global.all": {
                    initlist: ["demandwarerr"]
                },
                "search.pagination": {},
                "account.paymentinstruments": {},
                "account.addresses": {},
                "account.personaldata": {},
                "account.landing": {},
                "account.autoreplenishment": {},
                "account.profile": {},
                "checkout.paymetric": {
                    creditCardFormSelector: "#newcreditcard, #editcreditcard",
                    customCreditCardSubmitHandler: function() {
                        data.components.account.paymentinstruments.initCreditCardFormEvents();
                    }
                },
                "product.writereview": {
                    wrapper: ".content",
                    initializeSelect: false
                },
                "account.ratingsandreviews": {}
            },
            pages: {
                aboutme: {
                    components: {
                        "account.aboutme": {}
                    }
                },
                bvsubmission: {
                    components: {
                        "account.login": {
                            enabled: false
                        }
                    }
                }
            }
        },
        landingpagemodules: {
            components: {
                "global.CountdownExtended": {
                    element: ".countdown"
                },
                "global.all": {
                    initlist: ["giftcert"]
                },
                "global.InvisibleRecaptcha": {
                    element: ".checkbalance__form .g-recaptcha"
                }
            }
        },
        loginpopup: {
            components: {
                "global.all": {
                    initlist: ["tooltips", "validator"]
                },
                "global.searchsuggest": {
                    enabled: false
                },
                "global.searchsuggestrich": {
                    enabled: false
                },
                "global.minicart": {
                    enabled: false
                },
                "global.logout": {
                    enabled: false
                },
                "product.tile": {
                    enabled: false
                },
                "global.login": {
                    enabled: false
                },
                "account.login": {
                    pm: true
                }
            },
            pages: {
                linkaccount: {
                    components: {
                        "gigya.linkaccount": {}
                    }
                }
            }
        },
        wishlist: {
            components: {
                "product.sendtofriend": {
                    wrapper: ".wishlist_page"
                },
                "global.addtocart": {}
            }
        },
        registry: {
            components: {
                "product.sendtofriend": {
                    wrapper: ".gift_registry_page"
                }
            }
        },
        checkout: {
            components: {
                "checkout.shipping": {},
                "cart.logincheckout": {},
                "cart.gwp": {},
                "checkout.statesupdate": {
                    enabled: true
                },
                "checkout.paymetric": {},
                "checkout.invoice": {},
                "checkout.cardwithaddress": {
                    enabled: false
                },
                "checkout.updateproducts": {
                    enabled: false
                }
            }
        },
        favorites: {
            components: {
                "product.tile": {},
                "global.addtocart": {
                    config: {
                        wrapper: ".product_tile, form"
                    }
                },
                "product.notifyme": {
                    wrapper: ".search_result_content"
                },
                "search.pagination": {}
            }
        },
        mysamples: {
            components: {
                "product.tile": {},
                "global.addtocart": {
                    config: {
                        wrapper: ".product_tile, form"
                    }
                },
                "product.notifyme": {
                    wrapper: ".search_result_content"
                },
                "search.pagination": {}
            }
        },
        productlocker: {
            components: {},
            pages: {
                perfumelocker: {
                    components: {
                        "productlocker.perfumelocker": {}
                    }
                }
            }
        },
        customgift: {
            components: {}
        }
    };
    data.componentsconfig.options = {};
})(window.app = window.app || {}, jQuery);
(function(entry, $) {
    $ = {
        global: {
            components: {
                "global.all": {
                    initlist: "hiconversion tooltips validator carousel newsletter selectBoxIt".split(" ")
                },
                "addedtocart.popup": {},
                "global.minicart": {
                    slideDelay: 300
                },
                "global.responsive": {},
                "header.navigation": {},
                "global.selectboxit": {
                    enabled: true,
                    isMobile: function() {
                        return false;
                    },
                    autoWidth: false,
                    "native": entry.isMobileUserAgent,
                    forceReload: true
                },
                "global.custom": {},
                "global.stickybar": {},
                "global.navigation": {},
                "product.ordergroove": {},
                "global.searchsuggest": {
                    isDisableForMobile: true
                },
                "global.searchsuggestrich": {
                    isDisableForMobile: true
                },
                "dialog.custom": {},
                "product.dialog": {
                    sectionLinksSelectors: [".article.dropdownselected.video_player", "#howto", ".video_content", ".sf_recommended_video"]
                },
                "global.recommendations": {
                    skipNamespace: ["search"]
                },
                "global.gigya": {},
                "global.modalpopups": {},
                "global.inlineratingshosted": {},
                "product.tile": {
                    quickviewoptions: {
                        quickviewDisallowedDevices: ["mobile"]
                    }
                },
                "global.curalate": {},
                "global.slick": {},
                "global.slickpureshots": {},
                "global.GlobalDeferredActions": {
                    element: "body"
                },
                "global.GlobalLoyalty": {
                    element: "body"
                },
                "global.GlobalLoyaltyRedemption": {
                    element: "body"
                },
                "global.ytvideo": {},
                "global.GlobalLoyaltyNotification": {
                    element: "body"
                },
                "global.GlobalLoyaltyNotificationEvents": {
                    element: "body"
                },
                "global.gwp": {},
                "global.incentivepurchase": {},
                "global.loginoptimized": {
                    enabled: true,
                    openLoginFormEvent: "click",
                    showInModalDialog: true,
                    showLoginParams: {
                        customDialogClass: ""
                    },
                    loginPageContext: {
                        customParams: {
                            redirectToRegister: "true"
                        }
                    }
                }
            },
            pages: {}
        },
        storefront: {
            components: {
                "global.moodboards": {
                    parallaxEnabled: false,
                    customScrollEnabled: false
                },
                "global.addtocart": {
                    config: {
                        wrapper: ".product_tile, form"
                    }
                },
                "global.homepage": {},
                "global.pagenavigation": {
                    showBackBlockPercents: .05
                }
            }
        },
        wishlist: {
            components: {
                "account.personaldata": {},
                "account.wishlist": {},
                "product.notifyme": {
                    wrapper: ".primary"
                },
                "product.sendtofriend": {
                    wrapper: "body"
                }
            }
        },
        account: {
            components: {
                "account.profile": {},
                "account.peoplelikeme": {},
                "accordion.custom": {},
                "account.mybeautyprofile": {},
                "account.addresses": {
                    isModalOnMobileDisabled: true,
                    statesUpdateEnabled: true
                },
                "account.paymentinstruments": {
                    reloadOnSaveDialog: true
                },
                "global.InvisibleRecaptcha": {
                    element: "#RegistrationForm .g-recaptcha"
                }
            }
        },
        contentpage: {
            components: {
                "content.tilebased": {},
                "global.makeupartist": {}
            }
        },
        customerservice: {
            components: {
                "global.all": {
                    initlist: ["carousel", "realdialog", "giftcert", "validator"]
                },
                "customerservice.contactus": {},
                "global.InvisibleRecaptcha": {
                    element: ".gift_cert_check_balance .g-recaptcha"
                }
            },
            pages: {}
        },
        product: {
            components: {
                "global.all": {
                    initlist: ["rotate_360"]
                },
                "global.PureShotsRoutine": {
                    element: ".js-routine"
                },
                "landingpage.video": {},
                "product.engraving": {},
                "product.engravingcustom": {},
                "product.modelimages": {
                    enabled: true
                },
                "product.variations": {
                    wrapperCarousel: ".product_image_container"
                },
                "product.writereview": {
                    wrapper: ".content"
                },
                "product.swatches": {
                    customShadeImageType: "mdimg"
                },
                "product.swatchescustom": {},
                "accordion.custom": {},
                "product.navigation": {},
                "global.addthis": {},
                "product.socialnetworking": {},
                "product.notifymecustom": {
                    wrapper: "#pdpMain"
                },
                "product.ordergroovecustom": {},
                "product.sendtofriend": {
                    isQuickView: true,
                    dialogClass: "send_to_friend_pdp",
                    wrapper: ".js_pdpMain"
                },
                "product.image": {
                    zoomDelay: "800",
                    preventDefaultOnClick: true
                },
                "product.panzoom": {
                    increment: .4,
                    minScale: 1,
                    maxScale: 3,
                    contain: "invert"
                },
                "product.perfectroutine": {},
                "product.sections": {},
                "product.imageExtended": {},
                "product.perfectshade": {},
                "product.ProductGridSwitch": {
                    element: "body"
                },
                "product.loyalty": {},
                "product.ExpiviYSL": {
                    element: ".js-expivi-container-wrapper",
                    options: {
                        variationHTMLAttributeID: "data-variantid",
                        optionHTMLAttributeID: "value"
                    }
                },
                "global.Tabs": {
                    element: ".js-routine"
                }
            }
        },
        search: {
            components: {
                "search.alternativegrid": {
                    enabled: false
                },
                "search.colorshades": {
                    enabled: false
                },
                "compare.search": {
                    enabled: false
                },
                "search.refinements": {},
                "search.paginationscrollup": {},
                "product.navigation": {},
                "product.notifymecustom": {
                    wrapper: ".primary"
                },
                "global.pagenavigation": {}
            },
            pages: {
                howto: {
                    components: {
                        "search.howto": {}
                    }
                }
            }
        },
        checkout: {
            components: {
                "global.minicart": {
                    disableMinicart: true
                }
            }
        },
        cart: {
            components: {
                "global.addtocart": {
                    config: {
                        wrapper: ".product_tile, form"
                    }
                },
                "cart.extended": {},
                "cart.LoyaltyCartWidget": {
                    element: ".js_loyalty_cart_widget"
                },
                "global.pagenavigation": {},
                "product.engraving": {},
                "product.engravingcustom": {},
                "cart.CartVaultEdit": {
                    element: ".js_loyalty_vault_edit"
                }
            }
        },
        shadefinder: {
            components: {
                "shadefinder.global": {},
                "shadefinder.carousel": {},
                "shadefinder.finder": {},
                "global.addtocart": {
                    config: {
                        wrapper: ".product_tile, form, .product_actions"
                    }
                }
            },
            pages: {}
        },
        moodboards: {
            components: {
                "global.moodboards": {},
                "global.addthis": {},
                "global.jplayer": {},
                "global.addtocart": {
                    config: {
                        wrapper: ".product_tile, form"
                    }
                }
            }
        },
        storelocator: {
            components: {
                "storelocator.main": {}
            }
        },
        colormirror: {
            components: {
                "tools.colormirror": {}
            }
        },
        loginpopup: {
            components: {
                "tools.colormirror": {
                    inIframe: "true"
                },
                "account.iframe": {}
            }
        },
        howtovideos: {
            components: {
                "howtovideos.global": {},
                "howtovideos.player": {},
                "howtovideos.video": {}
            }
        },
        landingpage: {
            components: {
                "landing.carousel": {},
                "landingpage.video": {}
            }
        },
        wardrobe: {
            components: {
                "global.modifacewrapper": {},
                "wardrobe.global": {},
                "product.productset": {},
                "product.taaz": {},
                "product.engraving": {},
                "product.engravingcustom": {}
            }
        },
        dramming: {
            components: {
                "dramming.global": {}
            }
        },
        popupshop: {
            components: {
                "dramming.global": {},
                "gallery.global": {}
            }
        },
        beautyprofile: {
            components: {
                "beautyprofile.global": {}
            }
        },
        loyalty: {
            components: {
                "loyalty.LoyaltyFavoriteReward": {
                    element: "body"
                },
                "loyalty.LoyaltyReceipt": {
                    element: "body"
                },
                "loyalty.LoyaltyActivitiesVideo": {
                    element: "body"
                },
                "loyalty.LoyaltyActivitiesLoadMore": {
                    element: "body"
                },
                "loyalty.LoyaltyAccountNavigation": {
                    element: "body"
                },
                "loyalty.LoyaltyRewardRedeem": {
                    element: "body"
                },
                "loyalty.LoyaltyRewardTile": {
                    element: ".js_reward_tile"
                },
                "loyalty.LoyaltyEarlyAccessProduct": {
                    element: ".js_product_thumbnail"
                },
                "product.swatchescustom": {},
                "product.engraving": {},
                "product.engravingcustom": {
                    loyaltyFlag: true
                },
                "global.video": ".js-youtube-player",
                "product.image": {
                    zoomDelay: "0",
                    preventDefaultOnClick: true
                },
                "product.ProductGridSwitch": {
                    element: "body"
                },
                "loyalty.LoyaltyPointRules": {
                    element: "body"
                },
                "loyalty.VaultFill": {
                    element: ".js_vault_fill_wrapper"
                },
                "loyalty.VaultSelect": {
                    element: ".js_vault_selection_wrapper"
                },
                "loyalty.ScrollToElement": {
                    element: "[data-js-vault-reward]"
                },
                "loyalty.VaultMaxLimitState": {
                    element: "[data-js-vault-reward]"
                }
            }
        },
        loyaltypresentation: {
            components: {
                "loyalty.LoyaltyAccountNavigation": {
                    element: "body"
                },
                "global.video": ".js-youtube-player"
            }
        },
        lipfinder: {
            components: {
                "lipfinder.global": {}
            }
        },
        genericlandingpage: {
            components: {
                "landingpage.video": {},
                "global.PureShotsRoutine": {
                    element: ".js-routine"
                },
                "addedtocart.popup": {},
                "global.Tabs": {
                    element: ".js-routine"
                },
                "landing.ArrowTile": {
                    element: ".js-arrow-tile"
                },
                "global.addtocart": {
                    config: {
                        wrapper: ".product_tile"
                    }
                }
            }
        },
        kitbuilder: {
            components: {
                "category.GiftingExperienceContainer": {
                    element: ".gifting-experience-container",
                    options: {
                        initSelectBox: true
                    }
                },
                "category.KitBuilderStart": {
                    element: ".kit-builder-landing"
                },
                "category.KitBuilderTabs": {
                    element: ".kit-tabs"
                },
                "category.KitBuilderGridExt": {
                    element: ".kit-builder-grid",
                    options: {
                        closeDialogOnOutsideClick: true
                    }
                },
                "category.KitBuilderPagination": {
                    element: ".gifting-experience-container"
                },
                "product.PersonalizationExt": {
                    element: ".kit-builder-grid"
                },
                "product.PersonalizationPricesReviewExt": {
                    element: ".order-summary-section"
                },
                "product.PersonalizationExit": {
                    element: ".exit-product"
                },
                "product.PersonalizationDialog": {
                    element: ".kit-builder-grid"
                },
                "product.PersonalizationReviewExt": {
                    element: "#review-module",
                    options: {
                        desktopDevicesBreakpoint: 1024,
                        reviewScrollToTopOffsets: [$(".c-header")],
                        personalizationScrollToElement: ".kit-builder-main",
                        isKit: true,
                        initSelectBox: true
                    }
                },
                "product.PersonalizationAddToCart": {
                    element: ".personalization-module",
                    options: {
                        moduleUsed: "kitbuilder"
                    }
                },
                "category.kitbuildercustom": {},
                "global.gwp": {}
            }
        }
    };
    entry.componentsconfig = entry.componentsconfig || {};
    entry.componentsconfig.options = {
        extendMode: "merge"
    };
    /** @type {!Object} */
    entry.componentsconfig.specific = $;
})(window.app = window.app || {}, jQuery);
(function(app, $) {
    /**
     * @param {!Event} event
     * @param {string} href
     * @return {undefined}
     */
    function render(event, href) {
        $(".minicart_dialog").find(".ui-dialog-titlebar-close").trigger("click");
        $(".addedtocart_dialog").find(".ui-dialog-titlebar-close").trigger("click");
        event.preventDefault();
        event.stopPropagation();
        self.document.on("quickview.opened", function() {
            if (self.document.find(".gwp_samples_dialog").length) {
                if ($(".selected_sample_id_list").val()) {
                    removeDataListeners = $(".selected_sample_id_list").val().split(",");
                    if (removeDataListeners.length === app.resources.maxSelectedSamplesQty) {
                        self.document.find(".gwp_sample_list_wrapper").addClass("gwp-samples-dialog__list--max-reached");
                    }
                } else {
                    /** @type {!Array} */
                    removeDataListeners = [];
                }
                self.document.find(".gwp_samples_dialog").closest(".ui-dialog").addClass("gwp-dialog");
                self.document.find(".gwp_gift_info_dialog").closest(".ui-dialog").addClass("gwp-dialog");
                var inputel = $(".sample_id_to_be_added");
                if (inputel.val()) {
                    var $lastTab = $('li.gwp-sample-tile[data-sample-id="' + inputel.val() + '"]');
                    if (!$lastTab.hasClass("gwp-sample-tile--selected")) {
                        $lastTab.trigger("click");
                    }
                    inputel.val("");
                }
            } else {
                if (self.document.find(".gwp_gift_info_dialog").length) {
                    start();
                } else {
                    if (self.document.find(".pwp-container").length) {
                        app.components.global.addallproductstocart.init({});
                        $(".pwp-container").closest(".ui-dialog.quickview").addClass("pwp-dialog");
                    }
                }
            }
        });
        app.quickView.show({
            url: href,
            source: "quickview",
            feature: "gwp"
        });
    }
    /**
     * @return {undefined}
     */
    function start() {
        getUnsavedValue().forEach(function(b) {
            self.document.find('.gift_item[data-gift-id="' + b + '"]').trigger("click");
        });
        self.document.find(".gwp_samples_dialog").parents(".ui-dialog").addClass("gwp-dialog");
        self.document.find(".gwp_gift_info_dialog").parents(".ui-dialog").addClass("gwp-dialog");
        if (self.document.find(".gwp-samples-info-wrapper").length && 50 < self.document.find(".value-offer span").text().trim().length) {
            self.document.find(".gwp-samples-info-wrapper").removeClass("gwp-samples-dialog__gifts-wrapper");
        }
    }
    /**
     * @return {?}
     */
    function getUnsavedValue() {
        var componentsStr = self.document.find(".js-gwp-selected-gits").val();
        return componentsStr ? componentsStr.split(",") : [];
    }
    /**
     * @param {!Event} e
     * @return {undefined}
     */
    function _zoomOut(e) {
        render(e, app.urls.gwpSamplesDialog);
    }
    /**
     * @param {!Event} e
     * @return {undefined}
     */
    function slideBulletHandler(e) {
        var transform = app.urls.gwpSamplesDialog;
        var func = $(e.target).closest(".gwp-tile").data("sampleid");
        render(e, transform + "?sampleId=" + func);
    }
    /**
     * @param {string} key
     * @return {?}
     */
    function query(key) {
        var dynamicValue = $(".gift_id_list").val();
        return key + "?giftIdList=" + dynamicValue;
    }
    /**
     * @param {!Event} e
     * @return {undefined}
     */
    function _zoomIn(e) {
        var el = app.urls.gwpGiftInformationDialog;
        el = query(el);
        render(e, el);
    }
    /**
     * @param {!Event} rows
     * @param {boolean} evt
     * @return {undefined}
     */
    function _onBlur(rows, evt) {
        var el = app.urls.gwpGiftSelectionDialog;
        el = query(el);
        /** @type {boolean} */
        firstPressMoveY = false;
        if (evt && evt.chooseOnly) {
            firstPressMoveY = evt.chooseOnly;
        }
        if (evt && evt.addToCartTotal) {
            el = app.util.appendParamToURL(el, "addToCartTotal", evt.addToCartTotal);
        }
        render(rows, el);
    }
    /**
     * @return {undefined}
     */
    function hideConsolePanel() {
        app.quickView.close();
    }
    /**
     * @return {undefined}
     */
    function closePopup() {
        if (self.document.find(".pwp-container").length) {
            app.quickView.close();
        }
    }
    /**
     * @param {string} weEvt
     * @return {undefined}
     */
    function _onClickBtnWatch(weEvt) {
        weEvt = $(weEvt.target).val();
        $.ajax({
            type: "GET",
            url: app.urls.gwpGetFilteredSamplesByCategory,
            data: {
                categoryID: weEvt
            },
            success: function(name) {
                $(".gwp_sample_list_wrapper").html(name);
            }
        });
    }
    /**
     * @param {!Object} x
     * @return {undefined}
     */
    function remove(x) {
        x = $(x.target).closest(".sample_item");
        var i = x.data("sample-id").toString();
        $(".gwp_samples_dialog .error_message").addClass("hidden");
        $(".gwp_samples_dialog .description").show();
        if (-1 !== removeDataListeners.indexOf(i)) {
            i = removeDataListeners.indexOf(i);
            if (-1 < i) {
                removeDataListeners.splice(i, 1);
                x.removeClass("gwp-sample-tile--selected");
                updateStickyPositioning();
                self.document.find(".gwp_sample_list_wrapper").removeClass("gwp-samples-dialog__list--max-reached");
            }
        } else {
            if (removeDataListeners.length === app.resources.maxSelectedSamplesQty) {
                $(".gwp_samples_dialog .error_message").removeClass("hidden");
                $(".gwp_samples_dialog .description").hide();
            } else {
                removeDataListeners.push(i);
                x.addClass("gwp-sample-tile--selected");
                updateStickyPositioning();
                if (removeDataListeners.length === app.resources.maxSelectedSamplesQty) {
                    self.document.find(".gwp_sample_list_wrapper").addClass("gwp-samples-dialog__list--max-reached");
                }
            }
        }
        x = $("input.user_qualified").is(":checked") ? app.resources.qualifiedSampleSelectionMsg.replace("{0}", removeDataListeners.length) : app.resources.unqualifiedSampleSelectionMsg.replace("{0}", removeDataListeners.length);
        $(".selected_samples_qty").html(x);
    }
    /**
     * @return {undefined}
     */
    function updateStickyPositioning() {
        var $allPanels = $(".gwp-samples-dialog__actions .gwp-samples-dialog__button");
        if (0 < $(".gwp-sample-tile--selected").length) {
            $allPanels.addClass("confirm-selection-allowed");
        } else {
            $allPanels.removeClass("confirm-selection-allowed");
        }
    }
    /**
     * @param {!Object} e
     * @return {undefined}
     */
    function toggle(e) {
        e = $(e.target).closest(".gift_item");
        var i = e.data("gift-id");
        if (null != GRAPHIC_PROPERTIES && -1 < GRAPHIC_PROPERTIES.indexOf(i)) {
            /** @type {number} */
            i = GRAPHIC_PROPERTIES.indexOf(i);
            if (-1 < i) {
                GRAPHIC_PROPERTIES.splice(i, 1);
            }
            e.removeClass("gwp-sample-tile--selected");
            e.closest(".js_gift_selectable_list").removeClass("gwp-samples-dialog__list--max-reached");
            self.document.find(".js_confirm_gift_selection_btn").prop("disabled", false);
            updateStickyPositioning();
        } else {
            var tabSwitchEl = e.closest(".js_gift_selectable_list");
            if (!(tabSwitchEl.hasClass("gwp-samples-dialog__list--max-reached") || null != GRAPHIC_PROPERTIES && -1 < GRAPHIC_PROPERTIES.indexOf(i))) {
                GRAPHIC_PROPERTIES.push(i);
                e.addClass("gwp-sample-tile--selected");
                tabSwitchEl.addClass("gwp-samples-dialog__list--max-reached");
                updateStickyPositioning();
                self.document.find(".js_confirm_gift_selection_btn").prop("disabled", false);
            }
        }
    }
    /**
     * @param {!Event} evt
     * @return {undefined}
     */
    function handleVideoTap(evt) {
        var args = getAttribute();
        var i = $(".samples_list li").length;
        var requestOrUrl = app.urls.gwpLoadMore;
        evt.preventDefault();
        $.ajax({
            type: "GET",
            url: requestOrUrl,
            data: {
                categoryID: args,
                offset: i
            },
            success: function(name) {
                $(".gwp_sample_list_wrapper").html(name);
                self.document.find(".gwp-sample-tile--selected").removeClass("gwp-sample-tile--selected");
                removeDataListeners.forEach(function(b) {
                    self.document.find('.sample_item[data-sample-id="' + b + '"]').addClass("gwp-sample-tile--selected");
                });
                decodePubKey();
            }
        });
    }
    /**
     * @return {undefined}
     */
    function decodePubKey() {
        var browser_message = $(".js_load_more_btn");
        if ($("select option[value=" + getAttribute() + "]").data("qty") > $(".samples_list li").length) {
            browser_message.removeClass("hidden");
        } else {
            browser_message.addClass("hidden");
        }
    }
    /**
     * @return {?}
     */
    function getAttribute() {
        return $("#samples_categorySelectBoxItText").attr("data-val");
    }
    /**
     * @return {undefined}
     */
    function update() {
        var requestOrUrl = app.urls.gwpConfirmSampleSelection;
        var e = {
            selectedSamplesIds: removeDataListeners.join()
        };
        if ("cart" === app.page.ns) {
            /** @type {string} */
            e.source = "samplecart";
        }
        $.ajax({
            type: "POST",
            url: requestOrUrl,
            data: e,
            success: function(name) {
                hideConsolePanel();
                self.samplesWrapper.html(name);
                if (self.samplesWrapper.length) {
                    name = self.samplesWrapper.children().length;
                    var UW_CO_APPWRK_UW_CO_CONFIRM_APP = self.samplesWrapper.children(".js-sample-selected").length;
                    if (name == UW_CO_APPWRK_UW_CO_CONFIRM_APP) {
                        self.samplesWrapper.addClass("all-selected");
                    } else {
                        self.samplesWrapper.removeClass("all-selected");
                    }
                }
                if (self.samplesWrapper.length) {
                    name = self.samplesWrapper.siblings(".js_gwp_cart_actions").find(".js_gwp_cart_button");
                    if (self.samplesWrapper.closest(".gwp-cart-samples--qualified").length) {
                        if (self.samplesWrapper.hasClass("all-selected")) {
                            name.text(app.resources.samplesWrapperCtaStatuses.editSamples);
                            $(".gwp_alert_body .js_open_sample_dialog").text(app.resources.samplesWrapperCtaStatuses.editSamples);
                        } else {
                            if ($(".gwp-cart-samples--not-qualified").length) {
                                name.text(app.resources.samplesWrapperCtaStatuses.browseSamples);
                                $(".gwp_alert_body .js_open_sample_dialog").text(app.resources.samplesWrapperCtaStatuses.browseSamples);
                            } else {
                                name.text(app.resources.samplesWrapperCtaStatuses.selectSamples);
                                $(".gwp_alert_body .js_open_sample_dialog").text(app.resources.samplesWrapperCtaStatuses.selectSamples);
                            }
                        }
                    } else {
                        name.text(app.resources.samplesWrapperCtaStatuses.browseSamples);
                        $(".gwp_alert_body .js_open_sample_dialog").text(app.resources.samplesWrapperCtaStatuses.browseSamples);
                    }
                }
                mapStateToProps();
            }
        });
    }
    /**
     * @return {undefined}
     */
    function mapStateToProps() {
        if ("cart" !== app.page.ns) {
            location.reload();
        }
    }
    /**
     * @return {?}
     */
    function hide() {
        if (GRAPHIC_PROPERTIES.length) {
            if (firstPressMoveY) {
                return self.document.trigger("gwp.giftSelection", {
                    selectedGiftsIds: GRAPHIC_PROPERTIES.join(",")
                }), firstPressMoveY = false, hideConsolePanel(), false;
            }
            $.ajax({
                type: "POST",
                url: app.urls.gwpConfirmGiftSelection,
                data: {
                    selectedGiftsIds: GRAPHIC_PROPERTIES.join(",")
                },
                success: function(name) {
                    hideConsolePanel();
                    if ("cart" === app.pageContextObject.ns) {
                        location.href = app.urls.cartShow;
                    } else {
                        mapStateToProps();
                    }
                }
            });
        }
    }
    /**
     * @return {undefined}
     */
    function init() {
        var tthisli = self.document.find(".search_result_items");
        var syncedAnimals = tthisli.find(".js_gwp_pcp_prompt");
        var imageryDatesStore = tthisli.children(".product_tile_wrapper");
        /** @type {number} */
        var col = 1024 < window.innerWidth ? 4 : 750 < window.innerWidth ? 3 : 2;
        syncedAnimals.each(function(b) {
            b = $(this);
            var i = imageryDatesStore.index(b.prev());
            i = imageryDatesStore.get(i + col - i % col - 1);
            b.insertAfter(i);
        });
    }
    /**
     * @param {undefined} a
     * @return {undefined}
     */
    function F(a) {
        self.cartGWPArea.html(a);
    }
    /**
     * @return {undefined}
     */
    function findCompletions() {
        if (0 < self.cartGWPArea.length) {
            $.ajax({
                url: app.urls.refreshGWPCartArea,
                type: "GET"
            }).done(F);
        }
    }
    /**
     * @param {!Event} args
     * @return {undefined}
     */
    function ready(args) {
        var idx = $(this).data("pid") || app.pageContextObject.currentProduct.pid;
        render(args, app.urls.openPWPDialog + "?pid=" + idx);
        self.document.one("global.showMinicart", closePopup);
    }
    var self = {
        document: $(document)
    };
    /** @type {boolean} */
    var M = false;
    /** @type {!Array} */
    var removeDataListeners = [];
    /** @type {!Array} */
    var GRAPHIC_PROPERTIES = [];
    /** @type {boolean} */
    var firstPressMoveY = false;
    app.components = app.components || {};
    app.components.global = app.components.global || {};
    app.components.global.gwp = {
        init: function() {
            if (!M) {
                self.samplesWrapper = $(".js_gwp_cart_samples_wrapper");
                self.cartGWPArea = $(".js_cart_gwp");
                self.document.on("click", ".js_open_preselected_sample_dialog", slideBulletHandler).on("click", ".js_open_sample_dialog", _zoomOut).on("change", ".js_samples_category", _onClickBtnWatch).on("click", ".js_sample_tile", remove).on("click", ".js_load_more_btn", handleVideoTap).on("click", ".js_confirm_selection_btn", update).on("click", ".js_view_gift_details, .js_view_gift_options", _zoomIn).on("click", ".js_select_your_gift", _onBlur).on("kitbuilder.incentivizedSelection", ".add-products-button",
                    _onBlur).on("click", ".js_gift_selectable_list .gift_item", toggle).on("click", ".js_confirm_gift_selection_btn", hide).on("click", ".js_start_shopping_btn", hideConsolePanel).on("click", ".js_open_pwp_dialog", ready);
                self.document.on("changeCouponsCallback", findCompletions);
                if ("search" === app.pageContextObject.ns) {
                    init();
                }
                /** @type {boolean} */
                M = true;
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @param {!Object} result
     * @return {undefined}
     */
    function add(result) {
        result.preventDefault();
        if (0 < that.incentiveGlobalBanner.length && 0 < that.incentiveGlobalBanner.children().length) {
            result = {};
            /** @type {string} */
            var icon = "";
            if ("recirculation" == $(this).data("alertType")) {
                icon = context.urls.closeRecirculationBanner;
                result.oid = that.sampleRecirculationBanner.data("oid");
                result.pid = that.sampleRecirculationBanner.data("pid");
                context.util.setCookie("hideRecirculationBanner", true, {
                    path: "/"
                });
            } else {
                /** @type {string} */
                icon = "";
            }
            /**
             * @param {?} fn
             * @return {undefined}
             */
            var resetKA = function(fn) {
                that.incentiveGlobalBanner.slideUp();
            };
            if ("" !== icon && 0 < Object.keys(result).length) {
                $.ajax({
                    url: icon,
                    type: "POST",
                    data: result,
                    dataType: "json"
                }).then(resetKA);
            } else {
                resetKA();
            }
        }
    }
    var that = {};
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.incentivepurchase = {
        init: function() {
            that.document = $(document);
            that.incentiveGlobalBanner = that.document.find(".incentive-global-banner");
            that.sampleRecirculationBanner = that.document.find(".last-ordered-sample-container");
            that.document.on("click", ".incentive-global-banner .js-close-banner", add);
            if ($(".gwp-sample-recirculation__content").length) {
                $(".gwp-alert-global__close").addClass("close-recirculation__content");
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(service, $, canCreateDiscussions) {
    /**
     * @return {undefined}
     */
    function load() {
        /**
         * @param {!Object} b
         * @param {!Object} e
         * @param {!Object} $element
         * @return {undefined}
         */
        function init(b, e, $element) {
            var p = m[e].playerInstance;
            b = $element.find(".video-control-navigation");
            e = $('[data-video-control="switch"]');
            p.addEventListener("onStateChange", function(simpleselect) {
                switch (simpleselect.data) {
                    case 0:
                        fn("stop", p, $element);
                        break;
                    case 1:
                        fn("play", p, $element);
                }
            });
            b.on("click", function(event) {
                event.preventDefault();
                event = $(this).attr("data-video-action");
                return fn(event, p, $element, true);
            });
            e.on("click", function() {
                var p;
                for (p in m) {
                    fn("stop", m[p].playerInstance, $element);
                }
            });
        }
        /**
         * @param {!Object} options
         * @param {!Object} instance
         * @param {!Object} element
         * @param {string} highlight
         * @return {undefined}
         */
        function fn(options, instance, element, highlight) {
            var dxdydust = element.height();
            var neededWidth = element.width();
            var videoIframe = element.find("iframe");
            switch (options) {
                case "play":
                    instance.playVideo();
                    options = {
                        videoId: element.attr("data-video-id") || ""
                    };
                    $(document).trigger("video.player.play", {
                        options: options
                    });
                    if ("undefined" === typeof videoIframe.attr("data-playerready")) {
                        videoIframe.attr("data-playerready", true).css({
                            width: neededWidth,
                            height: dxdydust
                        });
                    }
                    element.find(".ytplayer").removeClass("hidden");
                    element.find(".video-cover-container").addClass("hidden");
                    element.find("span").addClass("hidden");
                    element.find(".video-infos-container").addClass("hidden");
                    element.find(".btn-close").removeClass("hidden");
                    break;
                case "stop":
                    if ("undefined" == typeof element.data("replayVideo") || element.data("replayVideo")) {
                        instance.seekTo(0);
                        instance.stopVideo();
                    }
                    if (highlight || "undefined" == typeof element.data("showCoverOnStop") || !element.data("showCoverOnStop")) {
                        element.find(".ytplayer").addClass("hidden");
                        element.find(".video-cover-container").removeClass("hidden");
                        element.find("span").removeClass("hidden");
                        element.find(".video-infos-container").removeClass("hidden");
                        element.find(".btn-close").addClass("hidden");
                    }
            }
        }
        /** @type {!Element} */
        var e = document.createElement("script");
        /** @type {string} */
        e.src = "https://www.youtube.com/player_api";
        /** @type {!Element} */
        var wafCss = document.getElementsByTagName("script")[0];
        wafCss.parentNode.insertBefore(e, wafCss);
        var m = {};
        e = $("div.video-container[data-video-id]");
        $.each(e, function() {
            var $video = $(this);
            var id = $video.attr("data-video-id");
            m[id] = {
                apiSettings: {
                    videoId: id,
                    events: {
                        onReady: function(name) {
                            init(name, id, $video);
                        }
                    },
                    playerVars: {
                        rel: 0
                    }
                }
            };
        });
        /**
         * @return {undefined}
         */
        window.onYouTubePlayerAPIReady = function() {
            var p;
            for (p in m) {
                var options = m[p].apiSettings;
                m[p].playerInstance = new YT.Player(options.videoId, options);
            }
        };
    }
    service.components = service.components || {};
    service.components.landingpage = service.components.landingpage || {};
    service.components.landingpage.video = {
        init: function() {
            load();
        }
    };
    service.components.howtovideos = service.components.howtovideos || {};
    service.components.howtovideos.video = {
        init: function() {
            load();
        }
    };
})(window.app || {}, window.jQuery);
(function($) {
    $(function() {
        var acceptedResourceRoles = app.isTabletUserAgent;
        if (app.isMobileUserAgent) {
            $(".landingpage-module").each(function() {
                var element = $(this);
                var value = element.data("css-tablet");
                var key = element.data("background-image-mobile");
                if (key) {
                    element.css("background-image", "url(" + key + ")");
                }
                if (element.attr("style")) {
                    key = element.attr("style");
                    element.attr("style", value + key);
                } else {
                    element.attr("style", value);
                }
            });
            $(".cross-sell.list-items").each(function() {
                var $tab_data = $("<ul>");
                var $form_body = $(this);
                $form_body.children().each(function() {
                    var $tab_data_item = $("<li>").append(this);
                    $tab_data.append($tab_data_item);
                });
                var fileHolder = $form_body.closest(".cross-sell.content-container");
                $form_body.append($tab_data);
                $form_body.find("ul").addClass("contentcarousel_list");
                $('<span class="images slider-arrow prev jcarousel-control-prev"></span>').prependTo(fileHolder);
                fileHolder.append('<span class="images slider-arrow prev jcarousel-control-next"></span>');
                fileHolder.find(".jcarousel").on("jcarousel:reload jcarousel:create", function() {
                    var carousel = $(this);
                    carousel.innerWidth();
                    var d = $(window).width();
                    if (580 <= d) {
                        carousel.jcarousel("items").css("width", "1495px");
                    } else {
                        carousel.jcarousel("items").css("width", d);
                    }
                }).jcarousel({
                    wrap: "circular"
                });
                fileHolder.find(".jcarousel-control-prev").jcarouselControl({
                    target: "-=1"
                });
                fileHolder.find(".jcarousel-control-next").jcarouselControl({
                    target: "+=1"
                });
                fileHolder.find(".jcarousel-pagination").on("jcarouselpagination:active", "a", function() {
                    $(this).addClass("active");
                });
            });
            var faElem = $("#univers-slider").find(".jcarousel");
            faElem.on("jcarousel:reload jcarousel:create", function() {
                var carousel = $(this);
                carousel.innerWidth();
                var meterPos = $(window).width();
                var sbarwidth = faElem.innerWidth();
                if (1024 < meterPos) {
                    carousel.jcarousel("items").css("width", "1495px");
                } else {
                    if (599 <= meterPos && 1024 >= meterPos) {
                        carousel.jcarousel("items").css("width", sbarwidth);
                    } else {
                        carousel.jcarousel("items").css("width", meterPos);
                    }
                }
            }).jcarousel({
                wrap: "circular"
            });
            $("#univers-slider").find(".jcarousel-control-prev").jcarouselControl({
                target: "-=1"
            });
            $("#univers-slider").find(".jcarousel-control-next").jcarouselControl({
                target: "+=1"
            });
        } else {
            if (acceptedResourceRoles) {
                $(".landingpage-module").each(function() {
                    var element = $(this);
                    var value = element.data("css-tablet");
                    var key = element.data("background-image-tablet");
                    if (key) {
                        element.css("background-image", "url(" + key + ")");
                    }
                    if (element.attr("style")) {
                        key = element.attr("style");
                        element.attr("style", value + key);
                    } else {
                        element.attr("style", value);
                    }
                });
            } else {
                $(".landingpage-module").each(function() {
                    $(this).find(".jcarousel");
                    var element = $(this);
                    var value = element.data("css-desktop");
                    var s = element.data("background-image");
                    if (s) {
                        element.css("background-image", "url(" + s + ")");
                    }
                    if (element.attr("style")) {
                        s = element.attr("style");
                        element.attr("style", value + s);
                    } else {
                        element.attr("style", value);
                    }
                });
            }
        }
        faElem = $(".landingpage-module.images").find(".jcarousel");
        faElem.on("jcarousel:reload jcarousel:create", function() {
            var carousel = $(this);
            carousel.innerWidth();
            var meterPos = $(window).width();
            var sbarwidth = faElem.innerWidth();
            if (1024 < meterPos) {
                carousel.jcarousel("items").css("width", meterPos);
            } else {
                if (599 <= meterPos && 1024 >= meterPos) {
                    carousel.jcarousel("items").css("width", sbarwidth);
                } else {
                    carousel.jcarousel("items").css("width", meterPos);
                }
            }
        }).jcarousel({
            wrap: "circular"
        });
        $(".landingpage-module.images").find(".jcarousel-control-prev").jcarouselControl({
            target: "-=1"
        });
        $(".landingpage-module.images").find(".jcarousel-control-next").jcarouselControl({
            target: "+=1"
        });
        $(".landingpage-module.images").find(".jcarousel-pagination").on("jcarouselpagination:active", "a", function() {
            $(this).addClass("active");
        }).on("jcarouselpagination:inactive", "a", function() {
            $(this).removeClass("active");
        }).on("click", function(event) {
            event.preventDefault();
        }).jcarouselPagination({
            perPage: 1,
            item: function(name) {
                return '<a href="#' + name + '"></a>';
            }
        });
        $(window).load(function() {
            var c = $(".landingpage-module:last-child");
            if (0 < c.length) {
                $(".pt_landingpage .primary").height(c.position().top + c.height() + 70);
            }
        });
    });
})(jQuery);
(function(data, $) {
    /**
     * @return {undefined}
     */
    function update() {
        if (0 !== elements.container.find(".product_tile").length) {
            elements.container.find(".product_tile").each(function(b) {
                $(this).data("idx", b);
            });
        }
    }
    /**
     * @param {!Object} options
     * @return {undefined}
     */
    function init(options) {
        if (!data.disableQuickView) {
            var BidirectionalSubject = options && options.quickviewbuttoncontainer ? elements.container.filter(options.quickviewbuttoncontainer) : elements.container;
            data.quickView.initializeButton(BidirectionalSubject, "a.product_image_wrapper" + (options && options.quickviewoptions && options.quickviewoptions.exclude ? ":not(" + options.quickviewoptions.exclude + ")" : ""), options && options.quickviewoptions ? options.quickviewoptions : "");
        }
        if (data.ui) {
            data.ui.main.on("mouseleave", ".product_swatch_list", function() {
                if (!data.preferences.plpClickOnSwatchRedirect) {
                    var self = $(this).closest(".product_tile").find(".product_image").filter(":first");
                    var data = self.data("current");
                    if (void 0 !== data) {
                        self.attr({
                            src: data.src,
                            alt: data.alt,
                            title: data.title
                        });
                    }
                }
            });
            data.ui.main.on("click", ".product_swatch_list .swatch", function(e) {
                if (!data.preferences.plpClickOnSwatchRedirect) {
                    e.preventDefault();
                }
                if (!$(this).hasClass("selected")) {
                    e = $(this).closest(".product_tile");
                    $(this).closest(".product_swatch_list").find(".swatch.selected").removeClass("selected");
                    $(this).addClass("selected");
                    var data = $(this).attr("href");
                    e.find(".product_image_wrapper").attr("href", data);
                    e.find(".quickviewbutton").attr("href", data);
                    e.find(".product_name").attr("href", $(this).attr("href"));
                    var self = $(this).find("img").filter(":first");
                    data = self.data("thumb");
                    if (self.length) {
                        self = e.find(".product_image").filter(":first");
                        data = {
                            src: data.src,
                            alt: data.alt,
                            title: data.title
                        };
                        self.attr(data);
                        self.data("current", data);
                    }
                    e.trigger("product.variationChanged", $(this).data() || {});
                }
            }).on("mouseenter", ".product_swatch_list .swatch", function() {
                var self = $(this).closest(".product_tile").find(".product_image").filter(":first");
                var localisation = $(this).find("img").filter(":first");
                var image = localisation.data("thumb");
                var currentStyleId = self.data("current");
                if (localisation.length) {
                    if (!currentStyleId) {
                        self.data("current", {
                            src: self[0].src,
                            alt: self[0].alt,
                            title: self[0].title
                        });
                    }
                    self.attr({
                        src: image.src,
                        alt: image.alt,
                        title: image.title
                    });
                }
            });
        }
    }
    /**
     * @param {!Object} c
     * @return {undefined}
     */
    function success(c) {
        init(c);
        if (data.ui) {
            data.ui.main.on("search.update", function() {
                f();
                update();
                init(c);
            });
        }
    }
    /**
     * @return {undefined}
     */
    function f() {
        elements = {
            main: $(".main"),
            container: $(".product_tile_wrapper")
        };
    }
    var elements = {};
    data.components = data.components || {};
    data.components.product = data.components.product || {};
    data.components.product.tile = {
        init: function(name) {
            f();
            success(name);
            update();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(data, $) {
    /**
     * @return {undefined}
     */
    function init() {
        $cache.main.on("mouseleave", ".js_swatches", function() {
            var target = $(this).closest(".product_tile").find(".js_swatches .active .swatchanchor");
            check(target);
        });
        $(".product_tile .product-variations .carousel .jcarousel-next").each(function() {
            select_sidebar_item($(this));
        });
        $cache.document.on("jcarouselcontrol:inactive", ".product_tile .product-variations .carousel .jcarousel-next", function() {
            select_sidebar_item($(this));
        }).on("search.update", function() {
            data.carousel.init();
        });
        $cache.main.on("click", ".js_swatches .swatchanchor", function(event) {
            var obj = $(this);
            var filteredView = obj.closest(".swatches");
            var tabSwitchEl = obj.closest("li");
            var jqTarget = obj.closest(".product_tile");
            var image_href = obj.attr("href");
            if (!data.preferences.plpClickOnSwatchRedirect) {
                event.preventDefault();
            }
            if (!tabSwitchEl.hasClass("active")) {
                filteredView.find(".active, .selected_sw").removeClass("active selected_sw");
                tabSwitchEl.addClass("active selected_sw");
                jqTarget.find(".product_image_wrapper").attr("href", image_href);
                jqTarget.find(".quickviewbutton").attr("href", image_href);
                jqTarget.find(".product_name").attr("href", image_href);
                check(obj);
                jqTarget.trigger("product.variationChanged", $(this).data() || {});
            }
        }).on("mouseenter", ".js_swatches .swatchanchor", function() {
            check($(this));
        });
    }
    /**
     * @param {!Object} li
     * @return {undefined}
     */
    function select_sidebar_item(li) {
        if (li.hasClass("disabled") && li.siblings(".jcarousel-prev").first().hasClass("disabled")) {
            li.closest("#swatch_carousel").find("ul.contentcarousel_list").addClass("aligned-items");
        }
    }
    /**
     * @param {!Object} target
     * @return {undefined}
     */
    function check(target) {
        if ("undefined" !== typeof target) {
            var self = target.closest(".product_tile").find(".product_image");
            var data = target.data("lgimg");
            var appTitle = target.attr("title");
            if (data && data.url != self.attr("src")) {
                self.attr({
                    src: data.url,
                    alt: data.alt,
                    title: appTitle
                });
                self.siblings("source").attr("srcset", data.url);
                target.closest("#swatch_carousel").siblings(".selected_attribute_value").text(target.find(".swatch_text_color").text());
            }
        }
    }
    data.components = data.components || {};
    data.components.producttile = data.components.producttile || {};
    data.components.producttile.swatches = {
        init: function() {
            $cache = {
                main: $(".main"),
                document: $(document)
            };
            init();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @return {undefined}
     */
    function injectLocalization() {
        /**
         * @param {!Object} name
         * @param {!Function} value
         * @param {string} key
         * @return {undefined}
         */
        context.searchsuggest.request = function(name, value, key) {
            name = context.util.appendParamToURL(context.urls.searchsuggest, "q", value);
            $.getJSON(name, function(hits) {
                var num = hits.length;
                self.listTotal = num;
                if (0 === num) {
                    context.searchsuggest.clearResults();
                } else {
                    /** @type {!Array} */
                    var f = [];
                    var i;
                    /** @type {number} */
                    i = 0;
                    for (; i < num; i++) {
                        var m = $(document.createElement("span")).addClass("hits").html(hits[i].hits);
                        var p = $(document.createElement("div"));
                        var container = $(document.createElement("div")).addClass("suggestionterm");
                        container.html(hits[i].suggestion);
                        p.html(container);
                        if (!self.isDisableHitsCount) {
                            p.append(m);
                        }
                        f.push(p);
                    }
                    context.searchsuggest.clearResults();
                    context.searchsuggest.createResultsContainer(key);
                    self.resultsContainer.html(f).show();
                    context.searchsuggest.selectionClick(key);
                    $(document).trigger("search.searchSuggestionTracking", [key.val(), num]);
                }
            });
        };
        /**
         * @param {string} elem
         * @return {undefined}
         */
        context.searchsuggest.selectionClick = function(elem) {
            self.resultsContainer.on("click", "div", function(event) {
                event.preventDefault();
                if (message.isMultipleSearchForms) {
                    $("input[name='q']").val($(this).children(".suggestionterm").text());
                } else {
                    elem.val($(this).children(".suggestionterm").text());
                }
                context.searchsuggest.clearResults();
                self.searchForm.trigger("submit");
            });
        };
        /**
         * @return {undefined}
         */
        context.searchsuggest.formSubmit = function() {
            init();
        };
        /**
         * @param {number} event
         * @param {!Node} direction
         * @return {undefined}
         */
        context.searchsuggest.moveInList = function(event, direction) {
            self.resultsContainer.children().removeClass("selected").eq(self.listCurrent).addClass("selected");
            direction.val(self.resultsContainer.find(".selected div.suggestionterm").first().text());
        };
        context.searchsuggest.formSubmit();
    }
    /**
     * @return {undefined}
     */
    function init() {
        self.searchForm.submit(function(e) {
            e.preventDefault();
            e = $("input[name='q']", this);
            var value = e.val().replace(/^\s+|\s+$/g, "").replace(/\s+/g, " ");
            if (0 === value.length || value.toLowerCase() === self.fieldDefault) {
                return e.val(""), false;
            }
            window.location = context.util.appendParamToURL($(this).attr("action"), "q", value);
        });
    }
    var self = {};
    var message = {
        isMultipleSearchForms: false
    };
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.searchsuggest = {
        init: function(name) {
            if (!context.preferences.siteSearchUpdateSwitch) {
                message = $.extend({}, message, name);
                if (name.isDisableForMobile && context.isMobileUserAgent) {
                    context.searchsuggest.initializeCache(name.additionalWrapper);
                    context.searchsuggest.nonDesktopInit();
                    self = context.searchsuggest.getCache();
                    self.isDisableHitsCount = void 0;
                    init();
                } else {
                    context.searchsuggest.init(name.additionalWrapper);
                    self = context.searchsuggest.getCache();
                    self.isDisableHitsCount = name && name.disableHitsCount;
                    injectLocalization(name.additionalWrapper);
                }
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @return {undefined}
     */
    function injectLocalization() {
        /**
         * @param {!Object} name
         * @param {string} value
         * @param {string} key
         * @return {undefined}
         */
        context.searchsuggest.request = function(name, value, key) {
            value = context.util.appendParamToURL(context.urls.searchrichsuggest, "q", value);
            value = context.util.appendParamToURL(value, "len", name.length);
            $(document).trigger("search.searchSuggestionRequestStarted", {
                searchField: key
            });
            $.ajax({
                url: value,
                dataType: "html",
                success: function(name) {
                    $(document).trigger("search.searchSuggestionRequestFinished", {
                        searchField: key
                    });
                    context.searchsuggest.clearResults();
                    if (0 > name.indexOf("emptyInput")) {
                        context.searchsuggest.clearResults();
                        context.searchsuggest.createResultsContainer(key);
                        options.resultsContainer.html(name).show();
                    }
                    context.searchsuggest.selectionClick(key);
                    options.listTotal = $("div.suggestionterm").length;
                    options.listTotal += $("div.productDetails").length;
                    options.listTotal += $("div.article").length;
                    if (0 < $(".dw-object", options.resultsContainer).length) {
                        options.listTotal++;
                    }
                    /** @type {number} */
                    options.listCurrent = -1;
                    $(document).trigger("search.suggestrich.update");
                    $(document).trigger("search.richSearch", [key.val(), $("div.productDetails").length]);
                }
            });
        };
        /**
         * @param {string} elem
         * @return {undefined}
         */
        context.searchsuggest.selectionClick = function(elem) {
            $(".suggestionterm").click(function() {
                var value = $(this).parents(":first").attr("id");
                var url = elem.parents("form").attr("action");
                elem.val(value);
                context.searchsuggest.clearResults();
                window.location = context.util.appendParamToURL(url, "q", value);
            });
            $(".productDetails").click(function() {
                var link = $(this).find(".shopnow a");
                if (link.length) {
                    link = link.attr("href");
                    context.searchsuggest.clearResults();
                    window.location = link;
                }
            });
            $(".article").click(function(type) {
                if ($(this).hasClass("noclick")) {
                    type.preventDefault();
                } else {
                    type = $(this).find(".artRedirectURL").attr("value");
                    context.searchsuggest.clearResults();
                    /** @type {!Object} */
                    window.location = type;
                }
            });
        };
        /**
         * @return {undefined}
         */
        context.searchsuggest.formSubmit = function() {
            init();
        };
        /**
         * @param {number} event
         * @param {!Text} direction
         * @return {undefined}
         */
        context.searchsuggest.moveInList = function(event, direction) {
            var f = options.resultsContainer.children("div");
            if (options.resultsContainer.find("div.content_wrapper").size() || options.resultsContainer.find("div.products_wrapper").size()) {
                f = options.resultsContainer.find("div.dropdownselected, div.searchSuggestViewall");
            }
            f.each(function(media) {
                if (media == options.listCurrent) {
                    if ($(this).hasClass("dw-object")) {
                        context.searchsuggest.handleArrowKeys(event, direction);
                    }
                    if (0 != $(this).find("a").length) {
                        $("#searchURL").val($(this).find("a").attr("href"));
                    } else {
                        $("#searchURL").val("");
                        direction.val($(this).attr("id"));
                    }
                    $(this).removeClass("unselected");
                    $(this).addClass("selected");
                } else {
                    $(this).removeClass("selected");
                    $(this).addClass("unselected");
                }
            });
        };
        context.searchsuggest.formSubmit();
    }
    /**
     * @return {undefined}
     */
    function init() {
        options.searchForm.submit(function($location) {
            $location.preventDefault();
            var c = $("#searchURL").val();
            $location = $(this).find("input[name='q']");
            var value = $location.val().replace(/^\s+|\s+$/g, "").replace(/\s+/g, " ");
            if ("" != c && void 0 != c) {
                $location = void 0 != $(".productDetails.dropdownselected.selected").find("a").attr("href") ? $(".productDetails.dropdownselected.selected").find("a").attr("href") : void 0 != jQuery(".article.dropdownselected.selected").find("a").attr("href") ? $(".article.dropdownselected.selected").find("a").attr("href") : c;
                /** @type {string} */
                window.location = $location;
            } else {
                c = $(this).attr("action");
                var value = $(".suggestionterm.dropdownselected.selected").attr("id");
                if (void 0 != value) {
                    window.location = context.util.appendParamToURL(c, "q", value);
                } else {
                    if (0 == value.length || value.toLowerCase() === options.fieldDefault) {
                        return $location.val(""), false;
                    }
                    window.location = context.util.appendParamToURL(c, "q", value);
                }
            }
        });
    }
    var options = {};
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.searchsuggestrich = {
        init: function(name) {
            if (!context.preferences.siteSearchUpdateSwitch || name.isDisableForMobile && context.isMobileUserAgent) {
                if (name.isDisableForMobile && context.isMobileUserAgent) {
                    context.searchsuggest.initializeCache(name.additionalWrapper);
                    context.searchsuggest.nonDesktopInit();
                    options = context.searchsuggest.getCache();
                    init();
                }
            } else {
                context.searchsuggest.init(name.additionalWrapper);
                options = context.searchsuggest.getCache();
                injectLocalization(name.additionalWrapper);
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @return {undefined}
     */
    function save() {
        /** @type {number} */
        timeout = setTimeout(updateHeight, 5E3);
        /** @type {boolean} */
        m = true;
    }
    /**
     * @return {undefined}
     */
    function resize() {
        clearTimeout(timeout);
        $item.addClass("js_hide");
        /** @type {boolean} */
        m = false;
    }
    /**
     * @return {undefined}
     */
    function updateHeight() {
        $item.removeClass("js_hide");
    }
    /**
     * @return {undefined}
     */
    function f() {
        if (0 < $item.length) {
            save();
            $(window).on("scroll touchmove", function() {
                if ($item.offset().top + 150 >= jQuery(".footer_main").offset().top) {
                    resize();
                } else {
                    if (m) {
                        clearTimeout(timeout);
                        save();
                        $item.addClass("js_hide");
                    }
                }
            });
            jQuery(document).on("openQuickview.dialog categoryNav.open", resize);
            jQuery(document).on("closeQuickview.dialog categoryNav.close", save);
        }
    }
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    var $item = jQuery("#js_stickybar");
    var timeout;
    /** @type {boolean} */
    var m = true;
    context.components.global.stickybar = {
        init: function() {
            f();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(service, $) {
    /**
     * @return {undefined}
     */
    function show() {
        if (!options.stickyBlock.hasClass("js_stickyheader_active_keyboard") && !$(".sticky_header").hasClass("not_sticky")) {
            if (options.window.scrollTop() >= positionTop) {
                /** @type {boolean} */
                addOrRemove = true;
                options.stickyBlock.addClass("js_stickyheader");
                options.stickyBlockContent.append($(".header-top").find(".minicart_wrapper"));
                if (service.isMobileUserAgent) {
                    options.headerServiceContentParent.hide();
                    options.stickyBlockContent.append(options.storelocatorLink);
                    options.stickyBlockContent.append(options.headerCustomerService);
                    options.stickySearchContainer.append(options.searchIcon);
                    if (options.searchIcon.hasClass("active") || options.storelocatorLink.hasClass("open")) {
                        options.fade.height(options.body.height()).show();
                    } else {
                        options.fade.hide();
                    }
                }
            } else {
                /** @type {boolean} */
                addOrRemove = false;
                var arrowDiv = $(".navigation").find(".minicart_wrapper");
                options.stickyBlock.removeClass("js_stickyheader");
                options.headerTop.prepend(options.headerTopCart);
                if (0 <= options.stickyBlock.find(".minicart_wrapper").length) {
                    $(".header-top").find(".minicart_wrapper").remove();
                    $(".header-top").prepend(arrowDiv);
                    service.componentsMgr.loadComponent("global.minicart");
                }
                if (service.isMobileUserAgent) {
                    options.headerServiceContentParent.show();
                    options.storelocatorPlace.append(options.storelocatorLink);
                    options.searchIconContainer.append(options.searchIcon);
                    options.headerServiceContent.append(options.headerCustomerService);
                    options.fade.hide();
                }
            }
        }
    }
    /**
     * @return {undefined}
     */
    function init() {
        options.window.on("scroll touchmove", function() {
            var avarage = options.window.scrollTop();
            if (lastAvarage > avarage) {
                if (avarage < positionTop && addOrRemove) {
                    show();
                }
            } else {
                if (avarage >= positionTop && !addOrRemove) {
                    show();
                }
            }
            lastAvarage = avarage;
        });
        if (service.isTabletUserAgent || service.isMobileUserAgent) {
            options.headerSearchInput.on("focusin", function() {
                if (options.stickyBlock.hasClass("js_stickyheader")) {
                    options.fade.height(options.body.height()).show();
                    options.stickyBlock.addClass("js_stickyheader_active_keyboard");
                }
            });
            options.headerSearchInput.on("focusout", function() {
                if (service.isTabletUserAgent) {
                    options.fade.hide();
                }
                options.stickyBlock.removeClass("js_stickyheader_active_keyboard");
                show();
            });
        }
        if (service.isMobileUserAgent) {
            options.searchIcon.on("click", function() {
                options.searchIcon.toggleClass("active");
                if (options.searchIcon.hasClass("active") && options.stickyBlock.hasClass("js_stickyheader")) {
                    options.fade.height(options.body.height()).show();
                } else {
                    options.fade.hide();
                }
                options.headerCustomerService.find(".js_storeLocator").hide();
                options.storelocatorLink.removeClass("open");
                options.menuIcon.removeClass("expanded");
                options.menuContainer.hide();
                options.menuIcon.show();
            });
            options.document.on("navigation.click.storeLocator", function() {
                options.fade.height(options.body.height()).show();
                if (options.storelocatorLink.hasClass("open")) {
                    options.fade.hide();
                }
                options.headerSearch.find("form.search").removeClass("show");
                options.searchIcon.removeClass("active");
                options.menuIcon.removeClass("expanded");
                options.menuContainer.hide();
            });
            options.menuIcon.on("click", function() {
                options.headerCustomerService.find(".js_storeLocator").hide();
                options.storelocatorLink.removeClass("open");
                options.headerSearch.find("form.search").removeClass("show");
                options.searchIcon.removeClass("active");
            });
        }
    }
    var options = {};
    /** @type {number} */
    var positionTop = 0;
    /** @type {number} */
    var lastAvarage = 0;
    /** @type {boolean} */
    var addOrRemove = false;
    /** @type {boolean} */
    var m = false;
    service.components = service.components || {};
    service.components.global = service.components.global || {};
    service.components.global.stickyheader = {
        init: function() {
            if (!m) {
                /** @type {boolean} */
                m = true;
                options.window = $(window);
                options.document = $(document);
                options.body = $("body");
                options.headerTop = $(".header-top");
                options.headerTopCart = options.headerTop.find(".minicart_wrapper");
                options.headerContent = $(".inner_header_content");
                options.headerSearch = $(".header_search");
                options.headerSearchInput = $(".header_search .search_input");
                options.searchIconContainer = $(".search_icon_container");
                options.searchIcon = $(".search_icon_container .search_icon");
                options.stickyBlock = $(".navigation");
                options.storelocatorLink = $("#store_locator");
                options.storelocatorPlace = $(".js_storelocator_link_place");
                options.headerCustomerService = $("#header_customer_service");
                options.headerServiceContent = $(".sticky_header .content");
                options.headerServiceContentParent = $(".sticky_header");
                options.menuIcon = $(".navigation_header");
                options.menuContainer = $(".navigation .level_1_list");
                positionTop = options.stickyBlock.offset().top;
                lastAvarage = options.window.scrollTop();
                options.stickyBlock.find(".content:first").prepend($("<div/>").attr({
                    "class": "js_stickyheader_content"
                }));
                options.stickyBlockContent = $(".js_stickyheader_content");
                options.stickyBlockContent.append($("<div/>").attr({
                    "class": "js_stickyheader_search"
                }));
                options.stickySearchContainer = options.stickyBlock.find(".js_stickyheader_search");
                options.body.prepend($("<div/>").attr({
                    "class": "js_stickyheader_fade"
                }));
                options.fade = $(".js_stickyheader_fade");
                options.fade.css("opacity", "0.8");
                if (options.window.scrollTop() >= positionTop) {
                    show();
                }
                init();
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(app, $) {
    /**
     * @return {undefined}
     */
    function init() {
        that.document.on("gigya.publishAction", function(item, self) {
            if (self.item) {
                item = self.item;
                var context = self.options;
                var i = self.callback || $.noop;
                self = new gigya.services.socialize.UserAction;
                item = $.extend({
                    title: "",
                    description: "",
                    userMessage: "",
                    link: "",
                    linkSource: {
                        title: "",
                        href: ""
                    },
                    media: []
                }, item);
                context = $.extend({
                    scope: "internal",
                    privacy: "public",
                    callback: i || $.noop
                }, context);
                self.addActionLink(item.linkSource.title, item.linkSource.href);
                self.setUserMessage(item.userMessage);
                self.setLinkBack(item.link);
                self.setTitle(item.title);
                self.setDescription(item.description);
                /** @type {!Object} */
                context.userAction = self;
                /** @type {number} */
                i = 0;
                var patchLen = item.media.length;
                for (; i < patchLen; i++) {
                    self.addMediaItem({
                        src: item.media[i].src,
                        href: item.media[i].href,
                        type: item.media[i].type
                    });
                }
                gigya.socialize.publishUserAction(context);
            }
        });
        pm.bind("accountLogin.gigyaLinkAccount", function(d) {
            $(document).trigger("gigya.linkaccount", d);
            submit.apply(this, app.util.getObjectValues(d));
        });
        pm.bind("accountLogin.gigyaLinkAccountResized", function(targetShapeBounds) {
            that.linkAccountFrame.height(+targetShapeBounds.height);
            that.linkAccountDialog.dialog("option", "position", "center");
        });
        pm.bind("accountLogin.gigyaLinkAccountCheckoutCompleted", function(lastEventData) {
            that.document.trigger("cart.forceAuthenticatedCustomer", lastEventData);
        });
        $(document).on("submit", "#EmailRequestForm", function() {
            pm({
                target: window.parent,
                type: "accountLogin.gigyaLinkAccountResized",
                data: {
                    height: 500
                }
            });
        });
        gigya.socialize.addEventHandlers({
            onLogin: presenterLogic
        });
    }
    /**
     * @param {!Object} config
     * @return {undefined}
     */
    function presenterLogic(config) {
        var result = {};
        /** @type {!Array<string>} */
        var current = "UID UIDSig UIDSignature isSiteUID provider signature signatureTimestamp timestamp".split(" ");
        /** @type {!Array<string>} */
        var c = "nickname photoURL thumbnailURL birthDay birthMonth birthYear gender email proxiedEmail country state city zip firstName lastName profileURL isLoggedIn isConnected isSiteUser loginProvider loginProviderUID isTempUser statusReason dontClose newUser".split(" ");
        var end = "moduleID" in config.context && config.context.moduleID;
        var addEventListener = test(end) || $.noop;
        /** @type {number} */
        var n = 0;
        /** @type {number} */
        var index = current.length;
        for (; n <= index; n++) {
            if (current[n] in config) {
                result[current[n]] = config[current[n]];
            }
        }
        /** @type {number} */
        current = 0;
        /** @type {number} */
        n = c.length;
        for (; current <= n; current++) {
            if (c[current] in config.user) {
                result[c[current]] = config.user[c[current]];
            }
        }
        addEventListener(type, result, end);
    }
    /**
     * @param {?} method
     * @return {?}
     */
    function test(method) {
        /** @type {!Function} */
        var fn = val ? success : get;
        if (method in object && "function" === typeof object[method]) {
            fn = object[method];
        }
        return fn;
    }
    /**
     * @param {string} fn
     * @param {!Function} data
     * @return {undefined}
     */
    function sendCommand(fn, data) {
        if (fn && "function" === typeof data) {
            /** @type {!Function} */
            object[fn] = data;
        }
    }
    /**
     * @param {!Object} res
     * @param {?} key
     * @return {undefined}
     */
    function get(res, key) {
        /** @type {boolean} */
        var redirect = false;
        if (res) {
            redirect = {
                path: res + "?" + $.param(key)
            };
        }
        res = {
            redirect: redirect,
            desableRefreshPage: r,
            avoidReturnUrl: key.gigya_registration_succeded || !key.isCustomerAuthenticated,
            registrationSucceeded: key.gigya_registration_succeded,
            isGigyaFlow: true
        };
        if ("params" in app.page && "writereview" in app.page.params) {
            /** @type {boolean} */
            res.writereview = true;
        }
        pm({
            target: window.parent,
            type: "accountLogin.authenticationSuccess",
            data: res
        });
    }
    /**
     * @param {?} text
     * @param {!Object} coords
     * @param {string} duration
     * @return {?}
     */
    function success(text, coords, duration) {
        /** @type {boolean} */
        var f = "isSiteUID" in coords && !!coords.isSiteUID;
        /** @type {boolean} */
        r = void 0 != duration && "samplingForm" == duration;
        if (f) {
            return get.apply(this, arguments);
        }
        pm({
            target: window.parent,
            type: "accountLogin.gigyaLinkAccount",
            data: arguments
        });
    }
    /**
     * @param {string} animationContext
     * @param {!Object} params
     * @return {undefined}
     */
    function remove(animationContext, params) {
        if (animationContext) {
            window.location.href = animationContext + "?" + $.param($.extend(params, {
                source: "checkout"
            }));
        }
    }
    /**
     * @param {!Object} url
     * @param {!Object} options
     * @param {string} mode
     * @return {?}
     */
    function done(url, options, mode) {
        if ("isSiteUID" in options && options.isSiteUID) {
            return (url = app.ajax.load({
                url: url,
                data: $.extend({}, options, {
                    format: "ajax",
                    source: "checkout"
                })
            })) && url.done(function(body) {
                try {
                    /** @type {*} */
                    body = JSON.parse(body);
                } catch (G) {}
                that.document.trigger("cart.forceAuthenticatedCustomer", body);
            });
        }
        pm({
            target: window.parent,
            type: "accountLogin.gigyaLinkAccount",
            data: {
                redirectURL: url,
                redirectParams: $.extend({}, options, {}),
                moduleID: mode,
                options: {
                    source: "checkout"
                }
            }
        });
    }
    /**
     * @param {string} event
     * @param {!Object} data
     * @param {number} f
     * @param {!Object} m
     * @return {undefined}
     */
    function submit(event, data, f, m) {
        if (event) {
            m = m || {};
            $.extend(data, {
                moduleid: f,
                source: m.source || "default.embedded"
            });
            $(document).on("register.campaign", function(canCreateDiscussions, mysqlDate) {
                if (void 0 != app.urls.saveCampaign) {
                    $.ajax({
                        context: this,
                        type: "POST",
                        url: app.urls.saveCampaign,
                        data: {
                            firstName: data.firstName || "",
                            lastName: data.lastName || "",
                            email: data.email || "",
                            zip: data.zip || "",
                            city: data.city || "",
                            state: data.state || "",
                            country: data.country || "",
                            campaignID: mysqlDate || "",
                            isSocialRegister: true
                        },
                        dataType: "json",
                        success: function() {}
                    });
                }
            });
            that.linkAccountDialog = app.dialog.create({
                target: "#dialog-container-gigya-linkaccount",
                options: {
                    width: 400,
                    dialogClass: "dialog-gigya-linkaccount",
                    create: function() {
                        var key = $(this);
                        app.progress.show(key);
                        if ($(".ui_register_dial").find("#dialog-container").dialog("isOpen")) {
                            $(".ui_register_dialog").find("#dialog-container").dialog("close");
                        }
                        that.linkAccountFrame = $(document.createElement("iframe")).attr({
                            src: event + "?" + $.param(data),
                            scrolling: "no",
                            frameborder: "0",
                            height: 350
                        }).appendTo(key);
                        that.linkAccountFrame.on("load", function() {
                            app.progress.hide();
                            that.document.trigger("gigya.linkaccountdialog");
                        });
                    },
                    close: function() {
                        $(this).dialog("destroy").remove();
                    }
                }
            });
            that.linkAccountDialog.dialog("open");
        }
    }
    var that = {};
    var message = {};
    var type = app.urls.gigyaRedirectURL;
    /** @type {boolean} */
    var val = "embedded" === app.preferences.gigyaLinkAccountFlow;
    var object = {};
    /** @type {boolean} */
    var supportsTouchaction = false;
    /** @type {boolean} */
    var r = false;
    app.components = app.components || {};
    app.components.global = app.components.global || {};
    app.components.global.gigya = {
        init: function(name) {
            /**
             * @return {undefined}
             */
            var init = function() {
                if (!supportsTouchaction && "gigya" in window && window.gigya.__initialized) {
                    message = $.extend({}, message, name);
                    sendCommand("CheckoutLogin", val ? done : remove);
                    that.document = $(document);
                    that.linkAccountDialog = $();
                    that.linkAccountFrame = $();
                    init(name);
                    /** @type {boolean} */
                    supportsTouchaction = true;
                }
            };
            if (app.preferences.enableDeferredScript) {
                $(document).on("scriptLoaded.gigyaDW", init);
            } else {
                init();
            }
        },
        setLoginHandler: sendCommand,
        getLoginHandler: test
    };
})(window.app = window.app || {}, jQuery);
(function(app, $) {
    /**
     * @return {undefined}
     */
    function inject() {
        app.util.limitCharacters();
        that.subscribeSections.each(init);
        if (void 0 != that.nameCollectionPopupConfig && that.nameCollectionPopupConfig.enabled) {
            $(".js_newsletter_subscribe_content.ui-dialog-content").each(init);
        }
        that.newsletterLegalDetails.hide();
        that.newsletterLegalReadMore.on("click", function() {
            $(this).parent().find(that.newsletterLegalDetails).toggle();
        });
    }
    /**
     * @return {undefined}
     */
    function init() {
        var el = $(this);
        var msg = el.find(".js_newsletter_subscribe_link");
        var self = el.find(".js_newsletter_subscribe_form");
        var selector = el.find(".js_newsletter_subscribe_content");
        var Console_error = el.find(".js_newsletter_subscribe_error");
        var value = el.data("isPopup");
        /** @type {boolean} */
        value = !(false === value || "false" === value);
        el.data("appNewsletter", {
            link: msg,
            form: self,
            dropdown: selector,
            error: Console_error,
            isPopup: value
        });
        self.data("appNewsletter", {
            link: msg,
            container: el,
            dropdown: selector,
            error: Console_error
        });
        if (self && self.length) {
            /** @type {boolean} */
            self.validate().settings.onfocusout = false;
        }
        self.off("submit").on("submit", add);
        self.on("keyup", "input", function(event) {
            if (options.removeErrorsWhenEmailIsEmpty && 0 == $(event.currentTarget).val().length) {
                self.resetForm();
                self.find(".js_newsletter_subscribe_error").attr("style", "display: none !important");
            }
        });
        if (value && (msg.on(options.openPopupEvents, function() {
                if (isScrollAnimation && options.closeAfterClickONSameLink) {
                    /** @type {boolean} */
                    isScrollAnimation = false;
                    render(el);
                } else {
                    if (isScrollAnimation = true, el && el.length) {
                        var parent = el.data("appNewsletter");
                        if (parent = parent && "dropdown" in parent ? parent.dropdown : null) {
                            parent.toggle(true);
                        }
                        el.addClass("newsletter_subscribe_hover");
                        $(document).trigger("newsletter.show");
                    }
                }
                if (options.stopPropagation) {
                    return false;
                }
            }), msg.on(options.closePopupEvent, function(event) {
                var $this = that.subscribeSections;
                if (!($this.is(event.relatedTarget) || 0 !== $this.has(event.relatedTarget).length)) {
                    /** @type {boolean} */
                    isScrollAnimation = false;
                    render(el);
                }
            }), selector.on(options.openPopupEvents + " mouseenter", function() {
                /** @type {boolean} */
                isScrollAnimation = true;
            }), selector.on(options.closePopupEvent, function() {
                /** @type {boolean} */
                isScrollAnimation = false;
                render(el);
            }), selector.on("focusout", ":input", function() {
                if (!isScrollAnimation) {
                    render(el);
                }
            }), options.closePopupAfterClickOnBody)) {
            $("body").on(options.openPopupEvents, function(jEvent) {
                if (!(!isScrollAnimation || $(jEvent.target).is(msg) || $(jEvent.target).parents(".js_newsletter_subscribe_content").is(selector))) {
                    render(el);
                    /** @type {boolean} */
                    isScrollAnimation = false;
                }
            });
        }
    }
    /**
     * @param {!Object} comment
     * @return {undefined}
     */
    function render(comment) {
        if (comment && comment.length) {
            var options = comment.data("appNewsletter");
            var d = options && "form" in options ? options.form : null;
            options = options && "dropdown" in options ? options.dropdown : null;
            if (!(d && d.find(":input:focus").length)) {
                if (options) {
                    options.toggle(false);
                }
                comment.removeClass("newsletter_subscribe_hover");
            }
        }
    }
    /**
     * @return {undefined}
     */
    function clickHandler() {
        $("#newsletter_signup_cancelbtn").on("click", function(event) {
            event.preventDefault();
            app.dialog.close();
        });
    }
    /**
     * @param {!Object} o
     * @return {undefined}
     */
    function add(o) {
        o.preventDefault();
        var target = $(this);
        var me = target.find(".g-recaptcha.invisible-recaptcha");
        o = target.data("cmPlacement") ? target.data("cmPlacement") : target.parents(".header").length ? "Header" : target.parents(".footer").length ? "Footer" : "Modal";
        $(document).trigger("newsletter.submitted", {
            email: target.find("input[name$='_newsletter_email']").val(),
            source: o
        });
        if (target.valid()) {
            if (app.preferences.enableInvisibleRecaptcha && me.length && !target.find(".g-recaptcha-response").val()) {
                me.trigger("invisibleRecaptcha.validate", {
                    callback: save.bind(this, void 0, o)
                });
            } else {
                save.call(this, void 0, o);
            }
        } else {
            target.find(".js_newsletter_subscribe_error").attr("style", "display: none !important");
        }
        if (app.preferences.enableGoogleReCaptcha && app.preferences.newsletterSignupEnableReCaptcha) {
            grecaptcha.reset();
        }
    }
    /**
     * @param {string} state
     * @param {!Object} sourceId
     * @param {?} next
     * @return {undefined}
     */
    function save(state, sourceId, next) {
        var element = $(this);
        if (app.preferences.isNewOptInEnabled) {
            state = element.serializeArray();
            state.push({
                name: "sourceInfo",
                value: sourceId
            });
            state.push({
                name: "ddmSubSource",
                value: m.call(this)
            });
        } else {
            state = element.serialize();
            /** @type {string} */
            state = state + ("&ddmSubSource=" + m.call(this));
        }
        app.progress.show(element);
        $.ajax({
            context: this,
            type: "POST",
            url: element.attr("action"),
            data: state,
            success: build
        }).always(function() {
            app.progress.hide();
            if ("function" === typeof next) {
                next();
            }
        });
    }
    /**
     * @return {?}
     */
    function m() {
        var $subHeader = $(this);
        var d = app.resources.DDMSUBSOURCE_POPUP;
        if ($subHeader.parents("[class*='dialog']").length || $subHeader.parents("[class*='js-toggle_content']").length) {
            d = app.resources.DDMSUBSOURCE_POPUP;
        } else {
            if ($subHeader.parents("[class*='header']").length) {
                d = app.resources.DDMSUBSOURCE_HEADER;
            } else {
                if ($subHeader.parents("[class*='footer']").length) {
                    d = app.resources.DDMSUBSOURCE_FOOTER;
                }
            }
        }
        return d;
    }
    /**
     * @param {!Object} name
     * @param {!Object} value
     * @param {string} x
     * @return {undefined}
     */
    function build(name, value, x) {
        app.progress.hide();
        value = $(this);
        var options = value.data("appNewsletter");
        var toolbar = options && "container" in options ? options.container : null;
        options = options && "error" in options ? options.error : null;
        var self = app.components.global.newsletter;
        var existingSynapseBloodhound;
        if (app.preferences.isPXBotDetectionEnabled && app.ajax.isHtmlResponse(x)) {
            app.dialog.create({
                target: $("<div/>").html(name),
                options: {
                    dialogClass: app.resources.botDetectionDialogClass
                }
            }).dialog("open");
        } else {
            existingSynapseBloodhound = $(this).data("cmPlacement") ? $(this).data("cmPlacement") : $(this).parents(".header").length || $(this).parents(".sticky_header").length ? "Header Sign up" : $(this).parents(".footer").length || $(this).parents(".footer_main").length ? "Footer Sign up" : "Pop up Sign up";
            x = value.find("[id$='_email']").val();
            if (true === name.success) {
                if (options && options.length) {
                    options.toggle(false);
                }
                render(toolbar);
                value.find("[id$='_email']").val("");
                if ("submitSuccessCallback" in self && "function" === typeof self.submitSuccessCallback) {
                    self.submitSuccessCallback({
                        container: toolbar,
                        request: {
                            useremailaddress: x
                        }
                    });
                }
                value = {
                    source: existingSynapseBloodhound,
                    subscribedEmail: x,
                    formData: value,
                    hashEmail: name.hashEmail,
                    uiEmailId_256SHA: name.uiEmailId_256SHA
                };
                if (app.preferences && app.preferences.trackingEncryptedEmail) {
                    value.encryptedEmail = name.encryptedEmail;
                }
                $(document).trigger("newsletter.success", value);
                if (true === name.redirect) {
                    app.page.redirect(name.location);
                }
            } else {
                if ("submitFailCallback" in self && "function" === typeof self.submitFailCallback) {
                    self.submitFailCallback({
                        container: options,
                        response: name,
                        data: value
                    });
                    $(document).trigger("newsletter.fail", {
                        source: existingSynapseBloodhound,
                        response: name,
                        subscribedEmail: x,
                        formData: value
                    });
                }
            }
        }
    }
    /**
     * @param {?} url
     * @param {!Object} data
     * @return {undefined}
     */
    function load(url, data) {
        if (null == $.cookie("isSubscribed")) {
            if (url.enableNewsLetterOnScroll) {
                /** @type {boolean} */
                var f = true;
                $(window).scroll(function() {
                    if ($(window).scrollTop() > app.resources.NEWSLETTER_POPUP_ONSCROLL && f && null == $.cookie("isSubscribed")) {
                        $.cookie("isSubscribed", "true", {
                            expires: 15
                        });
                        subsParams();
                        $(document).trigger("newsletter.show");
                        /** @type {boolean} */
                        f = false;
                        inject(data);
                    }
                });
            } else {
                $.cookie("isSubscribed", "true", {
                    expires: 15
                });
                subsParams();
            }
        }
    }
    /**
     * @return {undefined}
     */
    function subsParams() {
        $(".newsletter_subscribe_popup .newsletter_subscribe_content").css("position", "relative");
        app.dialog.create({
            target: $(".newsletter_subscribe_popup .newsletter_subscribe_content"),
            options: {
                autoOpen: true,
                position: "center",
                dialogClass: "ui_notifyme_dialog ui_email_signup_modal",
                width: "545px",
                overlay: {
                    backgroundColor: "#000",
                    opacity: .5
                },
                emptyOnClose: false
            }
        });
        if (app.isMobileUserAgent) {
            if (!(void 0 == that.nameCollectionPopupConfig || that.nameCollectionPopupConfig.showonmobile)) {
                $(".ui_notifyme_dialog, .ui-widget-overlay").css("display", "none");
            }
        }
        if (app.isTabletUserAgent) {
            if (!(void 0 == that.nameCollectionPopupConfig || that.nameCollectionPopupConfig.showontablet)) {
                $(".ui_notifyme_dialog, .ui-widget-overlay").css("display", "none");
            }
        }
    }
    var that = {};
    var options = {
        openPopupEvents: "mouseover",
        closePopupEvent: "mouseleave",
        removeErrorsWhenEmailIsEmpty: false,
        closePopupAfterClickOnBody: false,
        closeAfterClickONSameLink: false,
        stopPropagation: false
    };
    /** @type {boolean} */
    var isScrollAnimation = false;
    /** @type {boolean} */
    var C = false;
    app.components = app.components || {};
    app.components.global = app.components.global || {};
    app.components.global.newsletter = {
        init: function(name) {
            if (!C) {
                options = $.extend({}, options, name);
                that.document = $(document);
                that.subscribeSections = $(".js_newsletter_subscribe");
                that.errorMessage = $(".newsletter_subscribe_error_message");
                that.nameCollectionPopupConfig = app.componentsconfig.global.global.components["global.namecollectionpopup"];
                that.newsletterLegalDetails = $(".newsletter-legal__details");
                that.newsletterLegalReadMore = $(".newsletter-legal__readmore");
                if (void 0 != that.nameCollectionPopupConfig && that.nameCollectionPopupConfig.enabled && 0 < $(".newsletter_subscribe_popup .newsletter_subscribe_content").length) {
                    load(options, name);
                }
                inject(name);
                this.customInit(name);
                /** @type {boolean} */
                C = true;
            }
        },
        customInit: function() {},
        submitSuccessCallback: function(config) {
            var attrs = "request" in config ? config.request : null;
            if (attrs) {
                app.dialog.close();
                if (app.resources.NEWSLETTER_SHOW_CONFIRMATION_INLINE) {
                    app.ajax.load({
                        url: app.util.appendParamsToUrl(app.urls.newsletterConfirmation, attrs)
                    }).done(function(b) {
                        config.container.html(b);
                    });
                } else {
                    app.dialog.open({
                        url: app.urls.newsletterConfirmation,
                        method: "POST",
                        data: attrs,
                        options: {
                            title: app.resources.NEWSLETTER_CONFIRM_TITLE,
                            open: clickHandler,
                            close: function() {},
                            dialogClass: "ui_email_signup"
                        }
                    });
                }
            }
        },
        submitFailCallback: function(data) {
            var c = "container" in data ? data.container : null;
            data = "response" in data ? data.response : {};
            if ("error" in data && c && c.length) {
                c.toggle(true).text(data.error);
            }
        },
        reload: function() {
            if (C) {
                that.subscribeSections.each(init);
            } else {
                app.componentsMgr.load("global.newsletter");
            }
        },
        initNewSubscriptionSections: function(container) {
            container.each(init);
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.newsletter = context.components.global.newsletter || {};
    /**
     * @param {!Object} data
     * @return {undefined}
     */
    context.components.global.newsletter.submitSuccessCallback = function(data) {
        $(".error-form-submit").hide();
        var value = data.request.useremailaddress;
        if (data.container) {
            var g = data.container.hasClass("email_sign_up_content") ? data.container : data.container.find(".email_sign_up_content");
            if (g.parents(".first_arrival_slot_promo").length) {
                context.components.global.custom.hideHeaderPromoBlock(g.closest(".first_arrival_slot_promo"));
                $(".account_navigation_link").trigger("click");
            } else {
                if (g.hasClass("newsletter-footer")) {
                    $("<div>", {
                        class: "topslot_content c-footer-newsletter-confirmation",
                        html: '<h4 class="c-footer-newsletter-confirmation__title">' + app_ysl.resources.SUBSCRIBE_CONFIRMATION_THANKYOU + "</h4>" + String.format(app_ysl.resources.SIGNUP_SUCCESS_MESSAGE, value)
                    }).appendTo(g.empty());
                    g.show();
                } else {
                    if (g.length) {
                        $.ajax({
                            type: "POST",
                            data: {
                                useremailaddress: value
                            },
                            url: context.urls.newsletterConfirmation,
                            success: function(name) {
                                g.html(name);
                                g.show();
                            }
                        });
                    }
                    /** @type {string} */
                    var headerUppercase = "Footer";
                    if (g.parents(".sticky_header").length) {
                        $("#sign_up_account").show();
                        /** @type {string} */
                        headerUppercase = "Header";
                    }
                    if (data.container.hasClass("js_modalpopup_signup")) {
                        /** @type {string} */
                        headerUppercase = "Toaster";
                    }
                }
            }
            $(document).trigger("emailsignup_succes", {
                source: headerUppercase
            });
        }
        if (data.container.hasClass("js_modalpopup_signup")) {
            $(document).trigger("modalpopup_signup_success", {
                container: data.container.closest(".js_modalpopup_container"),
                email: value
            });
        }
        $(document).trigger("signup_success_promocode", {
            source: headerUppercase
        });
    };
    /**
     * @param {!Object} data
     * @return {undefined}
     */
    context.components.global.newsletter.submitFailCallback = function(data) {
        var result = "response" in data ? data.response : {};
        if ("error" in result) {
            if (data.data.find(".f_field_email").hasClass("sign-up-push-up")) {
                $(".sign-up-push-up").show().text(result.error);
            } else {
                data.container.closest(".js_newsletter_subscribe_content").find(".error-form-submit").show().text(result.error);
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @param {?} isRefresh
     * @param {!Object} data
     * @return {undefined}
     */
    function callback(isRefresh, data) {
        if ("ignoredProducts" in data && !$.isEmptyObject(data.ignoredProducts)) {
            start();
        } else {
            that.document.trigger("product.addedToCart", {
                pid: "currentProduct" in self.page ? self.page.currentProduct.pid : ""
            });
        }
    }
    /**
     * @param {?} p2
     * @param {!Object} p
     * @return {undefined}
     */
    function init(p2, p) {
        if ("ignoredProducts" in p && !$.isEmptyObject(p.ignoredProducts)) {
            start();
        } else {
            that.document.trigger("product.addedSampleToCart", {
                pid: p.pidSample
            });
        }
    }
    /**
     * @param {!Object} type
     * @param {!Object} options
     * @return {undefined}
     */
    function update(type, options) {
        type.preventDefault();
        that.addToCartForm = $("form.js_addtocartform");
        /** @type {string} */
        var cap = "";
        if (0 < that.addToCartForm.find('input[name="dwopt_' + options.pid + '_capOptionProduct"]:checked').length) {
            cap = that.addToCartForm.find('input[name="dwopt_' + options.pid + '_capOptionProduct"]:checked').val();
        } else {
            if (options.cap) {
                cap = options.cap;
            }
        }
        if (!options.pid || "product" != self.page.ns && "contentpage" != self.page.ns && "wishlist" != self.page.ns && "product" !== self.pageContextObject.ns && "wardrobe" !== self.pageContextObject.ns && "genericlandingpage" != self.page.ns) {
            start();
        } else {
            var pid = options.pid;
            var numberOfCriteria = options.qty || options.amount || 1;
            type = type.type || "";
            engraving = options.engraving || "";
            engravingType = options.engravingType || "";
            routineID = options.routineID || "";
            if (!that.popupContainer) {
                that.popupContainer = $("<div/>").attr({
                    id: "addedtocart_popup"
                }).appendTo(document.body);
            }
            self.ajax.load({
                target: that.popupContainer,
                type: "GET",
                url: self.urls.addedToCartPopup,
                data: {
                    pid: pid,
                    qty: numberOfCriteria,
                    cap: cap,
                    engraving: engraving,
                    engravingType: engravingType,
                    type: type,
                    routineID: routineID,
                    caller: self.pageContextObject.ns
                },
                callback: function(name) {
                    if (name) {
                        self.dialog.create({
                            target: that.popupContainer,
                            options: {
                                position: "center",
                                dialogClass: "addedtocart_dialog store-skin--version-3",
                                emptyOnClose: true,
                                open: function(target, name) {
                                    target = $(this);
                                    self.recommendations.init({
                                        makeCall: true
                                    });
                                    target.trigger("imageReplace.globalResponsive");
                                    $(".main").trigger("dialog.opened");
                                    if ($(".addedtocart_dialog .product_popup_added_to_cart").length) {
                                        $(document).trigger("tracking.popup.added.to.cart");
                                    }
                                    $(".ui-widget-overlay.ui-front").one("click", function() {
                                        $("#addedtocart_popup").dialog("close");
                                    });
                                },
                                close: function() {
                                    $(".main").trigger("dialog.closed");
                                }
                            }
                        }).dialog("open");
                        if (0 < $(".addedtocart_carousel").length) {
                            self.carousel.init($(".addedtocart_carousel"));
                        }
                    } else {
                        start();
                    }
                }
            });
        }
    }
    /**
     * @param {!Object} link
     * @return {undefined}
     */
    function build(link) {
        link = $(this);
        self.ajax.load({
            url: self.urls.updateProductQuantity,
            data: {
                ProductID: link.data("productid"),
                ProductUUID: link.data("productuuid"),
                Quantity: link.val()
            },
            callback: function(name) {
                that.document.trigger("product.addedToCart", {
                    pid: "currentProduct" in self.page ? self.page.currentProduct.pid : ""
                });
            }
        });
    }
    /**
     * @return {undefined}
     */
    function start() {
        $(document).on("minicart.addedToCart", function() {
            self.components.global.custom.minicartOpen(true);
            that.document.off("minicart.addedToCart");
        });
    }
    var that = {};
    /** @type {boolean} */
    var m = false;
    self.components = self.components || {};
    self.components.addedtocart = self.components.addedtocart || {};
    self.components.addedtocart.popup = {
        init: function(name) {
            if (!m) {
                that.document = $(document);
                that.minicartWrapper = $(".minicart_wrapper");
                that.addToCartForm = $("form.js_addtocartform");
                that.document.on("product.addedProductSetToCart", callback);
                that.document.on("product.addedSampleProductSetToCart", init);
                that.document.on("product.addedToCart customgift.addedToCart wishlist.addedToCart routine.addedToCart product.addedSampleToCart", update);
                that.document.on("change", ".addedtocart_popup .quantity_select", build);
                /** @type {boolean} */
                m = true;
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(config, $) {
    /**
     * @return {undefined}
     */
    function mouseMove() {
        var max = $(window).width();
        var value = $(window).height();
        var features = options.screenSize;
        /** @type {boolean} */
        config.page.isMobileScreenSize = max <= (max > value ? boundsMax : min);
        var i;
        for (i in features) {
            value = features[i].min;
            var val = features[i].max;
            $(document.documentElement).removeClass("size-" + i);
            if ((!value || value <= max) && (!val || val >= max)) {
                /** @type {string} */
                config.page.screenSizeDeviceType = i;
                $(document.documentElement).addClass("size-" + i);
            }
        }
        that.document.trigger("window.resize");
    }
    /**
     * @param {!Object} settings
     * @return {undefined}
     */
    function init(settings) {
        if (!$(".carosal-recomandations-load-next-prev") || !settings || $(".carosal-recomandations-load-next-prev") && "jcarousel:createend" != settings.type) {
            if (options.recalculateOnResize && v != config.page.screenSizeDeviceType) {
                mouseMove();
                $("." + options.imageClassName + ", img[data-is-responsive]").removeAttr("data-is-responsive-loaded");
                v = config.page.screenSizeDeviceType;
            }
            var item = (this === window ? $(document) : $(this)).find(options.recalculateOnResize ? "." + options.imageClassName + ":not([data-is-responsive-loaded]), img[data-is-responsive]:not([data-is-responsive-loaded]), div[data-is-responsive]:not([data-is-responsive-loaded]), .swatch_image[data-src-not-loaded]" : "." + options.imageClassName + ", img[data-is-responsive], div[data-is-responsive]").filter(function() {
                var b = $(this);
                var e = config.preferences.renderWhenContainerIsVisible;
                return config.util.isElementInViewport(this) && (e && b.is(":visible") || !e) || b.hasClass(options.imageForcedClassName) || "forced" === b.attr("data-is-responsive");
            });
            if (item.length) {
                open(item);
                if (!options.recalculateOnResize) {
                    item.removeClass(options.imageClassName);
                }
                if (!(!settings || "imageReplace" != settings.type && "scroll" != settings.type)) {
                    show({
                        from: "load"
                    });
                }
            }
        }
    }
    /**
     * @param {string} e
     * @return {undefined}
     */
    function show(e) {
        var token = $(".carosal-recomandations-load-next-prev");
        if (token && 0 < token.length && e && config.util.isElementInViewport(token[0])) {
            switch (e.from) {
                case "load":
                    e = token.find('img.b-product_img[data-is-responsive-loaded!="true"]').last();
                    var expRecords = token.find('img.b-product_img[data-is-responsive-loaded="true"]');
                    if (expRecords && 0 < expRecords.length) {
                        e.push($(token.find("img.b-product_img")[expRecords.length]));
                    }
                    break;
                case "right":
                    e = token.find('img.b-product_img[data-is-responsive-loaded!="true"]').last();
                    break;
                case "left":
                    e = token.find('img.b-product_img[data-is-responsive-loaded="true"]');
                    e = $(token.find("img.b-product_img")[e.length - 1]);
                    break;
                default:
                    /** @type {string} */
                    e = "";
            }
            if (e.length) {
                open(e);
            }
        }
    }
    /**
     * @param {string} fn
     * @return {undefined}
     */
    function open(fn) {
        /** @type {string} */
        var attribute = options.device + "Src";
        /** @type {string} */
        var req_attr = options.device + "Background";
        if (options.recalculateOnResize) {
            /** @type {string} */
            attribute = config.page.screenSizeDeviceType + "Src";
            /** @type {string} */
            req_attr = config.page.screenSizeDeviceType + "Background";
        }
        fn.each(function() {
            var $img = $(this);
            var sliderDataAttributes = $img.data();
            if (!(options.recalculateOnResize && $img.attr("data-is-responsive-loaded"))) {
                if ("background" === $img.attr("data-is-responsive")) {
                    $img.css("background-image", "url(" + sliderDataAttributes[req_attr] + ")");
                } else {
                    $img.attr("src", sliderDataAttributes[attribute]);
                    $img.removeAttr("data-src-not-loaded");
                }
                if (options.recalculateOnResize) {
                    $img.attr("data-is-responsive-loaded", true);
                } else {
                    $img.removeAttr("data-is-responsive");
                }
            }
        });
    }
    /**
     * @return {undefined}
     */
    function run() {
        var b = $(this);
        if (!b.data("imagesLoaded")) {
            b.attr("data-images-loaded", true);
            b.find("img").each(function() {
                var b = $(this);
                if (!b.attr("src")) {
                    var d = b.data();
                    d = d.hasOwnProperty(options.device + "Src") ? d[options.device + "Src"] : d.src;
                    b.attr("src", d);
                }
            });
        }
    }
    /**
     * @return {undefined}
     */
    function parse() {
        var b = $("." + options.imageClassNameZoom);
        if (b.length) {
            b.each(function() {
                var btn = $(this);
                var params = btn.data();
                btn.attr("href", params[options.device + "Src"]);
            });
        }
    }
    /**
     * @return {undefined}
     */
    function main() {
        $(".carosal-recomandations-img-section img").touchwipe({
            wipeLeft: function() {
                show({
                    from: "left"
                });
            },
            wipeRight: function() {
                show({
                    from: "right"
                });
            },
            min_move_x: 20,
            min_move_y: 20,
            preventDefaultEvents: false
        });
    }
    /**
     * @return {undefined}
     */
    function courseTableSectionClickHandler() {
        if (0 < $(this).siblings(".carosal-recomandations-img-section").length) {
            if ($(this).hasClass("jcarousel-prev")) {
                show({
                    from: "right"
                });
            } else {
                show({
                    from: "left"
                });
            }
        }
    }
    /**
     * @return {undefined}
     */
    function initialize() {
        parse();
        that.document.on("product.variationChanged", parse);
        that.document.on("imageReplace.globalResponsive", init);
        that.document.on("search.update jcarousel:createend jcarousel:animateend dialog.opened product.variationChanged product.altViewChanged custom.pagescroll custom.pageLoaded", init);
        $(window).on("resize", config.util.eventDelay(init, options.loadImageDelay));
        $(window).on("scroll", init);
        $(window).resize(function() {
            config.util.throttle(mouseMove, 1E3, this);
        });
        $(document).on("mouseenter focus", ".navigation .lazy-load-images", run);
        $(document).on("mouseenter focus", ".lazyload-menu-img", init);
        that.document.on("click", ".carosal-recomandations-load-next-prev .jcarousel-control", courseTableSectionClickHandler).on("recommendations.loaded", main);
    }
    var that = {};
    /** @type {boolean} */
    var stdout = false;
    var options = {
        device: function() {
            if ("head" in window) {
                if (config.preferences.contentusecustomretinadevices && window.head.retina) {
                    return "isMobileUserAgent" in config && config.isMobileUserAgent ? "retinamobile" : "isTabletUserAgent" in config && config.isTabletUserAgent ? ($(document.documentElement).removeClass("desktop mobile retina").addClass("no-desktop no-mobile no-retina tablet"), "retinatablet") : "retinadesktop";
                }
                if (window.head.retina && !config.isMobileUserAgent) {
                    return "retina";
                }
                if (window.head.desktop) {
                    return "desktop";
                }
                if ("isTabletUserAgent" in config && config.isTabletUserAgent) {
                    return $(document.documentElement).removeClass("desktop mobile retina").addClass("no-desktop no-mobile no-retina tablet"), "tablet";
                }
                if (window.head.mobile) {
                    return "mobile";
                }
            }
        }() || "desktop",
        imageClassName: "responsive_image",
        imageForcedClassName: "responsive_forced",
        imageClassNameZoom: "cloud-zoom",
        loadImageDelay: 250,
        screenSize: {
            tablet: {
                min: 481,
                max: 800
            },
            mobile: {
                max: 480
            },
            desktop: {
                min: 1E3
            }
        },
        recalculateOnResize: false
    };
    /** @type {number} */
    var min = options.screenSize.tablet.min;
    /** @type {number} */
    var boundsMax = options.screenSize.tablet.max;
    /** @type {null} */
    var v = null;
    config.components = config.components || {};
    config.components.global = config.components.global || {};
    config.components.global.responsive = {
        settings: options,
        init: function(name) {
            options = $.extend(true, options, name || {});
            min = options.screenSize.tablet.min;
            boundsMax = options.screenSize.tablet.max;
            if (!stdout) {
                that.document = $(document);
                initialize();
                /** @type {boolean} */
                stdout = true;
            }
            mouseMove();
            init.call(options.container || config.ui.main);
        },
        getHandleImageSourceReplacement: init
    };
})(window.app = window.app || {}, jQuery);
(function(context) {
    /**
     * @return {undefined}
     */
    function gotoNewOfflinePage() {
        if ("trackerData" in context.page) {
            transaction = context.page.trackerData;
        }
    }
    /**
     * @return {undefined}
     */
    function init() {
        var options = context.preferences.googleAnalyticsJSON;
        if (options && options.isInclude) {
            (function(i, s, o, g, r, a, editorElem) {
                /** @type {string} */
                i.GoogleAnalyticsObject = r;
                i[r] = i[r] || function() {
                    (i[r].q = i[r].q || []).push(arguments);
                };
                /** @type {number} */
                i[r].l = 1 * new Date;
                /** @type {!Element} */
                a = s.createElement(o);
                /** @type {!Element} */
                editorElem = s.getElementsByTagName(o)[0];
                /** @type {number} */
                a.async = 1;
                /** @type {string} */
                a.src = g;
                editorElem.parentNode.insertBefore(a, editorElem);
            })(window, document, "script", "//www.google-analytics.com/analytics.js", "ga");
        }
    }
    var transaction = {};
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.googleanalytics = {
        init: function() {
            var options = context.preferences.googleAnalyticsJSON;
            if (options && options.useGAjs && options.isInclude) {
                window._gaq = window._gaq || [];
                window._gaq.push(["_setAccount", context.preferences.googleAnalyticsJSON.trackingID]);
                window._gaq.push(["_setDomainName", context.preferences.googleAnalyticsJSON.domainName]);
                window._gaq.push(["_trackPageview"]);
                if ("orderconfirmation" == context.page.type && "trackerData" in context.page) {
                    gotoNewOfflinePage();
                    setConversionGA();
                }
                /** @type {!Element} */
                options = document.createElement("script");
                /** @type {string} */
                options.type = "text/javascript";
                /** @type {boolean} */
                options.async = true;
                /** @type {string} */
                options.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
                /** @type {!Element} */
                var target = document.getElementsByTagName("script")[0];
                target.parentNode.insertBefore(options, target);
            } else {
                if (options && options.isInclude) {
                    init();
                    if (options = context.preferences.googleAnalyticsJSON) {
                        ga("create", options.trackingID, options.domainName);
                        ga("set", "location", window.location.href.replace(/&?cm_lm=([^&]$|[^&]*)/i, ""));
                        ga("send", "pageview");
                    }
                    if ("orderconfirmation" == context.page.type && "trackerData" in context.page) {
                        gotoNewOfflinePage();
                        ga("require", "ecommerce", "ecommerce.js");
                        ga("ecommerce:addTransaction", {
                            id: transaction.orderID,
                            affiliation: context.resources.SITE_NAME,
                            revenue: transaction.orderGrandTotal,
                            shipping: transaction.orderShipping,
                            tax: transaction.tax
                        });
                        if (options = transaction.ShopAction9Tag) {
                            /** @type {number} */
                            target = 0;
                            for (; target < options.length; target++) {
                                var item = options[target];
                                ga("ecommerce:addItem", {
                                    id: transaction.orderID,
                                    name: item.productName,
                                    sku: item.UPC,
                                    category: item.categoryName,
                                    price: item.unitPrice,
                                    quantity: item.quantity
                                });
                            }
                        }
                        ga("ecommerce:send");
                    }
                }
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @return {undefined}
     */
    function event() {
        if ($.fn.PlaceholderFallback) {
            $.valHooks.text = $.extend($.valHooks.text || {}, {
                set: function(element, depth) {
                    /** @type {!Object} */
                    element.value = depth;
                    $(element).trigger("change");
                }
            });
            $("input[placeholder], textarea[placeholder]").PlaceholderFallback();
        }
    }
    /**
     * @param {!Object} options
     * @return {undefined}
     */
    function init(options) {
        (options.container || $(this)).find("textarea").each(function() {
            if ($(this).val() === $(this).attr("placeholder")) {
                $(this).val("");
            }
        });
    }
    var element;
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.placeholder = {
        init: function() {
            if ("placeholder" in document.createElement("input")) {
                if (/msie 10/.test(navigator.userAgent.toLowerCase()) || /trident/.test(navigator.userAgent.toLowerCase()) && 0 < navigator.appVersion.split("rv:").length && 11 == parseFloat(navigator.appVersion.split("rv:")[1])) {
                    $(document).on("submit", "form", init);
                    $(document).on("form.customsubmit", init);
                }
            } else {
                element = $(document);
                event();
                element.on("dialogopen", event);
                element.ajaxSuccess(event);
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(data, $) {
    /**
     * @param {!Object} url
     * @param {string} object
     * @return {?}
     */
    function get(url, object) {
        url = url || self.frameWrapper.data("frameurl") || data.urls.loginPopupUrl;
        if (object) {
            url = data.util.appendParamsToUrl(url, object);
        }
        return $('<iframe class = "login_iframe ' + data.resources.MY_ACCOUNT_IFRAME + '" scrolling="no" frameBorder="0" allowTransparency="true" src="' + url + '"/>');
    }
    /**
     * @return {?}
     */
    function eventHandler() {
        if (frameWrapperHover && options.closeAfterClickONSameLink) {
            /** @type {boolean} */
            frameWrapperHover = false;
            obj.clear();
            if (!r) {
                obj.start(options.timerDuration);
            }
        } else {
            /** @type {boolean} */
            frameWrapperHover = true;
            if (!r) {
                load();
            }
        }
        if (options.stopPropagation) {
            return self.document.trigger("loginPopup.openModal"), false;
        }
    }
    /**
     * @return {undefined}
     */
    function axisBrushMoved() {
        /** @type {boolean} */
        frameWrapperHover = false;
        obj.clear();
        if (!r) {
            obj.start(options.timerDuration);
        }
    }
    /**
     * @return {undefined}
     */
    function init() {
        self.loginButton.on(options.openPopupEvents, function() {
            if (self.touchDevice.length) {
                if (self.aTapped) {
                    self.loginLink.attr("href", self.loginLinkUrl);
                } else {
                    self.loginLink.removeAttr("href");
                    /** @type {boolean} */
                    self.aTapped = true;
                }
            }
            eventHandler();
        }).on(options.closePopupEvent, axisBrushMoved);
        pm.bind("accountLogin.authenticationSuccess", initialize);
        pm.bind("gigya.link.account.success", initialize);
        pm.bind("loginpopup.lock", function() {
            obj.clear();
            /** @type {boolean} */
            r = true;
        });
        pm.bind("loginpopup.unlock", function() {
            obj.clear();
            /** @type {boolean} */
            r = false;
            if (!frameWrapperHover) {
                obj.start(options.timerDuration);
            }
        });
        pm.bind("registrationform.shown", function(canCreateDiscussions) {
            if ("redirectToRegister" in canCreateDiscussions && 1 == canCreateDiscussions.redirectToRegister) {
                location.href = data.urls.startRegister;
            }
        });
        pm.bind("promoregisterpopup.close", function() {
            location.reload(true);
        });
        pm.bind("promoregisterpopup.confirm", function() {
            $(".login_iframe").addClass("confirm");
        });
        pm.bind("loginpopup.resized", function(props) {
            if (props && props.height && props.isModal) {
                if (self.loginFrameModal && self.loginFrameModal.length) {
                    self.loginFrameModal.css({
                        height: +props.height + "px"
                    });
                }
                if (self.signInModal && self.signInModal.length) {
                    self.signInModal.dialog("option", "position", "center");
                }
            }
        });
        pm.bind("loginprocess.error", function(lastEventData) {
            $(document).trigger("loginerror", lastEventData);
        });
        self.document.on("globalLogin.openModal globalLogin.appendIframe globalLogin.loginoptimized", function(action, e) {
            if (!popupRequestSent) {
                e = e || {};
                var f = $.extend(true, {
                    isWellcomeBack: data.isUserRegistered && !data.isUserAuthenticated && !e.isNotMeDialog && 1 != data.resources.WELCOME_BACK_DESABLE,
                    _event: action.timeStamp,
                    dialogCloseCallback: function() {
                        $(document).trigger("globalLogin.closeModal");
                    }
                }, e);
                if ("redirect" in f) {
                    d[action.timeStamp] = f;
                }
                if ("appendIframe" === action.namespace && e.target) {
                    render(f);
                } else {
                    show(f);
                }
            }
        });
        if (options.closePopupAfterClickOnBody) {
            $("body").on(options.openPopupEvents, function(jEvent) {
                if (!(!frameWrapperHover || r || $(jEvent.target).is(".login_link") || $(jEvent.target).parents(".login_iframe_wrapper").is(self.loginWrapper))) {
                    alert();
                    /** @type {boolean} */
                    frameWrapperHover = false;
                }
            });
        }
        $(document).on("login.redirectURL", function(value, self) {
            var enchantDialog = data.util.getParameterValueFromUrl("returnURL");
            if (enchantDialog) {
                if (self.data.isGigyaFlow) {
                    data.ajax.load({
                        url: self.redirectPath,
                        type: "POST",
                        data: {
                            format: "ajax",
                            source: "default.embedded"
                        }
                    }).done(function(x) {
                        try {
                            /** @type {*} */
                            x = JSON.parse(x);
                        } catch (F) {}
                        if (1 == x.success || "registrationSucceeded" in self.data && self.data.registrationSucceeded) {
                            x = data.util.getParameterValueFromUrl("review_tab");
                            self.redirectPath = enchantDialog;
                            if ("true" === x) {
                                self.redirectPath = data.util.appendParamToURL(self.redirectPath, "review_tab", x);
                                self.redirectPath += "#tab_reviews";
                            }
                            location.href = self.redirectPath;
                        }
                    });
                } else {
                    if (data.resources.ACCOUNT_AFTERLOGIN_REDIRECT_SAME_DOMAIN_PATHS) {
                        self.originalRedirectPath = self.redirectPath;
                    }
                    self.redirectPath = enchantDialog;
                }
            }
            value = data.util.getParameterValueFromUrl("review_tab");
            if (self.data.redirect && "query" in self.data.redirect && !$.isEmptyObject(self.data.redirect.query)) {
                self.redirectPath = data.util.appendParamsToUrl(self.redirectPath, $.extend(true, {
                    loginSuccess: true
                }, self.data.redirect.query));
                if ("true" === value) {
                    self.redirectPath += "#tab_reviews";
                }
            }
            if (!(enchantDialog && self.data.isGigyaFlow)) {
                $(document).trigger("loginprocess.success");
                if (self.desableRefreshPage) {
                    $(document).trigger("loginprocess.completed");
                } else {
                    location.href = data.resources.ACCOUNT_AFTERLOGIN_REDIRECT_SAME_DOMAIN_PATHS && self.originalRedirectPath ? data.util.removeParamFromURL(self.originalRedirectPath, "returnURL") : self.redirectPath;
                }
            }
        });
    }
    /**
     * @return {undefined}
     */
    function load() {
        obj.clear();
        if (C) {
            self.loginButton.addClass("hover");
        } else {
            /** @type {boolean} */
            C = true;
            self.loginFrame = self.loginFrame.appendTo(self.framePlacement);
            self.loginFrame.addClass("hidden");
            self.loginButton.addClass("hover");
            self.framePlacement.addClass("loading");
            data.progress.show(self.framePlacement);
            $.pm.bind("loginpopup.loaded", function() {
                data.progress.hide();
                self.framePlacement.removeClass("loading");
                self.loginFrame.removeClass("hidden");
                self.document.trigger("loginpopup.complete");
            });
            $.pm.unbind("loginpopup.resized.dropdown");
        }
    }
    /**
     * @return {undefined}
     */
    function alert() {
        self.loginButton.removeClass("hover");
        self.document.trigger("loginPopup.closeModal");
    }
    /**
     * @param {!Event} options
     * @return {?}
     */
    function render(options) {
        /** @type {boolean} */
        popupRequestSent = true;
        var elem = options.target || self.document;
        var onfoo = options.onIframeLoaded || function() {};
        var e = {
            modal: "true",
            _iframetype: options.iframeType || "login",
            _event: options._event
        };
        if ("customParams" in options && "object" === typeof options.customParams) {
            var p;
            for (p in options.customParams) {
                e[p] = options.customParams[p];
            }
        }
        options = "iframeType" in options && "promo" == options.iframeType ? data.urls.loginPromoBannerPopupUrl : data.urls.loginPopupUrl;
        data.progress.show(elem);
        self.loginFrameModal = data.isMobileUserAgent ? get(options, e).css({
            visibility: "hidden",
            position: "absolute",
            top: "36px",
            "max-width": "320px",
            height: "450px",
            left: "0px",
            "z-index": "50",
            padding: "0",
            bottom: "0",
            right: "0"
        }).appendTo(elem) : get(options, e).css({
            visibility: "hidden",
            position: "absolute",
            top: "0",
            left: "0"
        }).appendTo(elem);
        pm.bind("loginpopup.loaded", function(event) {
            if ("_event" in event && event._event && e._event == event._event && event && event.isModal) {
                onfoo.call(elem);
                if (data.isMobileUserAgent) {
                    self.loginFrameModal.css({
                        visibility: "visible",
                        position: "absolute",
                        top: "36px",
                        "max-width": "320px",
                        height: "450px",
                        left: "0px",
                        "z-index": "50",
                        padding: "0",
                        bottom: "0",
                        right: "0"
                    });
                } else {
                    self.loginFrameModal.css({
                        visibility: "visible",
                        position: "inherit",
                        top: "auto",
                        left: "auto"
                    });
                }
                data.progress.hide();
                /** @type {boolean} */
                popupRequestSent = false;
            }
        });
        pm.bind("loginPopup", function(nextSceneConfig) {
            if (nextSceneConfig && nextSceneConfig.isModal) {
                elem.dialog("option", "position", "center");
            }
        });
        self.document.on("password_reset.opened", function(b, modalButton) {
            if (!modalButton.modal) {
                elem.dialog("close");
            }
        });
        return self.loginFrameModal;
    }
    /**
     * @param {!HTMLElement} options
     * @return {?}
     */
    function show(options) {
        if (z) {
            return self.signInModal && self.signInModal.dialog("open");
        }
        /** @type {boolean} */
        popupRequestSent = true;
        var removePopovers = options.dialogCloseCallback || function() {};
        var openScorm = options.dialogOpenCallback || function() {};
        var g = options.isCloseDisabled || false;
        var ADAPT = options.isWellcomeBack || false;
        var h = options.isWriteReview || false;
        var device = options.dialogWrapperClass || "";
        var p = options.title || "";
        var me = {
            modal: "true",
            _event: options._event,
            _iframetype: options.iframeType || "login",
            noredirect: options.noredirect
        };
        if (ADAPT) {
            me.welcomeback = ADAPT;
        }
        if (h) {
            /** @type {string} */
            me.bv = "writereview";
        }
        if ("customParams" in options && "object" === typeof options.customParams) {
            var p;
            for (p in options.customParams) {
                me[p] = options.customParams[p];
            }
        }
        self.signInModal = data.dialog.create({
            target: "#modalLogin",
            options: {
                width: 440,
                maxHeight: 740,
                dialogClass: "ui_register_dialog" + (g ? " ui_dialog_close_disabled " : " ") + device,
                closeOnEscape: !g,
                emptyOnClose: false,
                close: removePopovers,
                draggable: false,
                title: p,
                open: function() {
                    if (!z) {
                        data.progress.show($(this));
                    }
                    if (g) {
                        $(".ui-dialog-titlebar-close").hide();
                    }
                    openScorm();
                }
            }
        });
        self.loginFrameModal = get(data.urls.loginPopupUrl, me).appendTo(self.signInModal);
        self.document.on("password_reset.opened", function() {
            self.signInModal.dialog("close");
        });
        pm.bind("loginpopup.loaded", function(window) {
            if ("_event" in window && window._event && me._event == window._event && window.isModal) {
                /** @type {boolean} */
                z = true;
                /** @type {boolean} */
                popupRequestSent = false;
                data.progress.hide();
                self.signInModal.dialog("open");
            }
        });
        pm.bind("loginPopupWelcomeBack", function(b) {
            if (b) {
                self.signInModal.on("dialogclose", function() {
                    /** @type {boolean} */
                    z = false;
                    self.signInModal.empty();
                });
            }
        });
    }
    /**
     * @param {!Object} self
     * @return {?}
     */
    function initialize(self) {
        if (self.registrationSuccess) {
            $(document).trigger("account.created");
        }
        if (self.writereview) {
            $(document).trigger("writereview");
        }
        /** @type {boolean} */
        data.isUserAuthenticated = true;
        var value = data.components.account.login.loginCallback(self);
        if ("undefined" === typeof value || value) {
            if ("_event" in self && self._event in d && (self = d[self._event], data.isRefreshPage = true), value = "desableRefreshPage" in self && "boolean" === typeof self.desableRefreshPage && true === self.desableRefreshPage, value || "redirect" in self && ("boolean" !== typeof self.redirect || false !== self.redirect) || (self.redirect = {
                    path: location.href,
                    query: {
                        loginSuccess: true
                    }
                }), null !== self.redirect) {
                if ("function" === typeof self.redirect) {
                    return self.redirect(self);
                }
                var method = self.redirect && "path" in self.redirect ? self.redirect.path : data.urls.loginRedirectUrl;
                if ("redirectAfterLogin" in self) {
                    method = self.redirectAfterLogin;
                }
                if (data.resources.ACCOUNT_AFTERLOGIN_REDIRECT_SAME_DOMAIN_PATHS && "sameDomainRedirectAfterLogin" in self) {
                    method = self.sameDomainRedirectAfterLogin;
                }
                if ((new RegExp(data.urls.cartShow, "i")).test(method)) {
                    method = data.urls.cartShow;
                }
                if ((new RegExp(data.urls.myAccount, "i")).test(method)) {
                    method = data.urls.myAccount;
                }
                if ("customRedirectURL" in data && data.customRedirectURL && "registrationSucceeded" in self && self.registrationSucceeded) {
                    method = data.customRedirectURL;
                }
                $(document).trigger("login.redirectURL", {
                    data: self,
                    redirectPath: data.util.stripJSfromURL(method),
                    desableRefreshPage: value
                });
            }
        }
    }
    var self = {};
    var options = {
        openPopupEvents: "mouseover",
        closePopupEvent: "mouseleave",
        closePopupAfterClickOnBody: false,
        closeAfterClickONSameLink: false,
        timerDuration: 600,
        stopPropagation: false
    };
    var d = {};
    /** @type {boolean} */
    var y = false;
    /** @type {boolean} */
    var C = false;
    /** @type {boolean} */
    var z = false;
    /** @type {boolean} */
    var r = false;
    /** @type {boolean} */
    popupRequestSent = frameWrapperHover = false;
    var obj = {
        id: null,
        clear: function() {
            if (obj.id) {
                window.clearTimeout(obj.id);
                delete obj.id;
            }
        },
        start: function(name) {
            /** @type {number} */
            obj.id = setTimeout(alert, name);
        }
    };
    data.components = data.components || {};
    data.components.global = data.components.global || {};
    data.components.global.login = {
        init: function(name) {
            if (!y) {
                options = $.extend({}, options, name);
                self.document = $(document);
                self.frameWrapper = $(".login_iframe_wrapper");
                self.loginButton = $(self.frameWrapper.data("login-button"));
                self.loginFrame = self.loginFrame || get();
                /** @type {null} */
                self.loginFrameModal = null;
                self.framePlacement = $(".login_iframe_placement");
                self.signInContainer = $("#signin_popup");
                self.touchDevice = $("html.touch");
                /** @type {null} */
                self.aTapped = null;
                self.loginLink = self.loginButton.find(".login_link");
                self.loginLinkUrl = self.loginLink.attr("href");
                init();
                /** @type {boolean} */
                y = true;
            }
        },
        openModal: show,
        loginButtonMouseEnter: eventHandler,
        loginButtonMouseLeave: axisBrushMoved
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @return {undefined}
     */
    function reload() {
        container = $(document);
        c = $(opts.mcWrapperSelector);
        element = c.find(opts.mcSelector);
        pre = $(".minicart_mobile_link .mini_cart_label_mobile");
        context = c.find(".mini_cart_total .mini_cart_label");
        /** @type {!Array} */
        args = [];
        /** @type {!Array} */
        items = [];
        element.each(function(i) {
            args[i] = $(this).find(".mini_cart_content");
            items[i] = $(this).find(".mini_cart_products");
            items[i].children(".mini_cart_product");
        });
    }
    /**
     * @return {undefined}
     */
    function init() {
        /** @type {boolean} */
        N = false;
        c.find("select").off().focus(function() {
            /** @type {boolean} */
            N = true;
        }).blur(function() {
            /** @type {boolean} */
            N = false;
        });
        if (isTouch) {
            element.on("touchstart", function() {
                var item = element.index($(this));
                $(document).trigger("mincart.touch");
                if (!N && !args[item].is(":visible")) {
                    return click(item), that.clear(), $(document).on("touchstart", function() {
                        if (!element.eq(item).is(event.target) && 0 === element.eq(item).has(event.target).length && args[item].is(":visible")) {
                            return that.clear(), that.start(30, item), $(document).off("touchstart"), false;
                        }
                    }), false;
                }
            });
        } else {
            c.off().on("mouseenter", opts.mcSelector, function() {
                var toggle = element.index($(this));
                if (!N) {
                    /** @type {boolean} */
                    templates[toggle] = false;
                    setTimeout(function() {
                        if (!templates[toggle]) {
                            click(toggle);
                            that.clear();
                        }
                    }, opts.slideDelay);
                }
            }).on("mouseleave", opts.mcSelector, function() {
                var key = element.index($(this));
                if (!N) {
                    /** @type {boolean} */
                    templates[key] = true;
                    that.clear();
                    that.start(30, key);
                }
            });
        }
        element.on(isTouch ? "touchstart" : "click", ".mini_cart_close", function() {
            _render(element.index($(this)));
        }).on("minicart.close", function(b, match) {
            _render(match && match.index ? parseInt(match.index) : 0);
        }).on(isTouch ? "touchstart" : "click", ".mini_cart_link", function(event) {
            var doToggle = $(this).closest(opts.mcSelector).hasClass("expanded");
            event.preventDefault();
            if (doToggle || !self.preferences.isMinicartOnClickExpandable) {
                container.trigger("cart.view");
                if (!(0 < $(".engraving_grid").length || 0 < $(".lip_wardrobe").length)) {
                    self.page.redirect(this.href);
                }
            }
        }).on(isTouch ? "touchstart" : "click", ".mini_cart_link_cart", function(event) {
            event.preventDefault();
            container.trigger("cart.view");
            if (!(0 < $(".engraving_grid").length || 0 < $(".lip_wardrobe").length)) {
                self.page.redirect(this.href);
            }
        }).on("click", ".mini_cart_pricing .js_minicart_decrease_qty, .mini_cart_pricing .js_minicart_increase_qty", initialize).on("click", "#minicart_removeproduct", update).on("click", "#minicart_removegiftcard", build).on("change", ".quantity_select", fire);
        element.find("span.quantity_select").off("click").on("click", panel_showhide_callback);
        element.find("select.quantity_select").each(function() {
            $selector = $(this);
            $increase = $selector.parent().find(".js_minicart_increase_qty");
            $decrease = $selector.parent().find(".js_minicart_decrease_qty");
            if (0 == $selector.find("option:selected").prev().length) {
                $decrease.css("display", "none");
            } else {
                $decrease.css("display", "block");
            }
            if (0 == $selector.find("option:selected").next().length) {
                $increase.css("display", "none");
            } else {
                $increase.css("display", "block");
            }
        });
        if (A) {
            link();
        }
        container.on("minicart.lineItemRemoved minicart.lineItemQtyChanged", function() {
            self.recommendations.init();
        });
        show();
    }
    /**
     * @param {!Event} evt
     * @return {undefined}
     */
    function panel_showhide_callback(evt) {
        evt.preventDefault();
        evt.stopPropagation();
    }
    /**
     * @param {!Object} item
     * @return {undefined}
     */
    function update(item) {
        item.preventDefault();
        item = $(this);
        var j = element.index(item.parents(opts.mcSelector));
        var i = item.data("pid");
        var uuid = item.data("uuid");
        var dist = item.data("selectedStoreInfo");
        var aage = item.closest(".product_detail").find("select.quantity_select, input.quantity_select").val() || item.closest(".product_detail").find(".quantity_select").text();
        var packet = {
            customgift: 1 == item.data("is-customgift")
        };
        var n = item.data("loyalty-is-elite-product") || false;
        if (uuid) {
            packet.uuid = uuid;
        } else {
            packet.pid = i;
        }
        self.progress.show(args[j][0]);
        self.ajax.load({
            url: self.urls.cartRemoveProduct,
            data: packet,
            callback: function(name) {
                debug(name, j, i, false, aage, dist);
                if (n) {
                    $(document).trigger("updateLoyaltyUserPoints");
                }
            }
        });
    }
    /**
     * @param {!Event} functions
     * @return {undefined}
     */
    function build(functions) {
        functions.preventDefault();
        var j = element.index($(this).parents(opts.mcSelector));
        var next = $(this).data("gcliid");
        self.progress.show(args[j][0]);
        self.ajax.load({
            url: self.urls.removeGiftCertificate,
            data: {
                gcliid: next
            },
            callback: function(name) {
                debug(name, j, next, true);
            }
        });
    }
    /**
     * @param {!Object} info
     * @param {?} type
     * @param {number} pid
     * @param {boolean} force
     * @param {number} enableStdout
     * @param {?} enableLogging
     * @return {undefined}
     */
    function debug(info, type, pid, force, enableStdout, enableLogging) {
        c.replaceWith(info);
        reload();
        init();
        /** @type {boolean} */
        F = true;
        $(document).trigger("global.showMinicart.beforeOpen", {
            container: args[type]
        });
        args[type].show();
        $(document).trigger("global.showMinicart.opened");
        $(document).trigger("layout.reload", {
            container: args[type]
        });
        $(document).trigger("minicart.lineItemRemoved", {
            pid: pid,
            isGiftCert: force,
            qty: enableStdout || 1,
            selectedStoreInfo: enableLogging
        });
        if (isTouch) {
            on();
        }
    }
    /**
     * @return {undefined}
     */
    function show() {
        var input = {};
        var n = self.preferences.engravingVariationLimit;
        $.ajax({
            url: self.urls.getVariationsInBasket,
            method: "POST",
            async: false,
            success: function(name) {
                /** @type {!Object} */
                input = name;
            }
        });
        var j;
        for (j in input) {
            if (input[j] >= n) {
                $('.mini-cart-product__info button[data-pid="' + j + '"]').each(function() {
                    $(this).parent().find(".js_minicart_increase_qty").css("display", "none");
                });
            } else {
                $('.mini-cart-product__info button[data-pid="' + j + '"]').each(function() {
                    $(this).parent().find(".js_minicart_increase_qty").css("display", "block");
                });
            }
        }
    }
    /**
     * @param {!Object} data
     * @return {undefined}
     */
    function initialize(data) {
        var obj = $(data.currentTarget);
        data = obj.parent().find("select");
        var f = data.find("option:selected");
        var check = data.parents(".mini-cart-product__info").find(".button_text").data("pid");
        var current = {};
        var length = self.preferences.engravingVariationLimit;
        $.ajax({
            url: self.urls.getVariationsInBasket,
            method: "POST",
            async: false,
            success: function(name) {
                /** @type {!Object} */
                current = name;
            }
        });
        if (!(current[check] >= length && obj.hasClass("js_minicart_increase_qty"))) {
            obj = obj.hasClass("js_minicart_decrease_qty") ? f.prev() : f.next();
            if (0 < obj.length) {
                f.prop("selected", false);
                obj.prop("selected", true);
            }
            data.trigger("change");
            if (0 == data.find("option:selected").prev().length) {
                data.parent().find(".js_minicart_decrease_qty").css("display", "none");
            } else {
                data.parent().find(".js_minicart_decrease_qty").css("display", "block");
            }
            if (0 == data.find("option:selected").next().length) {
                data.parent().find(".js_minicart_increase_qty").css("display", "none");
            } else {
                data.parent().find(".js_minicart_increase_qty").css("display", "block");
            }
            show();
        }
    }
    /**
     * @param {!Event} event
     * @return {undefined}
     */
    function fire(event) {
        event.preventDefault();
        var i = element.index($(this).parents(opts.mcSelector));
        self.ajax.load({
            url: self.urls.updateProductQuantity,
            data: {
                ProductID: $(this).data("productid"),
                ProductUUID: $(this).data("productuuid"),
                Quantity: $(this).val()
            },
            callback: function(name) {
                c.replaceWith(name);
                reload();
                init();
                /** @type {boolean} */
                F = true;
                $(document).trigger("global.showMinicart.beforeOpen", {
                    container: args[i]
                });
                args[i].show();
                $(document).trigger("layout.reload", {
                    container: args[i]
                });
                $(document).trigger("minicart.lineItemQtyChanged");
                if (isTouch) {
                    on();
                }
                if (self.preferences.minicartBonusProductNotificationEnabled) {
                    self.bonusProductsView.loadBonusOption();
                }
                element.find("span.quantity_select").off("click").on("click", panel_showhide_callback);
            }
        });
    }
    /**
     * @return {undefined}
     */
    function initEvents() {
        if (isTouch) {
            on();
        }
        $(document).on("global.showMinicart", function(canCreateDiscussions, choiceToSet) {
            reload();
            init();
            /** @type {boolean} */
            F = true;
            element.removeClass("empty_minicart");
            c.replaceWith(choiceToSet);
            reload();
            init();
            /** @type {boolean} */
            F = true;
            self.bonusProductsView.loadBonusOption();
            container.trigger("minicart.updateAdvantage");
            if (opts.isOpenAfterAddEnabled || 0 < c.find(".minicart__gift-certificate--new").length) {
                click(element.index(element.filter(":visible").eq(0)));
            }
            self.carousel.init($(".vertical_carousel"));
            if (isTouch) {
                if (!c.parents(".minicart_mobile").length) {
                    c.wrap("<div class='minicart_mobile'></div>");
                }
                if (0 != $(".minicart_mobile").length) {
                    on();
                    container.on("afterUpdateMiniCart", on);
                }
            }
        });
        container.on("afterUpdateMiniCart", on);
    }
    /**
     * @return {undefined}
     */
    function on() {
        var input = context.text();
        input = input.replace(/\D/g, "");
        pre.text(input);
    }
    /**
     * @param {number} id
     * @return {undefined}
     */
    function click(id) {
        id = id || 0;
        if (!element.eq(id).hasClass("expanded")) {
            if (!F) {
                reload();
                init();
            }
            that.clear();
            that.start(opts.cartCloseTimeout || 6E3);
            $(document).trigger("global.showMinicart.beforeOpen", {
                container: element.eq(id)
            });
            element.eq(id).closest(".navigation").addClass("navigation--minicart-expanded");
            element.eq(id).addClass("expanded");
            if (args[id]) {
                args[id].stop(true, true).slideDown(opts.openSpeed, function() {
                    $(this).trigger("minicart.opened.complete");
                });
            }
            $(document).trigger("global.showMinicart.opened");
            $(document).trigger("layout.reload", {
                container: element.eq(id)
            });
        }
    }
    /**
     * @param {number} arg
     * @return {undefined}
     */
    function _render(arg) {
        arg = 0 >= (arg || 0) ? 0 : arg;
        that.clear();
        args[arg].slideUp(opts.closeSpeed, function() {
            $(document).trigger("global.showMinicart.closed");
            element.closest(".navigation").removeClass("navigation--minicart-expanded");
            element.removeClass("expanded");
        });
    }
    /**
     * @return {undefined}
     */
    function link() {
        $(opts.mcSelector).find(".mini_cart_link").replaceWith(function() {
            return $("<span />", {
                class: "mini_cart_link"
            }).append($(this).contents());
        });
    }
    var container;
    var c;
    var element;
    var pre;
    var context;
    var args;
    var items;
    items = args = context = pre = element = c = container = void 0;
    /** @type {boolean} */
    var F = false;
    /** @type {boolean} */
    var h = false;
    /** @type {boolean} */
    var N = false;
    /** @type {boolean} */
    var A = false;
    /** @type {boolean} */
    var isTouch = 767 >= $(window).width();
    var templates = {};
    var opts = {
        mcWrapperSelector: ".minicart_wrapper",
        mcSelector: ".minicart",
        closeSpeed: "400",
        openSpeed: "600",
        slideDelay: 0,
        isOpenAfterAddEnabled: false
    };
    var that = {
        id: null,
        clear: function() {
            if (that.id) {
                window.clearTimeout(that.id);
                delete that.id;
            }
        },
        start: function(name, value) {
            /** @type {number} */
            that.id = setTimeout(function() {
                if (!isTouch) {
                    _render(value);
                }
            }, name);
        }
    };
    self.components = self.components || {};
    self.components.global = self.components.global || {};
    self.components.global.minicart = {
        url: "",
        init: function(name) {
            opts = $.extend(opts, name || {});
            if (name.disableMinicart) {
                link();
            } else {
                if (name.disableMinicartLink) {
                    /** @type {boolean} */
                    A = true;
                }
                reload();
                init();
                if (!h) {
                    initEvents();
                    /** @type {boolean} */
                    h = true;
                }
            }
            if (name.updateMinicart) {
                self.ajax.load({
                    url: self.urls.getMiniCart,
                    callback: function(name) {
                        if (name.length) {
                            container.trigger("global.showMinicart", name);
                        }
                    }
                });
            }
            /** @type {boolean} */
            F = true;
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @return {undefined}
     */
    function initFileListMenu() {
        trackFileLoader.logoutLink.on("click", function() {
            jQuery(document).trigger("account_logout");
        });
    }
    /**
     * @return {undefined}
     */
    function drawList() {
        $(document).on("account_logout", function() {
            context.util.deleteCookie("searchgridview");
            context.util.deleteCookie("customgift");
        });
    }
    var trackFileLoader = {};
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.logout = {
        init: function() {
            trackFileLoader.logoutLink = $(".logout_link");
            initFileListMenu();
            drawList();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(app, $) {
    /**
     * @return {undefined}
     */
    function setupCanvas() {
        container = $(options.target);
        c = $(document);
        d = {};
    }
    /**
     * @param {!Object} params
     * @return {undefined}
     */
    function tabview_add_tab(params) {
        if (app.preferences.isPickupInStoreEnabled) {
            var e;
            var kind;
            e = "container" in params && "object" === typeof params.container && params.container.find(".js_addtocart").length ? params.container.find(".js_addtocart") : container.find(options.element);
            /** @type {boolean} */
            kind = !!e.attr("disabled");
            e.prop("disabled", !params.hasAutoReplenishment && params.storePickupID);
            var $innerblock = e.parent().find(".js-bellow-btn_message");
            if (!params.hasAutoReplenishment && params.storePickupID) {
                e.prop("disabled", true);
                $innerblock.show();
            } else {
                e.prop("disabled", kind || false);
                $innerblock.hide();
            }
        }
        if (params.hasAutoReplenishment) {
            $(".dw-apple-pay-button").hide();
        } else {
            $(".dw-apple-pay-button").show();
        }
    }
    /**
     * @return {undefined}
     */
    function init() {
        app.page.subscribe(tabview_add_tab);
        container.off("click", options.element).on("click", options.element, {
            wrapper: options.wrapper
        }, function(o, s) {
            if (!$(this).data("forceStopExecution")) {
                s = s || o.data;
                /** @type {null} */
                var adblockTester = null;
                if ($(this).parents(".recommendations_block").length) {
                    /** @type {boolean} */
                    s.recommendationBlock = true;
                    /** @type {string} */
                    s.wrapper = ".product_tile_wrapper";
                    s.recommendationTrackingInfo = $(s.wrapper).data("trackinginfo") || $(this).data("trackinginfo");
                } else {
                    if (s.wrapper = options.wrapper, s.recommendationBlock = false, adblockTester = $(this).data("trackinginfoextention")) {
                        s.trackingInfoExtention = adblockTester;
                    }
                }
                o.preventDefault();
                var dash = this;
                $.when(f()).then(function(value) {
                    if ("undefined" !== typeof value && value.success) {
                        var dash = app.components.product ? app.components.product.engravingcustom : false;
                        if (dash && dash.isInPageEngraving() && dash.hasPersonalizations()) {
                            dash.addInPageEngravingProductToCart();
                        } else {
                            if (options.customButtonElement) {
                                dash = app.quickView && app.quickView.isActive() ? $("#QuickViewDialog").find(options.customButtonElement) : $(options.customButtonElement);
                                update.call(dash, value);
                            } else {
                                update.call(dash, value);
                            }
                        }
                    } else {
                        $(".pdpForm .quantity_error").text(app.resources.itemNotAvailable);
                    }
                });
            }
        });
        c.on("product.variationChanged", initialize);
        if (options.scrollToTop) {
            c.on("global.showMinicart", function() {
                window.scrollTo(0, 0);
            });
        }
    }
    /**
     * @return {?}
     */
    function f() {
        var d = $(".cap_selected");
        return d.length ? $.ajax({
            data: {
                capValue: d.find("input").val(),
                productOption: d.closest(".custom_caps").find('input[name="custom_cap"]').val(),
                pid: d.closest(".pdpForm").find('input[name="pid"]').val(),
                qty: d.closest(".pdpForm").find('select[name="quantity"]').val()
            },
            url: app.urls.checkCapAvailability,
            dataType: "json",
            method: "get"
        }) : {
            success: true
        };
    }
    /**
     * @param {!Object} config
     * @return {undefined}
     */
    function log(config) {
        options = config && config.hasOwnProperty("config") ? $.extend({}, settings, config.config) : settings;
    }
    /**
     * @param {!Object} that
     * @param {!Object} data
     * @return {undefined}
     */
    function initialize(that, data) {
        data = data || {};
        that = $(that.target).find(options.element);
        var p = "undefined" !== typeof data.pid ? data.pid : "";
        var v = "undefined" !== typeof data.stockStatus ? data.stockStatus : "";
        data = "undefined" !== typeof data.statusMessage ? data.statusMessage : "";
        if (that.length && p && v) {
            switch (data && that.find("span").html(data), that.removeClass("preorder backorder notifyme"), that.data("pid", p), that.data("stockStatus", v), v) {
                case "instock":
                    that.prop("disabled", false);
                    break;
                case "preorder":
                    that.prop("disabled", false);
                    that.addClass("preorder");
                    break;
                case "backorder":
                    that.prop("disabled", false);
                    that.addClass("backorder");
                    break;
                case "notifyme":
                    that.prop("disabled", false);
                    that.addClass("notifyme");
                    break;
                default:
                    that.prop("disabled", true);
            }
        }
    }
    /**
     * @param {!Object} file
     * @return {undefined}
     */
    function update(file) {
        var $input = $(this);
        var value = $input.data() || {};
        var element = $input.closest(options.wrapper).length ? $input.closest(options.wrapper) : $input.closest(settings.wrapper);
        var res = element.find('[name="quantity"]:input');
        /** @type {number} */
        var $ajaxBackground = res.length ? Number(res.val()) : 1;
        var lower = "undefined" !== typeof element.find('[name="maxProductSpecificQuantity"]:input') ? element.find('[name="maxProductSpecificQuantity"]:input').val() : app.preferences.purchaseLimit;
        var i = "undefined" !== typeof value.pid ? value.pid : element.find("input[name='pid']").val();
        value = "undefined" !== typeof value.stockStatus ? value.stockStatus : "";
        var cache;
        var data = {
            pid: i,
            quantity: $ajaxBackground
        };
        if (file.storePickupID) {
            data.storePickupID = file.storePickupID;
            data.storePickupName = file.storePickupData.PUiSName;
            data.storePickupZip = file.storePickupData.PUiSZip;
            data.pid = file.pid;
        }
        data.recommendationBlock = file.recommendationBlock;
        $ajaxBackground = $("#automaticReplenishmentFields");
        var num = $("#delivercustom").is(":checked");
        if (0 !== $ajaxBackground.length) {
            d.interval = num ? $(".pdpForm #arMounth").val() : "";
            data.autoReplenishmentInterval = d.interval;
            data.hasAutoReplenishment = num.toString();
        }
        if ("notifyme" !== value && "notavalible" !== value) {
            var A = $input.hasClass("sub_product_item");
            /** @type {boolean} */
            var M = true;
            res.not("[type=hidden]").each(function() {
                var content = $(this);
                /** @type {number} */
                var x = content.length ? Number(content.val()) : 1;
                var playlist_selector = element.find(".add_to_cart");
                /** @type {number} */
                var y = parseInt(app.page.getElement("PLIs")[i], 10);
                if (isNaN(y) || "Update" == playlist_selector.val()) {
                    /** @type {number} */
                    y = 0;
                }
                x = app.cart.qtyValidate(i, parseInt(x, 10) + y, lower);
                playlist_selector = options.quantityErrorParentSelector ? content.parents(".quantity") : content.closest(".quantity") || content.parent();
                content.trigger("product.quantityValidation", x);
                if ("status" in x && "error" === x.status) {
                    c.trigger("addToCartNotification");
                    playlist_selector.find(".quantity_error").text(x.message).show();
                    /** @type {boolean} */
                    M = false;
                    $(".loader").hide();
                } else {
                    playlist_selector.find(".quantity_error").hide().closest(".button_wrapper").removeClass("has_error");
                }
            });
            if (M) {
                if (element.find("input, select, textarea").each(function(s, root) {
                        s = $(root);
                        root = s.attr("name");
                        var type = s.attr("type");
                        if ("pid" !== root && "quantity" !== root) {
                            data[root] = "radio" === type ? element.find('input[name="' + root + '"]:checked').val() : s.val();
                        }
                    }), options.productDetails && (cache = element.closest(options.productDetails)), $(document).trigger("beforeCartUpdate", {
                        postData: data
                    }), app.cart.update(data, {
                        html: function(name) {
                            var $hashcashField = element.find("input[name='uuid']");
                            var pid = data.pid || element.find("input[name=pid]").val();
                            $(document).trigger("product.added", file);
                            if (0 < $hashcashField.length && 0 < $hashcashField.val().length || "cart" == app.page.params.source) {
                                var eventObj = {
                                    wrapper: element,
                                    pid: pid,
                                    handled: false
                                };
                                $(document).trigger("product.handleCartUpdate", eventObj);
                                if (!eventObj.handled) {
                                    if ($(".wishlist_page").length) {
                                        app.page.redirect(app.urls.wishlistShow);
                                    } else {
                                        if (0 < $hashcashField.length && 0 < $hashcashField.val().length && "cart" == app.page.params.source) {
                                            window.location.href = app.urls.cartShow;
                                        } else {
                                            /** @type {string} */
                                            window.location.href = window.location.href.split("#")[0];
                                        }
                                    }
                                }
                            } else {
                                if (A || "undefined" != typeof OG && "Controller" in OG && OG.Controller.addToCart || app.quickView.close(), "wishlist" === app.pageContextObject.ns || "Wishlist" === app.page.type || "product" === app.pageContextObject.ns || "product" === app.page.type || "find-my-shade" === app.pageContextObject.contentID || "genericlandingpage" === app.pageContextObject.ns || "genericlandingpage" === app.page.type) {
                                    $(document).trigger("product.addedToCart", {
                                        pid: data.pid,
                                        qty: data.quantity
                                    });
                                    $(document).trigger("global.showMinicart", name);
                                }
                            }
                            $(document).trigger("product.addToCartTracking", {
                                basketAmount: $(name).find(".mini_cart_subtotals > .value").text().replace(/\s+/g, ""),
                                basketAmountElement: $(name).find(".mini_cart_subtotals > .value"),
                                basketQuantity: $(name).find(".mini_cart_quantity").first().text().replace(/\D+/g, ""),
                                productID: pid,
                                qty: data.quantity || 1,
                                trackingJSON: file.trackingInfoExtention,
                                storePickupData: file.storePickupData,
                                hasAutoReplenishment: data.hasAutoReplenishment,
                                recommendationBlock: data.recommendationBlock,
                                productDetailsBlock: cache,
                                postData: data
                            });
                            $(document).trigger("afterUpdateMiniCart");
                        },
                        json: function(tab) {
                            if (tab) {
                                if (tab.isAddToCartNotificationEnabled) {
                                    c.trigger("addToCartNotification", tab);
                                }
                                element.find(".quantity_error").text(tab.msg || "").show().closest(".button_wrapper").addClass("has_error");
                                $(document).trigger("updateCartError", tab);
                            }
                        }
                    }), app.componentsMgr && app.componentsMgr.isComponentEnabled("recommendations") && app.recommendations && "undefined" !== typeof app.recommendations.init) {
                    $(document).one("global.showMinicart.opened", function() {
                        app.recommendations.init();
                    });
                }
            } else {
                $(document).trigger("updateCartError", {});
            }
        }
    }
    var container;
    var c;
    var d;
    d = c = container = void 0;
    var options = {};
    /** @type {boolean} */
    var w = false;
    var settings = {
        target: document,
        element: ".js_addtocart",
        wrapper: "form",
        scrollToTop: app.resources.ADD_TO_CART_SCROLL_TOP_VALUE,
        customButtonElement: null,
        quantityErrorParentSelector: false,
        storePickUpMsg: app.resources.CHOSEN_STORE_PICKUP
    };
    $(document).on("change", '[name="quantity"]:input', function() {
        var exampleVariableIntegerValue = $(this).val();
        $(this).closest("div.quantity").find('[name="quantity"]:input').each(function() {
            var element = $(this);
            element.val(exampleVariableIntegerValue);
            if (void 0 != element.data("selectBox-selectBoxIt")) {
                element.data("selectBox-selectBoxIt").refresh();
            }
        });
    });
    app.components = app.components || {};
    app.components.global = app.components.global || {};
    app.components.global.addtocart = {
        init: function(name) {
            if (!w) {
                log(name);
                setupCanvas();
                init();
                /** @type {boolean} */
                w = true;
            }
        },
        reinit: function(config) {
            log(config);
            setupCanvas();
            init();
        },
        addProductToCart: update
    };
})(window.app = window.app || {}, jQuery);
(function(object) {
    object.components = object.components || {};
    object.components.global = object.components.global || {};
    object.components.global.all = {
        init: function(name) {
            var names = name.initlist;
            /** @type {!Array} */
            var accept = [];
            /** @type {!Array} */
            var unhandledReasons = [];
            /** @type {number} */
            var i = 0;
            var patchLen = name.initlist.length;
            for (; i < patchLen; i++) {
                name = names[i];
                if (object.hasOwnProperty(name) && object[name].hasOwnProperty("init")) {
                    object[names[i]].init();
                    accept.push(names[i]);
                } else {
                    unhandledReasons.push("app." + [names[i]]);
                }
            }
            console.debug("Initialized global namespaces: ", accept);
            if (unhandledReasons.length) {
                console.warn("Not defined global namespaces: ", unhandledReasons);
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(factory) {
    factory(window.jQuery, window, document);
})(function($, window, where, undefined) {
    $.widget("selectBox.selectBoxIt", {
        VERSION: "3.8.1",
        options: {
            showEffect: "none",
            showEffectOptions: {},
            showEffectSpeed: "medium",
            hideEffect: "none",
            hideEffectOptions: {},
            hideEffectSpeed: "medium",
            showFirstOption: true,
            defaultText: "",
            defaultIcon: "",
            downArrowIcon: "",
            theme: "default",
            keydownOpen: true,
            isMobile: function() {
                return /iPhone|iPod|iPad|Silk|Android|BlackBerry|Opera Mini|IEMobile/.test(navigator.userAgent || navigator.vendor || window.opera);
            },
            "native": false,
            aggressiveChange: false,
            selectWhenHidden: true,
            viewport: $(window),
            similarSearch: false,
            copyAttributes: ["title", "rel"],
            copyClasses: "button",
            nativeMousedown: false,
            customShowHideEvent: false,
            autoWidth: true,
            html: true,
            populate: "",
            dynamicPositioning: true,
            hideCurrent: false,
            placeAfterSelect: true,
            dropdownHiddenClass: ""
        },
        getThemes: function() {
            var theme = $(this.element).attr("data-theme") || "c";
            return {
                bootstrap: {
                    focus: "active",
                    hover: "",
                    enabled: "enabled",
                    disabled: "disabled",
                    arrow: "caret",
                    button: "btn",
                    list: "dropdown-menu",
                    container: "bootstrap",
                    open: "open"
                },
                jqueryui: {
                    focus: "ui-state-focus",
                    hover: "ui-state-hover",
                    enabled: "ui-state-enabled",
                    disabled: "ui-state-disabled",
                    arrow: "ui-icon ui-icon-triangle-1-s",
                    button: "ui-widget ui-state-default",
                    list: "ui-widget ui-widget-content",
                    container: "jqueryui",
                    open: "selectboxit-open"
                },
                jquerymobile: {
                    focus: "ui-btn-down-" + theme,
                    hover: "ui-btn-hover-" + theme,
                    enabled: "ui-enabled",
                    disabled: "ui-disabled",
                    arrow: "ui-icon ui-icon-arrow-d ui-icon-shadow",
                    button: "ui-btn ui-btn-icon-right ui-btn-corner-all ui-shadow ui-btn-up-" + theme,
                    list: "ui-btn ui-btn-icon-right ui-btn-corner-all ui-shadow ui-btn-up-" + theme,
                    container: "jquerymobile",
                    open: "selectboxit-open"
                },
                "default": {
                    focus: "selectboxit-focus",
                    hover: "selectboxit-hover",
                    enabled: "selectboxit-enabled",
                    disabled: "selectboxit-disabled",
                    arrow: "selectboxit-default-arrow",
                    button: "selectboxit-btn",
                    list: "selectboxit-list",
                    container: "selectboxit-container",
                    open: "selectboxit-open"
                }
            };
        },
        isDeferred: function(def) {
            return $.isPlainObject(def) && def.promise && def.done;
        },
        _create: function(name) {
            var d = this.options.populate;
            var style = this.options.theme;
            if (this.element.is("select")) {
                return this.widgetProto = $.Widget.prototype, this.originalElem = this.element[0], this.selectBox = this.element, this.options.populate && this.add && !name && this.add(d), this.selectItems = this.element.find("option"), this.firstSelectItem = this.selectItems.slice(0, 1), this.documentHeight = $(where).height(), this.theme = $.isPlainObject(style) ? $.extend({}, this.getThemes()["default"], style) : this.getThemes()[style] ? this.getThemes()[style] : this.getThemes()["default"], this.currentFocus =
                    0, this.blur = true, this.textArray = [], this.currentIndex = 0, this.currentText = "", this.flipped = false, name || (this.selectBoxStyles = this.selectBox.attr("style")), this._createDropdownButton()._createUnorderedList()._copyAttributes()._replaceSelectBox()._addClasses(this.theme)._eventHandlers(), this.originalElem.disabled && this.disable && this.disable(), this._ariaAccessibility && this._ariaAccessibility(), this.isMobile = this.options.isMobile(), this._mobile && this._mobile(),
                    this.options["native"] && this._applyNativeSelect(), this.triggerEvent("create"), this;
            }
        },
        _createDropdownButton: function() {
            var originalElemId = this.originalElemId = this.originalElem.id || "";
            var classesLine = this.originalElemValue = this.originalElem.value || "";
            var sel_construtor_name = this.originalElemName = this.originalElem.name || "";
            var prev = this.options.copyClasses;
            var selected = this.selectBox.attr("class") || "";
            this.dropdownText = $("<span/>", {
                id: originalElemId && originalElemId + "SelectBoxItText",
                "class": "selectboxit-text",
                unselectable: "on",
                text: this.firstSelectItem.text()
            }).attr("data-val", classesLine);
            this.dropdownImageContainer = $("<span/>", {
                "class": "selectboxit-option-icon-container"
            });
            this.dropdownImage = $("<i/>", {
                id: originalElemId && originalElemId + "SelectBoxItDefaultIcon",
                "class": "selectboxit-default-icon",
                unselectable: "on"
            });
            this.dropdown = $("<span/>", {
                id: originalElemId && originalElemId + "SelectBoxIt",
                "class": "selectboxit " + ("button" === prev ? selected : "") + " " + (this.selectBox.prop("disabled") ? this.theme.disabled : this.theme.enabled),
                name: sel_construtor_name,
                tabindex: this.selectBox.attr("tabindex") || "0",
                unselectable: "on"
            }).append(this.dropdownImageContainer.append(this.dropdownImage)).append(this.dropdownText);
            this.dropdownContainer = $("<span/>", {
                id: originalElemId && originalElemId + "SelectBoxItContainer",
                "aria-label": this.firstSelectItem.text(),
                "class": "selectboxit-container " + this.theme.container + " " + ("container" === prev ? selected : "")
            }).append(this.dropdown);
            return this;
        },
        _createUnorderedList: function() {
            var self = this;
            var dataDisabled;
            var optgroupClass;
            var title;
            var getextensions;
            var excludedName;
            var desc;
            var view;
            var resizewidth;
            /** @type {string} */
            var bottom = "";
            var originalElemId = self.originalElemId || "";
            originalElemId = $("<ul/>", {
                id: originalElemId && originalElemId + "SelectBoxItOptions",
                "aria-labelledby": originalElemId && originalElemId + "SelectBoxIt",
                "class": "selectboxit-options",
                tabindex: -1
            });
            var currentDataSelectedText;
            var currentDataText;
            var currentDataSearch;
            var currentText;
            var currentOption;
            var $el;
            if (!self.options.showFirstOption) {
                self.selectItems.first().attr("disabled", "disabled");
                self.selectItems = self.selectBox.find("option").slice(1);
            }
            self.selectItems.each(function(index) {
                currentOption = $(this);
                /** @type {string} */
                title = optgroupClass = "";
                dataDisabled = currentOption.prop("disabled");
                /** @type {string} */
                getextensions = "";
                if (currentOption.attr("data-htmlcolor")) {
                    getextensions = currentOption.attr("data-htmlcolor") || "";
                }
                excludedName = currentOption.attr("data-icon") || "";
                /** @type {string} */
                view = (desc = currentOption.attr("data-iconurl") || "") ? "selectboxit-option-icon-url" : "";
                /** @type {string} */
                resizewidth = "";
                if (getextensions) {
                    /** @type {string} */
                    resizewidth = 'style="background-color:' + getextensions + ';"';
                } else {
                    if (desc) {
                        /** @type {string} */
                        resizewidth = "style=\"background-image:url('" + desc + "');\"";
                    }
                }
                currentDataSelectedText = currentOption.attr("data-selectedtext");
                currentText = (currentDataText = currentOption.attr("data-text")) ? currentDataText : currentOption.text();
                $el = currentOption.parent();
                if ($el.is("optgroup")) {
                    /** @type {string} */
                    optgroupClass = "selectboxit-optgroup-option";
                    if (0 === currentOption.index()) {
                        /** @type {string} */
                        title = '<span class="selectboxit-optgroup-header ' + $el.first().attr("class") + '"data-disabled="true">' + $el.first().attr("label") + "</span>";
                    }
                }
                currentOption.attr("value", this.value);
                bottom = bottom + (title + '<li data-id="' + index + '" data-val="' + this.value + '" data-disabled="' + dataDisabled + '" class="' + optgroupClass + " selectboxit-option " + ($(this).attr("class") || "") + '"><a class="selectboxit-option-anchor" aria-label="' + (self.options.html ? currentText : self.htmlEscape(currentText)) + '"><span class="selectboxit-option-icon-container"><i class="selectboxit-option-icon ' + excludedName + " " + (view || self.theme.container) + '"' + resizewidth +
                    "></i></span>" + (self.options.html ? currentText : self.htmlEscape(currentText)) + "</a></li>");
                currentDataSearch = currentOption.attr("data-search");
                self.textArray[index] = dataDisabled ? "" : currentDataSearch ? currentDataSearch : currentText;
                if (this.selected) {
                    self._setText(self.dropdownText, currentDataSelectedText || currentText);
                    /** @type {number} */
                    self.currentFocus = index;
                }
            });
            if (self.options.defaultText || self.selectBox.attr("data-text")) {
                var currentText = self.options.defaultText || self.selectBox.attr("data-text");
                self._setText(self.dropdownText, currentText);
                self.options.defaultText = currentText;
            }
            originalElemId.append(bottom);
            self.list = originalElemId;
            self.dropdownContainer.append(self.list);
            self.listItems = self.list.children("li");
            self.listAnchors = self.list.find("a");
            self.listItems.first().addClass("selectboxit-option-first");
            self.listItems.last().addClass("selectboxit-option-last");
            self.list.find("li[data-disabled='true']").not(".optgroupHeader").addClass(self.theme.disabled);
            self.dropdownImage.addClass(self.selectBox.attr("data-icon") || self.options.defaultIcon || self.listItems.eq(self.currentFocus).find("i").attr("class"));
            self.dropdownImage.attr("style", self.listItems.eq(self.currentFocus).find("i").attr("style"));
            return self;
        },
        _replaceSelectBox: function() {
            var originalElemId = this.originalElem.id || "";
            var size = this.selectBox.attr("data-size");
            /** @type {(number|string)} */
            size = this.listSize = size === undefined ? "auto" : "0" === size ? "auto" : +size;
            var FOLD_SIZE;
            if (this.options.dropdownHiddenClass) {
                if (!this.selectBox.hasClass(this.options.dropdownHiddenClass)) {
                    this.selectBox.addClass(this.options.dropdownHiddenClass);
                }
            } else {
                this.selectBox.css("display", "none");
            }
            this.selectBox.after(this.dropdownContainer);
            this.dropdownContainer.appendTo("body").addClass("selectboxit-rendering");
            this.selectBox[this.options.placeAfterSelect ? "after" : "before"](this.dropdownContainer);
            this.dropdown.height();
            this.downArrow = $("<i/>", {
                id: originalElemId && originalElemId + "SelectBoxItArrow",
                "class": "selectboxit-arrow",
                unselectable: "on"
            });
            this.downArrowContainer = $("<span/>", {
                id: originalElemId && originalElemId + "SelectBoxItArrowContainer",
                "class": "selectboxit-arrow-container",
                unselectable: "on"
            }).append(this.downArrow);
            this.dropdown.append(this.downArrowContainer);
            this.listItems.removeClass("selectboxit-selected").eq(this.currentFocus).addClass("selectboxit-selected");
            originalElemId = this.downArrowContainer.outerWidth(true);
            FOLD_SIZE = this.dropdownImage.outerWidth(true);
            if (this.options.autoWidth) {
                this.dropdown.css({
                    width: "auto"
                }).css({
                    width: this.list.outerWidth(true) + originalElemId + FOLD_SIZE
                });
                this.list.css({
                    "min-width": this.dropdown.width()
                });
            }
            this.dropdownText.css({
                "max-width": this.dropdownContainer.outerWidth(true) - (originalElemId + FOLD_SIZE)
            });
            this.dropdownContainer.removeClass("selectboxit-rendering");
            if ("number" === $.type(size)) {
                /** @type {number} */
                this.maxHeight = this.listAnchors.outerHeight(true) * size;
            }
            return this;
        },
        _scrollToView: function(direction) {
            var x = this.listItems.eq(this.currentFocus);
            var top = this.list.scrollTop();
            var padding = x.height();
            x = x.position().top;
            /** @type {number} */
            var offset = Math.abs(x);
            var width = this.list.height();
            if ("search" === direction) {
                if (width - x < padding) {
                    this.list.scrollTop(top + (x - (width - padding)));
                } else {
                    if (-1 > x) {
                        this.list.scrollTop(x - padding);
                    }
                }
            } else {
                if ("up" === direction) {
                    if (-1 > x) {
                        this.list.scrollTop(top - offset);
                    }
                } else {
                    if ("down" === direction && width - x < padding) {
                        this.list.scrollTop(top + (offset - width + padding));
                    }
                }
            }
            return this;
        },
        _callbackSupport: function(callback) {
            if ($.isFunction(callback)) {
                callback.call(this, this.dropdown);
            }
            return this;
        },
        _setText: function(value, element) {
            if (this.options.html) {
                value.html(element);
            } else {
                value.text(element);
            }
            return this;
        },
        open: function(callback) {
            var self = this;
            var c = self.options.showEffect;
            var data = self.options.showEffectSpeed;
            var showEffectOptions = self.options.showEffectOptions;
            var isNative = self.options["native"];
            var isMobile = self.isMobile;
            if (!self.listItems.length || self.dropdown.hasClass(self.theme.disabled)) {
                return self;
            }
            if (!isNative && !isMobile && !this.list.is(":visible")) {
                self.triggerEvent("open");
                if (self._dynamicPositioning && self.options.dynamicPositioning) {
                    self._dynamicPositioning();
                }
                if ("none" === c) {
                    self.list.show();
                } else {
                    if ("show" === c || "slideDown" === c || "fadeIn" === c) {
                        self.list[c](data);
                    } else {
                        self.list.show(c, showEffectOptions, data);
                    }
                }
                self.list.promise().done(function() {
                    self._scrollToView("search");
                    self.triggerEvent("opened");
                });
            }
            self._callbackSupport(callback);
            return self;
        },
        close: function(callback) {
            var self = this;
            var id = self.options.hideEffect;
            var value = self.options.hideEffectSpeed;
            var event = self.options.hideEffectOptions;
            var isMobile = self.isMobile;
            if (!self.options["native"] && !isMobile && self.list.is(":visible")) {
                self.triggerEvent("close");
                if ("none" === id) {
                    self.list.hide();
                } else {
                    if ("hide" === id || "slideUp" === id || "fadeOut" === id) {
                        self.list[id](value);
                    } else {
                        self.list.hide(id, event, value);
                    }
                }
                self.list.promise().done(function() {
                    self.triggerEvent("closed");
                });
            }
            self._callbackSupport(callback);
            return self;
        },
        toggle: function() {
            var b = this.list.is(":visible");
            if (b) {
                this.close();
            } else {
                if (!b) {
                    this.open();
                }
            }
        },
        _keyMappings: {
            38: "up",
            40: "down",
            13: "enter",
            8: "backspace",
            9: "tab",
            32: "space",
            27: "esc"
        },
        _keydownMethods: function() {
            var self = this;
            var moveToOption = self.list.is(":visible") || !self.options.keydownOpen;
            return {
                down: function() {
                    if (self.moveDown && moveToOption) {
                        self.moveDown();
                    }
                },
                up: function() {
                    if (self.moveUp && moveToOption) {
                        self.moveUp();
                    }
                },
                enter: function() {
                    var data = self.listItems.eq(self.currentFocus);
                    self._update(data);
                    if ("true" !== data.attr("data-preventclose")) {
                        self.close();
                    }
                    self.triggerEvent("enter");
                },
                tab: function() {
                    self.triggerEvent("tab-blur");
                    self.close();
                },
                backspace: function() {
                    self.triggerEvent("backspace");
                },
                esc: function() {
                    self.close();
                }
            };
        },
        _eventHandlers: function() {
            var self = this;
            var err = self.options.nativeMousedown;
            var res = self.options.customShowHideEvent;
            var currentDataText;
            var currentText;
            var focusClass = self.focusClass;
            var hoverClass = self.hoverClass;
            var openClass = self.openClass;
            this.dropdown.on({
                "click.selectBoxIt": function() {
                    self.dropdown.trigger("focus", true);
                    if (!self.originalElem.disabled) {
                        self.triggerEvent("click");
                        if (!(err || res)) {
                            self.toggle();
                        }
                    }
                },
                "mousedown.selectBoxIt": function() {
                    $(this).data("mdown", true);
                    self.triggerEvent("mousedown");
                    if (err && !res) {
                        self.toggle();
                    }
                },
                "mouseup.selectBoxIt": function() {
                    self.triggerEvent("mouseup");
                },
                "blur.selectBoxIt": function() {
                    if (self.blur) {
                        self.triggerEvent("blur");
                        self.close();
                        $(this).removeClass(focusClass);
                    }
                },
                "focus.selectBoxIt": function(beforeZero, afterZero) {
                    beforeZero = $(this).data("mdown");
                    $(this).removeData("mdown");
                    if (!(beforeZero || afterZero)) {
                        setTimeout(function() {
                            self.triggerEvent("tab-focus");
                        }, 0);
                    }
                    if (!afterZero) {
                        if (!$(this).hasClass(self.theme.disabled)) {
                            $(this).addClass(focusClass);
                        }
                        self.triggerEvent("focus");
                    }
                },
                "keydown.selectBoxIt": function(e) {
                    var direction = self._keyMappings[e.keyCode];
                    var num = self._keydownMethods()[direction];
                    if (num) {
                        num();
                        if (!(!self.options.keydownOpen || "up" !== direction && "down" !== direction)) {
                            self.open();
                        }
                    }
                    if (num && "tab" !== direction) {
                        e.preventDefault();
                    }
                },
                "keypress.selectBoxIt": function(event) {
                    var tab = self._keyMappings[event.charCode || event.keyCode];
                    /** @type {string} */
                    var e = String.fromCharCode(event.charCode || event.keyCode);
                    if (self.search && (!tab || tab && "space" === tab)) {
                        self.search(e, true, true);
                    }
                    if ("space" === tab) {
                        event.preventDefault();
                    }
                },
                "mouseenter.selectBoxIt": function() {
                    self.triggerEvent("mouseenter");
                },
                "mouseleave.selectBoxIt": function() {
                    self.triggerEvent("mouseleave");
                }
            });
            self.list.on({
                "mouseover.selectBoxIt": function() {
                    /** @type {boolean} */
                    self.blur = false;
                },
                "mouseout.selectBoxIt": function() {
                    /** @type {boolean} */
                    self.blur = true;
                },
                "focusin.selectBoxIt": function() {
                    self.dropdown.trigger("focus", true);
                }
            });
            self.list.on({
                "mousedown.selectBoxIt": function() {
                    self._update($(this));
                    self.triggerEvent("option-click");
                    if ("false" === $(this).attr("data-disabled") && "true" !== $(this).attr("data-preventclose")) {
                        self.close();
                    }
                    setTimeout(function() {
                        self.dropdown.trigger("focus", true);
                    }, 0);
                },
                "focusin.selectBoxIt": function() {
                    self.listItems.not($(this)).removeAttr("data-active");
                    $(this).attr("data-active", "");
                    var d = self.list.is(":hidden");
                    if (self.options.searchWhenHidden && d || self.options.aggressiveChange || d && self.options.selectWhenHidden) {
                        self._update($(this));
                    }
                    $(this).addClass(focusClass);
                },
                "mouseup.selectBoxIt": function() {
                    if (err && !res) {
                        self._update($(this));
                        self.triggerEvent("option-mouseup");
                        if ("false" === $(this).attr("data-disabled") && "true" !== $(this).attr("data-preventclose")) {
                            self.close();
                        }
                    }
                },
                "mouseenter.selectBoxIt": function() {
                    if ("false" === $(this).attr("data-disabled")) {
                        self.listItems.removeAttr("data-active");
                        $(this).addClass(focusClass).attr("data-active", "");
                        self.listItems.not($(this)).removeClass(focusClass);
                        $(this).addClass(focusClass);
                        /** @type {number} */
                        self.currentFocus = +$(this).attr("data-id");
                    }
                },
                "mouseleave.selectBoxIt": function() {
                    if ("false" === $(this).attr("data-disabled")) {
                        self.listItems.not($(this)).removeClass(focusClass).removeAttr("data-active");
                        $(this).addClass(focusClass);
                        /** @type {number} */
                        self.currentFocus = +$(this).attr("data-id");
                    }
                },
                "blur.selectBoxIt": function() {
                    $(this).removeClass(focusClass);
                }
            }, ".selectboxit-option");
            self.list.on({
                "click.selectBoxIt": function(event) {
                    event.preventDefault();
                }
            }, "a");
            self.selectBox.on({
                "change.selectBoxIt, internal-change.selectBoxIt": function(currentOption, currentDataSelectedText) {
                    if (!currentDataSelectedText) {
                        currentOption = self.list.find('li[data-val="' + self.originalElem.value + '"]');
                        if (currentOption.length) {
                            self.listItems.eq(self.currentFocus).removeClass(self.focusClass);
                            /** @type {number} */
                            self.currentFocus = +currentOption.attr("data-id");
                        }
                    }
                    currentOption = self.listItems.eq(self.currentFocus);
                    currentDataSelectedText = currentOption.attr("data-selectedtext");
                    currentText = (currentDataText = currentOption.attr("data-text")) ? currentDataText : currentOption.find("a").text();
                    self._setText(self.dropdownText, currentDataSelectedText || currentText);
                    self.dropdownText.attr("data-val", self.originalElem.value);
                    if (currentOption.find("i").attr("class")) {
                        self.dropdownImage.attr("class", currentOption.find("i").attr("class")).addClass("selectboxit-default-icon");
                        self.dropdownImage.attr("style", currentOption.find("i").attr("style"));
                    }
                    self.triggerEvent("changed");
                },
                "disable.selectBoxIt": function() {
                    self.dropdown.addClass(self.theme.disabled);
                },
                "enable.selectBoxIt": function() {
                    self.dropdown.removeClass(self.theme.disabled);
                },
                "open.selectBoxIt": function() {
                    var $li = self.list.find('li[data-val="' + self.dropdownText.attr("data-val") + '"]');
                    if (!$li.length) {
                        $li = self.listItems.not("[data-disabled=true]").first();
                    }
                    /** @type {number} */
                    self.currentFocus = +$li.attr("data-id");
                    $li = self.listItems.eq(self.currentFocus);
                    self.dropdown.addClass(openClass).removeClass(hoverClass).addClass(focusClass);
                    self.listItems.removeClass(self.selectedClass).removeAttr("data-active").not($li).removeClass(focusClass);
                    $li.addClass(self.selectedClass).addClass(focusClass);
                    if (self.options.hideCurrent) {
                        self.listItems.show();
                        $li.hide();
                    }
                },
                "close.selectBoxIt": function() {
                    self.dropdown.removeClass(openClass);
                },
                "blur.selectBoxIt": function() {
                    self.dropdown.removeClass(focusClass);
                },
                "mouseenter.selectBoxIt": function() {
                    if (!$(this).hasClass(self.theme.disabled)) {
                        self.dropdown.addClass(hoverClass);
                    }
                },
                "mouseleave.selectBoxIt": function() {
                    self.dropdown.removeClass(hoverClass);
                },
                destroy: function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                }
            });
            return self;
        },
        _update: function(elem) {
            var currentDataText;
            var attrs = this.options.defaultText || this.selectBox.attr("data-text");
            var sel = this.listItems.eq(this.currentFocus);
            if ("false" === elem.attr("data-disabled")) {
                this.listItems.eq(this.currentFocus).attr("data-selectedtext");
                if (!(currentDataText = sel.attr("data-text"))) {
                    sel.text();
                }
                if ((attrs && this.options.html ? this.dropdownText.html() === attrs : this.dropdownText.text() === attrs) && this.selectBox.val() === elem.attr("data-val")) {
                    this.triggerEvent("change");
                } else {
                    this.selectBox.val(elem.attr("data-val"));
                    /** @type {number} */
                    this.currentFocus = +elem.attr("data-id");
                    if (this.originalElem.value !== this.dropdownText.attr("data-val")) {
                        this.triggerEvent("change");
                    }
                }
            }
        },
        _addClasses: function(obj) {
            this.focusClass = obj.focus;
            this.hoverClass = obj.hover;
            var mask = obj.button;
            var list = obj.list;
            var arrowClass = obj.arrow;
            var containerClass = obj.container;
            this.openClass = obj.open;
            /** @type {string} */
            this.selectedClass = "selectboxit-selected";
            this.downArrow.addClass(this.selectBox.attr("data-downarrow") || this.options.downArrowIcon || arrowClass);
            this.dropdownContainer.addClass(containerClass);
            this.dropdown.addClass(mask);
            this.list.addClass(list);
            return this;
        },
        refresh: function(callback, retryCount) {
            this._destroySelectBoxIt()._create(true);
            if (!retryCount) {
                this.triggerEvent("refresh");
            }
            this._callbackSupport(callback);
            return this;
        },
        htmlEscape: function(text) {
            return String(text).replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        },
        triggerEvent: function(eventName) {
            this.selectBox.trigger(eventName, {
                selectbox: this.selectBox,
                selectboxOption: this.selectItems.eq(this.options.showFirstOption ? this.currentFocus : 0 <= this.currentFocus - 1 ? this.currentFocus : 0),
                dropdown: this.dropdown,
                dropdownOption: this.listItems.eq(this.currentFocus)
            });
            return this;
        },
        _copyAttributes: function() {
            if (this._addSelectBoxAttributes) {
                this._addSelectBoxAttributes();
            }
            return this;
        },
        _realOuterWidth: function(elem) {
            if (elem.is(":visible")) {
                return elem.outerWidth(true);
            }
            elem = elem.clone();
            var outerWidth;
            elem.css({
                visibility: "hidden",
                display: "block",
                position: "absolute"
            }).appendTo("body");
            outerWidth = elem.outerWidth(true);
            elem.remove();
            return outerWidth;
        }
    });
    var selectBoxIt = $.selectBox.selectBoxIt.prototype;
    /**
     * @return {?}
     */
    selectBoxIt._ariaAccessibility = function() {
        var self = this;
        var d = $("label[for='" + self.originalElem.id + "']");
        self.dropdownContainer.attr({
            role: "combobox",
            "aria-autocomplete": "list",
            "aria-haspopup": "true",
            "aria-expanded": "false",
            "aria-owns": self.list[0].id
        });
        self.dropdownText.attr({
            "aria-live": "polite"
        });
        self.dropdown.on({
            "disable.selectBoxIt": function() {
                self.dropdownContainer.attr("aria-disabled", "true");
            },
            "enable.selectBoxIt": function() {
                self.dropdownContainer.attr("aria-disabled", "false");
            }
        });
        if (d.length) {
            self.dropdownContainer.attr("aria-labelledby", d[0].id);
        }
        self.list.attr({
            role: "listbox",
            "aria-hidden": "true"
        });
        self.listItems.attr({
            role: "option"
        });
        self.selectBox.on({
            "open.selectBoxIt": function() {
                self.list.attr("aria-hidden", "false");
                self.dropdownContainer.attr("aria-expanded", "true");
            },
            "close.selectBoxIt": function() {
                self.list.attr("aria-hidden", "true");
                self.dropdownContainer.attr("aria-expanded", "false");
            }
        });
        return self;
    };
    /**
     * @return {?}
     */
    selectBoxIt._addSelectBoxAttributes = function() {
        var self = this;
        self._addAttributes(self.selectBox.prop("attributes"), self.dropdown);
        self.selectItems.each(function(iterator) {
            self._addAttributes($(this).prop("attributes"), self.listItems.eq(iterator));
        });
        return self;
    };
    /**
     * @param {!Object} items
     * @param {!Object} elem
     * @return {?}
     */
    selectBoxIt._addAttributes = function(items, elem) {
        var compareTerms = this.options.copyAttributes;
        if (items.length) {
            $.each(items, function(c, value) {
                c = value.name.toLowerCase();
                value = value.value;
                if (!("null" === value || -1 === $.inArray(c, compareTerms) && -1 === c.indexOf("data"))) {
                    elem.attr(c, value);
                }
            });
        }
        return this;
    };
    /**
     * @param {!Function} callback
     * @return {?}
     */
    selectBoxIt.destroy = function(callback) {
        this._destroySelectBoxIt();
        this.widgetProto.destroy.call(this);
        this._callbackSupport(callback);
        return this;
    };
    /**
     * @return {?}
     */
    selectBoxIt._destroySelectBoxIt = function() {
        this.dropdown.off(".selectBoxIt");
        if ($.contains(this.dropdownContainer[0], this.originalElem)) {
            this.dropdownContainer.before(this.selectBox);
        }
        this.dropdownContainer.remove();
        this.selectBox.removeAttr("style").attr("style", this.selectBoxStyles);
        if (this.options.dropdownHiddenClass) {
            this.selectBox.removeClass(this.options.dropdownHiddenClass);
        }
        this.triggerEvent("destroy");
        return this;
    };
    /**
     * @param {!Object} name
     * @return {?}
     */
    selectBoxIt.disable = function(name) {
        if (!this.options.disabled) {
            this.close();
            this.selectBox.attr("disabled", "disabled");
            this.dropdown.removeAttr("tabindex").removeClass(this.theme.enabled).addClass(this.theme.disabled);
            this.setOption("disabled", true);
            this.triggerEvent("disable");
        }
        this._callbackSupport(name);
        return this;
    };
    /**
     * @param {undefined} index
     * @param {!Function} callback
     * @return {?}
     */
    selectBoxIt.disableOption = function(index, callback) {
        var currentSelectBoxOption;
        if ("number" === $.type(index)) {
            this.close();
            currentSelectBoxOption = this.selectBox.find("option").eq(index);
            this.triggerEvent("disable-option");
            currentSelectBoxOption.attr("disabled", "disabled");
            this.listItems.eq(index).attr("data-disabled", "true").addClass(this.theme.disabled);
            if (this.currentFocus === index) {
                index = this.listItems.eq(this.currentFocus).nextAll("li").not("[data-disabled='true']").first().length;
                currentSelectBoxOption = this.listItems.eq(this.currentFocus).prevAll("li").not("[data-disabled='true']").first().length;
                if (index) {
                    this.moveDown();
                } else {
                    if (currentSelectBoxOption) {
                        this.moveUp();
                    } else {
                        this.disable();
                    }
                }
            }
        }
        this._callbackSupport(callback);
        return this;
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    selectBoxIt._isDisabled = function(callback) {
        if (this.originalElem.disabled) {
            this.disable();
        }
        return this;
    };
    /**
     * @return {?}
     */
    selectBoxIt._dynamicPositioning = function() {
        if ("number" === $.type(this.listSize)) {
            this.list.css("max-height", this.maxHeight || "none");
        } else {
            var d = this.dropdown.offset().top;
            var i = this.list.data("max-height") || this.list.outerHeight();
            var p = this.dropdown.outerHeight();
            var offset = this.options.viewport;
            var c = offset.height();
            offset = $.isWindow(offset.get(0)) ? offset.scrollTop() : offset.offset().top;
            /** @type {boolean} */
            var n = !(d + p + i <= c + offset);
            if (!this.list.data("max-height")) {
                this.list.data("max-height", this.list.outerHeight());
            }
            if (n) {
                if (this.dropdown.offset().top - offset >= i) {
                    this.list.css("max-height", i);
                    this.list.css("top", this.dropdown.position().top - this.list.outerHeight());
                } else {
                    /** @type {number} */
                    d = Math.abs(d + p + i - (c + offset));
                    /** @type {number} */
                    c = Math.abs(this.dropdown.offset().top - offset - i);
                    if (d < c) {
                        this.list.css("max-height", i - d - p / 2);
                        this.list.css("top", "auto");
                    } else {
                        this.list.css("max-height", i - c - p / 2);
                        this.list.css("top", this.dropdown.position().top - this.list.outerHeight());
                    }
                }
            } else {
                this.list.css("max-height", i);
                this.list.css("top", "auto");
            }
        }
        return this;
    };
    /**
     * @param {!Function} callback
     * @return {?}
     */
    selectBoxIt.enable = function(callback) {
        if (this.options.disabled) {
            this.triggerEvent("enable");
            this.selectBox.removeAttr("disabled");
            this.dropdown.attr("tabindex", 0).removeClass(this.theme.disabled).addClass(this.theme.enabled);
            this.setOption("disabled", false);
            this._callbackSupport(callback);
        }
        return this;
    };
    /**
     * @param {undefined} index
     * @param {!Function} callback
     * @return {?}
     */
    selectBoxIt.enableOption = function(index, callback) {
        var currentSelectBoxOption;
        if ("number" === $.type(index)) {
            currentSelectBoxOption = this.selectBox.find("option").eq(index);
            this.triggerEvent("enable-option");
            currentSelectBoxOption.removeAttr("disabled");
            this.listItems.eq(index).attr("data-disabled", "false").removeClass(this.theme.disabled);
        }
        this._callbackSupport(callback);
        return this;
    };
    /**
     * @param {!Function} callback
     * @return {?}
     */
    selectBoxIt.moveDown = function(callback) {
        this.currentFocus += 1;
        /** @type {boolean} */
        var prevDt = "true" === this.listItems.eq(this.currentFocus).attr("data-disabled") ? true : false;
        var d = this.listItems.eq(this.currentFocus).nextAll("li").not("[data-disabled='true']").first().length;
        if (this.currentFocus === this.listItems.length) {
            --this.currentFocus;
        } else {
            if (prevDt && d) {
                this.listItems.eq(this.currentFocus - 1).blur();
                this.moveDown();
                return;
            }
            if (prevDt && !d) {
                --this.currentFocus;
            } else {
                this.listItems.eq(this.currentFocus - 1).blur().end().eq(this.currentFocus).focusin();
                this._scrollToView("down");
                this.triggerEvent("moveDown");
            }
        }
        this._callbackSupport(callback);
        return this;
    };
    /**
     * @param {!Function} callback
     * @return {?}
     */
    selectBoxIt.moveUp = function(callback) {
        --this.currentFocus;
        /** @type {boolean} */
        var prevDt = "true" === this.listItems.eq(this.currentFocus).attr("data-disabled") ? true : false;
        var d = this.listItems.eq(this.currentFocus).prevAll("li").not("[data-disabled='true']").first().length;
        if (-1 === this.currentFocus) {
            this.currentFocus += 1;
        } else {
            if (prevDt && d) {
                this.listItems.eq(this.currentFocus + 1).blur();
                this.moveUp();
                return;
            }
            if (prevDt && !d) {
                this.currentFocus += 1;
            } else {
                this.listItems.eq(this.currentFocus + 1).blur().end().eq(this.currentFocus).focusin();
                this._scrollToView("up");
                this.triggerEvent("moveUp");
            }
        }
        this._callbackSupport(callback);
        return this;
    };
    /**
     * @param {number} index
     * @return {?}
     */
    selectBoxIt._setCurrentSearchOption = function(index) {
        if ((this.options.aggressiveChange || this.options.selectWhenHidden || this.listItems.eq(index).is(":visible")) && true !== this.listItems.eq(index).data("disabled")) {
            this.listItems.eq(this.currentFocus).blur();
            this.currentFocus = this.currentIndex = index;
            this.listItems.eq(this.currentFocus).focusin();
            this._scrollToView("search");
            this.triggerEvent("search");
        }
        return this;
    };
    /**
     * @param {number} x
     * @param {string} exp
     * @return {?}
     */
    selectBoxIt._searchAlgorithm = function(x, exp) {
        /** @type {boolean} */
        var d = false;
        var y;
        var arrayLength;
        var text;
        var args = this.textArray;
        var name = this.currentText;
        arrayLength = args.length;
        for (; x < arrayLength; x = x + 1) {
            text = args[x];
            /** @type {number} */
            y = 0;
            for (; y < arrayLength; y = y + 1) {
                if (-1 !== args[y].search(exp)) {
                    /** @type {boolean} */
                    d = true;
                    y = arrayLength;
                }
            }
            if (!d) {
                name = this.currentText = this.currentText.charAt(this.currentText.length - 1).replace(/[|()\[{.+*?$\\]/g, "\\$0");
            }
            /** @type {!RegExp} */
            exp = new RegExp(name, "gi");
            if (3 > name.length) {
                if (exp = new RegExp(name.charAt(0), "gi"), -1 !== text.charAt(0).search(exp)) {
                    this._setCurrentSearchOption(x);
                    if (text.substring(0, name.length).toLowerCase() !== name.toLowerCase() || this.options.similarSearch) {
                        this.currentIndex += 1;
                    }
                    return false;
                }
            } else {
                if (-1 !== text.search(exp)) {
                    return this._setCurrentSearchOption(x), false;
                }
            }
            if (text.toLowerCase() === this.currentText.toLowerCase()) {
                return this._setCurrentSearchOption(x), this.currentText = "", false;
            }
        }
        return true;
    };
    /**
     * @param {string} text
     * @param {!Function} callback
     * @param {boolean} rememberPreviousSearch
     * @return {?}
     */
    selectBoxIt.search = function(text, callback, rememberPreviousSearch) {
        this.currentText = rememberPreviousSearch ? this.currentText + text.replace(/[|()\[{.+*?$\\]/g, "\\$0") : text.replace(/[|()\[{.+*?$\\]/g, "\\$0");
        if (this._searchAlgorithm(this.currentIndex, new RegExp(this.currentText, "gi"))) {
            this._searchAlgorithm(0, this.currentText);
        }
        this._callbackSupport(callback);
        return this;
    };
    /**
     * @return {undefined}
     */
    selectBoxIt._updateMobileText = function() {
        var sel;
        var value;
        sel = this.selectBox.find("option").filter(":selected");
        value = (value = sel.attr("data-text")) ? value : sel.text();
        this._setText(this.dropdownText, value);
        if (this.list.find('li[data-val="' + sel.val() + '"]').find("i").attr("class")) {
            this.dropdownImage.attr("class", this.list.find('li[data-val="' + sel.val() + '"]').find("i").attr("class")).addClass("selectboxit-default-icon");
        }
    };
    /**
     * @return {?}
     */
    selectBoxIt._applyNativeSelect = function() {
        this.dropdownContainer.append(this.selectBox);
        this.dropdown.attr("tabindex", "-1");
        this.selectBox.css({
            display: "block",
            visibility: "visible",
            width: this._realOuterWidth(this.dropdown),
            height: this.dropdown.outerHeight(),
            opacity: "0",
            position: "absolute",
            top: "0",
            left: "0",
            cursor: "pointer",
            "z-index": "999999",
            margin: this.dropdown.css("margin"),
            padding: "0",
            "-webkit-appearance": "menulist-button"
        });
        if (this.originalElem.disabled) {
            this.triggerEvent("disable");
        }
        return this;
    };
    /**
     * @return {undefined}
     */
    selectBoxIt._mobileEvents = function() {
        var self = this;
        self.selectBox.on({
            "changed.selectBoxIt": function() {
                /** @type {boolean} */
                self.hasChanged = true;
                self._updateMobileText();
                self.triggerEvent("option-click");
            },
            "mousedown.selectBoxIt": function() {
                if (!(self.hasChanged || !self.options.defaultText || self.originalElem.disabled)) {
                    self._updateMobileText();
                    self.triggerEvent("option-click");
                }
            },
            "enable.selectBoxIt": function() {
                self.selectBox.removeClass("selectboxit-rendering");
            },
            "disable.selectBoxIt": function() {
                self.selectBox.addClass("selectboxit-rendering");
            }
        });
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    selectBoxIt._mobile = function(callback) {
        if (this.isMobile) {
            this._applyNativeSelect();
            this._mobileEvents();
        }
        return this;
    };
    /**
     * @param {undefined} value
     * @param {!Function} callback
     * @return {?}
     */
    selectBoxIt.selectOption = function(value, callback) {
        var type = $.type(value);
        if ("number" === type) {
            this.selectBox.val(this.selectItems.eq(value).val()).change();
        } else {
            if ("string" === type) {
                this.selectBox.val(value).change();
            }
        }
        this._callbackSupport(callback);
        return this;
    };
    /**
     * @param {!Object} c
     * @param {string} v
     * @param {!Function} callback
     * @return {?}
     */
    selectBoxIt.setOption = function(c, v, callback) {
        var self = this;
        if ("string" === $.type(c)) {
            /** @type {string} */
            self.options[c] = v;
        }
        self.refresh(function() {
            self._callbackSupport(callback);
        }, true);
        return self;
    };
    /**
     * @param {?} options
     * @param {!Function} callback
     * @return {?}
     */
    selectBoxIt.setOptions = function(options, callback) {
        var self = this;
        if ($.isPlainObject(options)) {
            self.options = $.extend({}, self.options, options);
        }
        self.refresh(function() {
            self._callbackSupport(callback);
        }, true);
        return self;
    };
    /**
     * @param {?} b
     * @param {?} status
     * @return {?}
     */
    selectBoxIt.wait = function(b, status) {
        this.widgetProto._delay.call(this, status, b);
        return this;
    };
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @return {undefined}
     */
    selectBoxIt.add = function(name, value) {
        this._populate(name, function(data) {
            var self = this;
            var type = $.type(data);
            /** @type {number} */
            var id = 0;
            var target;
            /** @type {!Array} */
            var calendar = [];
            var event = (target = self._isJSON(data)) && self._parseJSON(data);
            if (data && ("array" === type || target && event.data && "array" === $.type(event.data)) || "object" === type && data.data && "array" === $.type(data.data)) {
                if (self._isJSON(data)) {
                    data = event;
                }
                if (data.data) {
                    data = data.data;
                }
                target = data.length;
                for (; id <= target - 1; id = id + 1) {
                    type = data[id];
                    if ($.isPlainObject(type)) {
                        calendar.push($("<option/>", type));
                    } else {
                        if ("string" === $.type(type)) {
                            calendar.push($("<option/>", {
                                text: type,
                                value: type
                            }));
                        }
                    }
                }
                self.selectBox.append(calendar);
            } else {
                if (data && "string" === type && !self._isJSON(data)) {
                    self.selectBox.append(data);
                } else {
                    if (data && "object" === type) {
                        self.selectBox.append($("<option/>", data));
                    } else {
                        if (data && self._isJSON(data) && $.isPlainObject(self._parseJSON(data))) {
                            self.selectBox.append($("<option/>", self._parseJSON(data)));
                        }
                    }
                }
            }
            if (self.dropdown) {
                self.refresh(function() {
                    self._callbackSupport(value);
                }, true);
            } else {
                self._callbackSupport(value);
            }
            return self;
        });
    };
    /**
     * @param {!Object} data
     * @return {?}
     */
    selectBoxIt._parseJSON = function(data) {
        return JSON && JSON.parse && JSON.parse(data) || $.parseJSON(data);
    };
    /**
     * @param {!Object} data
     * @return {?}
     */
    selectBoxIt._isJSON = function(data) {
        try {
            return this._parseJSON(data), true;
        } catch (e) {
            return false;
        }
    };
    /**
     * @param {!Object} data
     * @param {!Function} callback
     * @return {?}
     */
    selectBoxIt._populate = function(data, callback) {
        var self = this;
        data = $.isFunction(data) ? data.call() : data;
        if (self.isDeferred(data)) {
            data.done(function(localMediaStream) {
                callback.call(self, localMediaStream);
            });
        } else {
            callback.call(self, data);
        }
        return self;
    };
    /**
     * @param {!Object} item
     * @param {!Function} callback
     * @return {?}
     */
    selectBoxIt.remove = function(item, callback) {
        var self = this;
        var type = $.type(item);
        /** @type {number} */
        var i = 0;
        var value;
        /** @type {string} */
        var res = "";
        if ("array" === type) {
            value = item.length;
            for (; i <= value - 1; i = i + 1) {
                type = item[i];
                if ("number" === $.type(type)) {
                    /** @type {string} */
                    res = res.length ? res + (", option:eq(" + type + ")") : res + ("option:eq(" + type + ")");
                }
            }
            self.selectBox.find(res).remove();
        } else {
            if ("number" === type) {
                self.selectBox.find("option").eq(item).remove();
            } else {
                self.selectBox.find("option").remove();
            }
        }
        if (self.dropdown) {
            self.refresh(function() {
                self._callbackSupport(callback);
            }, true);
        } else {
            self._callbackSupport(callback);
        }
        return self;
    };
});
(function(window, factory) {
    if ("function" === typeof define && define.amd) {
        define(["jquery"], factory);
    } else {
        if (window.jQuery) {
            factory(window.jQuery);
        } else {
            factory(window.Zepto);
        }
    }
})(this, function($, undefined) {
    /**
     * @param {string} options
     * @return {?}
     */
    $.fn.jPlayer = function(options) {
        /** @type {boolean} */
        var isMethodCall = "string" === typeof options;
        /** @type {!Array<?>} */
        var args = Array.prototype.slice.call(arguments, 1);
        var returnValue = this;
        options = !isMethodCall && args.length ? $.extend.apply(null, [true, options].concat(args)) : options;
        if (isMethodCall && "_" === options.charAt(0)) {
            return returnValue;
        }
        if (isMethodCall) {
            this.each(function() {
                var instance = $(this).data("jPlayer");
                var methodValue = instance && $.isFunction(instance[options]) ? instance[options].apply(instance, args) : instance;
                if (methodValue !== instance && methodValue !== undefined) {
                    return returnValue = methodValue, false;
                }
            });
        } else {
            this.each(function() {
                var instance = $(this).data("jPlayer");
                if (instance) {
                    instance.option(options || {});
                } else {
                    $(this).data("jPlayer", new $.jPlayer(options, this));
                }
            });
        }
        return returnValue;
    };
    /**
     * @param {string} options
     * @param {number} element
     * @return {undefined}
     */
    $.jPlayer = function(options, element) {
        if (arguments.length) {
            this.element = $(element);
            this.options = $.extend(true, {}, this.options, options);
            var barMenuParentTop = this;
            this.element.bind("remove.jPlayer", function() {
                barMenuParentTop.destroy();
            });
            this._init();
        }
    };
    if ("function" !== typeof $.fn.stop) {
        /**
         * @return {undefined}
         */
        $.fn.stop = function() {};
    }
    /** @type {string} */
    $.jPlayer.emulateMethods = "load play pause";
    /** @type {string} */
    $.jPlayer.emulateStatus = "src readyState networkState currentTime duration paused ended playbackRate";
    /** @type {string} */
    $.jPlayer.emulateOptions = "muted volume";
    /** @type {string} */
    $.jPlayer.reservedEvent = "ready flashreset resize repeat error warning";
    $.jPlayer.event = {};
    $.each("ready flashreset resize repeat click error warning loadstart progress suspend abort emptied stalled play pause loadedmetadata loadeddata waiting playing canplay canplaythrough seeking seeked timeupdate ended ratechange durationchange volumechange".split(" "), function() {
        /** @type {string} */
        $.jPlayer.event[this] = "jPlayer_" + this;
    });
    /** @type {!Array<string>} */
    $.jPlayer.htmlEvent = "loadstart abort emptied stalled loadedmetadata loadeddata canplay canplaythrough".split(" ");
    /**
     * @return {undefined}
     */
    $.jPlayer.pause = function() {
        $.each($.jPlayer.prototype.instances, function(b, $player) {
            if ($player.data("jPlayer").status.srcSet) {
                $player.jPlayer("pause");
            }
        });
    };
    $.jPlayer.timeFormat = {
        showHour: false,
        showMin: true,
        showSec: true,
        padHour: false,
        padMin: true,
        padSec: true,
        sepHour: ":",
        sepMin: ":",
        sepSec: ""
    };
    /**
     * @return {undefined}
     */
    var Config = function() {
        this.init();
    };
    Config.prototype = {
        init: function() {
            this.options = {
                timeFormat: $.jPlayer.timeFormat
            };
        },
        time: function(value) {
            /** @type {!Date} */
            var d = new Date(1E3 * (value && "number" === typeof value ? value : 0));
            /** @type {number} */
            var path = d.getUTCHours();
            /** @type {number} */
            value = this.options.timeFormat.showHour ? d.getUTCMinutes() : d.getUTCMinutes() + 60 * path;
            /** @type {number} */
            d = this.options.timeFormat.showMin ? d.getUTCSeconds() : d.getUTCSeconds() + 60 * value;
            /** @type {(number|string)} */
            path = this.options.timeFormat.padHour && 10 > path ? "0" + path : path;
            /** @type {(number|string)} */
            value = this.options.timeFormat.padMin && 10 > value ? "0" + value : value;
            /** @type {(number|string)} */
            d = this.options.timeFormat.padSec && 10 > d ? "0" + d : d;
            /** @type {string} */
            path = "" + (this.options.timeFormat.showHour ? path + this.options.timeFormat.sepHour : "");
            /** @type {string} */
            path = path + (this.options.timeFormat.showMin ? value + this.options.timeFormat.sepMin : "");
            return path + (this.options.timeFormat.showSec ? d + this.options.timeFormat.sepSec : "");
        }
    };
    var x = new Config;
    /**
     * @param {undefined} s
     * @return {?}
     */
    $.jPlayer.convertTime = function(s) {
        return x.time(s);
    };
    /**
     * @param {string} userAgent
     * @return {?}
     */
    $.jPlayer.uaBrowser = function(userAgent) {
        userAgent = userAgent.toLowerCase();
        /** @type {!RegExp} */
        var isIE11Re = /(opera)(?:.*version)?[ \/]([\w.]+)/;
        /** @type {!RegExp} */
        var re = /(msie) ([\w.]+)/;
        /** @type {!RegExp} */
        var regExpForVersion = /(mozilla)(?:.*? rv:([\w.]+))?/;
        /** @type {!Array<string>} */
        userAgent = /(webkit)[ \/]([\w.]+)/.exec(userAgent) || isIE11Re.exec(userAgent) || re.exec(userAgent) || 0 > userAgent.indexOf("compatible") && regExpForVersion.exec(userAgent) || [];
        return {
            browser: userAgent[1] || "",
            version: userAgent[2] || "0"
        };
    };
    /**
     * @param {string} raw
     * @return {?}
     */
    $.jPlayer.uaPlatform = function(raw) {
        var c = raw.toLowerCase();
        /** @type {!RegExp} */
        var d = /(android)/;
        /** @type {!RegExp} */
        var e = /(mobile)/;
        /** @type {!Array} */
        raw = /(ipad|iphone|ipod|android|blackberry|playbook|windows ce|webos)/.exec(c) || [];
        /** @type {!Array<string>} */
        c = /(ipad|playbook)/.exec(c) || !e.exec(c) && d.exec(c) || [];
        if (raw[1]) {
            raw[1] = raw[1].replace(/\s/g, "_");
        }
        return {
            platform: raw[1] || "",
            tablet: c[1] || ""
        };
    };
    $.jPlayer.browser = {};
    $.jPlayer.platform = {};
    var device = $.jPlayer.uaBrowser(navigator.userAgent);
    if (device.browser) {
        /** @type {boolean} */
        $.jPlayer.browser[device.browser] = true;
        $.jPlayer.browser.version = device.version;
    }
    device = $.jPlayer.uaPlatform(navigator.userAgent);
    if (device.platform) {
        /** @type {boolean} */
        $.jPlayer.platform[device.platform] = true;
        /** @type {boolean} */
        $.jPlayer.platform.mobile = !device.tablet;
        /** @type {boolean} */
        $.jPlayer.platform.tablet = !!device.tablet;
    }
    /**
     * @return {?}
     */
    $.jPlayer.getDocMode = function() {
        var docMode;
        if ($.jPlayer.browser.msie) {
            if (document.documentMode) {
                docMode = document.documentMode;
            } else {
                /** @type {number} */
                docMode = 5;
                if (document.compatMode && "CSS1Compat" === document.compatMode) {
                    /** @type {number} */
                    docMode = 7;
                }
            }
        }
        return docMode;
    };
    $.jPlayer.browser.documentMode = $.jPlayer.getDocMode();
    $.jPlayer.nativeFeatures = {
        init: function() {
            /** @type {!HTMLDocument} */
            var doc = document;
            /** @type {!Element} */
            var fs = doc.createElement("video");
            var spec = {
                w3c: "fullscreenEnabled fullscreenElement requestFullscreen exitFullscreen fullscreenchange fullscreenerror".split(" "),
                moz: "mozFullScreenEnabled mozFullScreenElement mozRequestFullScreen mozCancelFullScreen mozfullscreenchange mozfullscreenerror".split(" "),
                webkit: " webkitCurrentFullScreenElement webkitRequestFullScreen webkitCancelFullScreen webkitfullscreenchange ".split(" "),
                webkitVideo: "webkitSupportsFullscreen webkitDisplayingFullscreen webkitEnterFullscreen webkitExitFullscreen  ".split(" ")
            };
            /** @type {!Array} */
            var specOrder = ["w3c", "moz", "webkit", "webkitVideo"];
            var i;
            var il;
            this.fullscreen = fs = {
                support: {
                    w3c: !!doc[spec.w3c[0]],
                    moz: !!doc[spec.moz[0]],
                    webkit: "function" === typeof doc[spec.webkit[3]],
                    webkitVideo: "function" === typeof fs[spec.webkitVideo[2]]
                },
                used: {}
            };
            /** @type {number} */
            i = 0;
            /** @type {number} */
            il = specOrder.length;
            for (; i < il; i++) {
                var n = specOrder[i];
                if (fs.support[n]) {
                    fs.spec = n;
                    /** @type {boolean} */
                    fs.used[n] = true;
                    break;
                }
            }
            if (fs.spec) {
                var s = spec[fs.spec];
                fs.api = {
                    fullscreenEnabled: true,
                    fullscreenElement: function(res) {
                        res = res ? res : doc;
                        return res[s[1]];
                    },
                    requestFullscreen: function(elem) {
                        return elem[s[2]]();
                    },
                    exitFullscreen: function(res) {
                        res = res ? res : doc;
                        return res[s[3]]();
                    }
                };
                fs.event = {
                    fullscreenchange: s[4],
                    fullscreenerror: s[5]
                };
            } else {
                fs.api = {
                    fullscreenEnabled: false,
                    fullscreenElement: function() {
                        return null;
                    },
                    requestFullscreen: function() {},
                    exitFullscreen: function() {}
                };
                fs.event = {};
            }
        }
    };
    $.jPlayer.nativeFeatures.init();
    /** @type {null} */
    $.jPlayer.focus = null;
    /** @type {string} */
    $.jPlayer.keyIgnoreElementNames = "INPUT TEXTAREA";
    /**
     * @param {!Event} event
     * @return {undefined}
     */
    var keyBindings = function(event) {
        /** @type {null} */
        var f = $.jPlayer.focus;
        var e;
        if (f) {
            $.each($.jPlayer.keyIgnoreElementNames.split(/\s+/g), function(b, shortMonthName) {
                if (event.target.nodeName.toUpperCase() === shortMonthName.toUpperCase()) {
                    return e = true, false;
                }
            });
            if (!e) {
                $.each(f.options.keyBindings, function(canCreateDiscussions, binding) {
                    if (binding && event.which === binding.key && $.isFunction(binding.fn)) {
                        return event.preventDefault(), binding.fn(f), false;
                    }
                });
            }
        }
    };
    /**
     * @param {!Object} name
     * @return {undefined}
     */
    $.jPlayer.keys = function(name) {
        $(document.documentElement).unbind("keydown.jPlayer");
        if (name) {
            $(document.documentElement).bind("keydown.jPlayer", keyBindings);
        }
    };
    $.jPlayer.keys(true);
    $.jPlayer.prototype = {
        count: 0,
        version: {
            script: "2.5.0",
            needFlash: "2.5.0",
            flash: "unknown"
        },
        options: {
            swfPath: "js",
            solution: "html, flash",
            supplied: "mp3",
            preload: "metadata",
            volume: .8,
            muted: false,
            playbackRate: 1,
            defaultPlaybackRate: 1,
            minPlaybackRate: .5,
            maxPlaybackRate: 4,
            wmode: "opaque",
            backgroundColor: "#000000",
            cssSelectorAncestor: "#jp_container_1",
            cssSelector: {
                videoPlay: ".jp-video-play",
                play: ".jp-play",
                pause: ".jp-pause",
                stop: ".jp-stop",
                seekBar: ".jp-seek-bar",
                playBar: ".jp-play-bar",
                mute: ".jp-mute",
                unmute: ".jp-unmute",
                volumeBar: ".jp-volume-bar",
                volumeBarValue: ".jp-volume-bar-value",
                volumeMax: ".jp-volume-max",
                playbackRateBar: ".jp-playback-rate-bar",
                playbackRateBarValue: ".jp-playback-rate-bar-value",
                currentTime: ".jp-current-time",
                duration: ".jp-duration",
                fullScreen: ".jp-full-screen",
                restoreScreen: ".jp-restore-screen",
                repeat: ".jp-repeat",
                repeatOff: ".jp-repeat-off",
                gui: ".jp-gui",
                noSolution: ".jp-no-solution"
            },
            smoothPlayBar: false,
            fullScreen: false,
            fullWindow: false,
            autohide: {
                restored: false,
                full: true,
                fadeIn: 200,
                fadeOut: 600,
                hold: 1E3
            },
            loop: false,
            repeat: function(event) {
                if (event.jPlayer.options.loop) {
                    $(this).unbind(".jPlayerRepeat").bind($.jPlayer.event.ended + ".jPlayer.jPlayerRepeat", function() {
                        $(this).jPlayer("play");
                    });
                } else {
                    $(this).unbind(".jPlayerRepeat");
                }
            },
            nativeVideoControls: {},
            noFullWindow: {
                msie: /msie [0-6]\./,
                ipad: /ipad.*?os [0-4]\./,
                iphone: /iphone/,
                ipod: /ipod/,
                android_pad: /android [0-3]\.(?!.*?mobile)/,
                android_phone: /android.*?mobile/,
                blackberry: /blackberry/,
                windows_ce: /windows ce/,
                iemobile: /iemobile/,
                webos: /webos/
            },
            noVolume: {
                ipad: /ipad/,
                iphone: /iphone/,
                ipod: /ipod/,
                android_pad: /android(?!.*?mobile)/,
                android_phone: /android.*?mobile/,
                blackberry: /blackberry/,
                windows_ce: /windows ce/,
                iemobile: /iemobile/,
                webos: /webos/,
                playbook: /playbook/
            },
            timeFormat: {},
            keyEnabled: false,
            audioFullScreen: false,
            keyBindings: {
                play: {
                    key: 32,
                    fn: function(options) {
                        if (options.status.paused) {
                            options.play();
                        } else {
                            options.pause();
                        }
                    }
                },
                fullScreen: {
                    key: 13,
                    fn: function(f) {
                        if (f.status.video || f.options.audioFullScreen) {
                            f._setOption("fullScreen", !f.options.fullScreen);
                        }
                    }
                },
                muted: {
                    key: 8,
                    fn: function(f) {
                        f._muted(!f.options.muted);
                    }
                },
                volumeUp: {
                    key: 38,
                    fn: function(a) {
                        a.volume(a.options.volume + .1);
                    }
                },
                volumeDown: {
                    key: 40,
                    fn: function(a) {
                        a.volume(a.options.volume - .1);
                    }
                }
            },
            verticalVolume: false,
            verticalPlaybackRate: false,
            globalVolume: false,
            idPrefix: "jp",
            noConflict: "jQuery",
            emulateHtml: false,
            consoleAlerts: true,
            errorAlerts: false,
            warningAlerts: false
        },
        optionsAudio: {
            size: {
                width: "0px",
                height: "0px",
                cssClass: ""
            },
            sizeFull: {
                width: "0px",
                height: "0px",
                cssClass: ""
            }
        },
        optionsVideo: {
            size: {
                width: "480px",
                height: "270px",
                cssClass: "jp-video-270p"
            },
            sizeFull: {
                width: "100%",
                height: "100%",
                cssClass: "jp-video-full"
            }
        },
        instances: {},
        status: {
            src: "",
            media: {},
            paused: true,
            format: {},
            formatType: "",
            waitForPlay: true,
            waitForLoad: true,
            srcSet: false,
            video: false,
            seekPercent: 0,
            currentPercentRelative: 0,
            currentPercentAbsolute: 0,
            currentTime: 0,
            duration: 0,
            videoWidth: 0,
            videoHeight: 0,
            readyState: 0,
            networkState: 0,
            playbackRate: 1,
            ended: 0
        },
        internal: {
            ready: false
        },
        solution: {
            html: true,
            flash: true
        },
        format: {
            mp3: {
                codec: 'audio/mpeg; codecs="mp3"',
                flashCanPlay: true,
                media: "audio"
            },
            m4a: {
                codec: 'audio/mp4; codecs="mp4a.40.2"',
                flashCanPlay: true,
                media: "audio"
            },
            m3u8a: {
                codec: 'application/vnd.apple.mpegurl; codecs="mp4a.40.2"',
                flashCanPlay: false,
                media: "audio"
            },
            m3ua: {
                codec: "audio/mpegurl",
                flashCanPlay: false,
                media: "audio"
            },
            oga: {
                codec: 'audio/ogg; codecs="vorbis, opus"',
                flashCanPlay: false,
                media: "audio"
            },
            flac: {
                codec: "audio/x-flac",
                flashCanPlay: false,
                media: "audio"
            },
            wav: {
                codec: 'audio/wav; codecs="1"',
                flashCanPlay: false,
                media: "audio"
            },
            webma: {
                codec: 'audio/webm; codecs="vorbis"',
                flashCanPlay: false,
                media: "audio"
            },
            fla: {
                codec: "audio/x-flv",
                flashCanPlay: true,
                media: "audio"
            },
            rtmpa: {
                codec: 'audio/rtmp; codecs="rtmp"',
                flashCanPlay: true,
                media: "audio"
            },
            m4v: {
                codec: 'video/mp4; codecs="avc1.42E01E, mp4a.40.2"',
                flashCanPlay: true,
                media: "video"
            },
            m3u8v: {
                codec: 'application/vnd.apple.mpegurl; codecs="avc1.42E01E, mp4a.40.2"',
                flashCanPlay: false,
                media: "video"
            },
            m3uv: {
                codec: "audio/mpegurl",
                flashCanPlay: false,
                media: "video"
            },
            ogv: {
                codec: 'video/ogg; codecs="theora, vorbis"',
                flashCanPlay: false,
                media: "video"
            },
            webmv: {
                codec: 'video/webm; codecs="vorbis, vp8"',
                flashCanPlay: false,
                media: "video"
            },
            flv: {
                codec: "video/x-flv",
                flashCanPlay: true,
                media: "video"
            },
            rtmpv: {
                codec: 'video/rtmp; codecs="rtmp"',
                flashCanPlay: true,
                media: "video"
            }
        },
        _init: function() {
            var self = this;
            this.element.empty();
            this.status = $.extend({}, this.status);
            this.internal = $.extend({}, this.internal);
            this.options.timeFormat = $.extend({}, $.jPlayer.timeFormat, this.options.timeFormat);
            this.internal.cmdsIgnored = $.jPlayer.platform.ipad || $.jPlayer.platform.iphone || $.jPlayer.platform.ipod;
            this.internal.domNode = this.element.get(0);
            if (this.options.keyEnabled && !$.jPlayer.focus) {
                $.jPlayer.focus = this;
            }
            /** @type {!Array} */
            this.formats = [];
            /** @type {!Array} */
            this.solutions = [];
            this.require = {};
            this.htmlElement = {};
            this.html = {};
            this.html.audio = {};
            this.html.video = {};
            this.flash = {};
            this.css = {};
            this.css.cs = {};
            this.css.jq = {};
            /** @type {!Array} */
            this.ancestorJq = [];
            this.options.volume = this._limitValue(this.options.volume, 0, 1);
            $.each(this.options.supplied.toLowerCase().split(","), function(canCreateDiscussions, aShortcut) {
                var name = aShortcut.replace(/^\s+|\s+$/g, "");
                if (self.format[name]) {
                    /** @type {boolean} */
                    var g = false;
                    $.each(self.formats, function(b, interName) {
                        if (name === interName) {
                            return g = true, false;
                        }
                    });
                    if (!g) {
                        self.formats.push(name);
                    }
                }
            });
            $.each(this.options.solution.toLowerCase().split(","), function(canCreateDiscussions, aShortcut) {
                var i = aShortcut.replace(/^\s+|\s+$/g, "");
                if (self.solution[i]) {
                    /** @type {boolean} */
                    var g = false;
                    $.each(self.solutions, function(b, categoryStart) {
                        if (i === categoryStart) {
                            return g = true, false;
                        }
                    });
                    if (!g) {
                        self.solutions.push(i);
                    }
                }
            });
            /** @type {string} */
            this.internal.instance = "jp_" + this.count;
            this.instances[this.internal.instance] = this.element;
            if (!this.element.attr("id")) {
                this.element.attr("id", this.options.idPrefix + "_jplayer_" + this.count);
            }
            this.internal.self = $.extend({}, {
                id: this.element.attr("id"),
                jq: this.element
            });
            this.internal.audio = $.extend({}, {
                id: this.options.idPrefix + "_audio_" + this.count,
                jq: undefined
            });
            this.internal.video = $.extend({}, {
                id: this.options.idPrefix + "_video_" + this.count,
                jq: undefined
            });
            this.internal.flash = $.extend({}, {
                id: this.options.idPrefix + "_flash_" + this.count,
                jq: undefined,
                swf: this.options.swfPath + (".swf" !== this.options.swfPath.toLowerCase().slice(-4) ? (this.options.swfPath && "/" !== this.options.swfPath.slice(-1) ? "/" : "") + "Jplayer.swf" : "")
            });
            this.internal.poster = $.extend({}, {
                id: this.options.idPrefix + "_poster_" + this.count,
                jq: undefined
            });
            $.each($.jPlayer.event, function(eventName, focus) {
                if (self.options[eventName] !== undefined) {
                    self.element.bind(focus + ".jPlayer", self.options[eventName]);
                    self.options[eventName] = undefined;
                }
            });
            /** @type {boolean} */
            this.require.audio = false;
            /** @type {boolean} */
            this.require.video = false;
            $.each(this.formats, function(b, format) {
                /** @type {boolean} */
                self.require[self.format[format].media] = true;
            });
            this.options = this.require.video ? $.extend(true, {}, this.optionsVideo, this.options) : $.extend(true, {}, this.optionsAudio, this.options);
            this._setSize();
            this.status.nativeVideoControls = this._uaBlocklist(this.options.nativeVideoControls);
            this.status.noFullWindow = this._uaBlocklist(this.options.noFullWindow);
            this.status.noVolume = this._uaBlocklist(this.options.noVolume);
            if ($.jPlayer.nativeFeatures.fullscreen.api.fullscreenEnabled) {
                this._fullscreenAddEventListeners();
            }
            this._restrictNativeVideoControls();
            /** @type {!Element} */
            this.htmlElement.poster = document.createElement("img");
            this.htmlElement.poster.id = this.internal.poster.id;
            /**
             * @return {undefined}
             */
            this.htmlElement.poster.onload = function() {
                if (!(self.status.video && !self.status.waitForPlay)) {
                    self.internal.poster.jq.show();
                }
            };
            this.element.append(this.htmlElement.poster);
            this.internal.poster.jq = $("#" + this.internal.poster.id);
            this.internal.poster.jq.css({
                width: this.status.width,
                height: this.status.height
            });
            this.internal.poster.jq.hide();
            this.internal.poster.jq.bind("click.jPlayer", function() {
                self._trigger($.jPlayer.event.click);
            });
            /** @type {boolean} */
            this.html.audio.available = false;
            if (this.require.audio) {
                /** @type {!Element} */
                this.htmlElement.audio = document.createElement("audio");
                this.htmlElement.audio.id = this.internal.audio.id;
                this.html.audio.available = !!this.htmlElement.audio.canPlayType && this._testCanPlayType(this.htmlElement.audio);
            }
            /** @type {boolean} */
            this.html.video.available = false;
            if (this.require.video) {
                /** @type {!Element} */
                this.htmlElement.video = document.createElement("video");
                this.htmlElement.video.id = this.internal.video.id;
                this.html.video.available = !!this.htmlElement.video.canPlayType && this._testCanPlayType(this.htmlElement.video);
            }
            this.flash.available = this._checkForFlash(10.1);
            this.html.canPlay = {};
            this.flash.canPlay = {};
            $.each(this.formats, function(b, format) {
                self.html.canPlay[format] = self.html[self.format[format].media].available && "" !== self.htmlElement[self.format[format].media].canPlayType(self.format[format].codec);
                self.flash.canPlay[format] = self.format[format].flashCanPlay && self.flash.available;
            });
            /** @type {boolean} */
            this.html.desired = false;
            /** @type {boolean} */
            this.flash.desired = false;
            $.each(this.solutions, function(canCreateDiscussions, solution) {
                if (0 === canCreateDiscussions) {
                    /** @type {boolean} */
                    self[solution].desired = true;
                } else {
                    /** @type {boolean} */
                    var audioCanPlay = false;
                    /** @type {boolean} */
                    var videoCanPlay = false;
                    $.each(self.formats, function(b, format) {
                        if (self[self.solutions[0]].canPlay[format]) {
                            if ("video" === self.format[format].media) {
                                /** @type {boolean} */
                                videoCanPlay = true;
                            } else {
                                /** @type {boolean} */
                                audioCanPlay = true;
                            }
                        }
                    });
                    self[solution].desired = self.require.audio && !audioCanPlay || self.require.video && !videoCanPlay;
                }
            });
            this.html.support = {};
            this.flash.support = {};
            $.each(this.formats, function(b, format) {
                self.html.support[format] = self.html.canPlay[format] && self.html.desired;
                self.flash.support[format] = self.flash.canPlay[format] && self.flash.desired;
            });
            /** @type {boolean} */
            this.html.used = false;
            /** @type {boolean} */
            this.flash.used = false;
            $.each(this.solutions, function(canCreateDiscussions, solution) {
                $.each(self.formats, function(b, name) {
                    if (self[solution].support[name]) {
                        return self[solution].used = true, false;
                    }
                });
            });
            this._resetActive();
            this._resetGate();
            this._cssSelectorAncestor(this.options.cssSelectorAncestor);
            if (this.html.used || this.flash.used) {
                if (this.css.jq.noSolution.length) {
                    this.css.jq.noSolution.hide();
                }
            } else {
                this._error({
                    type: $.jPlayer.error.NO_SOLUTION,
                    context: "{solution:'" + this.options.solution + "', supplied:'" + this.options.supplied + "'}",
                    message: $.jPlayer.errorMsg.NO_SOLUTION,
                    hint: $.jPlayer.errorHint.NO_SOLUTION
                });
                if (this.css.jq.noSolution.length) {
                    this.css.jq.noSolution.show();
                }
            }
            if (this.flash.used) {
                var htmlObj;
                /** @type {string} */
                var paramStr = "jQuery=" + encodeURI(this.options.noConflict) + "&id=" + encodeURI(this.internal.self.id) + "&vol=" + this.options.volume + "&muted=" + this.options.muted;
                if ($.jPlayer.browser.msie && (9 > Number($.jPlayer.browser.version) || 9 > $.jPlayer.browser.documentMode)) {
                    /** @type {!Array} */
                    paramStr = ['<param name="movie" value="' + this.internal.flash.swf + '" />', '<param name="FlashVars" value="' + paramStr + '" />', '<param name="allowScriptAccess" value="always" />', '<param name="bgcolor" value="' + this.options.backgroundColor + '" />', '<param name="wmode" value="' + this.options.wmode + '" />'];
                    /** @type {!Element} */
                    htmlObj = document.createElement('<object id="' + this.internal.flash.id + '" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="0" height="0" tabindex="-1"></object>');
                    /** @type {number} */
                    var createParam = 0;
                    for (; createParam < paramStr.length; createParam++) {
                        htmlObj.appendChild(document.createElement(paramStr[createParam]));
                    }
                } else {
                    /**
                     * @param {!Object} el
                     * @param {string} name
                     * @param {string} v
                     * @return {undefined}
                     */
                    createParam = function(el, name, v) {
                        /** @type {!Element} */
                        var p = document.createElement("param");
                        p.setAttribute("name", name);
                        p.setAttribute("value", v);
                        el.appendChild(p);
                    };
                    /** @type {!Element} */
                    htmlObj = document.createElement("object");
                    htmlObj.setAttribute("id", this.internal.flash.id);
                    htmlObj.setAttribute("name", this.internal.flash.id);
                    htmlObj.setAttribute("data", this.internal.flash.swf);
                    htmlObj.setAttribute("type", "application/x-shockwave-flash");
                    htmlObj.setAttribute("width", "1");
                    htmlObj.setAttribute("height", "1");
                    htmlObj.setAttribute("tabindex", "-1");
                    createParam(htmlObj, "flashvars", paramStr);
                    createParam(htmlObj, "allowscriptaccess", "always");
                    createParam(htmlObj, "bgcolor", this.options.backgroundColor);
                    createParam(htmlObj, "wmode", this.options.wmode);
                }
                this.element.append(htmlObj);
                this.internal.flash.jq = $(htmlObj);
            }
            this.status.playbackRateEnabled = this.html.used && !this.flash.used ? this._testPlaybackRate("audio") : false;
            this._updatePlaybackRate();
            if (this.html.used) {
                if (this.html.audio.available) {
                    this._addHtmlEventListeners(this.htmlElement.audio, this.html.audio);
                    this.element.append(this.htmlElement.audio);
                    this.internal.audio.jq = $("#" + this.internal.audio.id);
                }
                if (this.html.video.available) {
                    this._addHtmlEventListeners(this.htmlElement.video, this.html.video);
                    this.element.append(this.htmlElement.video);
                    this.internal.video.jq = $("#" + this.internal.video.id);
                    if (this.status.nativeVideoControls) {
                        this.internal.video.jq.css({
                            width: this.status.width,
                            height: this.status.height
                        });
                    } else {
                        this.internal.video.jq.css({
                            width: "0px",
                            height: "0px"
                        });
                    }
                    this.internal.video.jq.bind("click.jPlayer", function() {
                        self._trigger($.jPlayer.event.click);
                    });
                }
            }
            if (this.options.emulateHtml) {
                this._emulateHtmlBridge();
            }
            if (this.html.used && !this.flash.used) {
                setTimeout(function() {
                    /** @type {boolean} */
                    self.internal.ready = true;
                    /** @type {string} */
                    self.version.flash = "n/a";
                    self._trigger($.jPlayer.event.repeat);
                    self._trigger($.jPlayer.event.ready);
                }, 100);
            }
            this._updateNativeVideoControls();
            if (this.css.jq.videoPlay.length) {
                this.css.jq.videoPlay.hide();
            }
            $.jPlayer.prototype.count++;
        },
        destroy: function() {
            this.clearMedia();
            this._removeUiClass();
            if (this.css.jq.currentTime.length) {
                this.css.jq.currentTime.text("");
            }
            if (this.css.jq.duration.length) {
                this.css.jq.duration.text("");
            }
            $.each(this.css.jq, function(b, $localForage) {
                if ($localForage.length) {
                    $localForage.unbind(".jPlayer");
                }
            });
            this.internal.poster.jq.unbind(".jPlayer");
            if (this.internal.video.jq) {
                this.internal.video.jq.unbind(".jPlayer");
            }
            this._fullscreenRemoveEventListeners();
            if (this === $.jPlayer.focus) {
                /** @type {null} */
                $.jPlayer.focus = null;
            }
            if (this.options.emulateHtml) {
                this._destroyHtmlBridge();
            }
            this.element.removeData("jPlayer");
            this.element.unbind(".jPlayer");
            this.element.empty();
            delete this.instances[this.internal.instance];
        },
        enable: function() {},
        disable: function() {},
        _testCanPlayType: function(elem) {
            try {
                return elem.canPlayType(this.format.mp3.codec), true;
            } catch (l) {
                return false;
            }
        },
        _testPlaybackRate: function(type) {
            /** @type {!Element} */
            type = document.createElement("string" === typeof type ? type : "audio");
            try {
                return "playbackRate" in type ? (type.playbackRate = .5, .5 === type.playbackRate) : false;
            } catch (l) {
                return false;
            }
        },
        _uaBlocklist: function(list) {
            /** @type {string} */
            var m = navigator.userAgent.toLowerCase();
            /** @type {boolean} */
            var block = false;
            $.each(list, function(b, query) {
                if (query && query.test(m)) {
                    return block = true, false;
                }
            });
            return block;
        },
        _restrictNativeVideoControls: function() {
            if (this.require.audio && this.status.nativeVideoControls) {
                /** @type {boolean} */
                this.status.nativeVideoControls = false;
                /** @type {boolean} */
                this.status.noFullWindow = true;
            }
        },
        _updateNativeVideoControls: function() {
            if (this.html.video.available && this.html.used) {
                this.htmlElement.video.controls = this.status.nativeVideoControls;
                this._updateAutohide();
                if (this.status.nativeVideoControls && this.require.video) {
                    this.internal.poster.jq.hide();
                    this.internal.video.jq.css({
                        width: this.status.width,
                        height: this.status.height
                    });
                } else {
                    if (this.status.waitForPlay && this.status.video) {
                        this.internal.poster.jq.show();
                        this.internal.video.jq.css({
                            width: "0px",
                            height: "0px"
                        });
                    }
                }
            }
        },
        _addHtmlEventListeners: function(mediaElement, entity) {
            var self = this;
            mediaElement.preload = this.options.preload;
            mediaElement.muted = this.options.muted;
            mediaElement.volume = this.options.volume;
            if (this.status.playbackRateEnabled) {
                mediaElement.defaultPlaybackRate = this.options.defaultPlaybackRate;
                mediaElement.playbackRate = this.options.playbackRate;
            }
            mediaElement.addEventListener("progress", function() {
                if (entity.gate) {
                    if (self.internal.cmdsIgnored && 0 < this.readyState) {
                        /** @type {boolean} */
                        self.internal.cmdsIgnored = false;
                    }
                    self._getHtmlStatus(mediaElement);
                    self._updateInterface();
                    self._trigger($.jPlayer.event.progress);
                }
            }, false);
            mediaElement.addEventListener("timeupdate", function() {
                if (entity.gate) {
                    self._getHtmlStatus(mediaElement);
                    self._updateInterface();
                    self._trigger($.jPlayer.event.timeupdate);
                }
            }, false);
            mediaElement.addEventListener("durationchange", function() {
                if (entity.gate) {
                    self._getHtmlStatus(mediaElement);
                    self._updateInterface();
                    self._trigger($.jPlayer.event.durationchange);
                }
            }, false);
            mediaElement.addEventListener("play", function() {
                if (entity.gate) {
                    self._updateButtons(true);
                    self._html_checkWaitForPlay();
                    self._trigger($.jPlayer.event.play);
                }
            }, false);
            mediaElement.addEventListener("playing", function() {
                if (entity.gate) {
                    self._updateButtons(true);
                    self._seeked();
                    self._trigger($.jPlayer.event.playing);
                }
            }, false);
            mediaElement.addEventListener("pause", function() {
                if (entity.gate) {
                    self._updateButtons(false);
                    self._trigger($.jPlayer.event.pause);
                }
            }, false);
            mediaElement.addEventListener("waiting", function() {
                if (entity.gate) {
                    self._seeking();
                    self._trigger($.jPlayer.event.waiting);
                }
            }, false);
            mediaElement.addEventListener("seeking", function() {
                if (entity.gate) {
                    self._seeking();
                    self._trigger($.jPlayer.event.seeking);
                }
            }, false);
            mediaElement.addEventListener("seeked", function() {
                if (entity.gate) {
                    self._seeked();
                    self._trigger($.jPlayer.event.seeked);
                }
            }, false);
            mediaElement.addEventListener("volumechange", function() {
                if (entity.gate) {
                    self.options.volume = mediaElement.volume;
                    self.options.muted = mediaElement.muted;
                    self._updateMute();
                    self._updateVolume();
                    self._trigger($.jPlayer.event.volumechange);
                }
            }, false);
            mediaElement.addEventListener("ratechange", function() {
                if (entity.gate) {
                    self.options.defaultPlaybackRate = mediaElement.defaultPlaybackRate;
                    self.options.playbackRate = mediaElement.playbackRate;
                    self._updatePlaybackRate();
                    self._trigger($.jPlayer.event.ratechange);
                }
            }, false);
            mediaElement.addEventListener("suspend", function() {
                if (entity.gate) {
                    self._seeked();
                    self._trigger($.jPlayer.event.suspend);
                }
            }, false);
            mediaElement.addEventListener("ended", function() {
                if (entity.gate) {
                    if (!$.jPlayer.browser.webkit) {
                        /** @type {number} */
                        self.htmlElement.media.currentTime = 0;
                    }
                    self.htmlElement.media.pause();
                    self._updateButtons(false);
                    self._getHtmlStatus(mediaElement, true);
                    self._updateInterface();
                    self._trigger($.jPlayer.event.ended);
                }
            }, false);
            mediaElement.addEventListener("error", function() {
                if (entity.gate) {
                    self._updateButtons(false);
                    self._seeked();
                    if (self.status.srcSet) {
                        clearTimeout(self.internal.htmlDlyCmdId);
                        /** @type {boolean} */
                        self.status.waitForLoad = true;
                        /** @type {boolean} */
                        self.status.waitForPlay = true;
                        if (self.status.video && !self.status.nativeVideoControls) {
                            self.internal.video.jq.css({
                                width: "0px",
                                height: "0px"
                            });
                        }
                        if (self._validString(self.status.media.poster) && !self.status.nativeVideoControls) {
                            self.internal.poster.jq.show();
                        }
                        if (self.css.jq.videoPlay.length) {
                            self.css.jq.videoPlay.show();
                        }
                        self._error({
                            type: $.jPlayer.error.URL,
                            context: self.status.src,
                            message: $.jPlayer.errorMsg.URL,
                            hint: $.jPlayer.errorHint.URL
                        });
                    }
                }
            }, false);
            $.each($.jPlayer.htmlEvent, function(canCreateDiscussions, eventType) {
                mediaElement.addEventListener(this, function() {
                    if (entity.gate) {
                        self._trigger($.jPlayer.event[eventType]);
                    }
                }, false);
            });
        },
        _getHtmlStatus: function(media, override) {
            var ct;
            var cpa;
            /** @type {number} */
            var sp = 0;
            /** @type {number} */
            var cpr = 0;
            if (isFinite(media.duration)) {
                this.status.duration = media.duration;
            }
            ct = media.currentTime;
            /** @type {number} */
            cpa = 0 < this.status.duration ? 100 * ct / this.status.duration : 0;
            if ("object" === typeof media.seekable && 0 < media.seekable.length) {
                /** @type {number} */
                sp = 0 < this.status.duration ? 100 * media.seekable.end(media.seekable.length - 1) / this.status.duration : 100;
                /** @type {number} */
                cpr = 0 < this.status.duration ? 100 * media.currentTime / media.seekable.end(media.seekable.length - 1) : 0;
            } else {
                /** @type {number} */
                sp = 100;
                /** @type {number} */
                cpr = cpa;
            }
            if (override) {
                /** @type {number} */
                cpa = cpr = ct = 0;
            }
            /** @type {number} */
            this.status.seekPercent = sp;
            /** @type {number} */
            this.status.currentPercentRelative = cpr;
            /** @type {number} */
            this.status.currentPercentAbsolute = cpa;
            this.status.currentTime = ct;
            this.status.videoWidth = media.videoWidth;
            this.status.videoHeight = media.videoHeight;
            this.status.readyState = media.readyState;
            this.status.networkState = media.networkState;
            this.status.playbackRate = media.playbackRate;
            this.status.ended = media.ended;
        },
        _resetStatus: function() {
            this.status = $.extend({}, this.status, $.jPlayer.prototype.status);
        },
        _trigger: function(type, name, value) {
            type = $.Event(type);
            type.jPlayer = {};
            type.jPlayer.version = $.extend({}, this.version);
            type.jPlayer.options = $.extend(true, {}, this.options);
            type.jPlayer.status = $.extend(true, {}, this.status);
            type.jPlayer.html = $.extend(true, {}, this.html);
            type.jPlayer.flash = $.extend(true, {}, this.flash);
            if (name) {
                type.jPlayer.error = $.extend({}, name);
            }
            if (value) {
                type.jPlayer.warning = $.extend({}, value);
            }
            this.element.trigger(type);
        },
        jPlayerFlashEvent: function(eventType, status) {
            if (eventType === $.jPlayer.event.ready) {
                if (!this.internal.ready) {
                    /** @type {boolean} */
                    this.internal.ready = true;
                    this.internal.flash.jq.css({
                        width: "0px",
                        height: "0px"
                    });
                    this.version.flash = status.version;
                    if (this.version.needFlash !== this.version.flash) {
                        this._error({
                            type: $.jPlayer.error.VERSION,
                            context: this.version.flash,
                            message: $.jPlayer.errorMsg.VERSION + this.version.flash,
                            hint: $.jPlayer.errorHint.VERSION
                        });
                    }
                    this._trigger($.jPlayer.event.repeat);
                    this._trigger(eventType);
                } else {
                    if (this.flash.gate) {
                        if (this.status.srcSet) {
                            var currentTime = this.status.currentTime;
                            var paused = this.status.paused;
                            this.setMedia(this.status.media);
                            this.volumeWorker(this.options.volume);
                            if (0 < currentTime) {
                                if (paused) {
                                    this.pause(currentTime);
                                } else {
                                    this.play(currentTime);
                                }
                            }
                        }
                        this._trigger($.jPlayer.event.flashreset);
                    }
                }
            }
            if (this.flash.gate) {
                switch (eventType) {
                    case $.jPlayer.event.progress:
                        this._getFlashStatus(status);
                        this._updateInterface();
                        this._trigger(eventType);
                        break;
                    case $.jPlayer.event.timeupdate:
                        this._getFlashStatus(status);
                        this._updateInterface();
                        this._trigger(eventType);
                        break;
                    case $.jPlayer.event.play:
                        this._seeked();
                        this._updateButtons(true);
                        this._trigger(eventType);
                        break;
                    case $.jPlayer.event.pause:
                        this._updateButtons(false);
                        this._trigger(eventType);
                        break;
                    case $.jPlayer.event.ended:
                        this._updateButtons(false);
                        this._trigger(eventType);
                        break;
                    case $.jPlayer.event.click:
                        this._trigger(eventType);
                        break;
                    case $.jPlayer.event.error:
                        /** @type {boolean} */
                        this.status.waitForLoad = true;
                        /** @type {boolean} */
                        this.status.waitForPlay = true;
                        if (this.status.video) {
                            this.internal.flash.jq.css({
                                width: "0px",
                                height: "0px"
                            });
                        }
                        if (this._validString(this.status.media.poster)) {
                            this.internal.poster.jq.show();
                        }
                        if (this.css.jq.videoPlay.length && this.status.video) {
                            this.css.jq.videoPlay.show();
                        }
                        if (this.status.video) {
                            this._flash_setVideo(this.status.media);
                        } else {
                            this._flash_setAudio(this.status.media);
                        }
                        this._updateButtons(false);
                        this._error({
                            type: $.jPlayer.error.URL,
                            context: status.src,
                            message: $.jPlayer.errorMsg.URL,
                            hint: $.jPlayer.errorHint.URL
                        });
                        break;
                    case $.jPlayer.event.seeking:
                        this._seeking();
                        this._trigger(eventType);
                        break;
                    case $.jPlayer.event.seeked:
                        this._seeked();
                        this._trigger(eventType);
                        break;
                    case $.jPlayer.event.ready:
                        break;
                    default:
                        this._trigger(eventType);
                }
            }
            return false;
        },
        _getFlashStatus: function(status) {
            this.status.seekPercent = status.seekPercent;
            this.status.currentPercentRelative = status.currentPercentRelative;
            this.status.currentPercentAbsolute = status.currentPercentAbsolute;
            this.status.currentTime = status.currentTime;
            this.status.duration = status.duration;
            this.status.videoWidth = status.videoWidth;
            this.status.videoHeight = status.videoHeight;
            /** @type {number} */
            this.status.readyState = 4;
            /** @type {number} */
            this.status.networkState = 0;
            /** @type {number} */
            this.status.playbackRate = 1;
            /** @type {boolean} */
            this.status.ended = false;
        },
        _updateButtons: function(playing) {
            if (playing === undefined) {
                /** @type {boolean} */
                playing = !this.status.paused;
            } else {
                /** @type {boolean} */
                this.status.paused = !playing;
            }
            if (this.css.jq.play.length && this.css.jq.pause.length) {
                if (playing) {
                    this.css.jq.play.hide();
                    this.css.jq.pause.show();
                } else {
                    this.css.jq.play.show();
                    this.css.jq.pause.hide();
                }
            }
            if (this.css.jq.restoreScreen.length && this.css.jq.fullScreen.length) {
                if (this.status.noFullWindow) {
                    this.css.jq.fullScreen.hide();
                    this.css.jq.restoreScreen.hide();
                } else {
                    if (this.options.fullWindow) {
                        this.css.jq.fullScreen.hide();
                        this.css.jq.restoreScreen.show();
                    } else {
                        this.css.jq.fullScreen.show();
                        this.css.jq.restoreScreen.hide();
                    }
                }
            }
            if (this.css.jq.repeat.length && this.css.jq.repeatOff.length) {
                if (this.options.loop) {
                    this.css.jq.repeat.hide();
                    this.css.jq.repeatOff.show();
                } else {
                    this.css.jq.repeat.show();
                    this.css.jq.repeatOff.hide();
                }
            }
        },
        _updateInterface: function() {
            if (this.css.jq.seekBar.length) {
                this.css.jq.seekBar.width(this.status.seekPercent + "%");
            }
            if (this.css.jq.playBar.length) {
                if (this.options.smoothPlayBar) {
                    this.css.jq.playBar.stop().animate({
                        width: this.status.currentPercentAbsolute + "%"
                    }, 250, "linear");
                } else {
                    this.css.jq.playBar.width(this.status.currentPercentRelative + "%");
                }
            }
            if (this.css.jq.currentTime.length) {
                this.css.jq.currentTime.text(this._convertTime(this.status.currentTime));
            }
            if (this.css.jq.duration.length) {
                this.css.jq.duration.text(this._convertTime(this.status.duration));
            }
        },
        _convertTime: Config.prototype.time,
        _seeking: function() {
            if (this.css.jq.seekBar.length) {
                this.css.jq.seekBar.addClass("jp-seeking-bg");
            }
        },
        _seeked: function() {
            if (this.css.jq.seekBar.length) {
                this.css.jq.seekBar.removeClass("jp-seeking-bg");
            }
        },
        _resetGate: function() {
            /** @type {boolean} */
            this.html.audio.gate = false;
            /** @type {boolean} */
            this.html.video.gate = false;
            /** @type {boolean} */
            this.flash.gate = false;
        },
        _resetActive: function() {
            /** @type {boolean} */
            this.html.active = false;
            /** @type {boolean} */
            this.flash.active = false;
        },
        _escapeHtml: function(s) {
            return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;").split('"').join("&quot;");
        },
        _qualifyURL: function(url) {
            /** @type {!Element} */
            var parentDiv = document.createElement("div");
            /** @type {string} */
            parentDiv.innerHTML = '<a href="' + this._escapeHtml(url) + '">x</a>';
            return parentDiv.firstChild.href;
        },
        _absoluteMediaUrls: function(media) {
            var self = this;
            $.each(media, function(type, url) {
                if (self.format[type]) {
                    media[type] = self._qualifyURL(url);
                }
            });
            return media;
        },
        setMedia: function(media) {
            var self = this;
            /** @type {boolean} */
            var e = false;
            /** @type {boolean} */
            var f = this.status.media.poster !== media.poster;
            this._resetMedia();
            this._resetGate();
            this._resetActive();
            media = this._absoluteMediaUrls(media);
            $.each(this.formats, function(canCreateDiscussions, format) {
                /** @type {boolean} */
                var o = "video" === self.format[format].media;
                $.each(self.solutions, function(a, solution) {
                    if (self[solution].support[format] && self._validString(media[format])) {
                        return a = "html" === solution, o ? (a ? (self.html.video.gate = true, self._html_setVideo(media), self.html.active = true) : (self.flash.gate = true, self._flash_setVideo(media), self.flash.active = true), self.css.jq.videoPlay.length && self.css.jq.videoPlay.show(), self.status.video = true) : (a ? (self.html.audio.gate = true, self._html_setAudio(media), self.html.active = true) : (self.flash.gate = true, self._flash_setAudio(media), self.flash.active = true), self.css.jq.videoPlay.length &&
                            self.css.jq.videoPlay.hide(), self.status.video = false), e = true, false;
                    }
                });
                if (e) {
                    return false;
                }
            });
            if (e) {
                if (!(this.status.nativeVideoControls && this.html.video.gate || !this._validString(media.poster))) {
                    if (f) {
                        this.htmlElement.poster.src = media.poster;
                    } else {
                        this.internal.poster.jq.show();
                    }
                }
                /** @type {boolean} */
                this.status.srcSet = true;
                this.status.media = $.extend({}, media);
                this._updateButtons(false);
                this._updateInterface();
            } else {
                this._error({
                    type: $.jPlayer.error.NO_SUPPORT,
                    context: "{supplied:'" + this.options.supplied + "'}",
                    message: $.jPlayer.errorMsg.NO_SUPPORT,
                    hint: $.jPlayer.errorHint.NO_SUPPORT
                });
            }
        },
        _resetMedia: function() {
            this._resetStatus();
            this._updateButtons(false);
            this._updateInterface();
            this._seeked();
            this.internal.poster.jq.hide();
            clearTimeout(this.internal.htmlDlyCmdId);
            if (this.html.active) {
                this._html_resetMedia();
            } else {
                if (this.flash.active) {
                    this._flash_resetMedia();
                }
            }
        },
        clearMedia: function() {
            this._resetMedia();
            if (this.html.active) {
                this._html_clearMedia();
            } else {
                if (this.flash.active) {
                    this._flash_clearMedia();
                }
            }
            this._resetGate();
            this._resetActive();
        },
        load: function() {
            if (this.status.srcSet) {
                if (this.html.active) {
                    this._html_load();
                } else {
                    if (this.flash.active) {
                        this._flash_load();
                    }
                }
            } else {
                this._urlNotSetError("load");
            }
        },
        focus: function() {
            if (this.options.keyEnabled) {
                $.jPlayer.focus = this;
            }
        },
        play: function(name) {
            /** @type {number} */
            name = "number" === typeof name ? name : NaN;
            if (this.status.srcSet) {
                this.focus();
                if (this.html.active) {
                    this._html_play(name);
                } else {
                    if (this.flash.active) {
                        this._flash_play(name);
                    }
                }
            } else {
                this._urlNotSetError("play");
            }
        },
        videoPlay: function() {
            this.play();
        },
        pause: function(time) {
            /** @type {number} */
            time = "number" === typeof time ? time : NaN;
            if (this.status.srcSet) {
                if (this.html.active) {
                    this._html_pause(time);
                } else {
                    if (this.flash.active) {
                        this._flash_pause(time);
                    }
                }
            } else {
                this._urlNotSetError("pause");
            }
        },
        tellOthers: function(command, conditions) {
            var b = this;
            /** @type {boolean} */
            var doExtend = "function" === typeof conditions;
            /** @type {!Array<?>} */
            var args = Array.prototype.slice.call(arguments);
            if ("string" === typeof command) {
                if (doExtend) {
                    args.splice(1, 1);
                }
                $.each(this.instances, function() {
                    if (b.element !== this) {
                        if (!(doExtend && !conditions.call(this.data("jPlayer"), b))) {
                            this.jPlayer.apply(this, args);
                        }
                    }
                });
            }
        },
        pauseOthers: function(time) {
            this.tellOthers("pause", function() {
                return this.status.srcSet;
            }, time);
        },
        stop: function() {
            if (this.status.srcSet) {
                if (this.html.active) {
                    this._html_pause(0);
                } else {
                    if (this.flash.active) {
                        this._flash_pause(0);
                    }
                }
            } else {
                this._urlNotSetError("stop");
            }
        },
        playHead: function(p) {
            p = this._limitValue(p, 0, 100);
            if (this.status.srcSet) {
                if (this.html.active) {
                    this._html_playHead(p);
                } else {
                    if (this.flash.active) {
                        this._flash_playHead(p);
                    }
                }
            } else {
                this._urlNotSetError("playHead");
            }
        },
        _muted: function(muted) {
            this.mutedWorker(muted);
            if (this.options.globalVolume) {
                this.tellOthers("mutedWorker", function() {
                    return this.options.globalVolume;
                }, muted);
            }
        },
        mutedWorker: function(muted) {
            /** @type {boolean} */
            this.options.muted = muted;
            if (this.html.used) {
                this._html_setProperty("muted", muted);
            }
            if (this.flash.used) {
                this._flash_mute(muted);
            }
            if (!(this.html.video.gate || this.html.audio.gate)) {
                this._updateMute(muted);
                this._updateVolume(this.options.volume);
                this._trigger($.jPlayer.event.volumechange);
            }
        },
        mute: function(mute) {
            /** @type {boolean} */
            mute = mute === undefined ? true : !!mute;
            this._muted(mute);
        },
        unmute: function(unmute) {
            /** @type {boolean} */
            unmute = unmute === undefined ? true : !!unmute;
            this._muted(!unmute);
        },
        _updateMute: function(mute) {
            if (mute === undefined) {
                mute = this.options.muted;
            }
            if (this.css.jq.mute.length && this.css.jq.unmute.length) {
                if (this.status.noVolume) {
                    this.css.jq.mute.hide();
                    this.css.jq.unmute.hide();
                } else {
                    if (mute) {
                        this.css.jq.mute.hide();
                        this.css.jq.unmute.show();
                    } else {
                        this.css.jq.mute.show();
                        this.css.jq.unmute.hide();
                    }
                }
            }
        },
        volume: function(v) {
            this.volumeWorker(v);
            if (this.options.globalVolume) {
                this.tellOthers("volumeWorker", function() {
                    return this.options.globalVolume;
                }, v);
            }
        },
        volumeWorker: function(v) {
            v = this._limitValue(v, 0, 1);
            /** @type {number} */
            this.options.volume = v;
            if (this.html.used) {
                this._html_setProperty("volume", v);
            }
            if (this.flash.used) {
                this._flash_volume(v);
            }
            if (!(this.html.video.gate || this.html.audio.gate)) {
                this._updateVolume(v);
                this._trigger($.jPlayer.event.volumechange);
            }
        },
        volumeBar: function(e) {
            if (this.css.jq.volumeBar.length) {
                var c = $(e.currentTarget);
                var offset = c.offset();
                /** @type {number} */
                var y = e.pageX - offset.left;
                var h = c.width();
                e = c.height() - e.pageY + offset.top;
                c = c.height();
                if (this.options.verticalVolume) {
                    this.volume(e / c);
                } else {
                    this.volume(y / h);
                }
            }
            if (this.options.muted) {
                this._muted(false);
            }
        },
        volumeBarValue: function() {},
        _updateVolume: function(v) {
            if (v === undefined) {
                v = this.options.volume;
            }
            v = this.options.muted ? 0 : v;
            if (this.status.noVolume) {
                if (this.css.jq.volumeBar.length) {
                    this.css.jq.volumeBar.hide();
                }
                if (this.css.jq.volumeBarValue.length) {
                    this.css.jq.volumeBarValue.hide();
                }
                if (this.css.jq.volumeMax.length) {
                    this.css.jq.volumeMax.hide();
                }
            } else {
                if (this.css.jq.volumeBar.length) {
                    this.css.jq.volumeBar.show();
                }
                if (this.css.jq.volumeBarValue.length) {
                    this.css.jq.volumeBarValue.show();
                    this.css.jq.volumeBarValue[this.options.verticalVolume ? "height" : "width"](100 * v + "%");
                }
                if (this.css.jq.volumeMax.length) {
                    this.css.jq.volumeMax.show();
                }
            }
        },
        volumeMax: function() {
            this.volume(1);
            if (this.options.muted) {
                this._muted(false);
            }
        },
        _cssSelectorAncestor: function(ancestor) {
            var self = this;
            /** @type {!Object} */
            this.options.cssSelectorAncestor = ancestor;
            this._removeUiClass();
            this.ancestorJq = ancestor ? $(ancestor) : [];
            if (ancestor && 1 !== this.ancestorJq.length) {
                this._warning({
                    type: $.jPlayer.warning.CSS_SELECTOR_COUNT,
                    context: ancestor,
                    message: $.jPlayer.warningMsg.CSS_SELECTOR_COUNT + this.ancestorJq.length + " found for cssSelectorAncestor.",
                    hint: $.jPlayer.warningHint.CSS_SELECTOR_COUNT
                });
            }
            this._addUiClass();
            $.each(this.options.cssSelector, function(fn, cssSel) {
                self._cssSelector(fn, cssSel);
            });
            this._updateInterface();
            this._updateButtons();
            this._updateAutohide();
            this._updateVolume();
            this._updateMute();
        },
        _cssSelector: function(fn, cssSel) {
            var proxy = this;
            if ("string" === typeof cssSel) {
                if ($.jPlayer.prototype.options.cssSelector[fn]) {
                    if (this.css.jq[fn] && this.css.jq[fn].length) {
                        this.css.jq[fn].unbind(".jPlayer");
                    }
                    /** @type {string} */
                    this.options.cssSelector[fn] = cssSel;
                    /** @type {string} */
                    this.css.cs[fn] = this.options.cssSelectorAncestor + " " + cssSel;
                    this.css.jq[fn] = cssSel ? $(this.css.cs[fn]) : [];
                    if (this.css.jq[fn].length) {
                        this.css.jq[fn].bind("click.jPlayer", function(key) {
                            key.preventDefault();
                            proxy[fn](key);
                            $(this).blur();
                        });
                    }
                    if (cssSel && 1 !== this.css.jq[fn].length) {
                        this._warning({
                            type: $.jPlayer.warning.CSS_SELECTOR_COUNT,
                            context: this.css.cs[fn],
                            message: $.jPlayer.warningMsg.CSS_SELECTOR_COUNT + this.css.jq[fn].length + " found for " + fn + " method.",
                            hint: $.jPlayer.warningHint.CSS_SELECTOR_COUNT
                        });
                    }
                } else {
                    this._warning({
                        type: $.jPlayer.warning.CSS_SELECTOR_METHOD,
                        context: fn,
                        message: $.jPlayer.warningMsg.CSS_SELECTOR_METHOD,
                        hint: $.jPlayer.warningHint.CSS_SELECTOR_METHOD
                    });
                }
            } else {
                this._warning({
                    type: $.jPlayer.warning.CSS_SELECTOR_STRING,
                    context: cssSel,
                    message: $.jPlayer.warningMsg.CSS_SELECTOR_STRING,
                    hint: $.jPlayer.warningHint.CSS_SELECTOR_STRING
                });
            }
        },
        seekBar: function(e) {
            if (this.css.jq.seekBar.length) {
                var f = $(e.currentTarget);
                var offset = f.offset();
                /** @type {number} */
                e = e.pageX - offset.left;
                f = f.width();
                this.playHead(100 * e / f);
            }
        },
        playBar: function() {},
        playbackRate: function(value) {
            this._setOption("playbackRate", value);
        },
        playbackRateBar: function(e) {
            if (this.css.jq.playbackRateBar.length) {
                var c = $(e.currentTarget);
                var offset = c.offset();
                /** @type {number} */
                var f = e.pageX - offset.left;
                var aspect = c.width();
                e = c.height() - e.pageY + offset.top;
                c = c.height();
                this.playbackRate((this.options.verticalPlaybackRate ? e / c : f / aspect) * (this.options.maxPlaybackRate - this.options.minPlaybackRate) + this.options.minPlaybackRate);
            }
        },
        playbackRateBarValue: function() {},
        _updatePlaybackRate: function() {
            /** @type {number} */
            var b = (this.options.playbackRate - this.options.minPlaybackRate) / (this.options.maxPlaybackRate - this.options.minPlaybackRate);
            if (this.status.playbackRateEnabled) {
                if (this.css.jq.playbackRateBar.length) {
                    this.css.jq.playbackRateBar.show();
                }
                if (this.css.jq.playbackRateBarValue.length) {
                    this.css.jq.playbackRateBarValue.show();
                    this.css.jq.playbackRateBarValue[this.options.verticalPlaybackRate ? "height" : "width"](100 * b + "%");
                }
            } else {
                if (this.css.jq.playbackRateBar.length) {
                    this.css.jq.playbackRateBar.hide();
                }
                if (this.css.jq.playbackRateBarValue.length) {
                    this.css.jq.playbackRateBarValue.hide();
                }
            }
        },
        repeat: function() {
            this._loop(true);
        },
        repeatOff: function() {
            this._loop(false);
        },
        _loop: function(loop) {
            if (this.options.loop !== loop) {
                /** @type {boolean} */
                this.options.loop = loop;
                this._updateButtons();
                this._trigger($.jPlayer.event.repeat);
            }
        },
        currentTime: function() {},
        duration: function() {},
        gui: function() {},
        noSolution: function() {},
        option: function(key, item) {
            /** @type {string} */
            var options = key;
            if (0 === arguments.length) {
                return $.extend(true, {}, this.options);
            }
            if ("string" === typeof key) {
                /** @type {!Array<string>} */
                var o = key.split(".");
                if (item === undefined) {
                    options = $.extend(true, {}, this.options);
                    /** @type {number} */
                    var c = 0;
                    for (; c < o.length; c++) {
                        if (options[o[c]] !== undefined) {
                            options = options[o[c]];
                        } else {
                            return this._warning({
                                type: $.jPlayer.warning.OPTION_KEY,
                                context: key,
                                message: $.jPlayer.warningMsg.OPTION_KEY,
                                hint: $.jPlayer.warningHint.OPTION_KEY
                            }), undefined;
                        }
                    }
                    return options;
                }
                c = options = {};
                /** @type {number} */
                var i = 0;
                for (; i < o.length; i++) {
                    if (i < o.length - 1) {
                        c[o[i]] = {};
                        c = c[o[i]];
                    } else {
                        c[o[i]] = item;
                    }
                }
            }
            this._setOptions(options);
            return this;
        },
        _setOptions: function(key) {
            var that = this;
            $.each(key, function(key, value) {
                that._setOption(key, value);
            });
            return this;
        },
        _setOption: function(key, value) {
            var self = this;
            switch (key) {
                case "volume":
                    this.volume(value);
                    break;
                case "muted":
                    this._muted(value);
                    break;
                case "globalVolume":
                    /** @type {!Object} */
                    this.options[key] = value;
                    break;
                case "cssSelectorAncestor":
                    this._cssSelectorAncestor(value);
                    break;
                case "cssSelector":
                    $.each(value, function(fn, cssSel) {
                        self._cssSelector(fn, cssSel);
                    });
                    break;
                case "playbackRate":
                    this.options[key] = value = this._limitValue(value, this.options.minPlaybackRate, this.options.maxPlaybackRate);
                    if (this.html.used) {
                        this._html_setProperty("playbackRate", value);
                    }
                    this._updatePlaybackRate();
                    break;
                case "defaultPlaybackRate":
                    this.options[key] = value = this._limitValue(value, this.options.minPlaybackRate, this.options.maxPlaybackRate);
                    if (this.html.used) {
                        this._html_setProperty("defaultPlaybackRate", value);
                    }
                    this._updatePlaybackRate();
                    break;
                case "minPlaybackRate":
                    this.options[key] = value = this._limitValue(value, .1, this.options.maxPlaybackRate - .1);
                    this._updatePlaybackRate();
                    break;
                case "maxPlaybackRate":
                    this.options[key] = value = this._limitValue(value, this.options.minPlaybackRate + .1, 16);
                    this._updatePlaybackRate();
                    break;
                case "fullScreen":
                    if (this.options[key] !== value) {
                        var wkv = $.jPlayer.nativeFeatures.fullscreen.used.webkitVideo;
                        if (!wkv || wkv && !this.status.waitForPlay) {
                            if (!wkv) {
                                /** @type {!Object} */
                                this.options[key] = value;
                            }
                            if (value) {
                                this._requestFullscreen();
                            } else {
                                this._exitFullscreen();
                            }
                            if (!wkv) {
                                this._setOption("fullWindow", value);
                            }
                        }
                    }
                    break;
                case "fullWindow":
                    if (this.options[key] !== value) {
                        this._removeUiClass();
                        /** @type {!Object} */
                        this.options[key] = value;
                        this._refreshSize();
                    }
                    break;
                case "size":
                    if (!(this.options.fullWindow || this.options[key].cssClass === value.cssClass)) {
                        this._removeUiClass();
                    }
                    this.options[key] = $.extend({}, this.options[key], value);
                    this._refreshSize();
                    break;
                case "sizeFull":
                    if (this.options.fullWindow && this.options[key].cssClass !== value.cssClass) {
                        this._removeUiClass();
                    }
                    this.options[key] = $.extend({}, this.options[key], value);
                    this._refreshSize();
                    break;
                case "autohide":
                    this.options[key] = $.extend({}, this.options[key], value);
                    this._updateAutohide();
                    break;
                case "loop":
                    this._loop(value);
                    break;
                case "nativeVideoControls":
                    this.options[key] = $.extend({}, this.options[key], value);
                    this.status.nativeVideoControls = this._uaBlocklist(this.options.nativeVideoControls);
                    this._restrictNativeVideoControls();
                    this._updateNativeVideoControls();
                    break;
                case "noFullWindow":
                    this.options[key] = $.extend({}, this.options[key], value);
                    this.status.nativeVideoControls = this._uaBlocklist(this.options.nativeVideoControls);
                    this.status.noFullWindow = this._uaBlocklist(this.options.noFullWindow);
                    this._restrictNativeVideoControls();
                    this._updateButtons();
                    break;
                case "noVolume":
                    this.options[key] = $.extend({}, this.options[key], value);
                    this.status.noVolume = this._uaBlocklist(this.options.noVolume);
                    this._updateVolume();
                    this._updateMute();
                    break;
                case "emulateHtml":
                    if (this.options[key] !== value) {
                        if (this.options[key] = value) {
                            this._emulateHtmlBridge();
                        } else {
                            this._destroyHtmlBridge();
                        }
                    }
                    break;
                case "timeFormat":
                    this.options[key] = $.extend({}, this.options[key], value);
                    break;
                case "keyEnabled":
                    if (!((this.options[key] = value) || this !== $.jPlayer.focus)) {
                        /** @type {null} */
                        $.jPlayer.focus = null;
                    }
                    break;
                case "keyBindings":
                    this.options[key] = $.extend(true, {}, this.options[key], value);
                    break;
                case "audioFullScreen":
                    /** @type {!Object} */
                    this.options[key] = value;
            }
            return this;
        },
        _refreshSize: function() {
            this._setSize();
            this._addUiClass();
            this._updateSize();
            this._updateButtons();
            this._updateAutohide();
            this._trigger($.jPlayer.event.resize);
        },
        _setSize: function() {
            if (this.options.fullWindow) {
                this.status.width = this.options.sizeFull.width;
                this.status.height = this.options.sizeFull.height;
                this.status.cssClass = this.options.sizeFull.cssClass;
            } else {
                this.status.width = this.options.size.width;
                this.status.height = this.options.size.height;
                this.status.cssClass = this.options.size.cssClass;
            }
            this.element.css({
                width: this.status.width,
                height: this.status.height
            });
        },
        _addUiClass: function() {
            if (this.ancestorJq.length) {
                this.ancestorJq.addClass(this.status.cssClass);
            }
        },
        _removeUiClass: function() {
            if (this.ancestorJq.length) {
                this.ancestorJq.removeClass(this.status.cssClass);
            }
        },
        _updateSize: function() {
            this.internal.poster.jq.css({
                width: this.status.width,
                height: this.status.height
            });
            if (!this.status.waitForPlay && this.html.active && this.status.video || this.html.video.available && this.html.used && this.status.nativeVideoControls) {
                this.internal.video.jq.css({
                    width: this.status.width,
                    height: this.status.height
                });
            } else {
                if (!this.status.waitForPlay && this.flash.active && this.status.video) {
                    this.internal.flash.jq.css({
                        width: this.status.width,
                        height: this.status.height
                    });
                }
            }
        },
        _updateAutohide: function() {
            var self = this;
            /**
             * @return {undefined}
             */
            var handler = function() {
                self.css.jq.gui.fadeIn(self.options.autohide.fadeIn, function() {
                    clearTimeout(self.internal.autohideId);
                    /** @type {number} */
                    self.internal.autohideId = setTimeout(function() {
                        self.css.jq.gui.fadeOut(self.options.autohide.fadeOut);
                    }, self.options.autohide.hold);
                });
            };
            if (this.css.jq.gui.length) {
                this.css.jq.gui.stop(true, true);
                clearTimeout(this.internal.autohideId);
                this.element.unbind(".jPlayerAutohide");
                this.css.jq.gui.unbind(".jPlayerAutohide");
                if (this.status.nativeVideoControls) {
                    this.css.jq.gui.hide();
                } else {
                    if (this.options.fullWindow && this.options.autohide.full || !this.options.fullWindow && this.options.autohide.restored) {
                        this.element.bind("mousemove.jPlayer.jPlayerAutohide", handler);
                        this.css.jq.gui.bind("mousemove.jPlayer.jPlayerAutohide", handler);
                        this.css.jq.gui.hide();
                    } else {
                        this.css.jq.gui.show();
                    }
                }
            }
        },
        fullScreen: function() {
            this._setOption("fullScreen", true);
        },
        restoreScreen: function() {
            this._setOption("fullScreen", false);
        },
        _fullscreenAddEventListeners: function() {
            var self = this;
            var fs = $.jPlayer.nativeFeatures.fullscreen;
            if (fs.api.fullscreenEnabled && fs.event.fullscreenchange) {
                if ("function" !== typeof this.internal.fullscreenchangeHandler) {
                    /**
                     * @return {undefined}
                     */
                    this.internal.fullscreenchangeHandler = function() {
                        self._fullscreenchange();
                    };
                }
                document.addEventListener(fs.event.fullscreenchange, this.internal.fullscreenchangeHandler, false);
            }
        },
        _fullscreenRemoveEventListeners: function() {
            var fs = $.jPlayer.nativeFeatures.fullscreen;
            if (this.internal.fullscreenchangeHandler) {
                document.addEventListener(fs.event.fullscreenchange, this.internal.fullscreenchangeHandler, false);
            }
        },
        _fullscreenchange: function() {
            if (this.options.fullScreen && !$.jPlayer.nativeFeatures.fullscreen.api.fullscreenElement()) {
                this._setOption("fullScreen", false);
            }
        },
        _requestFullscreen: function() {
            var e = this.ancestorJq.length ? this.ancestorJq[0] : this.element[0];
            var fs = $.jPlayer.nativeFeatures.fullscreen;
            if (fs.used.webkitVideo) {
                e = this.htmlElement.video;
            }
            if (fs.api.fullscreenEnabled) {
                fs.api.requestFullscreen(e);
            }
        },
        _exitFullscreen: function() {
            var fs = $.jPlayer.nativeFeatures.fullscreen;
            var e;
            if (fs.used.webkitVideo) {
                e = this.htmlElement.video;
            }
            if (fs.api.fullscreenEnabled) {
                fs.api.exitFullscreen(e);
            }
        },
        _html_initMedia: function(media) {
            var $self = $(this.htmlElement.media).empty();
            $.each(media.track || [], function(track, v) {
                /** @type {!Element} */
                track = document.createElement("track");
                track.setAttribute("kind", v.kind ? v.kind : "");
                track.setAttribute("src", v.src ? v.src : "");
                track.setAttribute("srclang", v.srclang ? v.srclang : "");
                track.setAttribute("label", v.label ? v.label : "");
                if (v.def) {
                    track.setAttribute("default", v.def);
                }
                $self.append(track);
            });
            this.htmlElement.media.src = this.status.src;
            if ("none" !== this.options.preload) {
                this._html_load();
            }
            this._trigger($.jPlayer.event.timeupdate);
        },
        _html_setFormat: function(media) {
            var self = this;
            $.each(this.formats, function(b, format) {
                if (self.html.support[format] && media[format]) {
                    return self.status.src = media[format], self.status.format[format] = true, self.status.formatType = format, false;
                }
            });
        },
        _html_setAudio: function(media) {
            this._html_setFormat(media);
            this.htmlElement.media = this.htmlElement.audio;
            this._html_initMedia(media);
        },
        _html_setVideo: function(media) {
            this._html_setFormat(media);
            if (this.status.nativeVideoControls) {
                this.htmlElement.video.poster = this._validString(media.poster) ? media.poster : "";
            }
            this.htmlElement.media = this.htmlElement.video;
            this._html_initMedia(media);
        },
        _html_resetMedia: function() {
            if (this.htmlElement.media) {
                if (!(this.htmlElement.media.id !== this.internal.video.id || this.status.nativeVideoControls)) {
                    this.internal.video.jq.css({
                        width: "0px",
                        height: "0px"
                    });
                }
                this.htmlElement.media.pause();
            }
        },
        _html_clearMedia: function() {
            if (this.htmlElement.media) {
                /** @type {string} */
                this.htmlElement.media.src = "about:blank";
                this.htmlElement.media.load();
            }
        },
        _html_load: function() {
            if (this.status.waitForLoad) {
                /** @type {boolean} */
                this.status.waitForLoad = false;
                this.htmlElement.media.load();
            }
            clearTimeout(this.internal.htmlDlyCmdId);
        },
        _html_play: function(time) {
            var mySound = this;
            var media = this.htmlElement.media;
            this._html_load();
            if (isNaN(time)) {
                media.play();
            } else {
                if (this.internal.cmdsIgnored) {
                    media.play();
                }
                try {
                    if (!media.seekable || "object" === typeof media.seekable && 0 < media.seekable.length) {
                        /** @type {number} */
                        media.currentTime = time;
                        media.play();
                    } else {
                        throw 1;
                    }
                } catch (p) {
                    /** @type {number} */
                    this.internal.htmlDlyCmdId = setTimeout(function() {
                        mySound.play(time);
                    }, 250);
                    return;
                }
            }
            this._html_checkWaitForPlay();
        },
        _html_pause: function(time) {
            var PLAYER = this;
            var media = this.htmlElement.media;
            if (0 < time) {
                this._html_load();
            } else {
                clearTimeout(this.internal.htmlDlyCmdId);
            }
            media.pause();
            if (!isNaN(time)) {
                try {
                    if (!media.seekable || "object" === typeof media.seekable && 0 < media.seekable.length) {
                        /** @type {number} */
                        media.currentTime = time;
                    } else {
                        throw 1;
                    }
                } catch (p) {
                    /** @type {number} */
                    this.internal.htmlDlyCmdId = setTimeout(function() {
                        PLAYER.pause(time);
                    }, 250);
                    return;
                }
            }
            if (0 < time) {
                this._html_checkWaitForPlay();
            }
        },
        _html_playHead: function(percent) {
            var self = this;
            var media = this.htmlElement.media;
            this._html_load();
            try {
                if ("object" === typeof media.seekable && 0 < media.seekable.length) {
                    /** @type {number} */
                    media.currentTime = percent * media.seekable.end(media.seekable.length - 1) / 100;
                } else {
                    if (0 < media.duration && !isNaN(media.duration)) {
                        /** @type {number} */
                        media.currentTime = percent * media.duration / 100;
                    } else {
                        throw "e";
                    }
                }
            } catch (p) {
                /** @type {number} */
                this.internal.htmlDlyCmdId = setTimeout(function() {
                    self.playHead(percent);
                }, 250);
                return;
            }
            if (!this.status.waitForLoad) {
                this._html_checkWaitForPlay();
            }
        },
        _html_checkWaitForPlay: function() {
            if (this.status.waitForPlay) {
                /** @type {boolean} */
                this.status.waitForPlay = false;
                if (this.css.jq.videoPlay.length) {
                    this.css.jq.videoPlay.hide();
                }
                if (this.status.video) {
                    this.internal.poster.jq.hide();
                    this.internal.video.jq.css({
                        width: this.status.width,
                        height: this.status.height
                    });
                }
            }
        },
        _html_setProperty: function(property, value) {
            if (this.html.audio.available) {
                /** @type {!Function} */
                this.htmlElement.audio[property] = value;
            }
            if (this.html.video.available) {
                /** @type {!Function} */
                this.htmlElement.video[property] = value;
            }
        },
        _flash_setAudio: function(media) {
            var self = this;
            try {
                $.each(this.formats, function(b, format) {
                    if (self.flash.support[format] && media[format]) {
                        switch (format) {
                            case "m4a":
                            case "fla":
                                self._getMovie().fl_setAudio_m4a(media[format]);
                                break;
                            case "mp3":
                                self._getMovie().fl_setAudio_mp3(media[format]);
                                break;
                            case "rtmpa":
                                self._getMovie().fl_setAudio_rtmp(media[format]);
                        }
                        self.status.src = media[format];
                        /** @type {boolean} */
                        self.status.format[format] = true;
                        /** @type {string} */
                        self.status.formatType = format;
                        return false;
                    }
                });
                if ("auto" === this.options.preload) {
                    this._flash_load();
                    /** @type {boolean} */
                    this.status.waitForLoad = false;
                }
            } catch (err) {
                this._flashError(err);
            }
        },
        _flash_setVideo: function(media) {
            var self = this;
            try {
                $.each(this.formats, function(b, format) {
                    if (self.flash.support[format] && media[format]) {
                        switch (format) {
                            case "m4v":
                            case "flv":
                                self._getMovie().fl_setVideo_m4v(media[format]);
                                break;
                            case "rtmpv":
                                self._getMovie().fl_setVideo_rtmp(media[format]);
                        }
                        self.status.src = media[format];
                        /** @type {boolean} */
                        self.status.format[format] = true;
                        /** @type {string} */
                        self.status.formatType = format;
                        return false;
                    }
                });
                if ("auto" === this.options.preload) {
                    this._flash_load();
                    /** @type {boolean} */
                    this.status.waitForLoad = false;
                }
            } catch (err) {
                this._flashError(err);
            }
        },
        _flash_resetMedia: function() {
            this.internal.flash.jq.css({
                width: "0px",
                height: "0px"
            });
            this._flash_pause(NaN);
        },
        _flash_clearMedia: function() {
            try {
                this._getMovie().fl_clearMedia();
            } catch (err) {
                this._flashError(err);
            }
        },
        _flash_load: function() {
            try {
                this._getMovie().fl_load();
            } catch (err) {
                this._flashError(err);
            }
            /** @type {boolean} */
            this.status.waitForLoad = false;
        },
        _flash_play: function(time) {
            try {
                this._getMovie().fl_play(time);
            } catch (err) {
                this._flashError(err);
            }
            /** @type {boolean} */
            this.status.waitForLoad = false;
            this._flash_checkWaitForPlay();
        },
        _flash_pause: function(time) {
            try {
                this._getMovie().fl_pause(time);
            } catch (err) {
                this._flashError(err);
            }
            if (0 < time) {
                /** @type {boolean} */
                this.status.waitForLoad = false;
                this._flash_checkWaitForPlay();
            }
        },
        _flash_playHead: function(p) {
            try {
                this._getMovie().fl_play_head(p);
            } catch (err) {
                this._flashError(err);
            }
            if (!this.status.waitForLoad) {
                this._flash_checkWaitForPlay();
            }
        },
        _flash_checkWaitForPlay: function() {
            if (this.status.waitForPlay) {
                /** @type {boolean} */
                this.status.waitForPlay = false;
                if (this.css.jq.videoPlay.length) {
                    this.css.jq.videoPlay.hide();
                }
                if (this.status.video) {
                    this.internal.poster.jq.hide();
                    this.internal.flash.jq.css({
                        width: this.status.width,
                        height: this.status.height
                    });
                }
            }
        },
        _flash_volume: function(v) {
            try {
                this._getMovie().fl_volume(v);
            } catch (err) {
                this._flashError(err);
            }
        },
        _flash_mute: function(m) {
            try {
                this._getMovie().fl_mute(m);
            } catch (err) {
                this._flashError(err);
            }
        },
        _getMovie: function() {
            return document[this.internal.flash.id];
        },
        _getFlashPluginVersion: function() {
            /** @type {number} */
            var raw_modified = 0;
            var flash;
            if (window.ActiveXObject) {
                try {
                    flash = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
                    var d = flash.GetVariable("$version");
                    if (d) {
                        d = d.split(" ")[1].split(",");
                        /** @type {string} */
                        raw_modified = parseInt(d[0], 10) + "." + parseInt(d[1], 10);
                    }
                } catch (p) {}
            } else {
                if (navigator.plugins && 0 < navigator.mimeTypes.length && navigator.plugins["Shockwave Flash"]) {
                    /** @type {string} */
                    raw_modified = navigator.plugins["Shockwave Flash"].description.replace(/.*\s(\d+\.\d+).*/, "$1");
                }
            }
            return 1 * raw_modified;
        },
        _checkForFlash: function(version) {
            /** @type {boolean} */
            var flashIsInstalled = false;
            if (this._getFlashPluginVersion() >= version) {
                /** @type {boolean} */
                flashIsInstalled = true;
            }
            return flashIsInstalled;
        },
        _validString: function(url) {
            return url && "string" === typeof url;
        },
        _limitValue: function(value, min, max) {
            return value < min ? min : value > max ? max : value;
        },
        _urlNotSetError: function(context) {
            this._error({
                type: $.jPlayer.error.URL_NOT_SET,
                context: context,
                message: $.jPlayer.errorMsg.URL_NOT_SET,
                hint: $.jPlayer.errorHint.URL_NOT_SET
            });
        },
        _flashError: function(error) {
            var errorType;
            /** @type {string} */
            errorType = this.internal.ready ? "FLASH_DISABLED" : "FLASH";
            this._error({
                type: $.jPlayer.error[errorType],
                context: this.internal.flash.swf,
                message: $.jPlayer.errorMsg[errorType] + error.message,
                hint: $.jPlayer.errorHint[errorType]
            });
            this.internal.flash.jq.css({
                width: "1px",
                height: "1px"
            });
        },
        _error: function(error) {
            this._trigger($.jPlayer.event.error, error);
            if (this.options.errorAlerts) {
                this._alert("Error!" + (error.message ? "\n" + error.message : "") + (error.hint ? "\n" + error.hint : "") + "\nContext: " + error.context);
            }
        },
        _warning: function(warning) {
            this._trigger($.jPlayer.event.warning, undefined, warning);
            if (this.options.warningAlerts) {
                this._alert("Warning!" + (warning.message ? "\n" + warning.message : "") + (warning.hint ? "\n" + warning.hint : "") + "\nContext: " + warning.context);
            }
        },
        _alert: function(message) {
            /** @type {string} */
            message = "jPlayer " + this.version.script + " : id='" + this.internal.self.id + "' : " + message;
            if (this.options.consoleAlerts) {
                if (console && console.log) {
                    console.log(message);
                }
            } else {
                alert(message);
            }
        },
        _emulateHtmlBridge: function() {
            var self = this;
            $.each($.jPlayer.emulateMethods.split(/\s+/g), function(b, name) {
                /**
                 * @param {?} data
                 * @return {undefined}
                 */
                self.internal.domNode[name] = function(data) {
                    self[name](data);
                };
            });
            $.each($.jPlayer.event, function(type, focus) {
                /** @type {boolean} */
                var f = true;
                $.each($.jPlayer.reservedEvent.split(/\s+/g), function(b, thumb) {
                    if (thumb === type) {
                        return f = false;
                    }
                });
                if (f) {
                    self.element.bind(focus + ".jPlayer.jPlayerHtml", function() {
                        self._emulateHtmlUpdate();
                        /** @type {(Event|null)} */
                        var event = document.createEvent("Event");
                        event.initEvent(type, false, true);
                        self.internal.domNode.dispatchEvent(event);
                    });
                }
            });
        },
        _emulateHtmlUpdate: function() {
            var self = this;
            $.each($.jPlayer.emulateStatus.split(/\s+/g), function(b, name) {
                self.internal.domNode[name] = self.status[name];
            });
            $.each($.jPlayer.emulateOptions.split(/\s+/g), function(b, name) {
                self.internal.domNode[name] = self.options[name];
            });
        },
        _destroyHtmlBridge: function() {
            var self = this;
            this.element.unbind(".jPlayerHtml");
            $.each(($.jPlayer.emulateMethods + " " + $.jPlayer.emulateStatus + " " + $.jPlayer.emulateOptions).split(/\s+/g), function(b, name) {
                delete self.internal.domNode[name];
            });
        }
    };
    $.jPlayer.error = {
        FLASH: "e_flash",
        FLASH_DISABLED: "e_flash_disabled",
        NO_SOLUTION: "e_no_solution",
        NO_SUPPORT: "e_no_support",
        URL: "e_url",
        URL_NOT_SET: "e_url_not_set",
        VERSION: "e_version"
    };
    $.jPlayer.errorMsg = {
        FLASH: "jPlayer's Flash fallback is not configured correctly, or a command was issued before the jPlayer Ready event. Details: ",
        FLASH_DISABLED: "jPlayer's Flash fallback has been disabled by the browser due to the CSS rules you have used. Details: ",
        NO_SOLUTION: "No solution can be found by jPlayer in this browser. Neither HTML nor Flash can be used.",
        NO_SUPPORT: "It is not possible to play any media format provided in setMedia() on this browser using your current options.",
        URL: "Media URL could not be loaded.",
        URL_NOT_SET: "Attempt to issue media playback commands, while no media url is set.",
        VERSION: "jPlayer " + $.jPlayer.prototype.version.script + " needs Jplayer.swf version " + $.jPlayer.prototype.version.needFlash + " but found "
    };
    $.jPlayer.errorHint = {
        FLASH: "Check your swfPath option and that Jplayer.swf is there.",
        FLASH_DISABLED: "Check that you have not display:none; the jPlayer entity or any ancestor.",
        NO_SOLUTION: "Review the jPlayer options: support and supplied.",
        NO_SUPPORT: "Video or audio formats defined in the supplied option are missing.",
        URL: "Check media URL is valid.",
        URL_NOT_SET: "Use setMedia() to set the media URL.",
        VERSION: "Update jPlayer files."
    };
    $.jPlayer.warning = {
        CSS_SELECTOR_COUNT: "e_css_selector_count",
        CSS_SELECTOR_METHOD: "e_css_selector_method",
        CSS_SELECTOR_STRING: "e_css_selector_string",
        OPTION_KEY: "e_option_key"
    };
    $.jPlayer.warningMsg = {
        CSS_SELECTOR_COUNT: "The number of css selectors found did not equal one: ",
        CSS_SELECTOR_METHOD: "The methodName given in jPlayer('cssSelector') is not a valid jPlayer method.",
        CSS_SELECTOR_STRING: "The methodCssSelector given in jPlayer('cssSelector') is not a String or is empty.",
        OPTION_KEY: "The option requested in jPlayer('option') is undefined."
    };
    $.jPlayer.warningHint = {
        CSS_SELECTOR_COUNT: "Check your css selector and the ancestor.",
        CSS_SELECTOR_METHOD: "Check your method name.",
        CSS_SELECTOR_STRING: "Check your css selector is a string.",
        OPTION_KEY: "Check your option name."
    };
});
(function($) {
    if ($ && $.selectBox && $.selectBox.selectBoxIt) {
        var self = $.selectBox.selectBoxIt.prototype;
        var oldSetupComputes = self._addAttributes;
        var d = self._addClasses;
        /**
         * @param {!Object} items
         * @param {!Object} elem
         * @return {?}
         */
        self._addAttributes = function(items, elem) {
            oldSetupComputes.apply(this, arguments);
            var data = this.options.removeAttributes || [];
            if (items.length && data.length) {
                $.each(items, function(value, cfDefinition) {
                    value = cfDefinition.name.toLowerCase();
                    if (-1 !== $.inArray(value, data)) {
                        elem.removeAttr(value);
                    }
                });
            }
            return this;
        };
        /**
         * @return {?}
         */
        self._addClasses = function() {
            d.apply(this, arguments);
            var css = (this.options.removeClasses || []).join(" ");
            this.dropdown.removeClass(css);
            return this;
        };
    }
})(jQuery);
(function(context, $) {
    /**
     * @return {undefined}
     */
    function run() {
        window.document.on("search.selectBoxIt", "select", function($lis, gpd) {
            $lis = $(gpd.dropdownOption);
            $lis.parent().find("." + o.searchFocussedClass).removeClass(o.searchFocussedClass);
            $lis.addClass(o.searchFocussedClass);
        });
        window.document.on("close.selectBoxIt", "select", function(b, gpd) {
            $(gpd.dropdownOption).parent().find("." + o.searchFocussedClass).removeClass(o.searchFocussedClass);
        });
        if (context.resources.TRIGGER_BLUR_ON_CHANGE) {
            window.document.on("changed.selectBoxIt", "select", function() {
                $(this).trigger("blur");
            });
        }
        window.document.on("update.customSelect", "select", addChargeRow);
        window.document.on("refresh.selectBoxIt", "select", function(b, a) {
            b = a.dropdown;
            /** @type {string} */
            a = o.dropdownHiddenClass;
            if (b.hasClass(a)) {
                b.removeClass(a);
            }
        });
        if (!context.isMobileUserAgent && !context.isTabletUserAgent || o.forceReload) {
            window.document.on("util.selectOptionsUpdate", "select", function(b) {
                f(b.target);
            });
        }
        window.document.on("selectbox.toggleZIndex", function(canCreateDiscussions, options) {
            options = options || {};
            /** @type {boolean} */
            var isServer = "undefined" === typeof options.switch;
            $(options.elements || []).each(function() {
                var el = $(this);
                var g = options.switch || false;
                if (isServer) {
                    /** @type {boolean} */
                    g = !context.util.empty(el.css("z-index"));
                }
                if (context.util.empty(el.data("zindexbackup"))) {
                    el.data("zindexbackup", el.css("z-index"));
                }
                if (g) {
                    el.css("z-index", "");
                } else {
                    el.css("z-index", el.data("zindexbackup"));
                }
            });
        });
        window.document.on("dialogopen dialogclose layout.reload search.update changeCouponsCallback product.variationChanged", init);
    }
    /**
     * @param {!Event} event
     * @return {undefined}
     */
    function addChargeRow(event) {
        f(event.target);
    }
    /**
     * @param {!Object} obj
     * @return {undefined}
     */
    function g(obj) {
        if ("ignoreSelector" in obj) {
            rXlink = obj.ignoreSelector;
            delete obj.ignoreSelector;
        }
        if ("uniqueOptions" in obj) {
            $.extend(defaults, obj.uniqueOptions);
            delete obj.uniqueOptions;
        }
        $.extend(o, obj);
    }
    /**
     * @param {!Object} element
     * @param {!Object} v
     * @return {undefined}
     */
    function init(element, v) {
        var name = window.document;
        var data = o;
        if (v && "object" === typeof v && "container" in v && v.container.length) {
            name = v.container;
        }
        if ("dialogopen" === element.type) {
            data.viewport = $(element.target);
        }
        if ("dialogclose" === element.type) {
            data.viewport = $(window);
        }
        e(data);
        element = name.find("select:visible:not(." + o.dropdownHiddenClass + ")");
        if (rXlink) {
            element = element.not(rXlink);
        }
        element.selectBoxIt(data);
        handleFixedSidebarHoverable();
    }
    /**
     * @param {?} data
     * @return {undefined}
     */
    function e(data) {
        if ("object" === typeof defaults) {
            var prop;
            for (prop in defaults) {
                window.document.find("." + prop + " select:visible").selectBoxIt($.extend({}, data, defaults[prop]));
            }
        }
    }
    /**
     * @param {string} body
     * @return {undefined}
     */
    function f(body) {
        body = $(body);
        if (body.length) {
            body.each(function() {
                var element = $(this);
                var selectBox = element.data("selectBox-selectBoxIt");
                var MotionChangeRecommendation = element.data("selectBoxSelectBoxIt");
                if (MotionChangeRecommendation) {
                    MotionChangeRecommendation.refresh();
                } else {
                    if (selectBox) {
                        selectBox.refresh();
                    } else {
                        element.selectBoxIt(o);
                    }
                }
            });
        }
    }
    /**
     * @return {undefined}
     */
    function handleFixedSidebarHoverable() {
        $(":selectBox-selectBoxIt").off("mouseleave").on("mouseleave", function(event) {
            event.stopPropagation();
        });
    }
    var window = {};
    /** @type {boolean} */
    var n = false;
    var o = {
        searchFocussedClass: "selectboxit-search-focussed",
        placeAfterSelect: false,
        dropdownHiddenClass: "selectBoxIt_hiddenOriginalSelect",
        forceReload: false
    };
    var defaults = {};
    /** @type {null} */
    var rXlink = null;
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.selectboxit = {
        init: function(name) {
            $("select:not([name])").each(function() {
                var b = $(this);
                b.attr("name", "select-" + b.index());
            });
            if ($.fn.hasOwnProperty("selectBoxIt")) {
                if (!n) {
                    name = name || {};
                    g(name);
                    window.document = $(document);
                    run();
                }
                e(o);
                name = "undefined" !== typeof name && "undefined" !== typeof name.customSelector ? name.customSelector : $("select:visible");
                if (rXlink) {
                    name = name.not(rXlink);
                }
                name.selectBoxIt(o);
                if (!n) {
                    handleFixedSidebarHoverable();
                }
                /** @type {boolean} */
                n = true;
            } else {
                console.warn("Namespace initialization failed. selectBoxIt plugin missed");
            }
        },
        reload: f,
        options: o
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @return {undefined}
     */
    function initFileListMenu() {
        self.addThisToolboxLinks.on("click", function() {
            $(this).trigger("sociallinks.click", {
                container: this
            });
            return false;
        });
    }
    /**
     * @return {undefined}
     */
    function removeClass() {
        self.addThisToolbox = $(".addthis_toolbox");
        self.addThisToolboxLinks = self.addThisToolbox.find("a");
        self.addThisButton = $(".addthis_button");
        self.document = $(document);
    }
    /**
     * @param {!Object} options
     * @return {undefined}
     */
    function on(options) {
        config = options && "object" === typeof options ? $.extend({}, defaults, options) : defaults;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    function f(name) {
        /** @type {string} */
        var par = "";
        if ("undefined" != typeof config[name]) {
            var prop;
            for (prop in config[name]) {
                /** @type {string} */
                par = par + '{0}="{1}" '.replace("{0}", prop).replace("{1}", config[name][prop]);
            }
        }
        return par;
    }
    var self = {};
    var config = {};
    var defaults = {
        toolbox: {
            addthis_ui_config: {},
            addthis_share_config: {},
            networks: ["google", "tweet"]
        },
        button: {
            addthis_ui_config: {},
            addthis_share_config: {},
            networks: ["google", "twitter"]
        },
        facebook_like: {
            "fb:like:layout": "button_count"
        },
        google_plusone: {
            "g:plusone:size": "medium"
        },
        tweet: {
            "tw:text": window.document.title,
            "tw:via": "Addthis"
        },
        pinterest_pinit: {
            "pi:pinit:layout": "horizontal"
        }
    };
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.addthis = {
        init: function(name) {
            if (window.addthis) {
                removeClass();
                on(name);
                initFileListMenu();
                this.reset();
            } else {
                console.warn("Component initialization failed. AddThis missed. [global.addthis]");
            }
        },
        initToolbox: function(s, name) {
            if (window.addthis) {
                if (on(name), config.selector = s, removeClass(), self.addThisToolbox = $(s || self.addThisToolbox), s = config.toolbox.networks || {}, name = "", 0 < self.addThisToolbox.length) {
                    var i;
                    var l = s.length;
                    /** @type {number} */
                    i = 0;
                    for (; i < l; i = i + 1) {
                        /** @type {string} */
                        name = name + '<a class="addthis_button_{0}" {1} ></a>'.replace("{0}", s[i]).replace("{1}", f(s[i]));
                    }
                    if (name.length) {
                        self.addThisToolbox.html(name);
                        window.addthis.toolbox(config.selector || ".addthis_toolbox", config.toolbox.addthis_ui_config, config.toolbox.addthis_share_config);
                    }
                }
            } else {
                console.warn("Component initialization failed. AddThis missed. [global.addthis]");
            }
        },
        initButton: function(json) {
            if (window.addthis) {
                on(json);
                removeClass();
                if (self.addThisButton.length) {
                    window.addthis.button(config.selector || ".addthis_toolbox", config.button.addthis_ui_config, config.button.addthis_share_config);
                }
            } else {
                console.warn("Component initialization failed. AddThis missed. [global.addthis]");
            }
        },
        reset: function() {
            if (window.addthis) {
                self.document.on("dialogclose", function() {
                    try {
                        window.addthis.update("share", "url", window.location.href);
                    } catch (aErr) {
                        console.warn("[global.addthis]: " + aErr.message, aErr);
                    }
                    window.addthis.ready();
                });
            } else {
                console.warn("Component initialization failed. AddThis missed. [global.addthis]");
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(config, $) {
    /**
     * @return {undefined}
     */
    function axisLinks() {
        that.document.ready(init);
        that.pushAudios.find("a").on("click", function() {
            return false;
        });
    }
    /**
     * @return {undefined}
     */
    function init() {
        that.pushAudios.each(function(id) {
            that.pushAudio = $(this);
            that.player = that.pushAudio.find(".push_audio_player").attr("class", "push_audio_player_" + id);
            that.playerInterface = that.pushAudio.find(".jp-audio").attr("id", "jp_interface_" + id);
            that.playerProgress = that.playerInterface.find(".jp-progress");
            var config = that.pushAudio.data("configuration");
            if ("undefined" != typeof config.file) {
                var provider = {
                    ready: function(fn) {
                        $(this).jPlayer("setMedia", {
                            mp3: config.libraryPath + config.file
                        });
                    },
                    timeupdate: function(event) {
                        $jpProgress = $(this).parent().find(".jp-progress");
                        $jpProgress.slider("value", event.jPlayer.status.currentPercentAbsolute);
                    },
                    cssSelectorAncestor: "#jp_interface_" + id,
                    swfPath: "{0}js/".replace("{0}", config.urls.staticPath),
                    supplied: "mp3"
                };
                that.player.jPlayer(provider);
                var audio = that.player.data("jPlayer");
                that.playerProgress.slider({
                    animate: "fast",
                    max: 100,
                    range: "min",
                    step: .1,
                    value: 0,
                    slide: function(name, value) {
                        name = audio.status.seekPercent;
                        if (0 < name) {
                            $(".push_audio_player_" + id).jPlayer("playHead", 100 / name * value.value);
                        } else {
                            setTimeout(function() {
                                $(this).slider("value", 0);
                            }, 0);
                        }
                    }
                });
            }
        });
    }
    var that = {};
    config.components = config.components || {};
    config.components.global = config.components.global || {};
    config.components.global.jplayer = {
        init: function(name) {
            that.document = $(document);
            that.pushAudios = $(".type_audio");
            that.audioPlayer = $(".push_audio_player");
            axisLinks();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @param {!Object} opts
     * @return {undefined}
     */
    function YoutubeVideo(opts) {
        if (window.YT) {
            set(opts);
        } else {
            parse();
            /**
             * @return {undefined}
             */
            window.onYouTubeIframeAPIReady = function() {
                set(opts);
            };
        }
    }
    /**
     * @return {undefined}
     */
    function parse() {
        /** @type {!Element} */
        var node = document.createElement("script");
        /** @type {!Element} */
        var wafCss = document.getElementsByTagName("script")[0];
        /** @type {string} */
        node.src = "//www.youtube.com/iframe_api";
        /** @type {boolean} */
        node.async = true;
        wafCss.parentNode.insertBefore(node, wafCss);
    }
    /**
     * @param {!Object} map
     * @return {undefined}
     */
    function set(map) {
        map = $(map.target);
        init(map);
    }
    /**
     * @param {!Object} options
     * @param {string} data
     * @return {undefined}
     */
    function init(options, data) {
        data = data || {};
        var id = "video_" + options.data("videoId");
        var codeHtml = $("<div>").attr("id", id);
        /** @type {number} */
        var rel = "0" == options.data("rel") ? 0 : 1;
        if (options.parent().is("picture")) {
            options.parent().replaceWith(codeHtml);
        } else {
            options.replaceWith(codeHtml);
        }
        options = {
            height: "100%",
            width: "100%",
            videoId: options.data("videoId"),
            playerVars: {
                rel: rel
            },
            events: {
                onReady: cb
            }
        };
        options = $.extend({}, options, data);
        instance = new YT.Player(id, options);
    }
    /**
     * @param {!Object} name
     * @return {undefined}
     */
    function cb(name) {
        if (context.resources.YOU_TUBE_CONTROLS) {
            name.target.playVideo();
        }
    }
    var instance;
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.ytvideo = {
        init: function() {
            $(document).on("click", ".js-youtube-video", YoutubeVideo);
        },
        play: function(name, value) {
            init(name, value);
        },
        getInstance: function() {
            return instance;
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @param {!Object} name
     * @return {undefined}
     */
    function main_chat_user_new(name) {
        name = name.user.media.nodes;
        var rown = 4 > name.length ? name.length : 4;
        /** @type {number} */
        var j = 0;
        for (; j < rown; j++) {
            var data = name[j];
            var currentAnime = data.thumbnail_src;
            data = data.code;
            data = htElements.instagramArea.data("instagram-base-url") + "p/" + data + "/?taken-by=" + htElements.instagramArea.data("instagram-account");
            htElements.instagramList.append('<li class="instagram_photo_item"><a href="' + data + '" target="_blank"><img src="' + currentAnime + '"></a></li>');
        }
    }
    var htElements = {};
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.makeupartist = {
        init: function() {
            htElements.instagramList = $("ul.instagram_photos");
            htElements.instagramArea = $(".instagram_area");
            if (0 < htElements.instagramArea.length) {
                var authServer = htElements.instagramArea.data("instaurl");
                if (authServer) {
                    /** @type {string} */
                    var token = "/" == authServer.substr(authServer.length - 1) ? "?__a=1" : "/?__a=1";
                    $.ajax({
                        type: "GET",
                        url: authServer + token,
                        success: main_chat_user_new
                    });
                }
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(result, $) {
    /**
     * @return {undefined}
     */
    function _render() {
        if ("storefront" === result.page.ns) {
            window.hpTabs.tabs();
        }
        window.document.on("click", ".js_clickable_carousel_banner", function(edgeData) {
            var target = $(this).find(".contentcarousel_asset_body_content a")[0];
            if (target && edgeData.target !== target) {
                target.click();
            }
        });
    }
    var window = {};
    /** @type {boolean} */
    var g = false;
    result.components = result.components || {};
    result.components.global = result.components.global || {};
    result.components.global.homepage = {
        init: function(name) {
            if (!g) {
                window.document = $(document);
                window.hpTabs = $(".hp_favorite_section #tabs");
                _render();
                /** @type {boolean} */
                g = true;
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @return {undefined}
     */
    function init() {
        self.loginFormPlacement.on("update", addOrEditWatchExpression);
        self.document.on("loginOptimized.openLoginDialog", initialize);
        pm.bind("accountLogin.authenticationSuccess", handler);
        pm.bind("accountLogin.authenticationError", function(result) {
            self.document.find("registration" == result.event ? "#registration_missmatch" : "#missmatch").html(result.errorMessage).show();
        });
        pm.bind("registrationform.shown", function(canCreateDiscussions) {
            if ("redirectToRegister" in canCreateDiscussions && 1 == canCreateDiscussions.redirectToRegister) {
                location.href = context.urls.startRegister;
            }
        });
        pm.bind("accountLogin.botDetectionVerification", function(host) {
            if (context.preferences.isPXBotDetectionEnabled) {
                context.dialog.create({
                    target: $("<div/>").html(host),
                    options: {
                        dialogClass: context.resources.botDetectionDialogClass
                    }
                }).dialog("open");
            }
        });
        self.loginButton.on(settings.openLoginFormEvent, start);
        if (!settings.showInModalDialog) {
            self.loginButton.on("mouseleave", axisBrushMoved);
        }
        pm.bind("loginiframe.loaded", function() {
            self.currentLoginContainer.find(".submit_button").prop("disabled", false);
        });
        pm.bind("loginpopup.lock", function() {
            instance.clear();
            /** @type {boolean} */
            intoId = true;
        });
        pm.bind("loginpopup.unlock", function() {
            instance.clear();
            /** @type {boolean} */
            intoId = false;
            if (!expression) {
                instance.start(600);
            }
        });
        self.document.on("globalLogin.openModal", function(message, options) {
            options = options || {};
            if (!("customParams" in options && "object" === typeof options.customParams && true === options.customParams.isLockedPagePopup)) {
                var data = $.extend(true, {
                    _event: message.timeStamp,
                    redirect: false,
                    dialogCloseCallback: function() {
                        $(document).trigger("globalLogin.closeModal");
                    },
                    url: context.urls.loginFormUrl
                }, options);
                if ("redirect" in options) {
                    routes[message.timeStamp] = data;
                }
                opts = data;
                context.progress.show();
                initialize(data);
            }
        });
    }
    /**
     * @return {undefined}
     */
    function addOrEditWatchExpression() {
        $(document).trigger("accountLogin.refresh");
        context.progress.hide();
        self.currentLoginContainer.find(".submit_button").prop("disabled", true).off("click");
        self.currentLoginContainer.find("form[id$='_login']").on("submit", render);
        self.currentLoginContainer.find(".block_registration form").on("submit", run);
    }
    /**
     * @return {undefined}
     */
    function get() {
        if (settings.loginPageContext) {
            context.page.setContext(settings.loginPageContext);
        }
        if (context.coremetrics) {
            context.coremetrics.sendTrackData("PageviewTag", ["Login Popup", "Account Login Popup"]);
        }
    }
    /**
     * @param {!Object} option
     * @return {undefined}
     */
    function start(option) {
        opts = {
            redirect: false
        };
        if (settings.showInModalDialog) {
            option.preventDefault();
            initialize(settings.showLoginParams);
        } else {
            if (!(intoId || expression)) {
                option.preventDefault();
                /** @type {boolean} */
                expression = true;
                self.currentLoginContainer = self.loginFormPlacement;
                context.progress.show(self.currentLoginContainer);
                get();
                if (z) {
                    self.loginButton.addClass("hover");
                } else {
                    /** @type {boolean} */
                    z = true;
                    option = self.loginFormPlacement;
                    context.ajax.load({
                        url: self.frameWrapper.data("frameurl") || context.urls.loginFormUrl,
                        target: option,
                        type: "POST"
                    });
                    self.loginButton.addClass("hover");
                    instance.clear();
                }
            }
        }
    }
    /**
     * @return {undefined}
     */
    function axisBrushMoved() {
        /** @type {boolean} */
        expression = false;
        instance.clear();
        if (!intoId) {
            instance.start(600);
        }
    }
    /**
     * @return {undefined}
     */
    function done() {
        self.loginButton.removeClass("hover");
        if (settings.currentPageContext) {
            context.page.setContext(settings.currentPageContext);
        }
    }
    /**
     * @param {string} options
     * @return {undefined}
     */
    function initialize(options) {
        options = options || {};
        var openScorm = options.dialogOpenCallback || function() {};
        var k = options.isCloseDisabled || false;
        var requestOrUrl = options.url || self.frameWrapper.data("frameurl") || context.urls.loginFormUrl;
        var maindata3 = options.requestParams || {};
        /** @type {string} */
        options = "ui_register_dialog " + (options.customDialogClass || "");
        if (k) {
            /** @type {string} */
            options = options + " ui_dialog_close_disabled";
        }
        context.progress.show();
        self.signInModal = context.dialog.open({
            options: {
                dialogClass: options,
                closeOnEscape: !k,
                emptyOnClose: false,
                close: function() {
                    if (settings.currentPageContext) {
                        context.page.setContext(settings.currentPageContext);
                    }
                },
                open: function() {
                    if (k) {
                        $(".ui-dialog-titlebar-close").hide();
                    }
                    context.customforms.dialogOpen();
                    openScorm();
                }
            },
            url: requestOrUrl,
            data: maindata3,
            method: "GET",
            callback: addOrEditWatchExpression,
            target: "#modalLogin"
        });
        if (settings.closeModalOnPasswordResetFiring) {
            self.document.on("password_reset.opened", function() {
                self.signInModal.dialog("close");
            });
        }
        self.currentLoginContainer = self.signInModal;
        get();
    }
    /**
     * @param {!Event} event
     * @return {undefined}
     */
    function render(event) {
        event.preventDefault();
        $("#missmatch").hide();
        add($(this), "Login");
    }
    /**
     * @param {!Event} event
     * @return {undefined}
     */
    function run(event) {
        event.preventDefault();
        $("#registration_missmatch").hide();
        add($(this), "Registration");
    }
    /**
     * @param {!Object} form
     * @param {string} name
     * @return {undefined}
     */
    function add(form, name) {
        context.validator.initForm(form);
        if (form.validate().form()) {
            pm({
                target: document.getElementById("optimized_login_iframe").contentWindow,
                type: "process" + name,
                data: form.serialize()
            });
        }
    }
    /**
     * @param {!Object} req
     * @return {?}
     */
    function handler(req) {
        if (req.registrationSuccess) {
            $(document).trigger("account.created");
        }
        if (!(req.redirect && "path" in req.redirect && /Gigya-LoginSuccess/i.test(req.redirect.path))) {
            $.extend(true, req, opts);
        }
        /** @type {boolean} */
        context.isUserAuthenticated = true;
        var value = context.components.account.login.loginCallback(req);
        if ("undefined" === typeof value || value) {
            if ("_event" in req && req._event in routes && (req = routes[req._event], context.isRefreshPage = true), value = "desableRefreshPage" in req && "boolean" === typeof req.desableRefreshPage && true === req.desableRefreshPage, value || "redirect" in req && ("boolean" !== typeof req.redirect || false !== req.redirect) || (req.redirect = {
                    path: "customredirect" in req && req.customredirect ? req.customredirect : location.href,
                    query: {
                        loginSuccess: true
                    }
                }), null !== req.redirect) {
                if ("function" === typeof req.redirect) {
                    return req.redirect(req);
                }
                var url = req.redirect && "path" in req.redirect ? req.redirect.path : context.urls.loginRedirectUrl;
                if ("redirectAfterLogin" in req) {
                    url = req.redirectAfterLogin;
                }
                if ((new RegExp(context.urls.cartShow, "i")).test(url)) {
                    url = context.urls.cartShow;
                }
                if ((new RegExp(context.urls.myAccount, "i")).test(url)) {
                    url = context.urls.myAccount;
                }
                var adminmanageadminGroupListlist = context.util.getParameterValueFromUrl("returnURL");
                if (adminmanageadminGroupListlist) {
                    url = adminmanageadminGroupListlist;
                }
                if (req.redirect && "query" in req.redirect && !$.isEmptyObject(req.redirect.query)) {
                    url = context.util.appendParamsToUrl(url, $.extend(true, {
                        loginSuccess: true
                    }, req.redirect.query));
                }
                if (value) {
                    $(document).trigger("loginprocess.completed");
                } else {
                    location.href = url;
                }
            }
        }
    }
    var self = {};
    var routes = {};
    /** @type {boolean} */
    var expression = false;
    /** @type {boolean} */
    var z = false;
    /** @type {boolean} */
    var intoId = false;
    var settings = {
        openLoginFormEvent: "mouseenter",
        showInModalDialog: false,
        closeModalOnPasswordResetFiring: false,
        showLoginParams: {},
        loginPageContext: {
            title: "Account Login Popup",
            type: "login",
            ns: "loginpopup"
        },
        currentPageContext: {
            title: context.page.title,
            type: context.page.type,
            ns: context.page.ns
        }
    };
    var opts = {};
    var instance = {
        id: null,
        clear: function() {
            if (instance.id) {
                window.clearTimeout(instance.id);
                delete instance.id;
            }
        },
        start: function(name) {
            /** @type {number} */
            instance.id = setTimeout(done, name);
        }
    };
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.loginoptimized = {
        init: function(name) {
            $.extend(true, settings, name);
            self.frameWrapper = $(".login_form_wrapper");
            self.loginButton = $(self.frameWrapper.data("login-button"));
            self.document = $(document);
            self.loginFormPlacement = $(".login_form_placement");
            init();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    var elementobject = self.Component.extend({
        afterPopupDataReady: function(slicedTarget) {
            if (slicedTarget) {
                slicedTarget = this.selectors.popupContainer;
                var defaults = {
                    position: {
                        my: "center",
                        at: "center",
                        of: window
                    },
                    dialogClass: "addedtocart_dialog c-routine-addtocart__dialog",
                    emptyOnClose: true,
                    open: this.onAddedToCartDialogOpen.bind(this),
                    width: 580
                };
                self.dialog.create({
                    target: slicedTarget,
                    options: defaults
                }).dialog("open");
            }
        },
        closeDialog: function() {
            self.dialog.close();
        },
        moveHiddenMessageClass: function() {
            this.selectors.body.find(this.options.classNames.notifySuccessMessage).removeClass("hidden");
        },
        afterMinicartUpdated: function(id, value, isEnd, e) {
            this.selectors.document.trigger("global.showMinicart", e);
            this.selectors.document.trigger("routinereload.addedToCart", {
                pid: id,
                qty: value,
                isSample: isEnd
            });
        },
        onAddedToCartDialogOpen: function() {
            this.selectors.body.find(this.options.classNames.notifyFormSubmit).on("click", this.sendNotifyEmail.bind(this));
            this.selectors.main.trigger("dialog.opened");
            if (this.selectors.body.find(this.options.classNames.addedToCartDialog).length) {
                this.selectors.document.trigger("tracking.popup.added.to.cart");
                this.selectors.document.trigger("routine.addedtocart");
            }
            this.selectors.body.find(this.options.classNames.uiWidget).one("click", this.onClickDialogUiWidged.bind(this));
        },
        onClickDialogUiWidged: function() {
            this.selectors.body.find(this.options.classNames.addedToCartPopUp).dialog("close");
        },
        updateMinicart: function(callback, name, scope) {
            self.ajax.load({
                url: self.urls.getMiniCart,
                callback: this.afterMinicartUpdated.bind(this, callback, name, scope)
            });
        },
        getOptions: function() {
            return {
                classNames: {
                    productActions: ".product_actions",
                    container: ".js-product-container",
                    addAllToCartButton: ".js-reload-routine-product-set",
                    productTile: ".c-routine__product-wrapper",
                    notifyFormSubmit: ".notify__form-submit",
                    main: ".main",
                    addedToCartDialog: ".addedtocart_dialog",
                    notifySuccessMessage: ".c-notify-success__message",
                    pureShotsOutOfStockEmail: ".c-notify-email__input",
                    uiWidget: ".ui-widget-overlay.ui-front",
                    outOfStockListDetail: ".c-out-of-stock__list .c-product-details",
                    productsCarousel: ".c-routine__products-carousel",
                    routineTabs: ".c-routine__tabs",
                    invalidEmail: ".js_invalid_email_outofstock",
                    addedToCartPopUp: ".js-added-to-cart-popup",
                    popupCloseButton: ".js-notify-confirmation-close",
                    popupConfirmed: "popup-confirmed",
                    sampleProduct: ".sample_product",
                    refillContainer: ".js-refill-button-container",
                    refillButton: ".js-quickviewbutton",
                    extraTabPanels: ".extra-panel",
                    activeTab: "ui-state-active",
                    bonusSamplesButton: ".js-bonus-sample-button"
                }
            };
        },
        initCache: function() {
            this.selectors = {
                body: $("body"),
                document: $(document),
                window: $(window)
            };
            this.selectors.main = this.selectors.body.find(this.options.classNames.main);
            this.selectors.container = this.selectors.body.find(this.options.classNames.container);
            this.selectors.productTile = this.selectors.container.find(this.options.classNames.productTile);
            this.selectors.productActions = this.selectors.productTile.find(this.options.classNames.productActions);
            this.selectors.addAllToCartButton = this.selectors.container.find(this.options.classNames.addAllToCartButton);
            this.selectors.notifyFormSubmit = this.selectors.body.find(this.options.classNames.notifyFormSubmit);
            this.selectors.addedToCartDialog = this.selectors.body.find(this.options.classNames.addedToCartDialog);
            this.selectors.uiWidget = this.selectors.body.find(this.options.classNames.uiWidget);
            this.selectors.notifySuccessMessage = this.selectors.addedToCartDialog.find(this.options.classNames.notifySuccessMessage);
            this.selectors.productsCarousel = this.element.find(this.options.classNames.productsCarousel);
            this.selectors.routineTabs = this.element.find(this.options.classNames.routineTabs);
            this.selectors.extraTabPanels = this.element.find(this.options.classNames.extraTabPanels);
            this.selectors.refillContainer = this.selectors.body.find(this.options.classNames.refillContainer);
            this.selectors.bonusSamplesButton = this.selectors.body.find(this.options.classNames.bonusSamplesButton);
        },
        bindEvents: function() {
            this.selectors.addAllToCartButton.on("click", this.addToCartProductSelection.bind(this));
            this.selectors.document.on("routinereload.addedToCart", this.renderPopup.bind(this));
            this.selectors.productsCarousel.on("swipe", this.handleSwipeCarouselEvent.bind(this));
            this.element.on("tabsactivate", this.initializeCarouselOnTabsChange.bind(this));
            this.element.on("tabsactivate", this.activateExtraTabPanels.bind(this));
            this.selectors.refillContainer.on("click", this.options.classNames.refillButton, this.openRefillQuickview);
            this.selectors.bonusSamplesButton.on("click", this.addBonusSampleToCart.bind(this));
            if (self.isMobileUserAgent || self.isTabletUserAgent) {
                this.selectors.refillContainer.find(this.options.classNames.refillButton).removeClass("js-quickviewbutton");
                this.selectors.refillContainer.off("click", this.options.classNames.refillButton, this.openRefillQuickview);
            }
        },
        openRefillQuickview: function(event) {
            event.preventDefault();
            self.quickView.show({
                url: self.util.appendParamToURL($(this).attr("href"), "isPureShotRefill", true),
                source: "quickview"
            });
        },
        handleSwipeCarouselEvent: function(data, linkedEntities, force) {
            this.updateResponsiveImages();
        },
        addBonusSampleToCart: function(name) {
            name.preventDefault();
            var _timg = this;
            name = $(name.target);
            var $innerblock = name.closest(".c-giveit-shot__sample-wrapper").find(".error");
            var products = name.data("products");
            self.ajax.load({
                type: "POST",
                url: self.urls.addBonusSampleToCart,
                dataType: "json",
                data: {
                    products: products,
                    promotionId: name.data("promotionId")
                },
                callback: function(name) {
                    if (name && !name.error) {
                        $innerblock.hide();
                        _timg.updateMinicart.call(_timg, products, null, true);
                    } else {
                        $innerblock.show();
                    }
                }
            });
        },
        updateResponsiveImages: function() {
            this.selectors.document.trigger("imageReplace.globalResponsive");
        },
        addToCartProductSelection: function(input) {
            /** @type {!Array} */
            var titleIDs = [];
            /** @type {!Array} */
            var existing = [];
            var e = {
                productSetProducts: []
            };
            input = $(input.target).closest(this.selectors.container);
            var k = input.find(this.selectors.productTile);
            /** @type {boolean} */
            var overlayFrag = false;
            var _timg = this;
            if (0 < input.find(this.options.classNames.sampleProduct).length) {
                /** @type {boolean} */
                overlayFrag = true;
            }
            $.each(k, function(b) {
                b = $(this);
                pid = b.find('input[name="pid"]').val();
                qty = b.find('input[name="quantity"]').val();
                titleIDs.push(pid);
                existing.push(qty);
                e.productSetProducts.push({
                    pid: pid,
                    qty: qty
                });
            });
            /** @type {string} */
            input = JSON.stringify(e);
            self.ajax.load({
                url: self.urls.addproductstocart,
                type: "post",
                data: {
                    products: input
                },
                callback: function() {
                    _timg.updateMinicart.call(_timg, titleIDs.join("|"), existing.join("|"), overlayFrag);
                }
            });
        },
        initPopupContainer: function() {
            if (!this.selectors.popupContainer) {
                this.selectors.popupContainer = $("<div/>").attr({
                    id: "addedtocart_popup"
                }).appendTo(this.selectors.body);
            }
        },
        renderPopup: function(params, options) {
            params.preventDefault();
            var numberOfCriteria;
            var id;
            if (options.pid) {
                id = options.pid;
                numberOfCriteria = options.qty || options.amount || 1;
                params = params.type || "";
                this.initPopupContainer();
                self.ajax.load({
                    target: this.selectors.popupContainer,
                    type: "GET",
                    url: self.urls.addedToCartPopup,
                    data: {
                        pid: id,
                        qty: numberOfCriteria,
                        type: params,
                        isSample: options.isSample
                    },
                    callback: this.afterPopupDataReady.bind(this)
                });
            }
        },
        sendNotifyEmail: function() {
            var that = this;
            var g = this.selectors.body.find(this.options.classNames.outOfStockListDetail);
            var value = this.selectors.body.find(this.options.classNames.pureShotsOutOfStockEmail).val();
            var tweets_container = this.selectors.body.find(this.options.classNames.invalidEmail);
            /** @type {!Array} */
            var pids = [];
            this.selectors.body.find(this.options.classNames.notifySuccessMessage).addClass("hidden");
            if (value) {
                if (self.product.validateEmail(value)) {
                    tweets_container.empty();
                    $.each(g, function() {
                        var btn = $(this);
                        pids.push(btn.data("pid"));
                    });
                    self.ajax.load({
                        url: self.urls.notifyEmail,
                        data: {
                            pids: pids.join("|"),
                            email: value
                        },
                        callback: that.moveHiddenMessageClass.bind(that)
                    }).done(function() {
                        that.selectors.body.find(that.options.classNames.addedToCartPopUp).addClass(that.options.classNames.popupConfirmed);
                        that.selectors.body.find(that.options.classNames.popupCloseButton).on("click", that.closeDialog.bind(that));
                    });
                } else {
                    tweets_container.html('<span class="' + self.resources.NOTIFYME_ERROR_MESSAGE_CLASS + '">' + self.resources.ERROR_EMAIL + "</span>");
                }
            } else {
                tweets_container.html('<span class="' + self.resources.NOTIFYME_ERROR_MESSAGE_CLASS + '">' + self.resources.EMPTY_EMAIL + "</span>");
            }
        },
        initializeCarouselOnTabsChange: function() {
            if (this.selectors.productsCarousel.length) {
                this.selectors.productsCarousel.slick("setPosition");
            }
        },
        activateExtraTabPanels: function(b, variableNames) {
            b = this.selectors.routineTabs.find("." + this.options.classNames.activeTab).index();
            this.selectors.extraTabPanels.removeClass(this.options.classNames.activeTab);
            this.selectors.extraTabPanels.eq(b).addClass(this.options.classNames.activeTab);
            $(document).trigger("imageReplace.globalResponsive");
        }
    });
    self.components = self.components || {};
    self.components.global = self.components.global || {};
    self.components.global.PureShotsRoutine = elementobject;
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @return {?}
     */
    self.components.global.PureShotsRoutine.init = function(name, value) {
        return new elementobject(name, value);
    };
})(window.app = window.app || {}, jQuery);
(function(self) {
    var Service = self.Component.extend({
        initState: function() {
            /** @type {boolean} */
            this.state.initialized = false;
        },
        bindEvents: function() {
            this.element.on("tabs.change", this.changeTab.bind(this));
        },
        afterInit: function() {
            this.initializeTabs();
        },
        initializeTabs: function() {
            if (!this.state.initialized) {
                this.element.tabs({
                    activate: this.onActivate.bind(this)
                });
                /** @type {boolean} */
                this.state.initialized = true;
            }
        },
        onActivate: function() {
            var index = this.element.tabs("option", "active");
            this.element.trigger("tabs.tab.activated", {
                index: index
            });
        },
        changeTab: function(event, ui) {
            if (this.state.initialized) {
                this.element.tabs("option", "active", ui);
            }
        }
    });
    self.components = self.components || {};
    self.components.global = self.components.global || {};
    self.components.global.Tabs = Service;
    /**
     * @param {!Object} name
     * @return {?}
     */
    self.components.global.Tabs.init = function(name) {
        return new Service(name);
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    var elementobject = self.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
            this.selectors.loyaltyAcceptTermsCheckbox = this.selectors.body.find(".js__loyalty_enrollment_fieldset");
            this.selectors.loyaltyEnrollForm = this.selectors.body.find(".js__loyalty_enrollment_form");
            this.selectors.loyaltyFooterLink = this.selectors.body.find(".js_loyalty_footer_nav_link");
            this.selectors.loyaltyNavToggler = this.selectors.body.find(".js_loyalty_mobile_nav_toggler");
            this.selectors.navigation = this.selectors.body.find(".js_navigation");
            this.selectors.loyaltyMobileNav = this.selectors.body.find(".js_loyalty_mobile_nav");
            this.selectors.loyaltyMobHeader = this.selectors.body.find(".js_mob_header_horizontal_menu");
            this.selectors.loyaltyAccordionItem = this.selectors.body.find(".js_loyalty_accordion_input");
            this.selectors.loyaltyMobileInfo = this.selectors.body.find(".js_loyalty_mobile_info");
            this.selectors.mobHeaderNav = this.selectors.body.find(".js_mob_header");
            this.selectors.loyaltyAccountInfo = this.selectors.body.find(".js_loyalty_sidebar_header");
            this.selectors.userLevel = this.selectors.body.find(".js_user_level");
            this.selectors.userLevelBox = this.selectors.body.find(".js_user_level_box");
            this.selectors.userLevelBoxArrow = this.selectors.body.find(".c-loyalty-tier__arrow");
            this.selectors.loyaltyMobileNavContent = this.selectors.body.find(".js_loyalty_mobile_nav_content");
        },
        initState: function() {
            /** @type {boolean} */
            this.state.loyaltyViewVideoAjaxCallFlag = false;
        },
        getOptions: function() {
            return {
                classNames: {
                    newsletterSubscribeForm: ".js_newsletter_subscribe_form",
                    newsletterHeaderSubscribeForm: ".js_newsletter_subscribe_header",
                    newsletterLoyaltyCheckbox: ".js_newsletter_loyalty",
                    closeButton: ".js_close_dialog"
                }
            };
        },
        bindEvents: function() {
            this.selectors.document.on("emailsignup_succes", this.newsletterSubcriptionRedirect.bind(this));
            this.selectors.loyaltyAcceptTermsCheckbox.on("change", this.validateUserLoyaltyCheckbox.bind(this));
            this.selectors.loyaltyEnrollForm.on("submit", this.validateUserLoyaltyForm.bind(this));
            this.selectors.loyaltyNavToggler.on("click", this.toggleLoyaltyMobileNavigation.bind(this));
            this.handleLoyaltyLinks();
            this.selectors.window.on("navigation.stickyOn", this.enableStickyLoyaltyNav.bind(this));
            this.selectors.window.on("navigation.stickyOff", this.disableStickyLoyaltyNav.bind(this));
            this.selectors.window.on("resize orientationchange", _.debounce(this.reflowStickyOnOrientationChange.bind(this), 10));
            this.selectors.loyaltyAccordionItem.on("click", this.toggleLoyaltyAccordion.bind(this));
            this.selectors.window.on("navigation.stickyOn resize orientationchange", _.debounce(this.enableStickyLoyaltyInfo.bind(this), 10));
            this.selectors.window.on("navigation.stickyOff", this.disableStickyLoyaltyInfo.bind(this));
            if ("myDashboard" == self.page.currentSectionID) {
                if (this.selectors.document.on("scroll", _.debounce(this.toggleDashboardStickyLoyaltyInfo.bind(this), 10)), this.setActiveUserTier(), self.isMobileUserAgent || self.isTabletUserAgent) {
                    this.selectors.userLevelBoxArrow.on("touchstart", this.activateHighlightedUserTier.bind(this));
                } else {
                    this.selectors.userLevelBox.on("mouseenter", this.activateHighlightedUserTier.bind(this));
                    this.selectors.userLevelBox.on("mouseleave", this.deactivateHighlightedUserTier.bind(this));
                }
            }
            this.selectors.document.on("updateLoyaltyUserPoints", this.updateHeaderLoyaltyUserPoints.bind(this));
            this.selectors.document.on("click", this.options.classNames.closeButton, this.closeDialog.bind(this));
            this.selectors.document.on("video.player.play", this.trackLoyaltyVideo.bind(this));
            this.selectors.document.on("loyaltyPriceUpdate", this.updatePriceInPoints.bind(this));
            $(window).on("load", this.scrollToElement.bind(this));
        },
        updatePriceInPoints: function(c, data) {
            c = data.$wrapper || this.selectors.body;
            var d = c.find(".js_loyalty_pdp_points_value");
            /** @type {number} */
            var e = parseFloat(data.netPrice.replace("$", ""));
            /** @type {string} */
            e = (Math.round(e) * self.preferences.loyaltyConversionRate).toFixed(0);
            d.html(e);
            c = c.find(".js_loyalty_pdp_cart_points_value");
            if (c.length) {
                /** @type {number} */
                d = Number(c.attr("data-raw-value"));
                /** @type {string} */
                data = (Math.round(d) * data.quantity).toFixed(0);
                c.html(data);
                data = c.parents(".js_loyalty_pdp_cart_points");
                data.removeClass("hidden");
                data.siblings(".price").find(".product_price").addClass("hidden");
            }
        },
        trackLoyaltyVideo: function(id, result) {
            if (self.preferences.isUserEnrolled && !this.state.loyaltyViewVideoAjaxCallFlag) {
                if (!(result.options && result.options.overrideSingleCallFlag && result.options.overrideSingleCallFlag)) {
                    /** @type {boolean} */
                    this.state.loyaltyViewVideoAjaxCallFlag = true;
                }
                if (id = result.options ? result.options.videoId : "") {
                    $.ajax({
                        method: "POST",
                        url: self.urls.recordActivity,
                        data: {
                            eventType: "videoView",
                            videoId: id
                        },
                        success: function() {
                            $(document).trigger("loyalty.get.notifications", {
                                notificationType: "viewVideo"
                            });
                            $(document).trigger("updateLoyaltyUserPoints");
                        }
                    });
                }
            }
        },
        setActiveUserTier: function() {
            var apiSrc = this;
            this.selectors.userLevelBox.each(function() {
                var element = $(this);
                if (element.hasClass(apiSrc.selectors.userLevel.val().toLowerCase())) {
                    element.addClass("c-loyalty-tier--active js_loyalty_tier_active");
                    element = $(".js_loyalty_tiers_group");
                    var end = $(".js_loyalty_tier_active").index();
                    if (self.isMobileUserAgent) {
                        element.slick("slickGoTo", end);
                    } else {
                        /** @type {number} */
                        var r = 0;
                        for (; r < end; r++) {
                            element.slick("slickNext");
                        }
                    }
                }
            });
        },
        activateHighlightedUserTier: function(d) {
            d = $(d.target);
            var khover = d.parents(".c-loyalty-tier");
            if ((self.isMobileUserAgent || self.isTabletUserAgent) && khover.hasClass("c-loyalty-tier--highlighted")) {
                khover.removeClass("c-loyalty-tier--highlighted");
            } else {
                if (d.hasClass("c-loyalty-tier")) {
                    d.addClass("c-loyalty-tier--highlighted");
                    d.siblings().removeClass("c-loyalty-tier--highlighted");
                } else {
                    d.parents(".c-loyalty-tier").addClass("c-loyalty-tier--highlighted");
                    d.parents(".c-loyalty-tier").siblings().removeClass("c-loyalty-tier--highlighted");
                }
            }
        },
        deactivateHighlightedUserTier: function(b) {
            b = $(b.target);
            if (b.hasClass("c-loyalty-tier")) {
                b.removeClass("c-loyalty-tier--highlighted");
            } else {
                b.parents(".c-loyalty-tier").removeClass("c-loyalty-tier--highlighted");
            }
        },
        updateHeaderLoyaltyUserPoints: function(canCreateDiscussions) {
            var env = this;
            $.ajax({
                type: "GET",
                url: self.urls.updatedUserLoyaltyPoints
            }).done(function(clone) {
                if (clone.success) {
                    var c = env.selectors.document.find(".js_loyalty_user_balance_points");
                    if (c.length) {
                        c.text(clone.data.updatedHeaderText);
                        c.attr("data-points-value", clone.data.remainingBalance);
                    }
                    env.selectors.document.trigger("userLoyaltyInformationUpdated", {
                        result: clone
                    });
                }
            });
        },
        validateUserLoyaltyCheckbox: function(b, option_obj) {
            b = this.selectors.loyaltyEnrollForm;
            option_obj = b.find(".js__loyalty_enrollment_submit");
            if (b.valid()) {
                option_obj.removeAttr("disabled");
            } else {
                option_obj.attr("disabled", "disabled");
            }
        },
        validateUserLoyaltyForm: function(type, url) {
            type.preventDefault();
            type = this.selectors.loyaltyEnrollForm;
            type.validate();
            var browser_message = type.find(".js_error_message");
            var currentSelectBoxOption = type.find(".js__loyalty_enrollment_submit");
            url = type.attr("action");
            var k = type.valid();
            var feature = type.data("content-success-id");
            var UTF_8 = type.data("enrollment-type");
            var $d = this.selectors.document;
            if (k) {
                currentSelectBoxOption.attr("disabled", "disabled");
                $.ajax({
                    url: url,
                    method: "POST",
                    data: type.serialize(),
                    success: function(name) {
                        if (name.success) {
                            this.loyaltyWelcomeToTheClubDialog = self.dialog.open({
                                url: self.util.appendParamToURL(self.urls.pageInclude, "cid", feature),
                                options: {
                                    closeOnEscape: true,
                                    dialogClass: "loyalty-presentation-welcome-to-the-club__dialog loyalty-presentation-welcome-to-the-club__dialog--" + self.page.ns,
                                    close: function() {
                                        /** @type {string} */
                                        var location = window.location.href;
                                        location = "cart-widget" == UTF_8 ? self.util.appendParamToURL(location, "enrollment", true) : self.urls.loyaltyMyDashboard;
                                        self.page.redirect(location);
                                    }
                                }
                            });
                            $d.trigger("enrollmentSuccess");
                        } else {
                            browser_message.removeClass("hidden");
                            currentSelectBoxOption.removeAttr("disabled");
                        }
                    }
                });
            }
        },
        newsletterSubcriptionRedirect: function(e, g) {
            e.preventDefault();
            e = this.selectors.body.find(this.options.classNames.newsletterSubscribeForm);
            if ("Header" == g.source) {
                e = this.selectors.body.find(this.options.classNames.newsletterHeaderSubscribeForm);
            }
            if (e.find(this.options.classNames.newsletterLoyaltyCheckbox).hasClass("f_checked")) {
                location.href = 0 == self.isUserAuthenticated ? self.urls.accountRegister : self.urls.loyaltyPresentation;
            }
        },
        handleLoyaltyLinks: function() {
            if (self.preferences.isUserEnrolled) {
                $(this.selectors.loyaltyFooterLink).each(function() {
                    var classesLine = $(this).data("loyalty-on-href");
                    if (void 0 != classesLine) {
                        $(this).attr("href", classesLine);
                    }
                });
            }
        },
        toggleLoyaltyMobileNavigation: function(b) {
            b = $(b.target);
            var undoEl = b.parents(".js_loyalty_mobile_nav_item").siblings().find(".js_loyalty_mobile_nav_toggler");
            b.toggleClass("js_loyalty_mobile_nav_item--expanded");
            undoEl.removeClass("js_loyalty_mobile_nav_item--expanded");
        },
        setStickyPosition: function(f, c) {
            if (f.hasClass("js_sticky")) {
                f.css({
                    top: c
                });
            } else {
                f.css({
                    top: "auto"
                });
            }
        },
        enableStickyLoyaltyNav: function() {
            var currentChr = this.selectors.navigation.outerHeight();
            this.selectors.loyaltyMobileNav.addClass("js_sticky");
            this.selectors.loyaltyMobileNavContent.addClass("sticky-active");
            this.setStickyPosition(this.selectors.loyaltyMobileNav, currentChr);
        },
        enableStickyLoyaltyInfo: function() {
            var currentChr = this.selectors.mobHeaderNav.outerHeight() + this.selectors.loyaltyMobileNav.outerHeight();
            this.selectors.loyaltyMobileInfo.addClass("js_sticky");
            this.setStickyPosition(this.selectors.loyaltyMobileInfo, currentChr);
        },
        toggleDashboardStickyLoyaltyInfo: function() {
            if (self.util.isElementInViewport(this.selectors.loyaltyAccountInfo[0])) {
                this.selectors.loyaltyMobileInfo.addClass("hidden");
            } else {
                this.selectors.loyaltyMobileInfo.removeClass("hidden");
            }
        },
        disableStickyLoyaltyNav: function() {
            var currentChr = this.selectors.navigation.outerHeight();
            if (this.selectors.loyaltyMobileNav.hasClass("js_sticky")) {
                this.selectors.loyaltyMobileNav.removeClass("js_sticky");
                this.selectors.loyaltyMobileNavContent.removeClass("sticky-active");
                this.setStickyPosition(this.selectors.loyaltyMobileNav, currentChr);
            }
        },
        disableStickyLoyaltyInfo: function() {
            var currentChr = this.selectors.navigation.outerHeight() + this.selectors.loyaltyMobileNav.outerHeight();
            if (this.selectors.loyaltyMobileInfo.hasClass("js_sticky")) {
                this.selectors.loyaltyMobileInfo.removeClass("js_sticky");
                this.setStickyPosition(this.selectors.loyaltyMobileInfo, currentChr);
            }
        },
        reflowStickyOnOrientationChange: function() {
            var currentChr = this.selectors.navigation.outerHeight();
            this.setStickyPosition(this.selectors.loyaltyMobileNav, currentChr);
        },
        toggleLoyaltyAccordion: function(b) {
            b = $(b.target).parents(".js_loyalty_accordion_tab").siblings();
            var showIP = b.find(".js_loyalty_accordion_input");
            b.removeClass("f_checked");
            showIP.attr("checked", false);
        },
        scrollToElement: function() {
            var end = self.util.getQueryStringParams(window.location.search.substr(1)).section;
            if (end && (end = $("[data-section-id=" + end + "]"), end.length)) {
                /** @type {number} */
                end = end.offset().top - this.selectors.navigation.outerHeight();
                if (self.isMobileUserAgent) {
                    var beg = this.selectors.loyaltyMobHeader.outerHeight() + this.selectors.mobHeaderNav.outerHeight() + this.selectors.loyaltyMobileNav.outerHeight() + this.selectors.loyaltyMobileInfo.outerHeight();
                    /** @type {number} */
                    end = end - beg;
                }
                $("html, body").animate({
                    scrollTop: end
                }, 1E3);
            }
        },
        closeDialog: function() {
            self.dialog.close();
        }
    });
    self.components = self.components || {};
    self.components.global = self.components.global || {};
    self.components.global.GlobalLoyalty = elementobject;
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @return {?}
     */
    self.components.global.GlobalLoyalty.init = function(name, value) {
        return new elementobject(name, value);
    };
})(window.app = window.app || {}, jQuery);
(function(self, event) {
    var Service = self.Component.extend({
        afterInit: function() {
            if (self.preferences.hasDeferredActions) {
                event.post(self.urls.processDeferredActions);
            }
        }
    });
    self.components = self.components || {};
    self.components.global = self.components.global || {};
    self.components.global.GlobalDeferredActions = Service;
    /**
     * @param {!Object} name
     * @return {?}
     */
    self.components.global.GlobalDeferredActions.init = function(name) {
        return new Service(name);
    };
})(window.app = window.app || {}, jQuery);
(function(options, $) {
    var Service = options.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                body: $("body")
            };
        },
        bindEvents: function() {
            this.selectors.document.on("click", ".js_loyalty_redeem_button", this.handleRedeemReward.bind(this));
            this.selectors.document.on("loyalty.engraving.resetbuttons", this.resetEngravingButtons.bind(this));
            this.selectors.document.on("change", ".js_addtocartform .add_personal_engraving_cbx", this.validateEngravingCheckbox.bind(this));
        },
        validateEngravingCheckbox: function(event) {
            var filteredView = $(event.target).parents(".js_addtocartform");
            var f = filteredView.find(".js_loyalty_redeem_button");
            if (options.preferences.isUserEnrolled && f.length) {
                if (event.target.checked) {
                    f.attr("data-master-engraving", "true");
                    f.find(".block-events").html(options.resources.LOYALTY_REWARDS_DETAIL_PAGE_ENGRAVE_ME);
                    filteredView.find(".add_personal_engraving_cbx_msg").html(options.resources.LOYALTY_REWARDS_DETAIL_PAGE_CHECKBOX_MESSAGE_CHECKED);
                    filteredView.find(".add_personal_engraving_cbx_label").text(options.resources.LOYALTY_REWARDS_DETAIL_PAGE_CHECKBOX_LABEL_CHECKED);
                } else {
                    f.removeAttr("data-master-engraving");
                    f.find(".block-events").html(options.resources.LOYALTY_REWARDS_CART_PAGE_ADD_TO_BAG);
                    filteredView.find(".add_personal_engraving_cbx_msg").html(options.resources.LOYALTY_REWARDS_DETAIL_PAGE_CHECKBOX_MESSAGE_UNCHECKED);
                    filteredView.find(".add_personal_engraving_cbx_label").text(options.resources.LOYALTY_REWARDS_DETAIL_PAGE_CHECKBOX_LABEL_UNCHECKED);
                }
            }
        },
        refreshMinicart: function() {
            var env = this;
            options.ajax.load({
                url: options.urls.getMiniCart,
                callback: function(name) {
                    env.selectors.document.trigger("global.showMinicart", name);
                    env.selectors.document.trigger("afterUpdateMiniCart");
                }
            });
        },
        openConfirmationDialog: function(p, ds, id, drop) {
            drop = options.dialog.create({
                options: {
                    closeOnEscape: true,
                    close: function() {
                        if (id) {
                            window.location.href = options.urls.loyaltyRewardsCatalogPage;
                        } else {
                            if (ds) {
                                window.location.href = options.urls.loyaltyMyDashboard;
                            }
                        }
                    },
                    dialogClass: "loyalty-added-to-cart-dialog " + drop,
                    open: function() {
                        $(window).trigger("resize");
                    }
                }
            });
            drop.html(p);
            drop.dialog("open");
        },
        handleRedeemReward: function(data) {
            data.preventDefault();
            var res = this;
            var element = $(data.target);
            var pid = element.attr("data-pid");
            var xml = element.attr("data-redeem-type");
            /** @type {boolean} */
            var uiState = "true" == element.attr("data-dashboard-flag");
            /** @type {string} */
            data = "";
            var format = element.attr("data-format") || "";
            /** @type {boolean} */
            var n = "true" == element.attr("data-has-engraving");
            /** @type {boolean} */
            var u = "true" == element.attr("data-master-engraving");
            data = element.data("is-vault-reward") || false;
            if (n) {
                element = element.closest(".js_loyalty_reward_details_product");
                var p = element.find(".custom_caps input[name=custom_cap]").val();
                element = element.find(".custom_caps .cap_selected").data("cap-id");
                data = {
                    isLoyaltyEngravingReward: true,
                    pid: pid,
                    custom_cap: p,
                    quantity: 1
                };
                data["dwopt_" + pid + "_" + p] = element;
                data = options.util.appendParamsToUrl(options.urls.loyaltyEngravingAddToCart, data);
            } else {
                if ("master" == xml || data) {
                    if (uiState) {
                        data = options.util.appendParamsToUrl(options.urls.loyaltyRewardDetails, {
                            pid: pid
                        });
                        /** @type {!Object} */
                        window.location.href = data;
                        return;
                    }
                    if (u) {
                        element = element.closest(".add_to_cart_main_container");
                        p = element.find(".custom_caps input[name=custom_cap]").val();
                        element = element.find(".custom_caps .cap_selected").data("cap-id");
                        data = {
                            isLoyaltyEngravingReward: true,
                            pid: pid,
                            custom_cap: p,
                            quantity: 1
                        };
                        data["dwopt_" + pid + "_" + p] = element;
                        data = options.util.appendParamsToUrl(options.urls.loyaltyEngravingAddToCart, data);
                    } else {
                        data = {
                            rewardId: pid,
                            quantity: 1,
                            hideDashboardButton: uiState,
                            format: format
                        };
                        element = element.closest(".add_to_cart_main_container");
                        p = element.find(".custom_caps");
                        if (p.length) {
                            p = element.find(".custom_caps input[name=custom_cap]").val();
                            element = element.find(".custom_caps .cap_selected").data("cap-id");
                            data.custom_cap = p;
                            data.capOption = element;
                        }
                        data = options.util.appendParamsToUrl(options.urls.loyaltyRedeemStandardReward, data);
                    }
                    if (options.quickView && options.quickView.exists() && options.quickView.isActive()) {
                        options.quickView.close();
                    }
                } else {
                    if ("instant" == xml) {
                        data = options.util.appendParamsToUrl(options.urls.loyaltyCompleteYourInformation, {
                            redirectOnClose: !uiState,
                            pid: pid
                        });
                    } else {
                        data = {
                            rewardId: pid,
                            quantity: 1,
                            hideDashboardButton: uiState,
                            format: format
                        };
                        element = element.closest(".js_loyalty_reward_details_product");
                        p = element.find(".custom_caps");
                        if (p.length) {
                            p = element.find(".custom_caps input[name=custom_cap]").val();
                            element = element.find(".custom_caps .cap_selected").data("cap-id");
                            data.custom_cap = p;
                            data.capOption = element;
                        }
                        data = options.util.appendParamsToUrl(options.urls.loyaltyRedeemStandardReward, data);
                    }
                }
            }
            $.ajax({
                url: data,
                method: "POST",
                success: function(name) {
                    if (u) {
                        res.openEngravingDialog(name);
                    } else {
                        if ("ajax" == format) {
                            res.selectors.document.trigger("loyaltyRewardRedeemed", name);
                        } else {
                            if (n) {
                                res.openEngravingDialog(name);
                                res.selectors.document.trigger("loyaltyEngravingPopupOpened");
                            } else {
                                if ("instant" == xml) {
                                    res.openCompleteInformationDialog(name);
                                } else {
                                    res.refreshMinicart();
                                    res.selectors.document.trigger("loyaltyRewardRedeemed", {
                                        hideDashboardButton: uiState
                                    });
                                    res.selectors.document.trigger("updateLoyaltyUserPoints");
                                    res.openConfirmationDialog(name, false, false);
                                    res.selectors.document.trigger("loyaltyRewardAddedToBag", {
                                        pid: pid,
                                        qty: 1
                                    });
                                }
                            }
                        }
                    }
                }
            });
        },
        handleEngravingRedeemButton: function(event) {
            event.preventDefault();
            event.stopPropagation();
            var res = this;
            var posts = $(event.target).closest(".personalize_product_container");
            var result = posts.find("input[name=custom_cap]").val();
            var k = posts.find(".cap_selected").data("cap-id");
            var check = posts.data("pid");
            event = posts.find(".engraving_type_controls  input[type='radio']:checked").val();
            posts = posts.find(".product_engraving_edit_controls_cont input").val();
            result = {
                format: "ajax",
                isLoyaltyEngravingReward: true,
                capOption: result,
                pers_product1_pid: check,
                pers_product1_capOptionProduct: k,
                productsCount: 1
            };
            if (posts.length) {
                result.pers_product1_engravingvalue = posts;
                /** @type {!Object} */
                result.pers_product1_engravingstyle = event;
            }
            $.ajax({
                url: options.urls.engravingAddProductsToCart,
                data: result,
                method: "POST",
                success: function(name) {
                    if ("cart" == options.pageContextObject.currentPage) {
                        name = options.util.appendParamsToUrl(options.urls.cartShow, {
                            rewardAddedToCart: true
                        });
                        /** @type {!Object} */
                        window.location = name;
                    } else {
                        res.openConfirmationDialog(name, false, false);
                        res.refreshMinicart();
                        res.selectors.document.trigger("loyaltyRewardRedeemed", {});
                        res.selectors.document.trigger("updateLoyaltyUserPoints");
                    }
                }
            });
        },
        handleEngravingExitButton: function(event) {
            event.preventDefault();
            this.selectors.document.trigger("loyaltyEngravingPopupClosed");
        },
        openEngravingDialog: function(label) {
            var event = this;
            var drop = options.dialog.create({
                options: {
                    closeOnEscape: true,
                    close: function() {
                        event.selectors.document.trigger("loyaltyEngravingPopupClosed");
                    },
                    dialogClass: "loyalty-reward-details__engraving-dialog js_loyalty_engraving_dialog",
                    open: function() {
                        event.selectors.body = $("body");
                        $(window).trigger("resize");
                        options.components.global.selectboxit.init();
                        options.components.product.engraving.init();
                        options.components.product.engravingcustom.init({
                            loyaltyFlag: true
                        });
                        var socket = event.selectors.body.find(".js_rewards_detail_engraving_exit");
                        var me = event.selectors.body.find(".js_rewards_detail_engraving_redeem_button");
                        socket.on("click", event.handleEngravingExitButton.bind(event));
                        me.on("click", event.handleEngravingRedeemButton.bind(event));
                    }
                }
            });
            drop.html(label);
            drop.dialog("open");
        },
        resetEngravingButtons: function() {
            this.selectors.engravingExitButton = this.selectors.body.find(".js_rewards_detail_engraving_exit");
            this.selectors.engravingRedeemButton = this.selectors.body.find(".js_rewards_detail_engraving_redeem_button");
            this.selectors.engravingExitButton.on("click", this.handleEngravingExitButton.bind(this));
            this.selectors.engravingRedeemButton.on("click", this.handleEngravingRedeemButton.bind(this));
            $(window).trigger("resize");
        },
        handleCompleteInformationForm: function(e) {
            e.preventDefault();
            var d = this;
            e = $(e.target);
            /** @type {boolean} */
            var eyeball = "true" == e.find(".js_loyalty_complete_information_redirect_on_close").attr("data-redirect-on-close");
            if (e.valid()) {
                $.ajax({
                    url: e.attr("action"),
                    method: "POST",
                    data: e.serialize(),
                    success: function(name) {
                        d.openConfirmationDialog(name, true, eyeball, "loyalty-complete-your-information-dialog loyalty-complete-your-information-dialog--success");
                        d.selectors.document.trigger("loyaltyRewardRedeemed", {});
                        d.selectors.document.trigger("updateLoyaltyUserPoints");
                    }
                });
            }
        },
        openCompleteInformationDialog: function(option) {
            var d = this;
            var $dialog = options.dialog.create({
                options: {
                    closeOnEscape: true,
                    dialogClass: "loyalty-complete-your-information-dialog",
                    open: function() {
                        options.validator.init();
                        $dialog.find("form").on("submit", d.handleCompleteInformationForm.bind(d));
                        $dialog.find(".js_loyalty_cancel_instant_reward").on("click", function() {
                            $dialog.dialog("close");
                        });
                    }
                }
            });
            $dialog.html(option);
            $dialog.dialog("open");
        }
    });
    options.components = options.components || {};
    options.components.global = options.components.global || {};
    options.components.global.GlobalLoyaltyRedemption = Service;
    /**
     * @param {!Object} name
     * @return {?}
     */
    options.components.global.GlobalLoyaltyRedemption.init = function(name) {
        return new Service(name);
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /** @type {!Array} */
    var k = [];
    /** @type {boolean} */
    var d = false;
    /** @type {!Array} */
    var _sizeAnimateTimeStamps = [];
    var f = self.Component.extend({
        initCache: function() {
            this.selectors = {
                body: $("body"),
                mainSection: $(".main")
            };
            this.selectors.notificationParentElement = this.selectors.mainSection.length ? this.selectors.mainSection : this.selectors.body;
        },
        afterInit: function() {
            this.initNotificationBody();
            this.bindNotificationEvents();
        },
        getOptions: function() {
            return {
                classNames: {
                    loyaltyNotification: ".js-loyalty-notification",
                    loyaltyNotificationCloseButton: ".js-notification-close"
                },
                animation: {
                    slideDownDelay: 700,
                    slideOutDelay: 1500,
                    odometerStartValue: 0,
                    odometerDuration: 2500,
                    progressBarDelay: 1E3,
                    progressBarDuration: 1200,
                    closeDelay: 2E4
                }
            };
        },
        initNotificationBody: function() {
            var data = this.options.data;
            var d = this.element.html();
            data = Mustache.render(d, data);
            this.selectors.notificationBody = $(data);
            this.selectors.notificationParentElement.append(this.selectors.notificationBody);
        },
        bindNotificationEvents: function() {
            this.selectors.notificationBody.on("click", this.options.classNames.loyaltyNotificationCloseButton, this.closeNotification.bind(this));
        },
        showNotification: function() {
            var options = this.options.animation;
            var browser = this.selectors.notificationBody;
            if (!this.visible) {
                if (d) {
                    _sizeAnimateTimeStamps.push(this);
                } else {
                    if (k.length) {
                        browser = browser.outerHeight(true);
                        this.pushDownVisibleNotification(browser).then(this.slideIn.bind(this));
                    } else {
                        this.slideIn();
                    }
                    setTimeout(this.closeNotification.bind(this), options.closeDelay);
                }
            }
        },
        updateOffset: function(x) {
            /** @type {boolean} */
            d = true;
            return this.selectors.notificationBody.animate({
                top: "+=" + x + "px"
            }, 1E3, function() {
                /** @type {boolean} */
                d = false;
            }).promise();
        },
        slideIn: function() {
            var controls = this.selectors.notificationBody;
            var dataLine = controls.find(".js-loyalty-progress-bar");
            controls = controls.find(".js-loyalty-points-odometer");
            /** @type {boolean} */
            this.visible = d = true;
            this.selectors.notificationBody.addClass("open").one("animationend", function() {
                /** @type {boolean} */
                d = false;
                k.push(this);
                this.processNextNotification();
            }.bind(this));
            if (dataLine.length) {
                this.startProgressBarAnimation(dataLine);
            }
            if (controls.length) {
                this.startOdometer(controls);
            }
            if (this.options.data.notificationType) {
                $.post(self.urls.removeNotifications, {
                    notificationType: this.options.data.notificationType
                });
            }
        },
        processNextNotification: function() {
            if (_sizeAnimateTimeStamps.length) {
                _sizeAnimateTimeStamps.shift().showNotification();
            }
        },
        pushDownVisibleNotification: function(res) {
            /** @type {!Array<?>} */
            var searchPipeline = k.map(function(moment) {
                return moment.updateOffset(res);
            });
            return $.when.apply($, searchPipeline);
        },
        closeNotification: function() {
            /** @type {number} */
            var i = k.indexOf(this);
            if (-1 != i && (k.splice(i, 1), i = k.slice(0, i), i.length)) {
                /** @type {boolean} */
                d = true;
                /** @type {number} */
                var offset = -this.selectors.notificationBody.outerHeight(true);
                /** @type {!Array<?>} */
                i = i.map(function(moment) {
                    return moment.updateOffset(offset);
                });
                $.when.apply($, i).then(function() {
                    /** @type {boolean} */
                    d = false;
                });
            }
            this.selectors.notificationBody.addClass("close slide-out-blur ").one("animationend", function() {
                this.selectors.notificationBody.css({
                    top: ""
                });
                this.selectors.notificationBody.removeClass("open close");
                /** @type {boolean} */
                this.visible = false;
            }.bind(this));
        },
        startOdometer: function(elem) {
            var c = elem.data("earnedPoints");
            var animation = this.options.animation;
            (new Odometer({
                el: elem[0],
                value: animation.odometerStartValue,
                duration: animation.odometerDuration
            })).update(c);
        },
        startProgressBarAnimation: function(i) {
            var globalModules = this.options.data;
            var options = this.options.animation;
            var PostMessageUtilities = i.find(".js-notification-progress-bar-value");
            var modalBg = i.find(".js-notification-progress-bar-points-to-the-next-level");
            /** @type {number} */
            i = i.width() * globalModules.addedPointsMultiplier;
            PostMessageUtilities.delay(options.progressBarDelay).animate({
                width: "+=" + i
            }, options.progressBarDuration);
            modalBg.delay(options.progressBarDelay).animate({
                width: "-=" + i
            }, options.progressBarDuration);
        }
    });
    self.components = self.components || {};
    self.components.global = self.components.global || {};
    self.components.global.GlobalLoyaltyNotification = f;
    /**
     * @param {!Object} name
     * @return {undefined}
     */
    self.components.global.GlobalLoyaltyNotification.init = function(name) {};
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    var elementobject = self.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
        },
        bindEvents: function() {
            this.selectors.document.on("loyalty.get.notifications", this.getNotifications.bind(this));
            this.selectors.document.on("product.addedToCart", this.checkAddedToCartNotification.bind(this));
            this.selectors.document.on("loyaltyReviewSubmitted", this.checkReviewNotification.bind(this));
            this.checkEnrollmentNotification();
            this.checkSocialConnectNotification();
            this.checkOrderConfirmationNotification();
            this.checkCompleteYourProfileNotification();
            this.checkAutoReplenishmentNotification();
            this.checkReviewLastOrderNotification();
            this.checkReviewPreviousOrdersNotification();
            this.checkWatchVideoNotification();
            this.checkReviewProductNotification();
            this.checkProfileCompletedNotification();
            this.checkCartNotification();
        },
        getNotifications: function(name, value) {
            $.ajax({
                type: "GET",
                url: self.urls.getNotifications,
                data: value,
                success: function(name) {
                    if (name.success) {
                        name.notifications.forEach(function(settings) {
                            (new self.components.global.GlobalLoyaltyNotification({
                                element: settings.element,
                                options: {
                                    data: settings.data
                                }
                            })).showNotification();
                        });
                    }
                }
            });
        },
        checkSocialConnectNotification: function() {
            var undefined = self.pageContextObject.currentPage;
            if (!(!self.preferences.isUserEnrolled || "homepage" != undefined && "loyalty" != undefined && "account_show" != undefined && "cart" != undefined)) {
                this.selectors.document.trigger("loyalty.get.notifications", {
                    notificationType: "socialConnect"
                });
            }
        },
        checkEnrollmentNotification: function() {
            var undefined = self.pageContextObject.currentPage;
            if (!("homepage" != undefined && "loyalty" != undefined && "account_show" != undefined && "cart" != undefined)) {
                this.selectors.document.trigger("loyalty.get.notifications", {
                    notificationType: "enrollment"
                });
            }
        },
        checkCompleteYourProfileNotification: function() {
            if ("edit_profile" == self.pageContextObject.currentPage) {
                this.selectors.document.trigger("loyalty.get.notifications", {
                    notificationType: "completeYourProfile"
                });
            }
        },
        checkProfileCompletedNotification: function() {
            var c = self.pageContextObject.currentPage;
            if (!("edit_profile" != c && "address_list" != c)) {
                this.selectors.document.trigger("loyalty.get.notifications", {
                    notificationType: "complete_profile"
                });
            }
        },
        checkAutoReplenishmentNotification: function() {
            if ("auto_replenishment" == self.pageContextObject.currentPage) {
                this.selectors.document.trigger("loyalty.get.notifications", {
                    notificationType: "autoReplenishment"
                });
            }
        },
        checkReviewLastOrderNotification: function() {
            if ("account" == self.pageContextObject.ns) {
                this.selectors.document.trigger("loyalty.get.notifications", {
                    notificationType: "reviewLastOrder"
                });
            }
        },
        checkReviewPreviousOrdersNotification: function() {
            if ("order_history" == self.pageContextObject.currentPage) {
                this.selectors.document.trigger("loyalty.get.notifications", {
                    notificationType: "reviewPreviousOrders"
                });
            }
        },
        checkOrderConfirmationNotification: function() {
            if ("confirmation" == self.pageContextObject.currentPage) {
                this.selectors.document.trigger("loyalty.get.notifications", {
                    notificationType: "earnPointsFromOrder"
                });
            }
        },
        checkWatchVideoNotification: function() {
            if ("howToEarnPoints" == self.pageContextObject.currentSectionID) {
                this.selectors.document.trigger("loyalty.get.notifications", {
                    notificationType: "watchVideo"
                });
            }
        },
        checkReviewProductNotification: function() {
            if ("product" == self.pageContextObject.currentPage) {
                this.selectors.document.trigger("loyalty.get.notifications", {
                    notificationType: "reviewProduct",
                    productID: self.page.currentProduct ? self.page.currentProduct.pid : null
                });
            }
        },
        checkAddedToCartNotification: function() {
            this.selectors.document.trigger("loyalty.get.notifications", {
                notificationType: "earnPointsFromBasket"
            });
        },
        checkCartNotification: function() {
            if (self.pageContextObject && "cart" == self.pageContextObject.currentPage && self.pageContextObject.isCartUpdate) {
                this.selectors.document.trigger("loyalty.get.notifications", {
                    notificationType: "earnPointsFromBasket"
                });
            }
        },
        checkReviewNotification: function() {
            this.selectors.document.trigger("loyalty.get.notifications", {
                notificationType: "productReview"
            });
            this.selectors.document.trigger("updateLoyaltyUserPoints");
        }
    });
    self.components = self.components || {};
    self.components.global = self.components.global || {};
    self.components.global.GlobalLoyaltyNotificationEvents = elementobject;
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @return {?}
     */
    self.components.global.GlobalLoyaltyNotificationEvents.init = function(name, value) {
        return new elementobject(name, value);
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    var Service = self.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
            this.selectors.selectRewardSection = this.selectors.body.find(this.options.classNames.selectRewardSection);
            this.selectors.selectRewardContainer = this.selectors.selectRewardSection.find(this.options.classNames.selectRewardContainer);
            this.selectors.selectRewardButton = this.selectors.selectRewardContainer.find(this.options.classNames.selectRewardButton);
            this.selectors.rewardsContainer = this.selectors.selectRewardSection.find(this.options.classNames.rewardsContainer);
            this.selectors.rewardsCarouselHeading = this.selectors.selectRewardSection.find(this.options.classNames.carouselHeading);
            this.selectors.rewardsQuantity = this.selectors.selectRewardSection.find(this.options.classNames.rewardsQuantity);
            this.selectors.navigationHeader = this.selectors.body.find(".js_navigation");
            this.selectors.mobileNavigation = this.selectors.body.find(".js_loyalty_mobile_nav");
            this.selectors.mobileNavigationInfo = this.selectors.body.find(".js_loyalty_mobile_info");
            this.selectors.elementToScrollReward = this.selectors.body.find(".js_rewards_carousel_container");
            this.selectors.customLoader = this.selectors.body.find(".js_custom_loader");
        },
        getOptions: function() {
            return {
                classNames: {
                    selectRewardSection: ".js_select_fav_reward_section",
                    selectRewardContainer: ".js_select_fav_reward_container",
                    selectRewardButton: ".js_select_fav_reward",
                    rewardsContainer: ".js_rewards_carousel_container",
                    selectButtonOfReward: ".js_rewards_select",
                    chooseAnotherButton: ".js_select_different_reward",
                    carouselHeading: ".js_rewards_carousel_heading",
                    rewardsQuantity: ".js_rewards_quantity"
                }
            };
        },
        bindEvents: function() {
            this.selectors.selectRewardButton.on("click", this.loadRewardCarousel.bind(this));
            this.selectors.document.on("click", this.options.classNames.selectButtonOfReward, this.selectReward.bind(this));
            this.selectors.document.on("click", this.options.classNames.chooseAnotherButton, this.loadRewardCarousel.bind(this));
            this.selectors.document.on("loyaltyRewardRedeemed", this.handleLoyaltyRewardRedeemed.bind(this));
        },
        handleLoyaltyRewardRedeemed: function(isSlidingUp, $cont) {
            if ($cont.hideDashboardButton) {
                var controls = this.selectors.selectRewardContainer;
                var browser = this.selectors.rewardsContainer;
                $.ajax({
                    url: self.urls.loyaltyDashboardRenderFavoriteReward,
                    success: function(name) {
                        controls.html(name);
                        browser.html("");
                    }
                });
            }
        },
        loadRewardCarousel: function(event) {
            event.preventDefault();
            var btn = event.target;
            var controls = this.selectors.rewardsContainer;
            var whapp_html = this.selectors.selectRewardSection;
            var settingsItem = this.selectors.rewardsCarouselHeading;
            var browser = this.selectors.rewardsQuantity;
            if (controls.is(":empty")) {
                var N = this.selectors.selectRewardSection;
                var controls = this.selectors.navigationHeader;
                var rowWithMoreColumns = this.selectors.elementToScrollReward;
                var menuHeight = this.selectors.navigationHeader.outerHeight() + this.selectors.mobileNavigation.outerHeight() + this.selectors.mobileNavigationInfo.outerHeight();
                var w = this;
                this.addCustomLoader();
                $.ajax({
                    url: self.urls.loyaltyRewardsDashboard,
                    method: "GET",
                    success: function(name) {
                        controls.html(name).slick();
                        if (name = controls.find(".slick-slide:not(.slick-cloned)").length) {
                            whapp_html.addClass("open");
                            settingsItem.addClass("open");
                            browser.html(name);
                        }
                        w.removeCustomLoader();
                        if (self.isMobileUserAgent) {
                            $("html, body").animate({
                                scrollTop: rowWithMoreColumns.offset().top - menuHeight
                            }, 500);
                            if ($(btn).hasClass("js_select_different_reward")) {
                                name = controls.find('.slick-slide:not(.slick-cloned)[data-productid="' + btn.dataset.pid + '"]').data("slickIndex");
                                controls.slick("slickGoTo", name);
                            }
                        } else {
                            $("html, body").animate({
                                scrollTop: N.offset().top - controls.height()
                            }, 500);
                        }
                        $(".lazyloaded").trigger("scroll");
                    }
                });
            }
        },
        addCustomLoader: function() {
            this.selectors.customLoader.addClass("js_custom_loader_visible");
        },
        removeCustomLoader: function() {
            this.selectors.customLoader.removeClass("js_custom_loader_visible");
        },
        selectReward: function(el) {
            el.preventDefault();
            var controls = this.selectors.selectRewardContainer;
            var element = this.selectors.rewardsContainer;
            var whapp_html = this.selectors.rewardsCarouselHeading;
            $.ajax({
                url: self.urls.saveFavoriteReward,
                method: "POST",
                data: {
                    pid: el.target.dataset.pid
                },
                success: function(name) {
                    controls.html(name);
                    element.slick("unslick");
                    element.html("");
                    whapp_html.removeClass("open");
                }
            });
        }
    });
    self.components = self.components || {};
    self.components.loyalty = self.components.loyalty || {};
    self.components.loyalty.LoyaltyFavoriteReward = Service;
    /**
     * @param {!Object} name
     * @return {?}
     */
    self.components.loyalty.LoyaltyFavoriteReward.init = function(name) {
        return new Service(name);
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    var elementobject = self.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
            this.selectors.uploadReceiptButton = this.selectors.body.find(this.options.classNames.uploadReceiptButton);
        },
        getOptions: function() {
            return {
                classNames: {
                    uploadReceiptButton: ".js_loyalty_upload_receipt_button"
                }
            };
        },
        bindEvents: function() {
            this.selectors.uploadReceiptButton.on("click", this.openUploadReceiptDialog.bind(this));
        },
        openUploadReceiptDialog: function(event) {
            event.preventDefault();
            self.dialog.open({
                url: self.urls.loyaltyUploadReceipt,
                options: {
                    emptyOnClose: true,
                    dialogClass: "upload-receipt-popup js_upload_receipt_popup c-loyalty-dialog",
                    open: function() {
                        $(".js_upload_receipt_popup").siblings(".ui-widget-overlay").addClass("loyalty-dialog-overlay");
                    }
                },
                method: "GET"
            });
        }
    });
    self.components = self.components || {};
    self.components.loyalty = self.components.loyalty || {};
    self.components.loyalty.LoyaltyReceipt = elementobject;
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @return {?}
     */
    self.components.loyalty.LoyaltyReceipt.init = function(name, value) {
        return new elementobject(name, value);
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @param {!Object} c
     * @return {undefined}
     */
    function show(c) {
        c.closest(".js_rule_tile").removeClass("c-loyalty-how-to-earn-points__item--active").addClass("c-loyalty-how-to-earn-points__item--inactive");
        c.remove();
    }
    var elementobject = self.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
            this.selectors.earnPointsButton = this.selectors.body.find(this.options.classNames.earnPointsButton);
        },
        getOptions: function() {
            return {
                classNames: {
                    earnPointsButton: ".js_loyalty_point_dialog",
                    pointRuleFormClass: ".js_pointrules",
                    socialConnectButton: ".js_loyalty_social_connect",
                    copyLinkButton: ".js_copy_link",
                    linkToCopy: ".js_loyaltyCustomLink"
                }
            };
        },
        bindEvents: function() {
            this.selectors.earnPointsButton.on("click", this.openEarnPointsDialog.bind(this));
            this.selectors.document.on("submit", this.options.classNames.pointRuleFormClass, this.pointRulesUpdateInfo.bind(this));
            this.element.on("click", this.options.classNames.socialConnectButton, this.handleSocialConnect.bind(this));
            this.addSocialConnectListeners();
            this.selectors.document.on("click", this.options.classNames.copyLinkButton, this.copyInviteLink.bind(this));
        },
        openEarnPointsDialog: function(options) {
            var point = $(options.target);
            var key = point.attr("href");
            var device = point.data("rule-type");
            point = point.data("point");
            var editorBody = this.selectors.body;
            var cm = this;
            if (!key || "#" == key) {
                options.preventDefault();
                var $window = this.selectors.window;
                options = {
                    emptyOnClose: true,
                    dialogClass: " js_loyalty_dialog_rule earn-points-dialog c-loyalty-dialog c-loyalty-dialog-rule c-loyalty-dialog-rule--" + device,
                    open: function() {
                        $window.trigger("resize");
                        $(".js_loyalty_dialog_rule").siblings(".ui-widget-overlay").addClass("loyalty-dialog-overlay");
                        if ("complete_profile" == device) {
                            var BidirectionalSubject = editorBody.find(".js_loyalty_dialog_rule").find('input[id$="_country"]');
                            self.util.updateStateOptions(BidirectionalSubject);
                        }
                    },
                    beforeClose: function() {
                        var id = $(this).find(".js-youtube-player").attr("data-video-id");
                        if (id && YT && (id = YT.get("player_" + id))) {
                            id.stopVideo();
                            id.destroy();
                        }
                    },
                    close: function() {
                        cm.removeOverlay();
                    }
                };
                key = self.util.appendParamsToUrl(self.urls.loyaltyEarnPoints, {
                    ruleType: device,
                    point: point
                });
                self.dialog.open({
                    url: key,
                    options: options
                });
            }
        },
        removeOverlay: function() {
            var b = $(".loader");
            if (b.length) {
                b.hide();
            }
        },
        pointRulesUpdateInfo: function(event) {
            event.preventDefault();
            self.progress.show();
            self.validator.init();
            var f = this.element.find(this.options.classNames.pointRuleFormClass);
            event = f.find("input[name='ruleType']").val();
            var back = this.selectors.body.find('[data-rule-type="' + event + '"]');
            this.selectors.customLoader = this.selectors.body.find(".js_custom_loader");
            if (f.valid()) {
                var d2 = self.dialog.create({
                    options: {
                        title: "",
                        dialogClass: "loyalty-rule-confirmation-dialog c-loyalty-dialog-rule"
                    }
                });
                this.addCustomLoader();
                self.ajax.load({
                    target: d2,
                    url: f.attr("action"),
                    type: "POST",
                    data: f.serialize(),
                    callback: function() {
                        d2.dialog("open");
                        $(window).trigger("resize");
                        var type = f.find("input[name='ruleType']").val();
                        $(document).trigger("loyalty.get.notifications", {
                            notificationType: type
                        });
                        if (back.data("rule-disable")) {
                            show(back);
                        }
                        if ("complete_profile" == type) {
                            $(document).trigger("profileCompleteSuccess");
                        }
                        if (!("complete_profile" != type && "invite_friend" != type)) {
                            $(document).trigger("updateLoyaltyUserPoints");
                        }
                    }
                });
            }
        },
        addCustomLoader: function() {
            this.selectors.customLoader.addClass("js_custom_loader_visible");
        },
        handleSocialConnect: function(event) {
            event.preventDefault();
            var parent = $(event.target);
            var name = parent.attr("data-provider");
            gigya.socialize.addConnection({
                provider: name,
                callback: function(name) {
                    if ("OK" == name.status) {
                        parent.addClass("js-" + name + "-connect");
                    }
                }
            });
        },
        addSocialConnectListeners: function() {
            if ("undefined" != typeof gigya) {
                gigya.socialize.addEventHandlers({
                    onConnectionAdded: this.gigyaConnect.bind(this, "added")
                });
            }
        },
        gigyaConnect: function(user, message) {
            var controls = this.selectors.document;
            /** @type {string} */
            var start = ".js-" + message.provider + "-connect";
            user = message.user.identities[message.provider];
            $.ajax({
                type: "POST",
                data: {
                    provider: message.provider,
                    eventName: message.eventName,
                    userId: user && user.providerUID
                },
                url: self.urls.loyaltySocialConnect,
                success: function(name) {
                    if (name.success) {
                        $(document).trigger("loyalty.get.notifications", {
                            notificationType: "socialConnect"
                        });
                        name = controls.find(start);
                        show(name);
                        $(document).trigger("updateLoyaltyUserPoints");
                    } else {
                        self.dialog.open({
                            url: self.util.appendParamToURL(self.urls.pageInclude, "cid", self.preferences.loyaltySocialConnectFailedAsset),
                            options: {
                                closeOnEscape: true,
                                dialogClass: "loyalty-social-connect-error"
                            }
                        });
                    }
                }
            });
        },
        copyInviteLink: function(e) {
            e.preventDefault();
            $(e.target);
            if (navigator.userAgent.match(/ipad|ipod|iphone/i)) {
                e = this.selectors.document.find(this.options.classNames.linkToCopy).last()[0];
                var value = e.contentEditable;
                var readOnly = e.readOnly;
                /** @type {boolean} */
                e.contentEditable = true;
                /** @type {boolean} */
                e.readOnly = true;
                /** @type {(Range|null)} */
                var r = document.createRange();
                r.selectNodeContents(e);
                /** @type {(Selection|null)} */
                var sel = window.getSelection();
                sel.removeAllRanges();
                sel.addRange(r);
                e.setSelectionRange(0, 999999);
                e.contentEditable = value;
                e.readOnly = readOnly;
                document.execCommand("copy");
                e.blur();
            } else {
                this.selectors.document.find(this.options.classNames.linkToCopy).last().select();
                document.execCommand("copy");
            }
        }
    });
    self.components = self.components || {};
    self.components.loyalty = self.components.loyalty || {};
    self.components.loyalty.LoyaltyPointRules = elementobject;
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @return {?}
     */
    self.components.loyalty.LoyaltyPointRules.init = function(name, value) {
        return new elementobject(name, value);
    };
})(window.app = window.app || {}, jQuery);
(function(app, $) {
    /**
     * @return {undefined}
     */
    function initialize() {
        app.ajax.getJson({
            url: app.urls.recordActivity,
            data: {
                eventType: "productReview",
                eventID: app.page.currentProduct.pid,
                uniqueID: "{0}_" + app.page.currentProduct.pid + "_{1}"
            },
            callback: function(name) {
                if (name.success) {
                    that.document.trigger("loyaltyReviewSubmitted");
                }
            }
        });
    }
    /**
     * @param {!Object} device
     * @param {!Object} user
     * @return {undefined}
     */
    function init(device, user) {
        if (!("product" !== app.page.currentPage && "quickview" !== app.page.currentPage)) {
            app.ajax.getJson({
                url: app.urls.recordActivity,
                data: {
                    eventType: (user && user.providers || device.data && device.data.service) + "Share"
                }
            });
        }
    }
    /**
     * @return {undefined}
     */
    function g() {
        that.document.on("review_submitted", initialize);
        that.document.on("socialItemShared", init);
        if ("undefined" !== typeof $BV) {
            $BV.configure("global", {
                events: {
                    submissionSubmitted: function(options) {
                        if ("review" == options.contentType) {
                            initialize();
                        }
                    }
                }
            });
        }
        if ("gigya" === app.preferences.shareProvider) {
            that.document.on("gigya.itemShared", init);
        }
        if ("addthis" === app.preferences.shareProvider) {
            addthis.addEventListener("addthis.menu.share", init);
        }
    }
    var that = {};
    app.components = app.components || {};
    app.components.product = app.components.product || {};
    app.components.product.loyalty = {
        init: function() {
            that.document = $(document);
            g();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @return {undefined}
     */
    function update() {
        target = $(document);
        title = $("body");
        wrapper = $("#header_customer_service");
        $(".header");
        schema = $(".account_navigation_list_item");
        menu = $(".sticky_header");
        oldBuf = self.isMobileUserAgent;
        p = $(".search_trigger");
        m = $(".main_navigation_wrapper .search_wrapper");
        $(".navigation");
        s = $(".main_navigation_wrapper .js_header_search");
        o = $(".header_promo_slot");
        bindEvents();
        a = {
            accountNavigation: {
                control: $cacheHeaderNavigation.accountNavigationLink,
                action: f,
                containerClass: "account_header_area_content"
            },
            countrySelector: {
                control: $cacheHeaderNavigation.countrySelector,
                action: self.page.urls.countrySelectorUrl,
                containerClass: ""
            },
            customerService: {
                control: $cacheHeaderNavigation.customerService,
                action: self.page.urls.customerServiceUrl,
                containerClass: "customer_service"
            },
            newsletterSubscribe: {
                control: $cacheHeaderNavigation.newsletterSubscribeLink,
                action: self.page.urls.newsletterSubscribeUrl,
                containerClass: ""
            },
            advantagesHeader: {
                control: $cacheHeaderNavigation.advantagesHeader,
                action: self.page.urls.advantagesHeader,
                containerClass: ""
            }
        };
    }
    /**
     * @return {undefined}
     */
    function init() {
        var content;
        for (content in a) {
            render(content);
        }
        target.on("click", ".close_icon", function(params, canCreateDiscussions) {
            params = $(this).closest(".js_headerSection");
            if (params.length) {
                handler(params, false);
            }
        });
        target.on("mouseleave", ".js_headerSection", function(jEvent, a) {
            a = $(this);
            if (a.length && !$(jEvent.target).is("input")) {
                handler(a, false);
            }
        });
        target.on("mouseleave", ".js_util_nav_link, .js_account_nav_link, .account_navigation_link", function(b, canCreateDiscussions) {
            var terms = $(".customer-service__wrapper--open");
            setTimeout(function() {
                if (!(0 < terms.length && 0 < terms.filter(":hover").length)) {
                    handler(terms, false);
                }
            }, 10);
        });
        if (self.isMobileUserAgent) {
            initPreviewDiffLinks();
        }
        if (oldBuf) {
            $cacheMobileNavigator.searchClose.on("click", function() {
                $cacheMobileNavigator.searchInput.toggleClass("show");
            });
        }
        $(".navigation .level_1_list_item").hover(function() {
            var $sharepreview = $(this);
            if ($sharepreview.find(".level_2_list").length) {
                $sharepreview.find(".level_1_list_item_link").addClass("arrow");
            }
        }, function() {
            $(this).find(".level_1_list_item_link").removeClass("arrow");
        });
        p.on("click", ".search_link", function(event) {
            event.preventDefault();
            s.toggleClass("header-search--expanded");
        });
        target.on("click touchstart", function(b) {
            b = $(b.target).parents();
            if (!(b.hasClass("search_trigger") || b.hasClass("search_wrapper"))) {
                if (p.hasClass("opened")) {
                    m.stop().slideUp("slow", function() {
                        p.removeClass("opened");
                        m.find("#q").blur();
                        m.removeAttr("style");
                    });
                }
            }
        });
        if ("isTabletUserAgent" in self && self.isTabletUserAgent) {
            for (content in $cacheHeaderNavigation.accountNavigationUsername.removeAttr("href"), $cacheHeaderNavigation.accountNavigationUsername.addClass("account_navigation_link"), update(), a) {
                render(content);
            }
        }
        $(document).on("accountLogin.replaceHeaderSuccess", function() {
            bindEvents();
            $("#header_customer_service").empty();
            f.call({
                accountLogin: "success"
            });
            /** @type {boolean} */
            self.isUserAuthenticated = true;
        });
        content = $(".account_navigation_list .user_name");
        if (content.length) {
            var total_pageviews_raw = "none" != content.css("maxWidth") ? content.css("maxWidth") : 0;
            if (0 != total_pageviews_raw) {
                content.html(append(content.html(), parseInt(parseInt(total_pageviews_raw) / 10)));
            }
        }
        $(window).resize(function() {
            cellDblClicked();
        });
    }
    /**
     * @return {undefined}
     */
    function bindEvents() {
        $cacheHeaderNavigation = {
            closeButton: $("#close_button"),
            countrySelector: $("#country_selector"),
            customerService: $("#customer_service"),
            storeLocator: $("#store_locator"),
            newsletterSubscribeLink: $("#newsletter_subscribe_link"),
            accountNavigationLink: $(".account_navigation_link"),
            customerServiceLink: $("#customer_service"),
            targetContainer: $("#header_customer_service"),
            accountNavigationUsername: $(".account_navigation_list").find("a.user_name"),
            advantagesHeader: $("#advantages_header")
        };
        $cacheMobileNavigator = {
            countrySelector: $(".footer_country_selector"),
            countrySelectorContinents: $(".footer_country_selector_continents"),
            countrySelectorItems: $(".footer_country_selector_items"),
            countrySelectorContinentsAndItems: $(".footer_country_selector_continents, .footer_country_selector_items"),
            countrySelectorBack: $(".footer_country_selector_back"),
            searchClose: $(".search_icon"),
            searchInput: $("#search")
        };
    }
    /**
     * @param {string} i
     * @return {undefined}
     */
    function render(i) {
        var args = a[i];
        var obj = "control" in args && args.control;
        args = "action" in args ? args.action : obj.attr("href");
        if (obj && obj.length && args) {
            obj.off("mouseover sectionFocus").on("mouseover sectionFocus", void 0, {
                control: obj,
                action: args,
                sectionName: i
            }, function(settings, data) {
                if (data = data || settings.data) {
                    var ret = $cacheHeaderNavigation.targetContainer.find(".js_" + data.sectionName);
                    if (!ret.length) {
                        ret = $(document.createElement("div")).attr({
                            "class": "customer-service__wrapper customer-service__wrapper--" + data.sectionName + " js_headerSection js_" + data.sectionName
                        }).appendTo($cacheHeaderNavigation.targetContainer);
                    } else {
                        if (ret.hasClass("customer-service__wrapper--open")) {
                            return true;
                        }
                    }
                    settings.preventDefault();
                    target.trigger("navigation.click." + i);
                    build(data.control, data.action, ret);
                }
            });
            if (-1 !== location.href.indexOf("popupNavigation=true")) {
                $cacheHeaderNavigation.accountNavigationLink.trigger("click");
            }
        }
    }
    /**
     * @param {!Object} b
     * @param {number} i
     * @return {undefined}
     */
    function toggle(b, i) {
        var loadingOffsetHeight;
        loadingOffsetHeight = $(window).outerWidth();
        var tracksToRemove = 70 < i.outerWidth() ? i.outerWidth() : 580;
        /** @type {number} */
        i = b.offset().left - 200;
        var oc = o ? o.outerHeight() : 0;
        var datatype = menu ? menu.outerHeight() : 0;
        /** @type {number} */
        var collector = b.hasClass("account-nav__icon") ? b.outerHeight() / 2 : 0;
        var p = wrapper.children(".customer-service__wrapper--open");
        if (0 > i) {
            /** @type {number} */
            i = 20;
        } else {
            if (i + tracksToRemove + 20 >= loadingOffsetHeight) {
                /** @type {number} */
                i = loadingOffsetHeight - tracksToRemove - 20;
            }
        }
        loadingOffsetHeight = oc + datatype + collector;
        wrapper.offset({
            top: loadingOffsetHeight,
            left: i
        });
        if (0 == p.find(".login_iframe").length) {
            wrapper.find(".login_iframe").css("visibility", "inherit");
        }
        if (0 == p.children(".arrowPointer").length) {
            $(document.createElement("div")).attr({
                "class": "arrowPointer"
            }).appendTo(p);
        }
        p.find(".arrowPointer").offset({
            top: loadingOffsetHeight - 10,
            left: b.offset().left + 20
        });
    }
    /**
     * @return {undefined}
     */
    function initPreviewDiffLinks() {
        $cacheMobileNavigator.countrySelector.bind("click", function() {
            if ($cacheMobileNavigator.countrySelectorItems.hasClass("show")) {
                $cacheMobileNavigator.countrySelectorItems.removeClass("show");
            } else {
                $(this).toggleClass("selected_tab");
                $cacheMobileNavigator.countrySelectorContinents.toggleClass("show");
            }
        });
        $(".footer_country_selector_continents a").bind("click", function() {
            $cacheMobileNavigator.countrySelectorContinents.toggleClass("show");
            $('.footer_country_selector_items[data-continent="' + $(this).attr("id") + '"]').toggleClass("show");
        });
        $cacheMobileNavigator.countrySelectorBack.bind("click", function() {
            $cacheMobileNavigator.countrySelectorItems.removeClass("show");
            $cacheMobileNavigator.countrySelectorContinents.addClass("show");
        });
        $(document).on("ready", function() {
            var $sharepreview = $(".navigation");
            $sharepreview.find(".header_menu_info").hide();
            $sharepreview.find(".custom_navigation_slot_1").hide();
            $sharepreview.find(".custom_navigation_slot_2").hide();
        });
    }
    /**
     * @param {!Object} item
     * @param {string} map
     * @param {undefined} value
     * @return {?}
     */
    function build(item, map, value) {
        var list = $(item);
        var data = value || wrapper;
        if (data) {
            var m = data.hasClass("customer-service__wrapper--open");
            if (data && data.length && !data.is(":empty")) {
                return toggle(item, value), handler(data, !m, list);
            }
            $(".customer-service__loader--active").removeClass("customer-service__loader--active");
            list.addClass("customer-service__loader--active");
            if ("function" === typeof map) {
                return map(data, list);
            }
            self.ajax.load({
                url: map,
                target: data,
                callback: function() {
                    if (!self.preferences.isUserEnrolled) {
                        $cacheHeaderNavigation.targetContainer.find(".js_loyalty_content").removeClass("hidden");
                    }
                    data.addClass("customer-service__wrapper--open");
                    list.removeClass("customer-service__loader--active");
                    handler(data, true, list);
                    target.trigger("accountLogin.refresh");
                    self.validator.init();
                    self.components.global.newsletter.reload();
                    data.find(".close_icon").focus();
                    if (lpTag && "customer_service" === item.attr("id")) {
                        lpTag.newPage(window.location.href, {
                            section: [lpTag.section],
                            sdes: [],
                            taglets: {
                                rendererStub: {
                                    divIdsToKeep: {
                                        LPChatCustomerService: true,
                                        LPChatHeaderLink: true,
                                        LPChatFooterGlobal: true,
                                        LPChatFooterLink: true
                                    }
                                }
                            }
                        });
                    }
                    toggle(item, value);
                }
            });
        }
    }
    /**
     * @return {undefined}
     */
    function cellDblClicked() {
        if ($("body").hasClass("popup_open_hook")) {
            if ($(window).width() < menu.find(".content").width()) {
                menu.addClass("sticky_toggle_width");
            }
            if ($(window).height() < menu.find(".content").height()) {
                menu.height($(window).height() - menu.find(".header-top").height());
            }
        } else {
            menu.removeClass("sticky_toggle_width");
            menu.css("height", "");
        }
    }
    /**
     * @param {!Object} obj
     * @param {boolean} data
     * @param {!Object} e
     * @return {undefined}
     */
    function handler(obj, data, e) {
        wrapper.children().removeClass("customer-service__wrapper--open");
        $(".open").removeClass("open");
        $(".selected_tab").removeClass("selected_tab");
        if (self.isMobileUserAgent) {
            menu.removeClass("not_sticky");
        }
        title.toggleClass("popup_open_hook", !!data);
        if (data && (obj.addClass("customer-service__wrapper--open"), e.removeClass("customer-service__loader--active"), e && e.length && (e.addClass("open"), 0 < e.parent("li").length ? e.parent("li").addClass("selected_tab") : e.closest("li").addClass("selected_tab")), self.isMobileUserAgent && menu.addClass("not_sticky"), self.isMobileUserAgent && $("html, body").animate({
                scrollTop: obj.offset().top
            }, 500), self.isMobileUserAgent)) {
            wrapper.off("touchstart").on("touchstart", function(event) {
                var d = $(event.target);
                if (0 < d.length) {
                    var j;
                    for (j in a) {
                        var container = a[j].containerClass;
                        if (container && d.hasClass(container)) {
                            event.preventDefault();
                            handler(obj, false, e);
                            break;
                        }
                    }
                }
            });
        }
        cellDblClicked();
    }
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @return {?}
     */
    function f(name, value) {
        /**
         * @return {undefined}
         */
        var test = function() {
            target.trigger("globalLogin.appendIframe", {
                target: name,
                redirect: callback,
                iframeType: "loginRegistration",
                customParams: {
                    customCssFile: app_ysl.urls.loginIframeCustomCssFile,
                    customBodyClass: "header_top"
                },
                onIframeLoaded: function() {
                    handler(name, true, value);
                    var names = name.find(".close_icon");
                    names = names.length ? names : $(document.createElement("span")).attr({
                        "class": "close_icon"
                    }).appendTo(name);
                    if (self.isMobileUserAgent) {
                        pm.bind("loginPopup", function(d) {
                            if (d && (d = JSON.parse(JSON.stringify(d)), d.height)) {
                                var layer = name.find("iframe");
                                var index = layer.attr("style");
                                /** @type {string} */
                                index = index + ("height: " + (d.height + 60) + "px !important;");
                                layer.attr("style", index);
                            }
                        });
                        name.off("touchstart").on("touchstart", function(b) {
                            handler(name, false, value);
                        });
                    }
                }
            });
            toggle(value, name);
        };
        /**
         * @return {undefined}
         */
        var cb = function() {
            self.ajax.load({
                url: self.page.urls.accountNavigationUrl,
                callback: function(key) {
                    if (-1 !== key.indexOf("_login_username_")) {
                        test();
                    } else {
                        name.empty().html(key).trigger("update", key);
                        if ("orderGrooveEnabled" in self.resources && self.resources.orderGrooveEnabled) {
                            name.find("#autoReplenishmentLink").show();
                        }
                        handler(name, true, value);
                        target.trigger("accountLogin.refresh");
                        self.validator.init();
                        self.components.global.newsletter.reload();
                        toggle(value, name);
                    }
                }
            });
        };
        /**
         * @return {undefined}
         */
        var get = function() {
            self.ajax.load({
                url: self.page.urls.navigationHeaderTop,
                callback: function(key) {
                    menu.find(".header-top").eq(0).replaceWith(key);
                    self.componentsMgr.loadComponent("global.minicart", {
                        updateMinicart: true
                    });
                    update();
                    schema.addClass("selected_tab");
                    init();
                    toggle($cacheHeaderNavigation.accountNavigationLink, name);
                }
            });
        };
        /**
         * @return {undefined}
         */
        var callback = function() {
            if ("currentPage" in self.page && "cart" == self.page.currentPage) {
                self.page.refresh();
            }
            if ("currentPage" in self.page && "resset_password" == self.page.currentPage) {
                self.page.redirect(self.urls.loginRedirectUrl);
            } else {
                if ("ns" in self.page && "account" == self.page.ns) {
                    self.page.refresh();
                }
            }
            cb();
            get();
        };
        if (self.isUserAuthenticated && !("accountLogin" in this)) {
            return cb();
        }
        if ("accountLogin" in this && "success" == this.accountLogin) {
            get();
        } else {
            test();
        }
    }
    /**
     * @param {string} i
     * @param {string} w
     * @return {?}
     */
    function append(i, w) {
        /** @type {!Array} */
        var result = [""];
        var arr = i.split(" ");
        var r = arr[0];
        /** @type {number} */
        var j = 1;
        for (; 4 > j; j++) {
            if (i = w, r = r.replace(result[j - 1], ""), r.length <= i) {
                result[j] = r;
                break;
            } else {
                if (r.length < i + 2) {
                    i--;
                }
                result[j] = r.substring(0, i);
            }
        }
        result.splice(0, 1);
        return result.join("-<br/>") + " " + arr[1];
    }
    var target;
    var title;
    var wrapper;
    var schema;
    var menu;
    var p;
    var m;
    var s;
    var o;
    o = s = m = p = menu = schema = wrapper = title = target = void 0;
    /** @type {boolean} */
    var oldBuf = true;
    var a = {};
    self.components = self.components || {};
    self.components.header = self.components.header || {};
    self.components.header.navigation = {
        init: function(name) {
            update();
            init();
        },
        resizingMenu: function() {
            var $hnavbox = $(".level_1_list");
            var d = $hnavbox.width();
            $listItems = $hnavbox.find(".level_1_list_item:not(.mobile_display)");
            $separators = $hnavbox.find(".separator");
            /** @type {number} */
            paddingVal = separatorsWidth = menuItemsWidth = 0;
            $listItems.each(function() {
                menuItemsWidth = menuItemsWidth + $(this).width();
            });
            $separators.each(function() {
                separatorsWidth = separatorsWidth + $(this).width();
            });
            /** @type {number} */
            paddingVal = (d - menuItemsWidth - separatorsWidth) / $separators.length / 2;
            /** @type {string} */
            paddingVal = parseInt(paddingVal) + "px";
            $separators.css({
                "padding-left": paddingVal,
                "padding-right": paddingVal
            });
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @param {!Object} data
     * @param {!Object} e
     * @param {number} element
     * @return {?}
     */
    function init(data, e, element) {
        data = $.extend({}, params, data);
        if (void 0 != element) {
            data.$element = $(element);
        } else {
            e.preventDefault();
            data.$element = $(e.currentTarget);
        }
        data.videoId = data.videoId || data.$element.data("videoId");
        if (!data.videoId) {
            throw Error("The videoId of the player is missing!");
        }
        if (data.type === action.YOUTUBE) {
            if (window.YT) {
                data = play(data);
            } else {
                /** @type {!Object} */
                id = data;
                /** @type {!Element} */
                data = document.createElement("script");
                /** @type {string} */
                data.src = "//youtube.com/iframe_api";
                /** @type {!Element} */
                e = document.getElementsByTagName("script")[0];
                e.parentNode.insertBefore(data, e);
                data = void 0;
            }
        } else {
            data = void 0;
        }
        return data;
    }
    /**
     * @param {!Object} options
     * @return {?}
     */
    function play(options) {
        /** @type {string} */
        var id = "player_" + options.videoId;
        var player = YT.get(id);
        if (player) {
            return player.playVideo(), player;
        }
        if (options.$element) {
            options.$element.attr("id", id);
        }
        player = {
            autoplay: options.autoplay || options.$element.data("autoplay"),
            loop: options.loop,
            controls: options.controls,
            iv_load_policy: options.policy,
            rel: options.rel,
            showinfo: options.showinfo,
            disablekb: options.disablekb,
            wmode: options.wmode,
            enablejsapi: options.enablejsapi,
            mute: options.mute || options.$element.data("mute")
        };
        if (player.loop) {
            player.playlist = options.videoId;
        }
        return new YT.Player(id, {
            width: options.width,
            height: options.height,
            videoId: options.videoId,
            events: {
                onReady: onLoad.bind(this, options),
                onStateChange: onStateChange.bind(this, options)
            },
            playerVars: player
        });
    }
    /**
     * @param {!Object} data
     * @param {undefined} key
     * @return {undefined}
     */
    function onLoad(data, key) {
        dom.trigger("video.player.ready", data.type, data.videoId);
        data.onReady(data, key);
    }
    /**
     * @param {undefined} e
     * @param {!Object} c
     * @return {undefined}
     */
    function onStateChange(e, c) {
        e.onStateChange(e, c);
        switch (c.data) {
            case YT.PlayerState.ENDED:
                callback(c.target, e);
                break;
            case YT.PlayerState.PLAYING:
                log(c.target, e);
                break;
            case YT.PlayerState.PAUSED:
                resolve(c.target, e);
        }
    }
    /**
     * @param {!Object} name
     * @param {!Object} o
     * @return {undefined}
     */
    function log(name, o) {
        o.onPlay.apply(this, arguments);
        dom.trigger("video.player.play", {
            options: o,
            player: name
        });
    }
    /**
     * @param {!Object} index
     * @param {!Object} options
     * @return {undefined}
     */
    function callback(index, options) {
        options.onStop.apply(this, arguments);
        dom.trigger("video.player.stop", {
            options: options,
            player: index
        });
    }
    /**
     * @param {!Object} player
     * @param {!Object} options
     * @return {undefined}
     */
    function resolve(player, options) {
        options.onPause.apply(this, arguments);
        dom.trigger("video.player.pause", {
            options: options,
            player: player
        });
    }
    /**
     * @param {!Object} text
     * @param {!Array} options
     * @return {undefined}
     */
    function link(text, options) {
        $imagesToLoad.each(function(token, p) {
            token = $(p).find(text);
            if (context.util.isElementInViewport(p)) {
                init(options, null, token);
            } else {
                if (window.YT) {
                    p = token.data("video-id");
                    if ((p = YT.get("player_" + p)) && "function" == typeof p.pauseVideo) {
                        p.pauseVideo();
                    }
                }
            }
        });
    }
    var action = {
        YOUTUBE: "youtube",
        YOUKU: "youku"
    };
    var params = {
        type: action.YOUTUBE,
        width: "100%",
        height: "100%",
        videoId: null,
        autoplay: 1,
        loop: 1,
        controls: 1,
        policy: 3,
        rel: 0,
        showinfo: 0,
        disablekb: 1,
        wmode: "transparent",
        enablejsapi: 1,
        mute: 0,
        onReady: $.noop,
        onPlay: $.noop,
        onStop: $.noop,
        onPause: $.noop,
        onStateChange: $.noop
    };
    /** @type {boolean} */
    var v = false;
    /** @type {null} */
    var id = null;
    var dom;
    var $window;
    var $imagesToLoad;
    /**
     * @return {undefined}
     */
    window.onYouTubePlayerAPIReady = function() {
        var theme;
        if (id) {
            theme = play(id);
            /** @type {null} */
            id = null;
        }
        $(document).trigger("video.youtube.api.ready", theme);
    };
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.video = {
        init: function(name, value) {
            if (!v) {
                value = $.extend({}, params, value);
                dom = $(document);
                $window = $(window);
                $imagesToLoad = $(name).filter('[data-autoplay="1"]').parent();
                dom.on("click", name, init.bind(null, value));
                link(name, value);
                if ($imagesToLoad.length) {
                    $window.on("scroll", _.debounce(link.bind(null, name, value), 200));
                }
                /** @type {boolean} */
                v = true;
            }
        },
        create: init
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    var elementobject = self.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
            this.selectors.loyaltyVideosWatched = this.selectors.body.find(".js_video_details");
        },
        getOptions: function() {
            return {
                classNames: {}
            };
        },
        bindEvents: function() {
            this.initializeVideosWatched();
        },
        initializeVideosWatched: function() {
            this.selectors.loyaltyVideosWatched.each(function() {
                var $sharepreview = $(this);
                var video_id = $(this).attr("data-video-id");
                $.getJSON("https://www.googleapis.com/youtube/v3/videos?id=" + video_id + "&part=contentDetails,snippet,statistics&key=" + self.preferences.loyaltyYoutubeKey).then(function(c) {
                    var e = c.items[0].snippet.title;
                    var distSize;
                    distSize = c.items[0].statistics.viewCount;
                    distSize = 1E9 <= distSize ? (distSize / 1E9).toFixed(1).replace(/\.0$/, "") + " G" : 1E6 <= distSize ? (distSize / 1E6).toFixed(1).replace(/\.0$/, "") + " M" : 1E3 <= distSize ? (distSize / 1E3).toFixed(1).replace(/\.0$/, "") + " K" : distSize;
                    c = c.items[0].contentDetails.duration.match(/PT((\d+)M)*((\d+)S)*/);
                    var month = c[2] ? c[2] : "0";
                    /** @type {string} */
                    month = month + ":";
                    month = c[4] ? month + (2 == c[4].length ? c[4] : "0" + c[4]) : month + "00";
                    /** @type {string} */
                    month = month + (" " + self.resources.LOYALTY_ACTIVITIES_VIDEOS_MIN);
                    $sharepreview.find(".js_video_title").text(e);
                    $sharepreview.find(".js_video_duration").text(month);
                    $sharepreview.find(".js_video_views").text(distSize + " " + self.resources.LOYALTY_ACTIVITIES_VIDEOS_VIEWS);
                });
            });
        }
    });
    self.components = self.components || {};
    self.components.loyalty = self.components.loyalty || {};
    self.components.loyalty.LoyaltyActivitiesVideo = elementobject;
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @return {?}
     */
    self.components.loyalty.LoyaltyActivitiesVideo.init = function(name, value) {
        return new elementobject(name, value);
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    var Service = self.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
            this.selectors.loyaltyActivitiesNextPageLoader = this.selectors.body.find(".js_loyalty_activities_next_page_loader");
            this.selectors.loyaltyActivitiesContainer = this.selectors.body.find(".js_loyalty_activities_container");
            this.selectors.loyaltyActivitiesLoadMoreLink = this.selectors.loyaltyActivitiesContainer.find(".js_loyalty_activities_loadmore_events");
        },
        initState: function() {
            /** @type {boolean} */
            this.state.loadingAllowedFlag = true;
        },
        bindEvents: function() {
            this.selectors.document.on("scroll", this.checkIfLoaderInView.bind(this));
        },
        reInitializeLoaderAndLink: function() {
            this.selectors.loyaltyActivitiesNextPageLoader = this.selectors.loyaltyActivitiesContainer.find(".js_loyalty_activities_next_page_loader");
            this.selectors.loyaltyActivitiesLoadMoreLink = this.selectors.loyaltyActivitiesContainer.find(".js_loyalty_activities_loadmore_events");
            /** @type {boolean} */
            this.state.loadingAllowedFlag = true;
        },
        checkIfLoaderInView: function() {
            if (this.selectors.loyaltyActivitiesNextPageLoader.length && self.util.isElementInViewport(this.selectors.loyaltyActivitiesNextPageLoader[0]) && this.state.loadingAllowedFlag) {
                /** @type {boolean} */
                this.state.loadingAllowedFlag = false;
                var delete_url = this.selectors.loyaltyActivitiesLoadMoreLink.attr("href");
                if (delete_url) {
                    var g = this;
                    var controls = this.selectors.loyaltyActivitiesContainer;
                    var e = controls.find(".js_loyalty_activities_list");
                    var otweets = controls.find(".js_loyalty_activities_loadmore_events");
                    var exMap = controls.find(".js_loyalty_activities_next_page_loader");
                    $.ajax({
                        type: "GET",
                        url: delete_url,
                        success: function(name) {
                            e.append(name);
                            otweets.remove();
                            otweets = controls.find(".js_loyalty_activities_loadmore_events");
                            exMap.remove();
                            self.components.global.slick.init();
                            if (otweets.length) {
                                g.reInitializeLoaderAndLink();
                            }
                            self.components.loyalty.LoyaltyActivitiesVideo.init({
                                element: "body"
                            });
                            self.components.global.video.init();
                        },
                        error: function() {
                            g.reInitializeLoaderAndLink();
                        }
                    });
                }
            }
        }
    });
    self.components = self.components || {};
    self.components.loyalty = self.components.loyalty || {};
    self.components.loyalty.LoyaltyActivitiesLoadMore = Service;
    /**
     * @param {!Object} name
     * @return {?}
     */
    self.components.loyalty.LoyaltyActivitiesLoadMore.init = function(name) {
        return new Service(name);
    };
})(window.app = window.app || {}, jQuery);
(function(F, $) {
    var elementobject = F.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
            this.selectors.loyaltyAccountNavigation = this.selectors.body.find(".js-loyalty-account-navigation");
            this.selectors.loyaltyAccountNavigationLinks = this.selectors.loyaltyAccountNavigation.find(".js-loyalty-account-navigation-link");
            this.selectors.loyaltyOnSidebarWrapper = this.selectors.body.find(".js_loyalty_on_sidebar_wrapper");
        },
        updateAccountEntries: function() {
            this.selectors.loyaltyAccountNavigationLinks.each(this.detectActiveMenuEntry);
        },
        detectActiveMenuEntry: function() {
            var d = $(this);
            var id = $(d).data("navigationFolder") || $(d).data("navigationItem");
            if (F.pageContextObject.currentFolder && F.pageContextObject.currentFolder === id || F.pageContextObject.currentSectionID && F.pageContextObject.currentSectionID === id) {
                d.addClass("c-loyalty-account__link--light");
            }
        },
        bindEvents: function() {
            this.updateAccountEntries();
            this.selectors.document.on("userLoyaltyInformationUpdated", this.updateSidebarLoyaltyUserPoints.bind(this));
        },
        updateSidebarLoyaltyUserPoints: function(r, load) {
            r = this.selectors.loyaltyOnSidebarWrapper.find(".js_loyalty_sidebar_current_points");
            if (r.length) {
                r.text(load.result.data.currentPointsText);
            }
            r = this.selectors.loyaltyOnSidebarWrapper.find(".js_loyalty_sidebar_next_tier_distance");
            if (r.length) {
                r.text(load.result.data.nextTierDistanceText);
            }
            r = this.selectors.loyaltyOnSidebarWrapper.find(".js_loyalty_sidebar_progress_bar_first");
            if (r.length && r.hasClass("js_safe_to_replace")) {
                r.each(function() {
                    /** @type {string} */
                    $(this)[0].style.width = load.result.data.progressBarPercentage + "%";
                });
            }
            r = this.selectors.loyaltyOnSidebarWrapper.find(".js_loyalty_sidebar_progress_bar_second");
            if (r.length && r.hasClass("js_safe_to_replace")) {
                r.each(function() {
                    /** @type {string} */
                    $(this)[0].style.width = 100 - load.result.data.progressBarPercentage + "%";
                });
            }
        }
    });
    F.components = F.components || {};
    F.components.loyalty = F.components.loyalty || {};
    F.components.loyalty.LoyaltyAccountNavigation = elementobject;
    /**
     * @param {!Object} name
     * @param {!Function} value
     * @return {?}
     */
    F.components.loyalty.LoyaltyAccountNavigation.init = function(name, value) {
        return new elementobject(name, value);
    };
})(window.app = window.app || {}, jQuery);
(function(F, $) {
    var Service = F.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
            this.selectors.loyaltyCustomerPointsContainer = this.selectors.body.find(".js_loyalty_user_balance_points");
            this.selectors.loyaltyRedeemOrLearnMoreSections = this.element.find(".js_rewards_redeem_button");
        },
        afterInit: function() {
            var maxXaxisForCircle = this.selectors.loyaltyCustomerPointsContainer.data("points-value");
            this.selectors.loyaltyRedeemOrLearnMoreSections.each(function() {
                var $sliderWithBarAndHighlight = $(this);
                var newXaxisForCircle = $sliderWithBarAndHighlight.data("points-value");
                if (parseInt(newXaxisForCircle, 10) > parseInt(maxXaxisForCircle, 10)) {
                    $sliderWithBarAndHighlight.find(".js_rewardtile_learn_button").removeClass("hidden");
                    $sliderWithBarAndHighlight.find(".js_rewardtile_redeem_button").removeClass("hidden").addClass("c-button--disabled");
                } else {
                    $sliderWithBarAndHighlight.find(".js_rewardtile_redeem_button").removeClass("hidden");
                }
            });
        }
    });
    F.components = F.components || {};
    F.components.loyalty = F.components.loyalty || {};
    F.components.loyalty.LoyaltyRewardTile = Service;
    /**
     * @param {!Object} name
     * @return {?}
     */
    F.components.loyalty.LoyaltyRewardTile.init = function(name) {
        return new Service(name);
    };
})(window.app = window.app || {}, jQuery);
(function(options, $) {
    var Service = options.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
            this.selectors.showLoginFormBtn = this.selectors.body.find(".js_show_login_form");
            this.selectors.loginFormContainer = this.selectors.body.find(".js_login_form_container");
            this.selectors.showRewardsCatalogBtn = this.selectors.body.find(".js_show_rewards_catalog");
            this.selectors.hideRewardsCatalogBtn = this.selectors.body.find(".js_hide_rewards_catalog");
            this.selectors.rewardsCatalogContainer = this.selectors.body.find(".js_rewards_catalog_container");
            this.selectors.widgetBannerFormfield = this.selectors.body.find(".js_cart_loyaly_widget_banner_formfield");
            this.selectors.rewardTileRedeemBtn = this.selectors.body.find(".js_rewardtile_redeem_button");
            this.selectors.bannerVaultWrapper = this.selectors.body.find("[data-js-banner-vaultselection-wrapper]");
        },
        bindEvents: function() {
            this.selectors.showLoginFormBtn.on("click", this.showLoginForm.bind(this));
            this.selectors.showRewardsCatalogBtn.on("click", this.showRewardsCatalog.bind(this));
            this.selectors.hideRewardsCatalogBtn.on("click", this.hideRewardsCatalog.bind(this));
            this.selectors.document.on("loyaltyRewardRedeemed", this.handleLoyaltyRewardRedeemed.bind(this));
            this.selectors.rewardTileRedeemBtn.on("click", this.showRewardDetails.bind(this));
            options.components.loyalty.LoyaltyRewardTile.init({
                element: "body"
            });
        },
        handleLoyaltyRewardRedeemed: function(appURI, SMessage) {
            appURI = options.util.appendParamsToUrl(options.urls.cartShow, {
                rewardAddedToCart: SMessage.success
            });
            /** @type {string} */
            window.location = appURI;
        },
        showLoginForm: function() {
            var me = this;
            options.ajax.load({
                url: options.urls.getCartWidgetLoginForm,
                callback: function(name) {
                    me.selectors.loginFormContainer.html(name);
                    me.selectors.loginFormContainer.show();
                    me.selectors.widgetBannerFormfield.hide();
                    me.selectors.loginForm = me.selectors.body.find("#loyalty_cart_widget_login_form");
                    me.selectors.loginForm.on("submit", me.doLogin.bind(me));
                    options.validator.init();
                    options.deferred.init();
                }
            });
        },
        doLogin: function(e) {
            e.preventDefault();
            var _ = this;
            e = $(e.target);
            if (e.valid()) {
                $.ajax({
                    url: options.urls.processLoginUrl,
                    data: e.serialize(),
                    method: "POST",
                    success: function(name, value, x) {
                        name = name || {};
                        value = _.getJSONData(name);
                        if (void 0 !== value) {
                            if (value.authenticated) {
                                options.page.refresh();
                            } else {
                                _.selectors.errorMessage = _.selectors.loginFormContainer.find(".js_error_message");
                                _.selectors.errorMessage.html(value.errorMessage);
                            }
                        } else {
                            if (options.ajax.isHtmlResponse(x)) {
                                pm({
                                    target: window.parent,
                                    type: "accountLogin.botDetectionVerification",
                                    data: name
                                });
                            }
                        }
                    }
                });
            }
        },
        showRewardsCatalog: function() {
            var event = this;
            event.clearBannerVaultData();
            options.ajax.load({
                url: options.util.appendParamsToUrl(options.urls.getCartWidgetRewardsCatalog, {
                    rewardTypeRefinement: options.preferences.loyaltyCartWidgetRewardsCatalogRefinementValue
                }),
                callback: function(name) {
                    event.selectors.rewardsCatalogContainer.html(name);
                    event.selectors.rewardsCatalogContainer.slideDown();
                    options.components.loyalty.LoyaltyRewardTile.init({
                        element: ".js_reward_tile"
                    });
                    event.selectors.rewardTileRedeemBtn = event.selectors.body.find(".js_rewardtile_redeem_button");
                    event.selectors.rewardTileRedeemBtn.on("click", event.showRewardDetails.bind(event));
                    event.selectors.showRewardsCatalogBtn.hide();
                    event.selectors.hideRewardsCatalogBtn.show();
                    event.selectors.window.trigger("resize");
                    options.components.global.slick.init();
                    $(window).trigger("resize");
                }
            });
        },
        hideRewardsCatalog: function() {
            this.selectors.showRewardsCatalogBtn.show();
            this.selectors.hideRewardsCatalogBtn.hide();
            this.selectors.rewardsCatalogContainer.slideUp();
            this.selectors.rewardsCatalogContainer.html("");
        },
        showRewardDetails: function(arg) {
            arg.preventDefault();
            var self = this;
            arg = $(arg.target);
            if (!(arg.data("js-vault-maxlimitreached") && arg.data("is-vault-reward") || arg.hasClass("c-button--disabled"))) {
                var f = arg.data("is-vault-reward");
                var modelId = arg.data("reward-id");
                if (f) {
                    self.showBannerVaultSelection(modelId);
                } else {
                    if (arg.data("master-type")) {
                        arg = options.util.appendParamsToUrl(options.urls.getProductUrl, {
                            pid: modelId,
                            isLoyaltyCartMasterReward: true
                        });
                        options.quickView.show({
                            url: arg,
                            source: "cart"
                        });
                    } else {
                        arg = options.util.appendParamsToUrl(options.urls.getCartWidgetRewardDetailsPopup, {
                            rewardId: modelId
                        });
                        this.rewardsDetailsDialog = options.dialog.open({
                            url: arg,
                            options: {
                                closeOnEscape: true,
                                dialogClass: "m-cart-loyalty-widget__reward-details-dialog"
                            },
                            callback: function() {
                                self.selectors.backToCartBtn = self.selectors.body.find(".js_back_to_cart_button");
                                self.selectors.backToCartBtn.on("click", function() {
                                    options.dialog.close();
                                });
                                self.selectors.document.trigger("loyaltyCartRewardDetailsPopup");
                            }
                        });
                    }
                }
            }
        },
        showBannerVaultSelection: function(modelId) {
            var dom = this;
            $.ajax({
                url: options.urls.vaultSelectionWrapper,
                data: {
                    pid: modelId,
                    page: "cart"
                },
                success: function(name) {
                    dom.selectors.bannerVaultWrapper.html(name);
                    options.components.loyalty.VaultFill.init({
                        element: dom.selectors.bannerVaultWrapper.find("[data-js-fillyourbox-container]")[0]
                    });
                    options.components.loyalty.VaultSelect.init({
                        element: dom.selectors.bannerVaultWrapper.find("[data-js-vaultselection-container]")[0]
                    });
                    options.components.product.sections.init();
                    options.components.product.swatchescustom.init();
                    options.carousel.init(dom.selectors.bannerVaultWrapper.find("[data-js-vaultselection-container]"));
                    dom.selectors.bannerVaultWrapper.find("[data-js-vault-data-remove]").on("click", dom.clearBannerVaultData.bind(dom));
                    dom.selectors.rewardTileRedeemBtn.addClass("hidden");
                    dom.hideRewardsCatalog();
                    dom.scrollToElement("[data-js-banner-vaultselection-wrapper] [data-js-fillyourbox-container]");
                }
            });
        },
        scrollToElement: function(selector) {
            $("html, body").stop().animate({
                scrollTop: $(selector).offset().top
            }, 500);
        },
        clearBannerVaultData: function() {
            this.selectors.rewardTileRedeemBtn.removeClass("hidden");
            this.selectors.bannerVaultWrapper.html("");
        },
        getJSONData: function(error) {
            var nextRender;
            try {
                /** @type {*} */
                nextRender = JSON.parse(error);
            } catch (f) {}
            return nextRender;
        }
    });
    options.components = options.components || {};
    options.components.cart = options.components.cart || {};
    options.components.cart.LoyaltyCartWidget = Service;
    /**
     * @param {!Object} name
     * @return {?}
     */
    options.components.cart.LoyaltyCartWidget.init = function(name) {
        return new Service(name);
    };
})(window.app = window.app || {}, jQuery);
(function(module, $) {
    var Service = module.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
            this.selectors.productGridButton = this.selectors.body.find(".js_product_grid_toggler");
        },
        bindEvents: function() {
            this.selectors.productGridButton.on("click", this.toggleProductGrid.bind(this));
        },
        toggleProductGrid: function(parent) {
            parent = $(parent.target);
            var toggle = parent.data("toggler");
            var target = $(toggle).data("toggle");
            if (!parent.hasClass("c-product__grid-button--active")) {
                this.selectors.productGridButton.removeClass("c-product__grid-button--active");
                parent.addClass("c-product__grid-button--active");
                parent.parents().find(toggle).toggleClass(target);
            }
        }
    });
    module.components = module.components || {};
    module.components.product = module.components.product || {};
    module.components.product.ProductGridSwitch = Service;
    /**
     * @param {!Object} name
     * @return {?}
     */
    module.components.product.ProductGridSwitch.init = function(name) {
        return new Service(name);
    };
})(window.app = window.app || {}, jQuery);
(function(options, $) {
    var Service = options.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
            this.selectors.rewardProductDetailsWrapper = this.selectors.body.find(".js_loyalty_details_wrapper");
            this.selectors.engravingCheckbox = this.selectors.rewardProductDetailsWrapper.find(".loyalty_product_detail .add_personal_engraving_cbx");
            this.selectors.withPossibleEngravingRedeemButton = this.selectors.rewardProductDetailsWrapper.find(".js_loyalty_redeem_button");
            this.selectors.productTabShades = this.selectors.rewardProductDetailsWrapper.find(".product_tab_shades_right a[data-color-family]");
            this.selectors.colorSwatches = this.selectors.rewardProductDetailsWrapper.find(".product_shades_familyshades li");
            this.selectors.colorFamilies = this.selectors.rewardProductDetailsWrapper.find(".product_shades_families li");
            this.selectors.selectedColorFamily = this.selectors.colorFamilies.first().find("a[data-color-family]").attr("data-color-family");
            this.selectors.filerFinishWrapperSingleValue = this.selectors.rewardProductDetailsWrapper.find(".filter_finish_wrapper .single_value");
            this.selectors.productSwatchShade = this.selectors.rewardProductDetailsWrapper.find(".pdp_product_swatch_list .product_swatch_shade");
            this.selectors.productSwatchList = this.selectors.rewardProductDetailsWrapper.find(".pdp_product_swatch_list");
            this.selectors.capsListInput = this.selectors.rewardProductDetailsWrapper.find(".caps_list input");
            this.selectors.customCaps = this.selectors.rewardProductDetailsWrapper.find(".custom_caps");
            this.selectors.checkboxMessage = this.selectors.body.find(".js_add_personal_engraving_cbx_msg");
            this.selectors.checkboxLabel = this.selectors.body.find(".js_add_personal_engraving_cbx_label");
            this.selectors.customLoader = this.selectors.body.find(".js_custom_loader");
            this.selectors.colorSelectBox = this.selectors.rewardProductDetailsWrapper.find(".color_selectbox_wrapper");
        },
        initState: function() {
            /** @type {string} */
            this.state.selectedFinish = "";
            /** @type {boolean} */
            this.state.initialized = false;
        },
        afterInit: function() {
            var i = this.selectors.productSwatchList.find("li.selected");
            if (!i.length) {
                i = this.selectors.productSwatchList.find("li.emptyswatch").first();
                i.addClass("selected");
            }
            i = i.data("pid");
            this.selectors.rewardProductDetailsWrapper.find(".color_selectbox_wrapper option[data-pid=" + i + "]").attr("selected", true);
            options.components.global.selectboxit.init();
            /** @type {boolean} */
            this.state.initialized = true;
            this.loadCapTabs();
        },
        bindEvents: function() {
            this.selectors.engravingCheckbox.on("change", this.validateEngravingCheckbox.bind(this));
            this.selectors.productTabShades.on("click", this.displayColorShadesOfFamily.bind(this));
            this.selectors.filerFinishWrapperSingleValue.on("click", this.filterByFinish.bind(this));
            this.selectors.productSwatchShade.on("click", this.productSwatchShadeClickHandler.bind(this));
            this.selectors.capsListInput.on("click", this.handleCapSelection.bind(this));
            this.selectors.colorSelectBox.on("change", this.handleShadeDropdownChange.bind(this));
            if (!this.state.initialized) {
                this.selectors.document.on("loyaltyRewardRedeemed", this.handleLoyaltyRewardRedeemed.bind(this));
                this.selectors.document.on("minicart.lineItemRemoved", this.handleLoyaltyRewardRedeemed.bind(this));
                this.selectors.document.on("loyaltyEngravingPopupClosed", this.rebindSomeEvents.bind(this));
                this.selectors.document.on("loyaltyEngravingPopupOpened", this.unbindSomeEvents.bind(this));
                this.selectors.document.on("swatchesInitialized", this.handleSwatchesInitialized.bind(this));
                this.selectors.document.on("change", ".js-rpc-cap-tab", this.selectCapTab.bind(this));
            }
        },
        handleShadeDropdownChange: function() {
            var check = this.selectors.colorSelectBox.find(".selectboxit-options li[data-active]").data("pid");
            this.selectors.productSwatchList.find(".product_swatch_shade[data-pid=" + check + "]").trigger("click");
        },
        unbindSomeEvents: function() {
            this.selectors.capsListInput.unbind("click");
        },
        rebindSomeEvents: function() {
            this.selectors.capsListInput.on("click", this.handleCapSelection.bind(this));
        },
        handleCapSelection: function(b) {
            $(b.target).parents(".cap_wrapper").addClass("cap_selected").siblings().removeClass("cap_selected");
            b = this.selectors.productSwatchList.find(".product_swatch_shade.selected");
            if (!b.length) {
                b = this.selectors.productSwatchList.find(".product_swatch_shade").first();
            }
            b.trigger("click");
        },
        handleSwatchesInitialized: function() {
            if (options.components.product.swatchescustom) {
                options.components.product.swatchescustom.resetShowMoreShadesState();
                options.components.product.swatchescustom.initializeShowMoreLink();
            }
        },
        productSwatchShadeClickHandler: function(data) {
            data.preventDefault();
            data.stopPropagation();
            var i = $(data.target);
            if (i.hasClass("swatch_color")) {
                data = i.parents(".product_swatch_shade").attr("href");
                i = i.parents(".product_swatch_shade").data("pid");
            } else {
                data = i.attr("href");
                i = i.data("pid");
            }
            var minId = this.selectors.customCaps.find("input[name=custom_cap]").val();
            var fileStatus = this.selectors.customCaps.find(".cap_selected").data("cap-id");
            var result = {};
            result["dwopt_" + i + "_" + minId] = fileStatus;
            data = options.util.appendParamsToUrl(data, result);
            this.makeAjaxCallAndRefreshContent(data, this);
        },
        filterByFinish: function(e) {
            e.preventDefault();
            var d = $(e.target);
            var $lastTab = d.parents(".loyalty_product_detail").find(".show_more_link");
            $lastTab.trigger("click");
            var controls = this.selectors.colorSwatches;
            if ("" !== this.selectors.selectedColorFamily && "all" !== this.selectors.selectedColorFamily) {
                controls = controls.filter('[data-color-family="' + this.selectors.selectedColorFamily + '"]');
            }
            controls.removeClass("hidden");
            if (d.hasClass("selected")) {
                return d.removeClass("selected"), $lastTab.trigger("click"), false;
            }
            d.siblings().removeClass("selected");
            if (e = e.currentTarget.getAttribute("data-value") || d.find("option:selected").val()) {
                controls = this.selectors.colorSwatches.filter('[data-finish!="' + e + '"]');
                if ("" !== this.selectors.selectedColorFamily && "all" !== this.selectors.selectedColorFamily) {
                    controls.filter('[data-color-family="' + this.selectors.selectedColorFamily + '"]');
                }
                controls.addClass("hidden");
                if (!d.is("selected")) {
                    d.addClass("selected");
                }
            }
            /** @type {!Object} */
            this.state.selectedFinish = e;
            $lastTab.trigger("click");
        },
        displayColorShadesOfFamily: function(e, type) {
            e.preventDefault();
            e.stopPropagation();
            var f = $(e.currentTarget);
            e = f.parent();
            /** @type {boolean} */
            type = "undefined" !== typeof type && "undefined" !== typeof type.forceDisplay && true === type.forceDisplay;
            if (options.components.product.swatchescustom) {
                options.components.product.swatchescustom.resetShowMoreShadesState();
            }
            if (!e.hasClass("active") || type) {
                type = f.data("colorFamily");
                if ("all" !== type) {
                    f = this.selectors.colorSwatches.addClass("hidden").filter('[data-color-family="' + type + '"]');
                    if ("" !== this.state.selectedFinish) {
                        f = f.filter('[data-finish="' + this.state.selectedFinish + '"]');
                    }
                } else {
                    f = this.selectors.colorSwatches;
                    if ("" !== this.state.selectedFinish) {
                        f = f.addClass("hidden").filter('[data-finish="' + this.state.selectedFinish + '"]');
                    }
                }
                f.removeClass("hidden");
                e.addClass("active").siblings().removeClass("active");
                /** @type {string} */
                this.selectors.selectedColorFamily = type;
            }
            if (options.components.product.swatchescustom) {
                options.components.product.swatchescustom.initializeShowMoreLink();
            }
            options.components.global.selectboxit.init();
        },
        validateEngravingCheckbox: function(event) {
            $(event.target).parents(".engraving_checkbox");
            if (event.target.checked) {
                this.selectors.withPossibleEngravingRedeemButton.attr("data-has-engraving", "true");
                this.selectors.withPossibleEngravingRedeemButton.html(options.resources.LOYALTY_REWARDS_DETAIL_PAGE_ENGRAVE_ME);
                this.selectors.checkboxMessage.html(options.resources.LOYALTY_REWARDS_DETAIL_PAGE_CHECKBOX_MESSAGE_CHECKED);
                this.selectors.checkboxLabel.text(options.resources.LOYALTY_REWARDS_DETAIL_PAGE_CHECKBOX_LABEL_CHECKED);
            } else {
                this.selectors.withPossibleEngravingRedeemButton.removeAttr("data-has-engraving");
                this.selectors.withPossibleEngravingRedeemButton.html(options.resources.LOYALTY_REWARDS_DETAIL_PAGE_REDEEM);
                this.selectors.checkboxMessage.html(options.resources.LOYALTY_REWARDS_DETAIL_PAGE_CHECKBOX_MESSAGE_UNCHECKED);
                this.selectors.checkboxLabel.text(options.resources.LOYALTY_REWARDS_DETAIL_PAGE_CHECKBOX_LABEL_UNCHECKED);
            }
        },
        makeAjaxCallAndRefreshContent: function(text, self) {
            self.selectors.rewardProductDetailsWrapper = self.selectors.body.find(".js_loyalty_details_wrapper");
            this.addCustomLoader();
            /** @type {number} */
            var f = -1;
            $.grep($(".filter_finish_wrapper .finish-option--checkbox"), function(b, _$param5) {
                if ($(b).filter(".selected").length) {
                    /** @type {string} */
                    f = _$param5;
                }
            });
            $.ajax({
                url: text,
                method: "GET",
                success: function(name) {
                    self.selectors.rewardProductDetailsWrapper.html(name);
                    self.initCache();
                    self.afterInit();
                    self.initState();
                    self.bindEvents();
                    $(window).trigger("resize");
                    options.components.product.image.init();
                    $(".js_zoom_help_text").removeClass("hidden");
                    self.selectors.document.trigger("loyaltyRewardsDetailPageContentUpdated");
                    self.handleSwatchesInitialized();
                    self.removeCustomLoader();
                    if (-1 != f) {
                        name = $(".filter_finish_wrapper .finish-option--checkbox").eq(f);
                        if (0 < name.length) {
                            name.trigger("click");
                        }
                    }
                }
            });
        },
        handleLoyaltyRewardRedeemed: function(profile, entry) {
            if (!entry.hideDashboardButton && (profile = this.selectors.withPossibleEngravingRedeemButton.data("pid"))) {
                entry = {
                    format: "ajax",
                    pid: profile
                };
                var i = this.selectors.customCaps.find("input[name=custom_cap]").val();
                if (i) {
                    var undefined = this.selectors.customCaps.find(".cap_selected").data("cap-id");
                    entry["dwopt_" + profile + "_" + i] = undefined;
                }
                profile = options.util.appendParamsToUrl(options.urls.loyaltyRewardDetails, entry);
                this.makeAjaxCallAndRefreshContent(profile, this);
            }
        },
        loadCapTabs: function() {
            if (0 < this.selectors.document.find(".js-rpc-cap-tab").length) {
                this.selectCapTab();
            }
        },
        selectCapTab: function() {
            var $example = this.selectors.document.find(".js-caps-container");
            var id = this.selectors.document.find(".js-rpc-cap-tab:checked").data("group-id");
            var p = $example.data("caps-to-show");
            var slidesToScroll = $example.data("caps-to-scroll");
            var breakpoint = $example.data("caps-mobile-breakpoint");
            var slidesToShow = $example.data("caps-to-show-mobile");
            var tabletSlides = $example.data("caps-to-scroll-mobile");
            $example.not(".slick-initialized").slick({
                infinite: false,
                slidesToShow: p,
                slidesToScroll: slidesToScroll,
                responsive: [{
                    breakpoint: breakpoint,
                    settings: {
                        slidesToShow: slidesToShow,
                        slidesToScroll: tabletSlides,
                        arrows: false
                    }
                }]
            });
            $example.filter(".slick-initialized").slick("slickUnfilter");
            this.selectors.document.find(".c-rpc-caps-tabs__cap--selected").removeClass("c-rpc-caps-tabs__cap--selected");
            if ("_" == id) {
                this.selectors.document.find(".c-rpc-caps-tabs__cap").addClass("c-rpc-caps-tabs__cap--selected");
            } else {
                this.selectors.document.find(".js-cap-group-" + id).addClass("c-rpc-caps-tabs__cap--selected");
            }
            $example.filter(".slick-initialized").slick("slickFilter", ".c-rpc-caps-tabs__cap--selected");
        },
        addCustomLoader: function() {
            this.selectors.customLoader.addClass("js_custom_loader_visible");
        },
        removeCustomLoader: function() {
            this.selectors.customLoader.removeClass("js_custom_loader_visible");
        }
    });
    options.components = options.components || {};
    options.components.loyalty = options.components.loyalty || {};
    options.components.loyalty.LoyaltyRewardRedeem = Service;
    /**
     * @param {!Object} name
     * @return {?}
     */
    options.components.loyalty.LoyaltyRewardRedeem.init = function(name) {
        return new Service(name);
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    var Service = self.Component.extend({
        initCache: function() {
            this.selectors = {
                document: $(document),
                window: $(window),
                body: $("body")
            };
            this.selectors.carouselThumbnail = this.element;
            this.selectors.carouselLargeImage = this.selectors.body.find(".js_product_primary_image");
            this.selectors.earlyAccesProduct = this.selectors.body.find(".js_loyalty_early_access_product");
            this.imageZoom = this.selectors.body.find(".main_image");
        },
        afterInit: function() {
            if (!(self.isMobileUserAgent || self.isTabletUserAgent)) {
                this.loadZoom();
            }
        },
        bindEvents: function() {
            this.selectors.carouselThumbnail.on("click", this.swapProductRewardImage.bind(this));
        },
        swapProductRewardImage: function(options) {
            /** @type {*} */
            options = JSON.parse($(options.currentTarget).attr("data-large-img"));
            if (self.isMobileUserAgent) {
                this.selectors.carouselLargeImage.attr("src", decodeURIComponent(options.mobile.url));
            } else {
                if (self.isTabletUserAgent) {
                    this.selectors.carouselLargeImage.attr("src", decodeURIComponent(options.desktop.url));
                } else {
                    this.selectors.carouselLargeImage.attr("src", decodeURIComponent(options.desktop.url));
                    this.imageZoom.attr("href", decodeURIComponent(options.hires));
                    this.loadZoom();
                }
            }
        },
        loadZoom: function(css) {
            if (self.zoomViewerEnabled) {
                css = {
                    position: "inner" == self.preferences.typeOfZoomProductPage ? "inside" : "right",
                    zoomWidth: "auto",
                    zoomHeight: "auto",
                    softFocus: false,
                    lensOpacity: .5,
                    tint: false,
                    tintOpacity: .4,
                    smoothMove: 2,
                    adjustX: 0,
                    adjustY: 0,
                    showTitle: false,
                    titleOpacity: .5,
                    delay: "0",
                    lazyLoad: true
                };
                this.selectors.earlyAccesProduct.find(".main_image").attr("href");
                this.checkImageZoomDevice();
                $(this.imageZoom).CloudZoom(css);
            }
        },
        checkImageZoomDevice: function() {
            var editingEl = $(this.imageZoom);
            if (self.isMobileUserAgent) {
                if (editingEl.data("zoomMobile")) {
                    return true;
                }
            } else {
                if (self.isTabletUserAgent) {
                    if (editingEl.data("zoomTablet")) {
                        return true;
                    }
                } else {
                    if (editingEl.data("zoomDesktop")) {
                        return true;
                    }
                }
            }
            return false;
        }
    });
    self.components = self.components || {};
    self.components.loyalty = self.components.loyalty || {};
    self.components.loyalty.LoyaltyEarlyAccessProduct = Service;
    /**
     * @param {!Object} name
     * @return {?}
     */
    self.components.loyalty.LoyaltyEarlyAccessProduct.init = function(name) {
        return new Service(name);
    };
})(window.app = window.app || {}, jQuery);
(function(scope, $) {
    /**
     * @return {undefined}
     */
    function initTable1() {
        c = $(document);
        canvas = $(".product_sections_wrapper .product_section").filter(function() {
            return 0 == $(this).parents(".product_section_relatives").length;
        }).find("H2:first");
    }
    /**
     * @return {undefined}
     */
    function link() {
        canvas.addClass("acc_head acc_expanded");
        canvas.next().hide().addClass("toggle_content");
        canvas.on("click", function() {
            remove($(this));
        });
        c.on("accordion.slideToggle", function(b, a) {
            if (a.element) {
                remove(a.element);
            }
        });
        if ("product" == scope.page.type) {
            $(".product_sections_wrapper .product_section h2.acc_head").filter(function(b) {
                return 0 == $(this).parents(".review_section_tabs").length;
            }).click();
        }
    }
    /**
     * @param {!Object} form
     * @return {undefined}
     */
    function remove(form) {
        form.toggleClass("acc_expanded");
        form.next().slideToggle(500, function() {
            scope.carousel.init();
        });
    }
    var c;
    var canvas;
    canvas = c = void 0;
    scope.components = scope.components || {};
    scope.components.accordion = scope.components.accordion || {};
    scope.components.accordion.custom = {
        init: function() {
            if (!scope.isMobileUserAgent || 0 < $(".pdp_main.pdp_enhanced").length) {
                return true;
            }
            initTable1();
            link();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @return {undefined}
     */
    function init() {
        data.document.on("keydown", function(event) {
            if (event.keyCode === $.ui.keyCode.ESCAPE && self.quickView && "function" === typeof self.quickView.isActive && self.quickView.isActive()) {
                self.quickView.close();
            }
        });
        if ("cart" === self.page.ns) {
            self.bonusProductsView.loadBonusOption();
        }
        if (("checkout" === self.page.ns || "cart" === self.page.ns) && data.checkoutSubscriptionsArea.length) {
            var g = data.checkoutSubscriptionsArea.find("input[id$='newsletter_checkoutSubscription_sendnewsletters']");
            g.on("click", function() {
                if (g.length && !g.get(0).checked) {
                    return confirm(self.resources.NEWSLETTERUNSUBSCRIPTION);
                }
            });
        }
        if ("account" === self.page.ns && "https:" !== window.location.protocol) {
            /** @type {string} */
            window.location.href = "https:" + window.location.href.substring(window.location.protocol.length);
        }
        if (self.isMobileUserAgent) {
            data.cartTable.off("click", ".item_edit_details a:not(.edit_gift_cert)");
            data.cartTable.find(".cart_row_nav_links td .item_edit_details a").each(function(canCreateDiscussions, data) {
                data.href = self.util.appendParamToURL(data.href, "source", "cart");
            });
        }
        data.document.on("customerService.reset", function() {
            data.errorMessage.hide();
        });
        data.document.on("openQuickview.dialog giftCertEditDialog.opened dialog.container.reload useShippingAddressForBillingUnchecked product.variationChanged afterOpenAddressSection cart.lineItemQtyChanged", function() {
            $("select").trigger("util.selectOptionsUpdate");
        });
        data.sortby.on("change", function() {
            this.submit();
        });
        var el_form_group = data.samples.find(".samples");
        if (1 > el_form_group.length && "isTabletUserAgent" in self && !self.isTabletUserAgent && "isMobileUserAgent" in self && !self.isMobileUserAgent) {
            var _init = data.samples.find(".secondary").height();
            data.samples.find(".primary").css("height", _init);
        }
        if (0 < el_form_group.length) {
            var minWordsToSplit = self.preferences.validSamplesLimit;
            var flagCommit = el_form_group.find("input:checkbox");
            flagCommit.filter(":checked").parents(".sample_item").addClass("active_sample");
            /**
             * @return {undefined}
             */
            var enableElementSettingsField = function() {
                if (el_form_group.find("input:checkbox:checked").length >= minWordsToSplit) {
                    el_form_group.find("input:checkbox:not(:checked)").attr("disabled", "disabled");
                } else {
                    flagCommit.attr("disabled", false);
                }
            };
            enableElementSettingsField();
            flagCommit.on("change", function() {
                enableElementSettingsField();
            });
        }
        if (self.isMobileUserAgent) {
            if (self.isUserAuthenticated) {
                data.accountlinkitemspan.find("span, a").wrapAll('<span class="username_container" />');
                $(".user_name").after("<br />");
                $(".welcome_user, .account_navigation_my_account").remove();
            } else {
                $(".welcomeback_user").find("a").html(app_ysl.resources.MYACCOUNT_LINK);
            }
            data.mobileNavigation = $(".navigation").find(".content");
            if ("search" == self.page.currentPage && 0 == self.page.productSearchResultIDs.length) {
                $(".no_hits_page").find("h1").html();
            } else {
                if (data.refinementHeader.length) {
                    data.refinementHeader.html();
                }
            }
        }
        data.giftCertificateLink.on("click", function() {
            var $toggler = data.giftCertificateText;
            if ($toggler.hasClass("open")) {
                $toggler.slideUp(600, function() {
                    $toggler.removeClass("open");
                });
            } else {
                $toggler.slideDown(600, function() {
                    $toggler.addClass("open");
                });
            }
        });
        if (data.giftCertificatePin.length) {
            data.giftCertificatePin.rules("add", {
                minlength: 4,
                maxlength: 4,
                digits: true,
                required: true,
                messages: {
                    minlength: data.errorGiftCertificatePinMessage,
                    maxlength: data.errorGiftCertificatePinMessage,
                    digits: data.errorGiftCertificatePinMessage,
                    required: data.errorGiftCertificatePinMessage
                }
            });
        }
        if (0 < data.socialPopupLink.length) {
            data.socialPopupLink.on("click", function(params) {
                params.preventDefault();
                params = {
                    url: this.href,
                    callback: render,
                    options: {
                        dialogClass: "dialog_social_share"
                    },
                    data: {
                        elementId: $(this).data("element-id"),
                        elementType: $(this).data("element-type")
                    },
                    $link: $(this)
                };
                self.dialog.open(params);
            });
            /**
             * @return {undefined}
             */
            var render = function() {
                var data = this.data.elementId;
                var dirPath = this.data.elementType;
                /** @type {string} */
                var getUrl = window.location.href;
                /** @type {string} */
                var area_scripts_src = "#";
                /** @type {string} */
                var decimalsPart = "default description";
                if (!self.util.empty(dirPath) && "product" == dirPath) {
                    /** @type {string} */
                    getUrl = window.location.protocol + "//" + window.location.host + self.util.appendParamToURL(self.urls.getProductUrl, "pid", data);
                    area_scripts_src = this.$link.parents(".wishlist_items").find("img").attr("src");
                    try {
                        decimalsPart = $(".dialog_social_share").find(".product_social_networking").data("product-description").replace(/<\/?[^>]+(>|$)/g, "");
                    } catch (W) {
                        /** @type {string} */
                        decimalsPart = "";
                    }
                }
                if (!(self.util.empty(dirPath) || "wishlist" != dirPath)) {
                    getUrl = self.util.appendParamToURL(self.urls.wishlistShowOther, "WishListID", data);
                }
                data = {
                    toolbox: {
                        addthis_share_config: {
                            url: getUrl
                        },
                        networks: ["facebook_like", "tweet"]
                    },
                    tweet: {
                        "tw:via": "YSLBeautyUS"
                    }
                };
                getUrl = {
                    toolbox: {
                        addthis_share_config: {
                            url: getUrl
                        },
                        networks: ["pinterest_pinit", "google_plusone"]
                    },
                    pinterest_pinit: {
                        "pi:pinit:url": getUrl,
                        "pi:pinit:media": area_scripts_src,
                        "pi:pinit:description": decimalsPart,
                        "pi:pinit:layout": "horizontal"
                    }
                };
                self.components.global.addthis.initToolbox(document.querySelector(".dialog_social_share .facebook_like"), data);
                self.components.global.addthis.initToolbox(document.querySelector(".dialog_social_share .addthis_toolbox"), getUrl);
            };
        }
        initialize();
        setEnabled();
        $(document).on("sendtofriend.loaded", function() {
            if ("showCharactersLeft" in self.page && self.page.showCharactersLeft) {
                self.util.limitCharacters();
            }
        });
        $(document).on("callbackUpdateCartDone", function() {
            var d = $(".show_also_view_bought");
            if (d.length) {
                var e = app_ysl.urls.blockAlsoViewBought.replace("0000000000", d.data("pdpproductid"));
                d.load(e, function() {
                    d.parents(".show_also_view_wrap").show();
                    if (0 < d.find(".recommendations_block").length) {
                        d.find(".recommendations_block").eq(0).data("rrForceThisPlacementOnly", "true");
                        self.recommendations.initializeRecommendationsSingleBlock(d.find(".recommendations_block").eq(0), true);
                        $(document).trigger("pdpadvancedsection.loaded");
                    }
                });
            }
        });
        if (document.referrer && -1 === document.referrer.indexOf(location.protocol + "//" + location.host)) {
            var elem = $(".show_also_view_bought");
            if (elem.length) {
                _init = self.util.appendParamsToUrl(app_ysl.urls.productSectionCustom, {
                    mode: "section",
                    section: "alsoview",
                    slotid: "products-also-view-pdp",
                    pid: elem.data("pdpproductid"),
                    format: "ajax",
                    showwrapper: true
                });
                elem.load(_init, function() {
                    self.page.setContexAfterAjaxCall();
                    elem.parents(".show_also_view_wrap").show();
                    elem.find(".recommendations_block").eq(0).data("rrForceThisPlacementOnly", "true");
                    self.recommendations.initializeRecommendationsSingleBlock(elem.find(".recommendations_block").eq(0), true);
                    $(document).trigger("pdpadvancedsection.loaded");
                });
            }
        }
        $(window).on("scroll", _.debounce(function() {
            if (F) {
                if ($(window).scrollTop() > $scope.stickyMainNavigationTop) {
                    A++;
                } else {
                    if (!(0 < data.navigation.find("h2.navigation_header.expanded").length)) {
                        /** @type {number} */
                        A = 0;
                    }
                }
                load();
            }
            if (h) {
                if (!(0 === data.pdpMain.length || $scope.iPadPdpFlag)) {
                    if ($(window).scrollTop() > $scope.stickyProductSectionsTop) {
                        data.productSections.addClass(defaults.stickyJS);
                        if (!self.isMobileUserAgent) {
                            data.pdpMain.addClass(defaults.stickyTopBar);
                            data.pdpNavigation.addClass(defaults.stickyJS);
                        }
                    } else {
                        data.pdpMain.removeClass(defaults.stickyTopBar);
                        data.productSections.removeClass(defaults.stickyJS);
                        data.pdpNavigation.removeClass(defaults.stickyJS);
                    }
                }
            }
        }, 20));
        $(document).on("click", ".requestpassword_cancel", function() {
            if (0 == $(this).parents(".ui_resetpassword_dialog").length) {
                window.location = self.urls.myAccount;
            }
        });
        /** @type {boolean} */
        var N = false;
        data.document.on("touchend", selector.productTileClass, function(event) {
            if (self.disableQuickView) {
                var e = $(this).find("a.product_name");
                if (0 < e.length && N && !$(this).hasClass("js_prevent_redirect")) {
                    event.stopImmediatePropagation();
                    event.preventDefault();
                    self.page.redirect(e.prop("href"));
                }
            } else {
                self.quickView.initializeButtonSingle($(this), "a.product_image_wrapper", indexReplacementTag);
            }
        });
        data.document.on("touchstart", selector.productTileHoverArea + ", " + selector.productTileClass + " a.product_name", function(b) {
            /** @type {boolean} */
            N = true;
        });
        data.document.on("touchmove", selector.productTileHoverArea + ", " + selector.productTileClass + " a.product_name", function(b) {
            /** @type {boolean} */
            N = false;
        });
        data.document.on("touchend", function() {
            /** @type {boolean} */
            N = false;
        });
        data.document.on("mouseenter", selector.productTileHoverArea + ", " + selector.productTileClass + " a.product_name", function(b) {
            $(this).parents(selector.productTileClass).addClass("active");
        });
        data.document.on("mouseleave", selector.productTileActionsArea + ", " + selector.productTileClass + " a.product_name", function(b) {
            get_closest_heading();
        });
        $(":not(" + selector.productTileClass + ")").on("touchstart", function(b) {
            get_closest_heading();
        });
        postLink();
        add();
        $(document).on("callbackUpdateCartDone", function(b) {
            add();
        });
        $(".hp_main_carousel .contentcarousel_list_item").each(function() {
            var $newmsgLink = $(this).find("a.button");
            $(this).find(".hp_contentcarousel_link").attr({
                href: $newmsgLink.attr("href"),
                "data-contentType": $newmsgLink.attr("data-contentType"),
                "data-contentName": $newmsgLink.attr("data-contentName"),
                "data-contentID": $newmsgLink.attr("data-contentID"),
                "data-contentPosition": $newmsgLink.attr("data-contentPosition")
            });
        });
        $(".hp_main_carousel").on("click touchstart", ".carousel_navigation_list_link, .hp_contentcarousel_link, .jcarousel-control", function() {
            $(".hp_main_carousel .jcarousel-clip").trigger("stop.jcarouselautoscroll");
        });
        onClick();
        data.document.on("openQuickview.dialog product.variationChanged", function() {
            onClick();
        });
        if (1 === data.navigationPanel.length) {
            _init = data.navigationPanel[0].clientWidth;
            var buttonsRight = data.navigationPanel.find(".active_panel");
            if (1 === buttonsRight.length && .75 * _init < buttonsRight[0].offsetLeft) {
                $(data.navigationPanel[0].parentElement).find(".jcarousel-next").trigger("click");
            }
        }
        if ("isMobileUserAgent" in self && self.isMobileUserAgent) {
            data.document.on("accountAddresses.edit", function() {
                self.page.redirect(self.urls.addressesList);
            });
        }
        if (navigator.userAgent.match(/(iPad|iPhone|iPod)/g)) {
            var $innerblock = $("*").filter(function() {
                return "fixed" === $(this).css("position") && "none" != $(this).css("display");
            });
            _init = $("input[type='text'], input[type='password'], input[type='email'], textarea");
            /** @type {null} */
            var $prompt = null;
            if (0 < $innerblock.length && 0 < _init.length) {
                _init.on("focus", function(b) {
                    $innerblock.hide();
                    $prompt = $(this);
                });
                _init.on("blur", function(b) {
                    $innerblock.show();
                    /** @type {null} */
                    $prompt = null;
                });
                data.document.on("touchmove", function() {
                    if (null != $prompt) {
                        $prompt.trigger("blur");
                        /** @type {null} */
                        $prompt = null;
                    }
                });
            }
        }
        /**
         * @return {undefined}
         */
        _init = function() {
            data.bvRatingPLP = $(".product_tile_wrapper .bv-rating");
            if (data.bvRatingPLP.length) {
                data.bvRatingPLP.off("click").on("click", function() {
                    var m = $(this);
                    var id = m.parent().find("a").attr("href");
                    /** @type {boolean} */
                    m = !!m.parents(".product_tile_wrapper").data("richrelevance-url");
                    /** @type {string} */
                    id = id + (m ? escape("#reviews_show") : "#reviews_show");
                    /** @type {string} */
                    window.location.href = id;
                });
            }
        };
        if ("product" == self.page.ns) {
            data.document.ajaxStop(_init);
        }
        if ("search" == self.page.ns) {
            data.document.on("recommendations.loaded search.update", _init);
            _init();
        }
        if (/(favorites|storefront|moodboards)/.test(self.page.ns)) {
            _init();
        }
        if ("search" == self.page.currentPage && 0 == self.page.productSearchResultIDs.length) {
            self.recommendations.init({
                makeCall: true
            });
            self.carousel.init(data.main);
        }
        if (self.isMobileUserAgent || self.isTabletUserAgent) {
            data.skipMenuLinks.prop("href", document.location.href);
        } else {
            data.skipMenuLinks.prop("href", document.location.href).on("click", function(event) {
                event.preventDefault();
                event.stopPropagation();
            });
        }
        search();
        $(document).off("click", ".password_reset");
        data.document.on("touchstart mouseenter", ".js_disble_quickview", function(b) {
            $(this).parents(selector.productTileClass).removeClass("active");
        });
        $(document).ready(function() {
            self.progress.hide();
            if ($("#plp_grid_container").length) {
                self.search.setUrlChangeHandler(build);
                /** @type {string} */
                var search = window.location.href.split("#")[0];
                self.search.updateSearch(search, "initialLoad");
            }
        });
        $(document).on("search.update", function() {
            self.componentsMgr.loadComponent("global.pagenavigation");
            search();
            self.recommendations.init({
                makeCall: true
            });
        });
        data.document.on("bonusproducts.show", function() {
            /** @type {number} */
            var b = data.window.height() - 250;
            $("#bonus-product-list").wrapInner('<div id="bonus-product-list-inner"/>');
            $("#bonus-product-list-inner").height(b);
            $("#bonus-product-list-inner").after($("#bonus-product-list .bonus_product_list_footer"));
        });
        data.imagewrap.on("click", function(event) {
            event.preventDefault();
        });
        $(document).on("global.showMinicart.beforeOpen", function() {
            if ($(".js_stickyheader").length) {
                var $elem = $(".js_stickyheader .mini_cart_content");
                var w = $(".js_stickyheader .mini_cart_total");
            } else {
                $elem = $(".mini_cart_content:first");
                w = $(".mini_cart_total:first");
            }
            var $this = $elem.find(".mini_cart_content_inner");
            /** @type {number} */
            w = $(window).height() - w.offset().top + $(window).scrollTop() - w.outerHeight();
            var h = $elem.data("height");
            if (!h) {
                $elem.css({
                    display: "block",
                    overflow: "hidden"
                });
                h = $elem.outerHeight();
                $elem.css({
                    display: "none",
                    overflow: "visible"
                });
                $elem.data("height", h);
            }
            if (w < h) {
                /** @type {number} */
                w = w - parseInt($this.css("paddingTop")) - parseInt($this.css("paddingBottom")) - 20;
                $this.addClass("correct_height").height(w);
            } else {
                $this.removeClass("correct_height").height(h);
            }
        });
        if ($("#cart_table .not_available:visible").size()) {
            $("html, body").animate({
                scrollTop: $("#cart_table .not_available:visible").parents(".cart_row").offset().top - $(".sticky_header").height()
            }, 2E3);
        }
        pm.bind("genericform.changeHeight", function(modalStyle) {
            $("#whitelabel-iframe").height(modalStyle.height);
        });
        pm.bind("genericform.ScrollParent", function(is_video) {
            if (is_video && self.isTabletUserAgent) {
                $(window).scrollTop(0);
            }
        });
        $(".productdetails_readmore").on("click", function(b) {
            var d = $(".productdetails_readmore_container");
            if (0 == d.length) {
                d = $("<div class='productdetails_readmore_container' />");
                d.append("<div class='close'><span class='cross'></span></div>");
                d.append("<div class='content' />");
                d.find(".content").html(removeCritText);
                d.find(".close").on("click", function(b) {
                    fancybox_show(d);
                });
                $("body").append(d);
            }
            fancybox_show(d);
        });
        $(window).on("resize", function() {
            var content = $(".productdetails_readmore_container");
            if (0 < content.length && 0 < content.css("opacity")) {
                var $attachTo = $(".product_sections_wrapper");
                var targetLeft = $(".product_detail_wrapper").offset().left;
                $attachTo = $attachTo.offset().top + $attachTo.height();
                var dxdydust = $(".section_about").height() + 100;
                content.css({
                    right: targetLeft,
                    top: $attachTo,
                    height: dxdydust
                });
            }
        });
        data.pdpMain.on("hover", ".mousetrap", function() {
            var b = data.pdpMain.find("img.primary_image").height();
            /** @type {number} */
            b = (data.pdpMain.find(".product_primary_image").height() - b) / 2;
            data.pdpMain.find(".mousetrap").css("top", b);
        });
        save();
        $(document).on("panzoom.loded", save);
        if (0 < $(".homepage .olapic_hp_module").length && self.isMobileUserAgent) {
            $(window).on("resize", function() {
                _.debounce(self.components.product.sections.setMobileOlapicSlides, 100)();
            });
            $(document).on("olapic.slider.rendered", self.components.product.sections.setMobileOlapicSlides);
        }
        self.components.product.engraving.changeSettings({
            showCheckedMessage: true
        });
        $(document).on("blur keyup", '.product_engraving_edit_controls_cont input, .engraving_edit_and_preview_cont input[type="text"]', function() {
            if ($(this).parents(".product_engraving_edit_cont").find(".regular_personal_engraving_style").prop("checked")) {
                $(this).val($(this).val().toUpperCase());
            }
        });
        data.document.on("click", ".link2shoprunner button, .link2shoprunner a", function(event) {
            event.preventDefault();
            event.stopPropagation();
            if (!data.document.find(".regular-checkout-form button").first().prop("disabled")) {
                location.href = self.urls.srSampleExpressCheckout;
            }
        });
        data.document.on("click", "#section_pickyourpout .js_addtocart", function() {
            $("html").animate({
                scrollTop: 0
            }, "slow");
        });
        data.document.on("click", ".pdp_main .pdp_right_column .js_addtocart", start);
        data.document.on("tabsactivate", ".js-pureshots-description-tabs", function() {
            data.document.trigger("resize");
        });
        data.document.on("product.addedToCart minicart.lineItemRemoved minicart.lineItemQtyChanged", loadData);
    }
    /**
     * @return {undefined}
     */
    function loadData() {
        self.ajax.load({
            url: self.urls.getIncentivizedPromoBarContent,
            type: "GET"
        }).done(g);
    }
    /**
     * @param {undefined} a
     * @return {undefined}
     */
    function g(a) {
        var d = $(".header_promo_slot .promo_banner.incentivized_promo");
        if (d.length) {
            d.html(a);
        }
    }
    /**
     * @return {undefined}
     */
    function start() {
        var playlist_selector = $(this).closest(".button_wrapper");
        var $conditionsRuleMajor = playlist_selector.find("input[name=pid]");
        playlist_selector = playlist_selector.find("input[name=quantity]");
        if ("undefined" != typeof OG && "Controller" in OG && OG.Controller.addToCart) {
            try {
                OG.Controller.addToCart($conditionsRuleMajor.val(), playlist_selector.val());
            } catch (oa) {}
        }
    }
    /**
     * @return {undefined}
     */
    function add() {
        $("#minicart").on("click touchstart", ".mini_cart_total", function(value) {
            if (self.isMobileUserAgent) {
                value.stopPropagation();
                $(this);
                value = $(this).find("a.mini_cart_link").attr("href");
                /** @type {boolean} */
                var overrideDst = 0 < $(".engraving_grid").length || 0 < $(".lip_wardrobe").length;
                if (!("undefined" == typeof value || overrideDst)) {
                    self.page.redirect(value);
                }
            }
        });
    }
    /**
     * @return {undefined}
     */
    function save() {
        if (data.productZoomHelpText.length) {
            var message = $(".product_primary_image").find(".cloud-zoom");
            var exception = message.length && notify(message);
            message = message.length && message.find(".panzoom").length;
            if (exception) {
                data.productZoomHelpText.find(".zoom_help_text_pinch").hide();
            }
            if (message) {
                data.productZoomHelpText.find(".zoom_help_text_rollover").hide();
            }
            if (exception || message) {
                data.productZoomHelpText.show();
            }
        }
    }
    /**
     * @param {!Object} notif
     * @return {?}
     */
    function notify(notif) {
        if ("isMobileUserAgent" in self && self.isMobileUserAgent) {
            if (notif.data("zoomMobile")) {
                return true;
            }
        } else {
            if ("isTabletUserAgent" in self && self.isTabletUserAgent) {
                if (notif.data("zoomTablet")) {
                    return true;
                }
            } else {
                if (notif.data("zoomDesktop")) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * @return {undefined}
     */
    function search() {
        if (!self.isMobileUserAgent) {
            $(".js_remove_if_not_mobile").remove();
            $.each($("a[href^='tel:']"), function() {
                var token = $(this);
                var transcludedMatch = token.html() || token.text();
                if (transcludedMatch.length) {
                    token.replaceWith(transcludedMatch);
                } else {
                    token.attr("href", "javascript:void(0);");
                }
            });
        }
        if (self.isMobileUserAgent) {
            $(".js_remove_if_mobile").remove();
        }
    }
    /**
     * @return {undefined}
     */
    function onClick() {
        data.view360link = $(".view_360 a");
        data.image360wrap = $(".product_primary_image .ysl_rotate_360");
        data.prodthumbs = $(".product_thumbnails a.thumbnail_link");
        data.imagewrap = $(".product_primary_image .contentcarousel");
        if (data.image360wrap.length) {
            self.rotate_360.rotate({
                target: data.image360wrap,
                panoramaUrl: data.image360wrap.data("img360"),
                ldImageWidth: w.ldImageWidth,
                ldImageHeight: w.ldImageHeight,
                hdImageWidth: w.hdImageWidth,
                hdImageHeight: w.hdImageHeight,
                isZoomable: w.isZoomable
            });
            data.prodthumbs.on("click", function(event) {
                event.preventDefault();
                data.imagewrap.removeClass("hidden");
                $(".product_primary_image .mousetrap").show();
                data.image360wrap.addClass("hidden");
            });
            data.document.off("click", ".view_360 a").on("click", ".view_360 a", function(event) {
                event.preventDefault();
                data.imagewrap.addClass("hidden");
                $(".product_primary_image .mousetrap").hide();
                data.image360wrap.removeClass("hidden");
            });
        }
    }
    /**
     * @return {undefined}
     */
    function postLink() {
        if ("productsGridForceShopNowButton" in self.preferences && self.preferences.productsGridForceShopNowButton) {
            /** @type {string} */
            var reconnectingCallback = selector.productTileClass + " .js_addtocart, " + selector.productTileCarouselClass + " .js_addtocart";
            $(document).on("click touchstart", reconnectingCallback, function(event) {
                var e = $(this).closest(selector.productTileClass);
                if (0 == e.length) {
                    e = $(this).closest(selector.productTileCarouselClass);
                }
                if (0 < e.length) {
                    e = e.find("a.product_name");
                    if (0 < e.length) {
                        event.stopImmediatePropagation();
                        event.preventDefault();
                        self.page.redirect(e.prop("href"));
                    }
                }
            });
        }
    }
    /**
     * @return {undefined}
     */
    function get_closest_heading() {
        $(".product_tile_wrapper.active").removeClass("active");
    }
    /**
     * @return {undefined}
     */
    function initialize() {
        data.document.on("click", ".search_content_result.folder A.view_all_content_hits", function(event) {
            event.preventDefault();
            self.search.updateSearch($(this).attr("href"));
        });
    }
    /**
     * @return {undefined}
     */
    function setEnabled() {
        show($(".first_arrival_slot_promo.newsletter-promo"));
        show($(".first_arrival_slot_promo.general_promo"));
        data.document.off("click", ".close_promo").on("click", ".close_promo", function() {
            error($(this).closest(".first_arrival_slot_promo"));
            $(document).trigger("promoslot.close");
        });
    }
    /**
     * @param {!Object} f
     * @return {undefined}
     */
    function error(f) {
        var name = f.find(".promotion").length ? f.find(".promotion").attr("id") : "";
        f.hide();
        self.util.setCookie("slot_" + name, name, {
            expires: 1E6,
            path: "/"
        });
    }
    /**
     * @param {!Object} form
     * @return {undefined}
     */
    function show(form) {
        if ("" != $.trim(form.find(".content").html())) {
            var c = form.find(".promotion").length ? form.find(".promotion").attr("id") : "";
            if ("" != c && self.util.getCookie("slot_" + c) != c) {
                self.validator.initForm(form.find("form"));
                form.data("isPopup", "false").show();
                self.components.global.newsletter.initNewSubscriptionSections(form);
            }
        }
    }
    /**
     * @return {undefined}
     */
    function render() {
        $scope = {
            stickyTopbarTop: 0,
            stickyMainNavigationTop: 0,
            stickyProductSectionsTop: 0,
            cookieBannerHeight: 0,
            topbarHeight: 0,
            mainNavigationHeight: 0,
            productSectionsHeight: 0,
            fadeAnimationTiming: 300,
            isiOS: !!navigator.userAgent.match(/(iPad|iPhone|iPod)/g),
            isQuickView: !!(0 < $("#QuickViewDialog").length),
            iPadPdpFlag: $scope.isiOS && data.pdpMain.length && !self.isMobileUserAgent && !$scope.isQuickView,
            isMobile: "isMobileUserAgent" in self && self.isMobileUserAgent
        };
        if (data.cookieBanner.length) {
            /** @type {number} */
            $scope.cookieBannerHeight = parseInt(data.cookieBanner.outerHeight());
        }
        if (F && 0 < data.navigation.length) {
            /** @type {number} */
            $scope.mainNavigationHeight = parseInt(data.navigation.outerHeight());
            /** @type {number} */
            $scope.stickyMainNavigationTop = data.navigation.offset().top - $scope.cookieBannerHeight - $scope.topbarHeight;
            data.body.addClass(defaults.stickyMainNavigation);
        }
        if (h && 0 < data.productSections.length) {
            /** @type {number} */
            $scope.headerUtilNavHeight = parseInt(data.headerUtilNav.outerHeight());
            /** @type {number} */
            $scope.headerHeight = parseInt(data.header.outerHeight());
            /** @type {number} */
            $scope.mainNavigationHeight = parseInt(data.navigation.outerHeight());
            /** @type {number} */
            $scope.stickyProductSectionsTop = $scope.headerUtilNavHeight + $scope.headerHeight + $scope.mainNavigationHeight;
            data.body.addClass(defaults.stickyProductSectionNavigation);
        }
        self.components.header.navigation.resizingMenu();
    }
    /**
     * @return {undefined}
     */
    function load() {
        data.minicartWrapper = $("div.minicart_wrapper");
        if (0 === A) {
            data.navigation.removeClass(defaults.stickyJS);
            $.each(data.navigation.find("ul.level_1_list li.level_1_list_item:not(.mobile_display, .account_list_wrapper)"), function(b) {
                $(this).show();
            });
            if ($scope.isMobile) {
                data.navigation.find("h2.navigation_header").removeAttr("style");
            }
            data.window.trigger("navigation.stickyOff");
        } else {
            if (1 === A) {
                colStartIndex = self.preferences.maxCategoryItems || 4;
                data.navigation.addClass(defaults.stickyJS);
                if (self.isTabletUserAgent) {
                    colStartIndex = self.preferences.maxCategoryItems || 4;
                }
                if (!$scope.isMobile && 767 < $(window).width()) {
                    $.each(data.navigation.find("ul.level_1_list li.level_1_list_item:not(.account_list_wrapper)"), function(_startColumnIndex) {
                        if (_startColumnIndex > colStartIndex) {
                            $(this).hide();
                        }
                        if ((!self.isTabletUserAgent || 767 < $(window).width()) && _startColumnIndex <= colStartIndex) {
                            if ($(this).hasClass("js_stickynavitem_disable")) {
                                $(this).hide();
                                colStartIndex++;
                            } else {
                                if (!data.navigation.find("ul.level_1_list li.level_1_list_item .level_1_list_item_link").hasClass("level_1_list_item_link_first")) {
                                    $(this).find(".level_1_list_item_link").toggleClass("level_1_list_item_link_first");
                                }
                            }
                        }
                    });
                    data.navigation.find(".js_stickynavitem_disable").next().hide();
                    data.navigation.find(".level_1_list_item:not(.account_list_wrapper)").not(":visible").next().hide();
                    data.navigation.find(".level_1_list_item").not(":hidden").last().next().hide();
                }
                data.window.trigger("navigation.stickyOn");
            }
        }
    }
    var data = {};
    var selector = {
        productTileClass: ".product_tile_wrapper",
        productTileCarouselClass: ".productcarousel_list_item",
        productTileHoverArea: ".product_image_topwrapper",
        productTileActionsArea: ".product_actions"
    };
    var indexReplacementTag = {
        customQuickViewLabel: self.resources.QUICKVIEW
    };
    var $scope = {};
    var F = self.preferences.enableStickyMainNavigation;
    var h = self.preferences.enableStickyProductSectionsNavigation;
    var colStartIndex = self.preferences.maxCategoryItems || 3;
    /** @type {number} */
    var A = 0;
    var defaults = {
        stickyTopBar: "sticky_topbar",
        stickyMainNavigation: "sticky_mainnavigation",
        stickyProductSectionNavigation: "sticky_productsections",
        stickyJS: "js_sticky",
        revert: "revert"
    };
    var w = {
        ldImageWidth: 311,
        ldImageHeight: 444,
        hdImageWidth: 453,
        hdImageHeight: 1E3,
        isZoomable: false
    };
    /** @type {string} */
    var removeCritText = "";
    /**
     * @param {!Object} b
     * @return {undefined}
     */
    var fancybox_show = function(b) {
        var current = b.css("opacity");
        var $attachTo = $(".product_sections_wrapper");
        /** @type {number} */
        var textNamePlace = 0 < current ? 1500 : parseInt($(".product_detail_wrapper").offset().left);
        $attachTo = $attachTo.offset().top + $attachTo.height();
        var dxdydust = $(".section_about").height() + 100;
        b.hide().css({
            top: $attachTo,
            height: dxdydust
        });
        b.show().animate({
            right: textNamePlace + "px",
            opacity: 0 < current ? 0 : 1
        }, 600);
    };
    /**
     * @param {string} message
     * @return {?}
     */
    var build = function(message) {
        if (-1 == message.indexOf("device")) {
            message = self.isTabletUserAgent ? self.util.appendParamToURL(message, "device", "tablet") : message;
            message = self.isMobileUserAgent ? self.util.appendParamToURL(message, "device", "mobile") : message;
        }
        return message;
    };
    self.components.product = self.components.product || {};
    self.components.product.image = self.components.product.image || {};
    /**
     * @param {!Object} b
     * @return {undefined}
     */
    self.components.product.image.hookBeforeInitCloudZoom = function(b) {
        var d = b.find("img").height();
        /** @type {number} */
        var px = (b.height() - d) / 2;
        b.parent().css({
            "padding-top": px,
            "padding-bottom": px
        });
        b.height(d).addClass("product_primary_image_cloud_zoom");
        $("head").append("<style>.cloud-zoom-big {top:-" + px + "px !important;}</style>");
    };
    self.components = self.components || {};
    self.components.global = self.components.global || {};
    self.components.global.custom = {
        init: function() {
            data.document = $(document);
            data.window = $(window);
            data.body = $("body");
            data.main = $(".main");
            data.samples = $(".checkout-samples");
            data.view360link = $(".view_360 a");
            data.image360wrap = $(".product_primary_image .ysl_rotate_360");
            data.prodthumbs = $(".product_thumbnails a.thumbnail_link");
            data.imagewrap = $(".product_primary_image .contentcarousel");
            data.accountlinkitemspan = $(".account_navigation_list_item");
            data.minicartwrapper = $(".minicart_wrapper");
            data.giftCertificateLink = $(".purchase-giftcertificate-header-link");
            data.giftCertificateText = $(".purchase-giftcertificate-header-content .purchase-giftcertificate-header-text");
            data.giftCertificatePin = $(".formfield_gift_certificate_pin input");
            data.errorGiftCertificatePinMessage = $(".formfield_gift_certificate_pin").attr("data-required-text");
            data.socialPopupLink = $("a.social_popup_link_js");
            data.navigation = $(".navigation");
            data.minicart = $("#minicart");
            data.sortby = $(".sort_by_form");
            data.navigationPanel = $(".my_account_navigation_panel");
            data.cartTable = $("#cart_table");
            data.skipMenuLinks = $(".category_link.explore, .category_link.learn");
            data.pdpMain = $("#pdpMain");
            data.refinementHeader = $(".refinement_header");
            data.errorMessage = $(".error_message");
            data.checkoutSubscriptionsArea = data.document.find("#checkout_subscriptions_area");
            data.productDetailsContent = $("#tab_details");
            data.productZoomHelpText = $(".zoom_help_text");
            data.pdpNavigation = $(".product_sections_navigation");
            data.cookieBanner = $("div.cookie_banner");
            data.minicartWrapper = $("div.minicart_wrapper");
            data.navigationMobileMinicart = data.navigation.children(".content");
            data.navigationStickyContent = data.navigation.find("div.js_stickyheader_content");
            data.topBarContent = $("div.sticky_header > div.content div.header-top");
            data.menuSearch = $(".header .inner_header_content");
            data.headerSearchForm = data.menuSearch.find("div.header_search");
            data.header = data.document.find(".header");
            data.headerUtilNav = data.document.find(".header__util-nav");
            data.productSections = data.document.find("ul#sections_menu");
            if (0 < data.pdpMain.length && data.pdpMain.hasClass("pureshot_pdp")) {
                data.body.addClass("pureshot_pdp");
            }
            if (0 < data.productDetailsContent.length) {
                if (!self.isMobileUserAgent && !self.isTabletUserAgent) {
                    var d = data.productDetailsContent.find(".print_page");
                    /** @type {string} */
                    var erroutput = "";
                    if (d.length) {
                        erroutput = d.html();
                        d.remove();
                    }
                    removeCritText = data.productDetailsContent.html();
                    data.productDetailsContent.find("style").remove();
                    d = data.productDetailsContent.text();
                    if (275 < d.length && 0 === $(".pdp_main.pdp_enhanced").length) {
                        d = d.substring(0, 275);
                        data.productDetailsContent.html(erroutput + d + ("<p>...<a href='javascript:void(0);' class='productdetails_readmore'><span>" + app_ysl.resources.PRODUCTDETAILS_READMORE + "</span></a></p>"));
                    }
                }
                data.productDetailsContent.show();
            }
            init();
            render();
        },
        hideHeaderPromoBlock: function(f) {
            error(f);
        },
        stickyMainNavigationIsEnabled: function() {
            return F;
        },
        stickyProductSectionsNavigationIsEnabled: function() {
            return h;
        },
        initSticky: render
    };
    self.quickView = self.quickView || {};
    self.quickView.settings = {
        disableQuickViewOnMobile: true
    };
    /**
     * @return {undefined}
     */
    self.components.global.custom.ogSwitchStyle = function() {
        var currentFieldType;
        /** @type {string} */
        var type = "";
        if (self.page && "type" in self.page) {
            currentFieldType = self.page.type;
        }
        var element = $("#og_widget_content, .og_widget_content, .og_modify_popup, #og-popup-container").find("select");
        if (element.length) {
            element.find("option").each(function() {
                var aVal = $.trim($(this).text());
                if ($.isNumeric(aVal) && 10 > parseInt(aVal, 10)) {
                    $(this).text("0" + aVal);
                }
            });
            element.selectBoxIt();
        }
        /** @type {string} */
        type = self.isMobileUserAgent || self.isTabletUserAgent ? "touch" : "click";
        $("#og_every").on(type, function() {
            $("#og_deliver_on").trigger(type);
        });
        switch (currentFieldType) {
            case "Cart":
                if (jQuery(".og_row.og_row_first").addClass("f_checked"), jQuery(".og_freq_select")) {
                    jQuery(".og_freq_select").on("change", function() {
                        var viewerid = $(this).attr("id").replace("og_every_", "");
                        jQuery("#og_deliver_on_" + viewerid).trigger(type);
                    });
                }
        }
        data.document.trigger("og.callbackdone");
    };
})(window.app = window.app || {}, jQuery);
(function(result, $) {
    /**
     * @return {undefined}
     */
    function init() {
        if (!("isMobileUserAgent" in result && result.isMobileUserAgent || "isTabletUserAgent" in result && result.isTabletUserAgent)) {
            self.navigation.find("li.level_1_list_item").on("mouseenter", function() {
                if ((match = $(this)) && match.find(".content").length && "" != $.trim(match.find(".content").html())) {
                    match.addClass("hover");
                    render(match.find(".navigation_dropdown"));
                    start();
                }
            });
            self.navigation.find("li.level_1_list_item").on("mouseleave", function() {
                /** @type {null} */
                match = null;
                $(this).removeClass("hover");
                show();
            });
        }
        self.main.trigger("imageReplace.globalResponsive");
        self.document.on("click", "#backToTop, .js_back_to_top", function() {
            $("html, body").animate({
                scrollTop: 0
            }, o.scrollSpeed);
        });
        setup();
        self.document.on("mouseover", ".minicart, .js_util_nav_link, .js_account_nav_link, .account_navigation_link", start);
        self.document.on("mouseleave", ".minicart, .js_headerSection", show);
        self.document.on("click", ".js_sticky_search", addOrEditWatchExpression);
        self.document.on("keydown", ".js_subscribe_email input", removeFocusState);
        self.document.on("minicart.lineItemRemoved", keyEvts);
    }
    /**
     * @return {undefined}
     */
    function start() {
        if (!$("#" + self.navOverlayId).length) {
            self.navigation.after('<div id="' + self.navOverlayId + '" />');
            self.navOverlay = $("#" + self.navOverlayId);
        }
        parseInt(self.navigation.offset().top);
        parseInt(self.navigation.height());
        parseInt(self.footerMain.height());
        parseInt(self.main.height());
        if (/MSIE/.test(navigator.userAgent) && "homepage" == result.page.currentPage) {
            $("#dwfrm_newsletter_email").blur();
        }
        $(document).trigger("categoryNav.open");
        self.navOverlay.show();
        $(".header, #" + self.navOverlayId + "").off().on("touchstart", function() {
            show();
        });
    }
    /**
     * @param {!Object} store
     * @return {undefined}
     */
    function render(store) {
        store.find(".header-lazyload-img").each(function(element, selectorOrEl) {
            element = $(selectorOrEl);
            element.removeClass("header-lazyload-img").attr("src", element.attr("data-src")).removeAttr("data-src").data("src", "");
        });
    }
    /**
     * @return {undefined}
     */
    function keyEvts() {
        self.document.find("#minicart").trigger("mouseleave");
    }
    /**
     * @return {undefined}
     */
    function show() {
        self.navigation.find("li.hover").removeClass("hover");
        $(document).trigger("categoryNav.close");
        self.navOverlay.hide();
    }
    /**
     * @return {undefined}
     */
    function addOrEditWatchExpression() {
        var menu_wrapper = $(this);
        menu_wrapper.toggleClass("sticky-header__search--triggered");
        $(".js_header_search").toggleClass("header-search--expanded");
        if (menu_wrapper.hasClass("sticky-header__search--triggered")) {
            start();
        } else {
            show();
        }
    }
    /**
     * @return {undefined}
     */
    function removeFocusState() {
        $(this).parents(".js_newsletter_subscribe_form").find(".c-button").addClass("c-button--inverted");
        if (!$(this).val()) {
            $(this).parents(".js_newsletter_subscribe_form").find(".c-button").removeClass("c-button--inverted");
        }
    }
    /**
     * @return {undefined}
     */
    function setup() {
        var areaSatBrightness = self.document.find(".js_back_to_top_floating_container");
        if (areaSatBrightness.length) {
            $(window).on("scroll", _.debounce(function() {
                var currentPos = areaSatBrightness.offset().top + areaSatBrightness.height();
                self.document.find("#backToTop, .js_back_to_top").toggleClass("c-back-to-top__button--hidden", currentPos > self.window.scrollTop());
            }, 200));
        }
    }
    var self = {};
    var match;
    var o = {
        scrollSpeed: 600
    };
    result.components = result.components || {};
    result.components.global = result.components.global || {};
    result.components.global.navigation = {
        init: function() {
            self.window = $(window);
            self.body = $("body");
            /** @type {string} */
            self.navOverlayId = "nav_overlay";
            self.navOverlay = $("#" + self.navOverlayId);
            self.navigation = $(".navigation");
            self.main = $(".main");
            self.footerMain = $(".footer_main");
            self.skipMenuLinks = $(".category_link.explore, .category_link.learn");
            self.document = $(document);
            init();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(UI, klass) {
    UI.components = UI.components || {};
    UI.components.dialog = UI.components.dialog || {};
    UI.components.dialog.custom = {
        init: function() {
            UI.dialog.init({
                position: "center",
                width: "auto",
                draggable: false,
                maxHeight: "none",
                minHeight: 200
            });
        }
    };
})(window.app = window.app || {}, jQuery);
(function(data, $) {
    /**
     * @return {?}
     */
    function show() {
        if (0 == self.moodboardContainer.length) {
            return run.call(self.moodboardPushPage), create(self.document.find(".pre_carousel_init").addClass("carousel").removeClass("pre_carousel_init")), false;
        }
        if (pos.useMoodboardPreloader) {
            self.moodboardLoader = $("<div>").attr("class", "moodboard_loader").appendTo(self.moodboardConfigurationContainer);
            self.moodboardContainer.waitForImages(function() {
                self.moodboardLoader.remove();
                init();
                self.moodboardContainer.css("visibility", "visible");
            }, function(b, canCreateDiscussions, isSlidingUp) {}, true);
        } else {
            init();
            self.moodboardContainer.css("visibility", "visible");
        }
    }
    /**
     * @return {undefined}
     */
    function init() {
        result = self.moodboardConfigurationContainer.data("configuration");
        if (0 < self.popUpPushes.length) {
            self.popUpPushes.on("click", function(event) {
                self.push = $(this);
                var config = self.push.data("configuration");
                if (K) {
                    if ("type" in config && "video" == config.type && "videoId" in config) {
                        return window.open("//www.youtube.com/watch?v=" + config.videoId, "_blank"), false;
                    }
                    if ("linkType" in config && "editorial" == config.linkType && "contentId" in config) {
                        return true;
                    }
                }
                event.preventDefault();
                add(config);
            });
        }
        pos.parallaxEnabled = isAnObject && "tabletParallaxEnabled" in result ? result.tabletParallaxEnabled : pos.parallaxEnabled;
        if (pos.parallaxEnabled) {
            skrollr.init({
                forceHeight: false,
                mobileCheck: function() {
                    return data.isMobileUserAgent;
                }
            });
        }
        if (pos.customScrollEnabled) {
            $("html").niceScroll({
                scrollspeed: "customScroller" in result && result.customScroller.scrollspeed ? result.customScroller.scrollspeed : settings.scrollspeed,
                mousescrollstep: "customScroller" in result && result.customScroller.mousescrollstep ? result.customScroller.mousescrollstep : settings.mousescrollstep,
                autohidemode: false,
                background: "#D5D5D5",
                cursorwidth: "18px",
                cursorcolor: "#070707",
                cursorborder: "1px solid #D5D5D5",
                cursorborderradius: "0px",
                zindex: 2E3
            });
        }
        initialize();
        handleInput();
        initMap();
        gatherManifestData();
    }
    /**
     * @return {undefined}
     */
    function initialize() {
        if (isAnObject) {
            $("html").removeAttr("style");
            if (pos.parallaxEnabled) {
                setInterval(function() {
                    self.document.trigger("custom.pagescroll");
                }, 1500);
                $(window).on("orientationchange", function() {
                    self.stickyHeader.css({
                        position: "absolute",
                        top: "1px"
                    });
                    $(this).scrollTop(0);
                });
            } else {
                if (0 < self.pushes.length) {
                    $.each(self.pushes, function() {
                        var item = $(this);
                        var proxy = item.data("configuration");
                        if (proxy && proxy.yPosTablet) {
                            item.css("top", parseInt(proxy.yPosTablet) + "px");
                        }
                        if (proxy && proxy.xPosTablet) {
                            item.css("left", parseInt(proxy.xPosTablet) + "px");
                        }
                    });
                }
            }
            $(".product_image_topwrapper").on("click", function(b) {
                return false;
            });
        }
    }
    /**
     * @return {undefined}
     */
    function handleInput() {
        if (K && 0 < self.pushes.length) {
            $.each(self.pushes, function() {
                var item = $(this);
                var root = item.data("configuration");
                if (root && root.yPosMobile) {
                    item.css("top", parseInt(root.yPosMobile) + "px");
                }
                if (root && root.xPosMobile) {
                    if ("left" == root.xPosMobile) {
                        item.css({
                            left: "0",
                            right: "auto"
                        });
                    } else {
                        if ("right" == root.xPosMobile) {
                            item.css({
                                left: "auto",
                                right: "0"
                            });
                        }
                    }
                }
            });
        }
    }
    /**
     * @param {!Object} reactionTimeInMs
     * @return {undefined}
     */
    function create(reactionTimeInMs) {
        /** @type {!Object} */
        self.carouselContainer = reactionTimeInMs;
        if (self.carouselContainer.length) {
            self.carouselLoader = $("<div>").attr("class", "slideshow_loader").appendTo(self.carouselContainer.find("> div"));
            self.carouselContainer.on("jcarousel:fullyvisiblein", "li", function(b, canCreateDiscussions) {
                self.carouselContainer.animate({
                    height: this.clientHeight + 30
                }, {
                    duration: 500,
                    complete: function() {
                        self.carouselLoader.animate({
                            opacity: 0
                        }, {
                            duration: 100,
                            complete: function() {
                                /** @type {string} */
                                this.style.display = "none";
                            }
                        });
                    }
                });
            });
            self.carouselContainer.on("jcarousel:animate", function() {
                self.carouselLoader.css({
                    opacity: 1,
                    display: "block"
                });
            });
            self.carouselContainer.on("jcarousel:animateend", function() {
                self.carouselLoader.animate({
                    opacity: 0
                }, {
                    duration: 0,
                    complete: function() {
                        /** @type {string} */
                        this.style.display = "none";
                    }
                });
            });
            self.carouselContainer.waitForImages(function() {
                data.carousel.init(self.carouselContainer);
            }, function(b, canCreateDiscussions, isSlidingUp) {}, false);
        }
    }
    /**
     * @return {undefined}
     */
    function initMap() {
        if (0 < self.animatedPushes.length) {
            h = self.stickyHeader.height();
            resize();
            self.window.on("scroll", function(b) {
                resize();
            });
        }
    }
    /**
     * @return {undefined}
     */
    function gatherManifestData() {
        if (0 < self.fadedPushes.length) {
            next();
            self.window.on("scroll", function(b) {
                next();
            });
        }
    }
    /**
     * @return {undefined}
     */
    function resize() {
        $.each(self.animatedPushes, function() {
            var item = $(this);
            var d = item.data("configuration") || {};
            if (!newPositions[d.contentId]) {
                newPositions[d.contentId] = {
                    top: item.offset().top,
                    left: item.offset().left
                };
            }
            item = $(this);
            var r = self.document.scrollTop();
            var data = item.data("configuration") || {};
            /** @type {number} */
            var b = parseInt(data.yPos) || 1E5;
            d = item.find("img").length;
            /** @type {number} */
            r = r - h - pos.animatedPushStartpoint;
            /** @type {number} */
            var g = b + d * d;
            if (b <= r && r <= g) {
                item.css({
                    position: "fixed",
                    left: data.contentId in newPositions ? newPositions[data.contentId].left : 0,
                    top: h + pos.animatedPushStartpoint
                });
                /** @type {number} */
                data = Math.abs(Math.round(d - (g - r) / d));
                if (data >= d - 1) {
                    /** @type {number} */
                    data = d - 1;
                }
                render(item, data);
            } else {
                if (r >= g) {
                    item.css({
                        position: "absolute",
                        top: g - pos.animatedPushStartpoint,
                        left: 0
                    });
                    render(item, d - 1);
                } else {
                    item.css({
                        position: "absolute",
                        top: b,
                        left: 0
                    });
                    render(item, 0);
                }
            }
        });
    }
    /**
     * @return {undefined}
     */
    function next() {
        $.each(self.fadedPushes, function() {
            var item = $(this);
            var val = item.data("configuration") || {};
            if (!parsers[val.contentId]) {
                var c = (val.fadePoints || "").split(",");
                if (0 < c.length) {
                    /** @type {!Array} */
                    var p = [];
                    /** @type {number} */
                    var i = 0;
                    for (; i < c.length; i++) {
                        var matches = c[i].split(":");
                        if (2 == matches.length) {
                            p.push({
                                point: parseInt(matches[0]),
                                opacity: matches[1]
                            });
                        }
                    }
                    /** @type {!Array} */
                    parsers[val.contentId] = p;
                }
            }
            val = self.document.scrollTop();
            c = item.data("configuration") || {};
            c = c.contentId in parsers ? parsers[c.contentId] : [];
            p = c.length;
            if (0 < p) {
                /** @type {number} */
                i = 0;
                for (; i < p; i++) {
                    if (0 == i) {
                        if (val < c[i].point) {
                            item.stop().animate({
                                opacity: c[i].opacity
                            }, "fast");
                        }
                    } else {
                        if (c[i - 1].point < val && val < c[i].point) {
                            item.stop().animate({
                                opacity: c[i].opacity
                            }, "fast");
                        }
                    }
                }
                if (val > c[p - 1].point) {
                    item.stop().animate({
                        opacity: 1
                    }, "fast");
                }
            }
        });
    }
    /**
     * @param {!Object} selector
     * @param {number} from
     * @return {undefined}
     */
    function render(selector, from) {
        selector.find("img").removeClass("active").eq(from).addClass("active");
    }
    /**
     * @param {!Object} opts
     * @return {undefined}
     */
    function add(opts) {
        var params = result.contentId;
        var id = opts.contentId;
        options.contentId = id;
        /** @type {!Object} */
        config = opts;
        if (opts.linkType && "editorial" == opts.linkType && opts.cid) {
            id = opts.cid;
        }
        params = {
            url: data.util.appendParamsToUrl(app_ysl.urls.moodboardGetPopupPush, {
                mid: params,
                pid: id
            }),
            callback: update,
            options: {
                dialogClass: "popup_push_dialog",
                close: function() {
                    self.pushes.each(function() {
                        var $newDish = $(this);
                        $newDish.css("z-index", parseInt($newDish.css("z-index")) + 1);
                    });
                }
            },
            data: {
                configuration: config
            }
        };
        if ("undefined" != typeof opts.cssClass) {
            params.options.dialogClass += " " + opts.cssClass;
        }
        data.dialog.open(params);
    }
    /**
     * @return {undefined}
     */
    function update() {
        /** @type {number} */
        var b = 0;
        /** @type {boolean} */
        var article = !!this.data.configuration.article;
        self.pushDialog = $(".popup_push_dialog");
        self.dialogShare = self.pushDialog.find(".dialog_services_share a");
        self.dialogShareContent = $(".dialog_services_share_content");
        self.dialogCaContainer = $(".ca_container");
        /** @type {boolean} */
        self.dialogCaContainer.article = article;
        $carouselContainer = self.pushDialog.find(".pre_carousel_init").addClass("carousel").removeClass("pre_carousel_init");
        if (!config.game) {
            run.call(self.dialogCaContainer);
        }
        if (self.dialogShare.length) {
            self.dialogShare.on("mouseenter", function() {
                if (0 == b || 500 < (new Date).getTime() - b) {
                    self.dialogShare.find(".tooltip_content_social").toggle("fade");
                }
            });
            self.dialogShare.on("mouseleave", function() {
                if (0 == b || 500 < (new Date).getTime() - b) {
                    self.dialogShare.find(".tooltip_content_social").toggle("fade");
                }
                /** @type {number} */
                b = (new Date).getTime();
            });
            self.dialogShare.toggle(function(event) {
                event.preventDefault();
                $("<div>").attr("class", "dialog-video-mask").appendTo(self.dialogCaContainer);
                self.dialogShareContent.slideToggle();
            }, function(event) {
                event.preventDefault();
                self.dialogShareContent.slideToggle(function() {
                    $(".dialog-video-mask").remove();
                });
            });
        }
        if ($carouselContainer.length) {
            create($carouselContainer);
        }
        if (config.game) {
            link();
        }
        $(document).trigger("moodboard.popupcontent.loaded");
    }
    /**
     * @return {undefined}
     */
    function link() {
        self.gamePacmanLink = self.pushDialog.find(".pacman_game");
        self.gameSnakeLink = self.pushDialog.find(".snake_game");
        self.gamePacman = self.dialogCaContainer.find(".pacman_container");
        self.gameSnake = self.dialogCaContainer.find(".snake_container");
        self.gamePush = $(".popup_header_game").parent();
        /** @type {boolean} */
        var b = false;
        self.gamePush.on("keydown", function(b) {
            return false;
        });
        $(document).on("dialog.close", function() {
            self.gamePush.off("keydown");
        });
        self.gamePacmanLink.on("click", function(event) {
            event.preventDefault();
            /** @type {boolean} */
            b = true;
            self.gamePacmanLink.addClass("selected");
            self.gameSnakeLink.removeClass("selected");
            if (!b) {
                main_chat_users_num(0);
                start(3);
            }
            self.gameSnake.css("display", "none");
            self.gamePacman.css("display", "block");
        });
        self.gameSnakeLink.on("click", function(event) {
            event.preventDefault();
            /** @type {boolean} */
            b = true;
            self.gameSnakeLink.addClass("selected");
            self.gamePacmanLink.removeClass("selected");
            if (!b) {
                main_chat_users_num(0);
            }
            self.gamePacman.css("display", "none");
            self.gameSnake.css("display", "block");
        });
        self.document.on("dialogclose", function() {
            if (config.game) {
                try {
                    delete window.flashgame_updateScore;
                    delete window.flashgame_updateLife;
                    delete window.flashgame_updateLipstick;
                } catch (L) {
                    window.flashgame_updateScore = void 0;
                    window.flashgame_updateLife = void 0;
                    window.flashgame_updateLipstick = void 0;
                }
            }
        });
        /** @type {function(!Object): undefined} */
        window.flashgame_updateScore = main_chat_users_num;
        /** @type {function(number): undefined} */
        window.flashgame_updateLife = start;
        /** @type {function(number): undefined} */
        window.flashgame_updateLipstick = _initVar;
    }
    /**
     * @param {!Object} action
     * @return {undefined}
     */
    function main_chat_users_num(action) {
        $(".score strong").text(action);
    }
    /**
     * @param {number} clientWidth
     * @return {undefined}
     */
    function _initVar(clientWidth) {
        /** @type {string} */
        var key = "";
        /** @type {number} */
        var targetOffsetWidth = 0;
        for (; targetOffsetWidth < clientWidth; ++targetOffsetWidth) {
            /** @type {string} */
            key = key + ('<img src="' + data.urls.staticPath + 'images/flashgames/lipstick.png">');
        }
        $(".lipsticks").html(key);
    }
    /**
     * @param {number} i
     * @return {undefined}
     */
    function start(i) {
        if (-1 === i) {
            $(".score .life").hide();
        } else {
            /** @type {string} */
            var key = "";
            /** @type {number} */
            var whichFriend = 0;
            for (; whichFriend < i; ++whichFriend) {
                /** @type {string} */
                key = key + ('<img src="' + data.urls.staticPath + 'images/flashgames/life.png">');
            }
            $(".score .life").show();
            $(".score .life").html(key);
        }
    }
    /**
     * @return {undefined}
     */
    function run() {
        options.videoId = this.find(".video_iframe").data("video-id");
        if (null !== options.videoId) {
            options = {
                facebook: {
                    toolbox: {
                        addthis_share_config: {
                            url: "{0}//www.youtube.com/watch?v={1}".replace("{0}", window.location.protocol).replace("{1}", options.videoId)
                        },
                        networks: ["facebook_like"]
                    }
                },
                other: {
                    toolbox: {
                        addthis_share_config: {
                            url: "{0}//www.youtube.com/watch?v={1}".replace("{0}", window.location.protocol).replace("{1}", options.videoId)
                        },
                        networks: ["pinterest_pinit", "tweet", "google_plusone", "tumblr"]
                    },
                    pinterest_pinit: {
                        "pi:pinit:media": "{0}//img.youtube.com/vi/{1}/mqdefault.jpg".replace("{0}", window.location.protocol).replace("{1}", options.videoId)
                    },
                    tweet: {
                        "tw:via": "YSLBeautyUK"
                    }
                }
            };
        } else {
            options.contentUrl = data.util.appendParamsToUrl(data.urls.getMoodboardInfoUrl, {
                cid: options.contentId,
                mid: data.util.getParameterValueFromUrl("mid", window.location.href)
            });
            var script = this.find(".share_image").eq(0);
            options.media = script.length ? script.attr("src") : this.find("img").eq(0).attr("src");
            options = {
                facebook: {
                    toolbox: {
                        addthis_share_config: {
                            url: options.contentUrl
                        },
                        networks: ["facebook_like"]
                    }
                },
                other: {
                    toolbox: {
                        addthis_share_config: {
                            url: options.contentUrl
                        },
                        networks: ["pinterest_pinit", "tweet", "google_plusone", "tumblr"]
                    },
                    pinterest_pinit: {
                        "pi:pinit:media": options.media
                    },
                    tweet: {
                        "tw:via": "YSLBeautyUK"
                    }
                }
            };
        }
        if ("undefined" != typeof options.facebook && "undefined" != typeof options.other) {
            if (this.article) {
                delete options.other.pinterest_pinit;
                /** @type {!Array} */
                options.other.toolbox.networks = ["tweet", "google_plusone", "tumblr"];
            }
            data.components.global.addthis.initToolbox(".facebook_like", options.facebook);
            data.components.global.addthis.initToolbox("", options.other);
            /** @type {number} */
            var moveId = setInterval(function() {
                if ("undefined" !== typeof FB && null !== FB) {
                    FB.Event.subscribe("xfbml.render", function() {
                        $(".push_popup_header .facebook_like").removeClass("scroll_off");
                    });
                    clearInterval(moveId);
                }
            }, 500);
        }
    }
    var self = {};
    var result = {};
    var config = {};
    var options = {};
    var pos = {};
    var settings = {
        animatedPushStartpoint: 40,
        scrollspeed: 100,
        mousescrollstep: 20,
        customScrollEnabled: true,
        parallaxEnabled: true,
        useMoodboardPreloader: true
    };
    /** @type {number} */
    var h = 0;
    var newPositions = {};
    var parsers = {};
    /** @type {boolean} */
    var isAnObject = false;
    /** @type {boolean} */
    var K = false;
    data.components = data.components || {};
    data.components.global = data.components.global || {};
    data.components.global.moodboards = {
        init: function(name) {
            pos = name && "object" === typeof name ? $.extend({}, settings, name) : settings;
            if ("isTabletUserAgent" in data && data.isTabletUserAgent) {
                /** @type {boolean} */
                pos.customScrollEnabled = false;
                /** @type {boolean} */
                isAnObject = true;
            } else {
                if ("isMobileUserAgent" in data && data.isMobileUserAgent) {
                    /** @type {boolean} */
                    pos.customScrollEnabled = false;
                    /** @type {boolean} */
                    pos.parallaxEnabled = false;
                    /** @type {boolean} */
                    K = true;
                }
            }
            self.document = $(document);
            self.window = $(window);
            self.moodboardContainer = $(".moodboard_container");
            self.moodboardConfigurationContainer = $(".js_moodboard");
            self.moodboardLoader = self.moodboardConfigurationContainer.find(".moodboard_loader");
            self.moodboardPushPage = $(".push_page");
            self.pushes = self.moodboardContainer.find(".moodboard_push");
            self.popUpPushes = self.moodboardContainer.find(".push_popup_true");
            self.animatedPushes = self.moodboardContainer.find(".type_animation");
            self.fadedPushes = self.moodboardContainer.find(".type_fade");
            self.stickyHeader = $(".sticky_header");
            show();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @return {undefined}
     */
    function createHPipe() {
        $("html");
        child = $(window);
        root = $(document);
        obj = $("#backToTop");
        bind();
    }
    /**
     * @return {undefined}
     */
    function bind() {
        path = $(options.footerSelector || []).outerHeight() || 0;
    }
    /**
     * @return {undefined}
     */
    function _init() {
        root.on("click touchstart", "#backToTop, .js_back_to_top", function() {
            $("html, body").animate({
                scrollTop: 0
            }, options.scrollSpeed);
        });
        child.on("scroll touchmove orientationchange", i).on("resize", function() {
            bind();
            i();
        });
        root.on("search.update", function() {
            createHPipe();
            i();
        });
        root.one("click touchstart", ".js_close-banner", function() {
            $(this).parents(".js_banner-container").remove();
        });
    }
    /**
     * @return {undefined}
     */
    function i() {
        /** @type {number} */
        var b = root.height() * options.showBackBlockPercents;
        if (0 != path && child.scrollTop() > root.height() - window.innerHeight - path) {
            if ("" != options.blockPositionBefore) {
                obj.css("position", options.blockPositionBefore);
            } else {
                obj.css("bottom", path - root.height() + window.innerHeight + child.scrollTop() + options.footerTopPadding + "px");
            }
        } else {
            if ("" != options.blockPositionAfter) {
                obj.css("position", options.blockPositionAfter);
            } else {
                obj.css("bottom", "");
            }
        }
        if (!obj.hasClass("visibleBackToTop") && b < child.scrollTop()) {
            obj.stop(true, true).fadeIn(options.fadeSpeed).addClass("visibleBackToTop");
        } else {
            if (obj.hasClass("visibleBackToTop") && b >= child.scrollTop()) {
                obj.stop(true, true).fadeOut(options.fadeSpeed).removeClass("visibleBackToTop");
            }
        }
    }
    var child;
    var root;
    var obj;
    var path;
    path = obj = root = child = void 0;
    var options = {
        scrollSpeed: 600,
        showBackBlockPercents: .25,
        fadeSpeed: 100,
        footerSelector: null,
        footerTopPadding: 0,
        blockPositionBefore: "",
        blockPositionAfter: ""
    };
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.pagenavigation = {
        init: function(name) {
            options = $.extend({}, options, name);
            createHPipe();
            _init();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(data, $) {
    /**
     * @return {undefined}
     */
    function init() {
        $.each(options.tiles, function() {
            var row = $(this);
            var f = row.parents(".row_tile_link");
            var obj = row.data("tile");
            if (row.hasClass("type_slide-animation")) {
                row.on("mouseover touchstart", function(b) {
                    row.find(".asset2").stop(true).animate({
                        "margin-top": "0px"
                    }, 600);
                });
                row.on("mouseout", function(b) {
                    row.find(".asset2").stop(true).animate({
                        "margin-top": -row.outerHeight() + "px"
                    }, 600);
                });
            }
            if (row.hasClass("type_color-animation") && obj && obj.color1 && obj.color2) {
                row.css("background-color", obj.color1);
                row.on("mouseover", function(b) {
                    row.stop(true).animate({
                        "background-color": obj.color2
                    }, 600);
                });
                row.on("mouseout", function(b) {
                    row.stop(true).animate({
                        "background-color": obj.color1
                    }, 600);
                });
            }
            if (0 < f.length && obj && "link" in obj && "quickview" == obj.link) {
                f.on("click touchstart", function(event) {
                    if (data.isTabletUserAgent || data.isMobileUserAgent) {
                        /** @type {boolean} */
                        var appt = 0 == parseInt(row.find(".asset2").css("margin-top"));
                        if (!appt) {
                            return event.preventDefault(), false;
                        }
                        if (appt && data.isTabletUserAgent) {
                            event.preventDefault();
                            data.quickView.show({
                                url: f.attr("href"),
                                source: "quickview"
                            });
                        }
                        return true;
                    }
                    event.preventDefault();
                    data.quickView.show({
                        url: f.attr("href"),
                        source: "quickview"
                    });
                });
            }
        });
    }
    var options = {};
    data.components = data.components || {};
    data.components.content = data.components.content || {};
    data.components.content.tilebased = {
        init: function() {
            options.tiles = $(".row_tile");
            init();
        }
    };
})(window.app = window.app || {}, jQuery);
(function($) {
    /**
     * @param {!Object} options
     * @return {?}
     */
    function init(options) {
        if (!(!options || void 0 !== options.allowPageScroll || void 0 === options.swipe && void 0 === options.swipeStatus)) {
            /** @type {string} */
            options.allowPageScroll = NONE;
        }
        if (!options) {
            options = {};
        }
        options = $.extend({}, $.fn.swipe.defaults, options);
        return this.each(function() {
            var d = $(this);
            var e = d.data(r);
            if (!e) {
                e = new touchSwipe(this, options);
                d.data(r, e);
            }
        });
    }
    /**
     * @param {?} element
     * @param {!Object} options
     * @return {undefined}
     */
    function touchSwipe(element, options) {
        /**
         * @param {!Object} event
         * @return {?}
         */
        function touchStart(event) {
            event = event.originalEvent;
            var ret;
            var e = evt ? event.touches[0] : event;
            /** @type {string} */
            state = working;
            if (evt) {
                fingerCount = event.touches.length;
            } else {
                event.preventDefault();
            }
            /** @type {number} */
            distance = 0;
            /** @type {null} */
            args = null;
            /** @type {number} */
            duration = 0;
            if (evt && fingerCount !== options.fingers && options.fingers !== ALL) {
                touchCancel(event);
            } else {
                i = x = e.pageX;
                y = y2 = e.pageY;
                /** @type {number} */
                lastTapTime = (new Date).getTime();
                if (options.swipeStatus) {
                    ret = triggerHandler(event, state);
                }
            }
            if (false === ret) {
                return state = name, triggerHandler(event, state), ret;
            }
            $element.bind(MOVE_EV, touchMove);
            $element.bind(END_EV, touchEnd);
        }
        /**
         * @param {string} event
         * @return {undefined}
         */
        function touchMove(event) {
            event = event.originalEvent;
            if (state !== undefined && state !== name) {
                var ret;
                var e = evt ? event.touches[0] : event;
                x = e.pageX;
                y2 = e.pageY;
                /** @type {number} */
                time = (new Date).getTime();
                args = calculateDistance();
                if (evt) {
                    fingerCount = event.touches.length;
                }
                /** @type {string} */
                state = ATTR_KEY_W;
                /** @type {string} */
                e = event;
                var key = args;
                if (options.allowPageScroll === NONE) {
                    e.preventDefault();
                } else {
                    /** @type {boolean} */
                    var auto = options.allowPageScroll === AUTO;
                    switch (key) {
                        case LEFT:
                            if (options.swipeLeft && auto || !auto && options.allowPageScroll != HORIZONTAL) {
                                e.preventDefault();
                            }
                            break;
                        case RIGHT:
                            if (options.swipeRight && auto || !auto && options.allowPageScroll != HORIZONTAL) {
                                e.preventDefault();
                            }
                            break;
                        case UP:
                            if (options.swipeUp && auto || !auto && options.allowPageScroll != VERTICAL) {
                                e.preventDefault();
                            }
                            break;
                        case DOWN:
                            if (options.swipeDown && auto || !auto && options.allowPageScroll != VERTICAL) {
                                e.preventDefault();
                            }
                    }
                }
                if (fingerCount !== options.fingers && options.fingers !== ALL && evt) {
                    /** @type {string} */
                    state = name;
                    triggerHandler(event, state);
                } else {
                    distance = caluculateDistance();
                    /** @type {number} */
                    duration = time - lastTapTime;
                    if (options.swipeStatus) {
                        ret = triggerHandler(event, state, args, distance, duration);
                    }
                    if (!options.triggerOnTouchEnd) {
                        /** @type {boolean} */
                        e = !(options.maxTimeThreshold ? !(duration >= options.maxTimeThreshold) : 1);
                        if (true === validateSwipeDistance()) {
                            /** @type {string} */
                            state = undefined;
                            ret = triggerHandler(event, state);
                        } else {
                            if (e) {
                                /** @type {string} */
                                state = name;
                                triggerHandler(event, state);
                            }
                        }
                    }
                }
                if (false === ret) {
                    /** @type {string} */
                    state = name;
                    triggerHandler(event, state);
                }
            }
        }
        /**
         * @param {string} event
         * @return {undefined}
         */
        function touchEnd(event) {
            event = event.originalEvent;
            event.preventDefault();
            /** @type {number} */
            time = (new Date).getTime();
            distance = caluculateDistance();
            args = calculateDistance();
            /** @type {number} */
            duration = time - lastTapTime;
            if (options.triggerOnTouchEnd || false === options.triggerOnTouchEnd && state === ATTR_KEY_W) {
                if (state = undefined, fingerCount !== options.fingers && options.fingers !== ALL && evt || 0 === x) {
                    /** @type {string} */
                    state = name;
                    triggerHandler(event, state);
                } else {
                    /** @type {boolean} */
                    var c = !(options.maxTimeThreshold ? !(duration >= options.maxTimeThreshold) : 1);
                    if ((true === validateSwipeDistance() || null === validateSwipeDistance()) && !c) {
                        triggerHandler(event, state);
                    } else {
                        if (c || false === validateSwipeDistance()) {
                            /** @type {string} */
                            state = name;
                            triggerHandler(event, state);
                        }
                    }
                }
            } else {
                if (state === ATTR_KEY_W) {
                    /** @type {string} */
                    state = name;
                    triggerHandler(event, state);
                }
            }
            $element.unbind(MOVE_EV, touchMove, false);
            $element.unbind(END_EV, touchEnd, false);
        }
        /**
         * @return {undefined}
         */
        function touchCancel() {
            /** @type {number} */
            lastTapTime = time = y2 = x = y = i = fingerCount = 0;
        }
        /**
         * @param {!Object} event
         * @param {string} type
         * @return {?}
         */
        function triggerHandler(event, type) {
            var ret = void 0;
            if (options.swipeStatus) {
                ret = options.swipeStatus.call($element, event, type, args || null, distance || 0, duration || 0, fingerCount);
            }
            if (!(type !== name || !options.click || 1 !== fingerCount && evt || !isNaN(distance) && 0 !== distance)) {
                ret = options.click.call($element, event, event.target);
            }
            if (type == undefined) {
                switch (options.swipe && (ret = options.swipe.call($element, event, args, distance, duration, fingerCount)), args) {
                    case LEFT:
                        if (options.swipeLeft) {
                            ret = options.swipeLeft.call($element, event, args, distance, duration, fingerCount);
                        }
                        break;
                    case RIGHT:
                        if (options.swipeRight) {
                            ret = options.swipeRight.call($element, event, args, distance, duration, fingerCount);
                        }
                        break;
                    case UP:
                        if (options.swipeUp) {
                            ret = options.swipeUp.call($element, event, args, distance, duration, fingerCount);
                        }
                        break;
                    case DOWN:
                        if (options.swipeDown) {
                            ret = options.swipeDown.call($element, event, args, distance, duration, fingerCount);
                        }
                }
            }
            if (!(type !== name && type !== undefined)) {
                touchCancel(event);
            }
            return ret;
        }
        /**
         * @return {?}
         */
        function validateSwipeDistance() {
            return null !== options.threshold ? distance >= options.threshold : null;
        }
        /**
         * @return {?}
         */
        function caluculateDistance() {
            return Math.round(Math.sqrt(Math.pow(x - i, 2) + Math.pow(y2 - y, 2)));
        }
        /**
         * @return {?}
         */
        function calculateDistance() {
            var angle;
            /** @type {number} */
            angle = Math.atan2(y2 - y, i - x);
            /** @type {number} */
            angle = Math.round(180 * angle / Math.PI);
            if (0 > angle) {
                /** @type {number} */
                angle = 360 - Math.abs(angle);
            }
            return 45 >= angle && 0 <= angle ? LEFT : 360 >= angle && 315 <= angle ? LEFT : 135 <= angle && 225 >= angle ? RIGHT : 45 < angle && 135 > angle ? DOWN : UP;
        }
        /**
         * @return {undefined}
         */
        function disable() {
            $element.unbind(START_EV, touchStart);
            $element.unbind(type, touchCancel);
            $element.unbind(MOVE_EV, touchMove);
            $element.unbind(END_EV, touchEnd);
        }
        var x;
        var y2;
        var i;
        var y;
        /** @type {boolean} */
        var hasTouch = evt || !options.fallbackToMouseEvents;
        /** @type {string} */
        var START_EV = hasTouch ? "touchstart" : "mousedown";
        /** @type {string} */
        var MOVE_EV = hasTouch ? "touchmove" : "mousemove";
        /** @type {string} */
        var END_EV = hasTouch ? "touchend" : "mouseup";
        /** @type {string} */
        var type = "touchcancel";
        /** @type {number} */
        var distance = 0;
        /** @type {null} */
        var args = null;
        /** @type {number} */
        var duration = 0;
        var $element = $(element);
        /** @type {string} */
        var state = "start";
        /** @type {number} */
        var fingerCount = 0;
        /** @type {number} */
        var lastTapTime = y2 = x = y = i = 0;
        /** @type {number} */
        var time = 0;
        try {
            $element.bind(START_EV, touchStart);
            $element.bind(type, touchCancel);
        } catch (Y) {
            $.error("events not supported " + START_EV + "," + type + " on jQuery.swipe");
        }
        /**
         * @return {?}
         */
        this.enable = function() {
            $element.bind(START_EV, touchStart);
            $element.bind(type, touchCancel);
            return $element;
        };
        /**
         * @return {?}
         */
        this.disable = function() {
            disable();
            return $element;
        };
        /**
         * @return {?}
         */
        this.destroy = function() {
            disable();
            $element.data(r, null);
            return $element;
        };
    }
    /** @type {string} */
    var LEFT = "left";
    /** @type {string} */
    var RIGHT = "right";
    /** @type {string} */
    var UP = "up";
    /** @type {string} */
    var DOWN = "down";
    /** @type {string} */
    var NONE = "none";
    /** @type {string} */
    var AUTO = "auto";
    /** @type {string} */
    var HORIZONTAL = "horizontal";
    /** @type {string} */
    var VERTICAL = "vertical";
    /** @type {string} */
    var ALL = "all";
    /** @type {string} */
    var working = "start";
    /** @type {string} */
    var ATTR_KEY_W = "move";
    /** @type {string} */
    var undefined = "end";
    /** @type {string} */
    var name = "cancel";
    /** @type {boolean} */
    var evt = "ontouchstart" in window;
    /** @type {string} */
    var r = "TouchSwipe";
    /**
     * @param {!Object} name
     * @return {?}
     */
    $.fn.swipe = function(name) {
        var self = $(this);
        var s = self.data(r);
        if (s && "string" === typeof name) {
            if (s[name]) {
                return s[name].apply(this, Array.prototype.slice.call(arguments, 1));
            }
            $.error("Method " + name + " does not exist on jQuery.swipe");
        } else {
            if (!(s || "object" !== typeof name && name)) {
                return init.apply(this, arguments);
            }
        }
        return self;
    };
    $.fn.swipe.defaults = {
        fingers: 1,
        threshold: 75,
        maxTimeThreshold: null,
        swipe: null,
        swipeLeft: null,
        swipeRight: null,
        swipeUp: null,
        swipeDown: null,
        swipeStatus: null,
        click: null,
        triggerOnTouchEnd: true,
        allowPageScroll: "auto",
        fallbackToMouseEvents: true
    };
    $.fn.swipe.phases = {
        PHASE_START: working,
        PHASE_MOVE: ATTR_KEY_W,
        PHASE_END: undefined,
        PHASE_CANCEL: name
    };
    $.fn.swipe.directions = {
        LEFT: LEFT,
        RIGHT: RIGHT,
        UP: UP,
        DOWN: DOWN
    };
    $.fn.swipe.pageScroll = {
        NONE: NONE,
        HORIZONTAL: HORIZONTAL,
        VERTICAL: VERTICAL,
        AUTO: AUTO
    };
    $.fn.swipe.fingers = {
        ONE: 1,
        TWO: 2,
        THREE: 3,
        ALL: ALL
    };
})(jQuery);
(function($) {
    /**
     * @param {string} event
     * @return {?}
     */
    function handler(event) {
        var orgEvent = event || window.event;
        /** @type {!Array<?>} */
        var e = [].slice.call(arguments, 1);
        /** @type {number} */
        var b = 0;
        /** @type {number} */
        var c = 0;
        /** @type {number} */
        var d = 0;
        return event = $.event.fix(orgEvent), event.type = "mousewheel", orgEvent.wheelDelta && (b = orgEvent.wheelDelta / 120), orgEvent.detail && (b = -orgEvent.detail / 3), d = b, void 0 !== orgEvent.axis && orgEvent.axis === orgEvent.HORIZONTAL_AXIS && (d = 0, c = -1 * b), void 0 !== orgEvent.wheelDeltaY && (d = orgEvent.wheelDeltaY / 120), void 0 !== orgEvent.wheelDeltaX && (c = -1 * orgEvent.wheelDeltaX / 120), e.unshift(event, b, c, d), ($.event.dispatch || $.event.handle).apply(this, e);
    }
    /** @type {!Array} */
    var types = ["DOMMouseScroll", "mousewheel"];
    if ($.event.fixHooks) {
        /** @type {number} */
        var i = types.length;
        for (; i;) {
            $.event.fixHooks[types[--i]] = $.event.mouseHooks;
        }
    }
    $.event.special.mousewheel = {
        setup: function() {
            if (this.addEventListener) {
                /** @type {number} */
                var i = types.length;
                for (; i;) {
                    this.addEventListener(types[--i], handler, false);
                }
            } else {
                /** @type {function(string): ?} */
                this.onmousewheel = handler;
            }
        },
        teardown: function() {
            if (this.removeEventListener) {
                /** @type {number} */
                var i = types.length;
                for (; i;) {
                    this.removeEventListener(types[--i], handler, false);
                }
            } else {
                /** @type {null} */
                this.onmousewheel = null;
            }
        }
    };
    $.fn.extend({
        mousewheel: function(name) {
            return name ? this.bind("mousewheel", name) : this.trigger("mousewheel");
        },
        unmousewheel: function(fn) {
            return this.unbind("mousewheel", fn);
        }
    });
})(jQuery);
(function(b$jscomp$1387) {
    /**
     * @param {!Function} n
     * @param {string} callback
     * @param {!Element} next
     * @return {?}
     */
    function c$jscomp$1020(n, callback, next) {
        if ("transition" == next.transition && "swing" == callback) {
            /** @type {string} */
            callback = "ease";
        }
        return {
            anims: [],
            duration: n,
            orgDuration: n,
            easing: callback,
            startTime: Aa$jscomp$1()
        };
    }
    /**
     * @param {!Object} data
     * @param {!Element} result
     * @return {undefined}
     */
    function k$jscomp$384(data, result) {
        /** @type {number} */
        var i = 0;
        var inputsSize = data.anims.length;
        for (; i < inputsSize; i++) {
            var f = data.anims[i];
            if (f) {
                f[0][result.transition](f[1], data.duration, data.easing, f[2]);
            }
        }
    }
    /**
     * @param {!Object} data
     * @param {boolean} key
     * @return {undefined}
     */
    function d$jscomp$1057(data, key) {
        if (!V$jscomp$1(key)) {
            /** @type {boolean} */
            key = true;
        }
        if (ra$jscomp$1(data.pre)) {
            d$jscomp$1057(data.pre, key);
        }
        /** @type {number} */
        var j = 0;
        var imagesLen = data.anims.length;
        for (; j < imagesLen; j++) {
            var elem = data.anims[j];
            elem[0].stop(true);
            if (key && (elem[0].css(elem[1]), ea$jscomp$1(elem[2]))) {
                elem[2]();
            }
        }
        if (ra$jscomp$1(data.post)) {
            d$jscomp$1057(data.post, key);
        }
    }
    /**
     * @param {!Object} s
     * @param {boolean} n
     * @param {!Object} o
     * @return {undefined}
     */
    function g$jscomp$404(s, n, o) {
        if (n) {
            n.remove();
        }
        switch (o.fx) {
            case "fade":
            case "crossfade":
            case "cover-fade":
            case "uncover-fade":
                s.css("opacity", 1);
                s.css("filter", "");
        }
    }
    /**
     * @param {?} t
     * @param {!Object} c
     * @param {string} k
     * @param {?} v
     * @param {string} r
     * @return {?}
     */
    function f$jscomp$499(t, c, k, v, r) {
        if (c[k]) {
            c[k].call(t, v);
        }
        if (r[k].length) {
            /** @type {number} */
            c = 0;
            var cN = r[k].length;
            for (; c < cN; c++) {
                r[k][c].call(t, v);
            }
        }
        return [];
    }
    /**
     * @param {!Object} d
     * @param {!Array} v
     * @param {!Object} e
     * @return {?}
     */
    function e$jscomp$603(d, v, e) {
        if (v.length) {
            d.trigger(E$jscomp$5(v[0][0], e), v[0][1]);
            v.shift();
        }
        return v;
    }
    /**
     * @param {string} c
     * @return {undefined}
     */
    function l$jscomp$163(c) {
        c.each(function() {
            var item = b$jscomp$1387(this);
            item.data("_cfs_isHidden", item.is(":hidden")).hide();
        });
    }
    /**
     * @param {string} value
     * @return {undefined}
     */
    function m$jscomp$125(value) {
        if (value) {
            value.each(function() {
                var j = b$jscomp$1387(this);
                if (!j.data("_cfs_isHidden")) {
                    j.show();
                }
            });
        }
    }
    /**
     * @param {!Object} data
     * @return {?}
     */
    function p$jscomp$114(data) {
        if (data.auto) {
            clearTimeout(data.auto);
        }
        if (data.progress) {
            clearInterval(data.progress);
        }
        return data;
    }
    /**
     * @param {!Object} o
     * @param {?} name
     * @param {!Object} value
     * @param {number} hash
     * @param {string} type
     * @param {!Function} n
     * @param {!Object} c
     * @return {?}
     */
    function n$jscomp$90(o, name, value, hash, type, n, c) {
        return {
            width: c.width,
            height: c.height,
            items: {
                old: o,
                skipped: name,
                visible: value
            },
            scroll: {
                items: hash,
                direction: type,
                duration: n
            }
        };
    }
    /**
     * @param {!Object} b
     * @param {!Object} o
     * @param {number} c
     * @param {undefined} t
     * @return {?}
     */
    function u$jscomp$74(b, o, c, t) {
        var d = b.duration;
        if ("none" == b.fx) {
            return 0;
        }
        if ("auto" == d) {
            /** @type {number} */
            d = o.scroll.duration / o.scroll.items * c;
        } else {
            if (10 > d) {
                /** @type {number} */
                d = t / d;
            }
        }
        if (1 > d) {
            return 0;
        }
        if ("fade" == b.fx) {
            /** @type {number} */
            d = d / 2;
        }
        return Math.round(d);
    }
    /**
     * @param {!Object} options
     * @param {string} action
     * @param {string} value
     * @return {undefined}
     */
    function v$jscomp$60(options, action, value) {
        var classFn = S$jscomp$1(options.items.minimum) ? options.items.minimum : options.items.visible + 1;
        if ("show" != action && "hide" != action) {
            if (classFn > action) {
                fa$jscomp$1(value, "Not enough items (" + action + " total, " + classFn + " needed): Hiding navigation.");
                /** @type {string} */
                action = "hide";
            } else {
                /** @type {string} */
                action = "show";
            }
        }
        /** @type {string} */
        classFn = "show" == action ? "removeClass" : "addClass";
        value = Q$jscomp$5("hidden", value);
        if (options.auto.button) {
            options.auto.button[action]()[classFn](value);
        }
        if (options.prev.button) {
            options.prev.button[action]()[classFn](value);
        }
        if (options.next.button) {
            options.next.button[action]()[classFn](value);
        }
        if (options.pagination.container) {
            options.pagination.container[action]()[classFn](value);
        }
    }
    /**
     * @param {!Object} options
     * @param {string} name
     * @param {string} value
     * @return {undefined}
     */
    function w$jscomp$53(options, name, value) {
        if (!options.circular && !options.infinite) {
            var key = "removeClass" == name || "addClass" == name ? name : false;
            value = Q$jscomp$5("disabled", value);
            if (options.auto.button && key) {
                options.auto.button[key](value);
            }
            if (options.prev.button) {
                options.prev.button[key || 0 == name ? "addClass" : "removeClass"](value);
            }
            if (options.next.button) {
                /** @type {string} */
                name = key || name == options.items.visible ? "addClass" : "removeClass";
                options.next.button[name](value);
            }
        }
    }
    /**
     * @param {number} t
     * @param {!Object} d
     * @return {?}
     */
    function y$jscomp$97(t, d) {
        if (ea$jscomp$1(d)) {
            d = d.call(t);
        } else {
            if (la$jscomp$1(d)) {
                d = {};
            }
        }
        return d;
    }
    /**
     * @param {number} a
     * @param {string} i
     * @return {?}
     */
    function C$jscomp$34(a, i) {
        i = y$jscomp$97(a, i);
        if (ja$jscomp$1(i)) {
            a = X$jscomp$2(i);
            i = -1 == a ? b$jscomp$1387(i) : a;
        }
        return i;
    }
    /**
     * @param {undefined} b
     * @param {!Object} t
     * @return {?}
     */
    function z$jscomp$43(b, t) {
        t = C$jscomp$34(b, t);
        if (wa$jscomp$1(t)) {
            t = {
                button: t
            };
        } else {
            if (S$jscomp$1(t)) {
                t = {
                    key: t
                };
            }
        }
        return t;
    }
    /**
     * @param {?} b
     * @param {!Object} a
     * @return {?}
     */
    function r$jscomp$40(b, a) {
        if (ea$jscomp$1(a.button)) {
            a.button = a.button.call(b);
        }
        if (ja$jscomp$1(a.button)) {
            a.button = b$jscomp$1387(a.button);
        }
        if (ja$jscomp$1(a.key)) {
            a.key = X$jscomp$2(a.key);
        }
        return a;
    }
    /**
     * @param {number} value
     * @param {number} e
     * @param {boolean} el
     * @param {!Object} t
     * @param {!Object} n
     * @return {?}
     */
    function I$jscomp$24(value, e, el, t, n) {
        if (ja$jscomp$1(value)) {
            value = b$jscomp$1387(value, n);
        }
        if (ra$jscomp$1(value)) {
            value = b$jscomp$1387(value, n);
        }
        if (wa$jscomp$1(value)) {
            value = n.children().index(value);
            if (!V$jscomp$1(el)) {
                /** @type {boolean} */
                el = false;
            }
        } else {
            if (!V$jscomp$1(el)) {
                /** @type {boolean} */
                el = true;
            }
        }
        if (!S$jscomp$1(value)) {
            /** @type {number} */
            value = 0;
        }
        if (!S$jscomp$1(e)) {
            /** @type {number} */
            e = 0;
        }
        if (el) {
            value = value + t.first;
        }
        value = value + e;
        if (0 < t.total) {
            for (; value >= t.total;) {
                /** @type {number} */
                value = value - t.total;
            }
            for (; 0 > value;) {
                value = value + t.total;
            }
        }
        return value;
    }
    /**
     * @param {!Object} b
     * @param {!Object} c
     * @param {number} a
     * @return {?}
     */
    function q$jscomp$45(b, c, a) {
        /** @type {number} */
        var vy2 = 0;
        /** @type {number} */
        var r = 0;
        for (; 0 <= a; a--) {
            var elem = b.eq(a);
            vy2 = vy2 + (elem.is(":visible") ? elem[c.d.outerWidth](true) : 0);
            if (vy2 > c.maxDimension) {
                return r;
            }
            if (0 == a) {
                a = b.length;
            }
            r++;
        }
    }
    /**
     * @param {!Object} f
     * @param {?} er
     * @param {(!Function|number)} d
     * @param {number} v
     * @return {?}
     */
    function H$jscomp$21(f, er, d, v) {
        /** @type {number} */
        var k0 = 0;
        /** @type {number} */
        var val = 0;
        var s = f.length;
        for (; 0 <= v; v--) {
            val++;
            if (val == s || f.eq(v).is(er) && (k0++, k0 == d)) {
                return val;
            }
            if (0 == v) {
                v = s;
            }
        }
    }
    /**
     * @param {!Object} m
     * @param {!Object} n
     * @return {?}
     */
    function x$jscomp$99(m, n) {
        return n.items.visibleConf.org || m.children().slice(0, n.items.visible).filter(n.items.filter).length;
    }
    /**
     * @param {!Object} b
     * @param {!Object} c
     * @param {number} x
     * @return {?}
     */
    function G$jscomp$19(b, c, x) {
        /** @type {number} */
        var vy2 = 0;
        /** @type {number} */
        var val = 0;
        /** @type {number} */
        var i = b.length - 1;
        for (; x <= i; x++) {
            var elem = b.eq(x);
            vy2 = vy2 + (elem.is(":visible") ? elem[c.d.outerWidth](true) : 0);
            if (vy2 > c.maxDimension) {
                return val;
            }
            val++;
            if (val == i + 1) {
                return val;
            }
            if (x == i) {
                /** @type {number} */
                x = -1;
            }
        }
    }
    /**
     * @param {?} a
     * @param {!Object} c
     * @param {?} d
     * @param {?} b
     * @return {?}
     */
    function F$jscomp$15(a, c, d, b) {
        a = G$jscomp$19(a, c, d);
        if (!c.circular) {
            if (d + a > b) {
                /** @type {number} */
                a = b - d;
            }
        }
        return a;
    }
    /**
     * @param {!Object} tagName
     * @param {!Object} state
     * @param {number} data
     * @return {?}
     */
    function h$jscomp$200(tagName, state, data) {
        return N$jscomp$11(tagName, state.items.filter, state.items.visibleConf.org, data, state.circular);
    }
    /**
     * @param {!Object} o
     * @param {?} d
     * @param {(!Function|number)} b
     * @param {number} input
     * @param {number} name
     * @return {?}
     */
    function N$jscomp$11(o, d, b, input, name) {
        /** @type {number} */
        var val = name = 0;
        /** @type {number} */
        var check = o.length - 1;
        for (; input <= check; input++) {
            val++;
            if (val >= check || o.eq(input).is(d) && (name++, name == b)) {
                return val;
            }
            if (input == check) {
                /** @type {number} */
                input = -1;
            }
        }
    }
    /**
     * @param {!Object} b
     * @param {!Object} s
     * @return {?}
     */
    function A$jscomp$16(b, s) {
        return b.slice(0, s.items.visible);
    }
    /**
     * @param {!Object} w
     * @param {!Object} options
     * @param {!Object} value
     * @return {undefined}
     */
    function M$jscomp$13(w, options, value) {
        if (options.usePadding && options.rendering) {
            if (!ja$jscomp$1(value)) {
                /** @type {string} */
                value = "_cfs_origCssMargin";
            }
            w.each(function() {
                var result = b$jscomp$1387(this);
                /** @type {number} */
                var type = parseInt(result.css(options.d.marginRight), 10);
                if (!S$jscomp$1(type)) {
                    /** @type {number} */
                    type = 0;
                }
                result.data(value, type);
            });
        }
    }
    /**
     * @param {!Object} x
     * @param {!Object} y
     * @param {string} e
     * @return {undefined}
     */
    function P$jscomp$13(x, y, e) {
        if (y.usePadding) {
            var first = V$jscomp$1(e) ? e : false;
            if (!S$jscomp$1(e)) {
                /** @type {number} */
                e = 0;
            }
            M$jscomp$13(x, y, "_cfs_tempCssMargin");
            x.each(function() {
                var item = b$jscomp$1387(this);
                item.css(y.d.marginRight, first ? item.data("_cfs_tempCssMargin") : e + item.data("_cfs_origCssMargin"));
            });
        }
    }
    /**
     * @param {!Object} arg
     * @return {undefined}
     */
    function K$jscomp$13(arg) {
        arg.each(function() {
            var item = b$jscomp$1387(this);
            item.data("_cfs_origCss", item.attr("style") || "");
        });
    }
    /**
     * @param {!Object} val
     * @return {undefined}
     */
    function R$jscomp$10(val) {
        val.each(function() {
            var item = b$jscomp$1387(this);
            item.attr("style", item.data("_cfs_origCss") || "");
        });
    }
    /**
     * @param {!Object} data
     * @param {!Object} w
     * @return {undefined}
     */
    function L$jscomp$16(data, w) {
        var basePart = data.items[data.d.width];
        var level = data[data.d.height];
        var adjustedLevel = Ja$jscomp$1(level);
        w.each(function() {
            var item = b$jscomp$1387(this);
            var value;
            /** @type {number} */
            value = item[data.d.outerWidth](true) - item[data.d.width]();
            /** @type {number} */
            value = basePart - value;
            item[data.d.width](value);
            if (adjustedLevel) {
                item[data.d.height](T$jscomp$4(value, level));
            }
        });
    }
    /**
     * @param {!Object} t
     * @param {!Object} node
     * @return {?}
     */
    function Z$jscomp$8(t, node) {
        var v = t.parent();
        var s = t.children();
        var data = A$jscomp$16(s, node);
        var box = ha$jscomp$6(ka$jscomp$7(data, node, true), node, false);
        v.css(box);
        if (node.usePadding) {
            v = node.padding;
            var i = v[node.d[1]];
            if (node.align && 0 > i) {
                /** @type {number} */
                i = 0;
            }
            data = data.last();
            data.css(node.d.marginRight, data.data("_cfs_origCssMargin") + i);
            t.css(node.d.top, v[node.d[0]]);
            t.css(node.d.left, v[node.d[3]]);
        }
        t.css(node.d.width, box[node.d.width] + 2 * qa$jscomp$4(s, node, "width"));
        t.css(node.d.height, oa$jscomp$5(s, node, "height"));
        return box;
    }
    /**
     * @param {!Object} c
     * @param {!Object} b
     * @param {boolean} m
     * @return {?}
     */
    function ka$jscomp$7(c, b, m) {
        return [qa$jscomp$4(c, b, "width", m), oa$jscomp$5(c, b, "height", m)];
    }
    /**
     * @param {!Object} number
     * @param {!Object} data
     * @param {string} i
     * @param {boolean} a
     * @return {?}
     */
    function oa$jscomp$5(number, data, i, a) {
        if (!V$jscomp$1(a)) {
            /** @type {boolean} */
            a = false;
        }
        if (S$jscomp$1(data[data.d[i]]) && a) {
            return data[data.d[i]];
        }
        if (S$jscomp$1(data.items[data.d[i]])) {
            return data.items[data.d[i]];
        }
        /** @type {string} */
        i = -1 < i.toLowerCase().indexOf("width") ? "outerWidth" : "outerHeight";
        return sa$jscomp$4(number, data, i);
    }
    /**
     * @param {!Object} n
     * @param {!Object} v
     * @param {string} name
     * @return {?}
     */
    function sa$jscomp$4(n, v, name) {
        /** @type {number} */
        var r = 0;
        /** @type {number} */
        var j = 0;
        var count = n.length;
        for (; j < count; j++) {
            var o = n.eq(j);
            o = o.is(":visible") ? o[v.d[name]](true) : 0;
            if (r < o) {
                r = o;
            }
        }
        return r;
    }
    /**
     * @param {!Object} d
     * @param {!Object} e
     * @param {string} i
     * @param {number} b
     * @return {?}
     */
    function qa$jscomp$4(d, e, i, b) {
        if (!V$jscomp$1(b)) {
            /** @type {boolean} */
            b = false;
        }
        if (S$jscomp$1(e[e.d[i]]) && b) {
            return e[e.d[i]];
        }
        if (S$jscomp$1(e.items[e.d[i]])) {
            return e.items[e.d[i]] * d.length;
        }
        /** @type {string} */
        i = -1 < i.toLowerCase().indexOf("width") ? "outerWidth" : "outerHeight";
        /** @type {number} */
        var a = b = 0;
        var n = d.length;
        for (; a < n; a++) {
            var player = d.eq(a);
            b = b + (player.is(":visible") ? player[e.d[i]](true) : 0);
        }
        return b;
    }
    /**
     * @param {!Object} a
     * @param {!Object} value
     * @param {string} i
     * @return {?}
     */
    function ca$jscomp$3(a, value, i) {
        var e = a.is(":visible");
        if (e) {
            a.hide();
        }
        value = a.parent()[value.d[i]]();
        if (e) {
            a.show();
        }
        return value;
    }
    /**
     * @param {!Object} data
     * @param {string} node
     * @return {?}
     */
    function ia$jscomp$2(data, node) {
        return S$jscomp$1(data[data.d.width]) ? data[data.d.width] : node;
    }
    /**
     * @param {!Object} s
     * @param {!Object} e
     * @param {string} a
     * @return {?}
     */
    function O$jscomp$3(s, e, a) {
        /** @type {boolean} */
        var cnode = false;
        /** @type {boolean} */
        var t = false;
        /** @type {number} */
        var i = 0;
        var l = s.length;
        for (; i < l; i++) {
            var node = s.eq(i);
            node = node.is(":visible") ? node[e.d[a]](true) : 0;
            if (false === cnode) {
                cnode = node;
            } else {
                if (cnode != node) {
                    /** @type {boolean} */
                    t = true;
                }
            }
            if (0 == cnode) {
                /** @type {boolean} */
                t = true;
            }
        }
        return t;
    }
    /**
     * @param {number} t
     * @param {!Object} x
     * @return {?}
     */
    function T$jscomp$4(t, x) {
        if (Ja$jscomp$1(x)) {
            /** @type {number} */
            x = parseInt(x.slice(0, -1), 10);
            if (!S$jscomp$1(x)) {
                return t;
            }
            /** @type {number} */
            t = t * (x / 100);
        }
        return t;
    }
    /**
     * @param {string} name
     * @param {!Object} options
     * @param {boolean} node
     * @param {boolean} pos
     * @param {boolean} number
     * @return {?}
     */
    function E$jscomp$5(name, options, node, pos, number) {
        if (!V$jscomp$1(node)) {
            /** @type {boolean} */
            node = true;
        }
        if (!V$jscomp$1(pos)) {
            /** @type {boolean} */
            pos = true;
        }
        if (!V$jscomp$1(number)) {
            /** @type {boolean} */
            number = false;
        }
        if (node) {
            name = options.events.prefix + name;
        }
        if (pos) {
            /** @type {string} */
            name = name + "." + options.events.namespace;
        }
        if (pos && number) {
            name = name + options.serialNumber;
        }
        return name;
    }
    /**
     * @param {string} name
     * @param {string} value
     * @return {?}
     */
    function Q$jscomp$5(name, value) {
        return ja$jscomp$1(value.classnames[name]) ? value.classnames[name] : name;
    }
    /**
     * @param {!Object} hash
     * @param {!Object} item
     * @param {string} a
     * @return {?}
     */
    function ha$jscomp$6(hash, item, a) {
        if (!V$jscomp$1(a)) {
            /** @type {boolean} */
            a = true;
        }
        a = item.usePadding && a ? item.padding : [0, 0, 0, 0];
        var child = {};
        child[item.d.width] = hash[0] + a[1] + a[3];
        child[item.d.height] = hash[1] + a[0] + a[2];
        return child;
    }
    /**
     * @param {!Array} prop
     * @param {!Array} map
     * @return {?}
     */
    function da$jscomp$4(prop, map) {
        /** @type {!Array} */
        var d = [];
        /** @type {number} */
        var p = 0;
        var pos = prop.length;
        for (; p < pos; p++) {
            /** @type {number} */
            var i = 0;
            var n = map.length;
            for (; i < n; i++) {
                if (-1 < map[i].indexOf(typeof prop[p]) && la$jscomp$1(d[i])) {
                    d[i] = prop[p];
                    break;
                }
            }
        }
        return d;
    }
    /**
     * @param {!Object} value
     * @return {?}
     */
    function ya$jscomp$3(value) {
        if (la$jscomp$1(value)) {
            return [0, 0, 0, 0];
        }
        if (S$jscomp$1(value)) {
            return [value, value, value, value];
        }
        if (ja$jscomp$1(value)) {
            value = value.split("px").join("").split("em").join("").split(" ");
        }
        if (!va$jscomp$1(value)) {
            return [0, 0, 0, 0];
        }
        /** @type {number} */
        var j = 0;
        for (; 4 > j; j++) {
            /** @type {number} */
            value[j] = parseInt(value[j], 10);
        }
        switch (value.length) {
            case 0:
                return [0, 0, 0, 0];
            case 1:
                return [value[0], value[0], value[0], value[0]];
            case 2:
                return [value[0], value[1], value[0], value[1]];
            case 3:
                return [value[0], value[1], value[2], value[1]];
            default:
                return [value[0], value[1], value[2], value[3]];
        }
    }
    /**
     * @param {!Object} v
     * @param {!Object} data
     * @return {?}
     */
    function Y$jscomp$6(v, data) {
        /** @type {number} */
        v = S$jscomp$1(data[data.d.width]) ? Math.ceil(data[data.d.width] - qa$jscomp$4(v, data, "width")) : 0;
        switch (data.align) {
            case "left":
                return [0, v];
            case "right":
                return [v, 0];
            default:
                return [Math.ceil(v / 2), Math.floor(v / 2)];
        }
    }
    /**
     * @param {number} b
     * @param {number} result
     * @param {string} value
     * @param {?} str
     * @return {?}
     */
    function ua$jscomp$2(b, result, value, str) {
        /** @type {number} */
        result = b;
        if (ea$jscomp$1(value)) {
            result = value.call(str, result);
        } else {
            if (ja$jscomp$1(value)) {
                result = value.split("+");
                var a = value.split("-");
                if (a.length > result.length) {
                    /** @type {boolean} */
                    value = true;
                    str = a[0];
                    a = a[1];
                } else {
                    /** @type {boolean} */
                    value = false;
                    str = result[0];
                    a = result[1];
                }
                switch (str) {
                    case "even":
                        result = 1 == b % 2 ? b - 1 : b;
                        break;
                    case "odd":
                        result = 0 == b % 2 ? b - 1 : b;
                        break;
                    default:
                        /** @type {number} */
                        result = b;
                }
                /** @type {number} */
                a = parseInt(a, 10);
                if (S$jscomp$1(a)) {
                    if (value) {
                        /** @type {number} */
                        a = -a;
                    }
                    result = result + a;
                }
            }
        }
        if (!S$jscomp$1(result) || 1 > result) {
            /** @type {number} */
            result = 1;
        }
        return result;
    }
    /**
     * @param {number} cfg
     * @param {?} options
     * @param {string} name
     * @param {?} o
     * @return {?}
     */
    function pa$jscomp$2(cfg, options, name, o) {
        return W$jscomp$4(ua$jscomp$2(cfg, options, name, o), options.items.visibleConf);
    }
    /**
     * @param {number} val
     * @param {!Object} opts
     * @return {?}
     */
    function W$jscomp$4(val, opts) {
        if (S$jscomp$1(opts.min) && val < opts.min) {
            val = opts.min;
        }
        if (S$jscomp$1(opts.max) && val > opts.max) {
            val = opts.max;
        }
        if (1 > val) {
            /** @type {number} */
            val = 1;
        }
        return val;
    }
    /**
     * @param {string} d
     * @return {?}
     */
    function xa$jscomp$3(d) {
        if (!va$jscomp$1(d)) {
            /** @type {!Array} */
            d = [
                [d]
            ];
        }
        if (!va$jscomp$1(d[0])) {
            /** @type {!Array} */
            d = [d];
        }
        /** @type {number} */
        var i = 0;
        var numberNewElement = d.length;
        for (; i < numberNewElement; i++) {
            if (ja$jscomp$1(d[i][0])) {
                d[i][0] = b$jscomp$1387(d[i][0]);
            }
            if (!V$jscomp$1(d[i][1])) {
                /** @type {boolean} */
                d[i][1] = true;
            }
            if (!V$jscomp$1(d[i][2])) {
                /** @type {boolean} */
                d[i][2] = true;
            }
            if (!S$jscomp$1(d[i][3])) {
                /** @type {number} */
                d[i][3] = 0;
            }
        }
        return d;
    }
    /**
     * @param {string} direction
     * @return {?}
     */
    function X$jscomp$2(direction) {
        return "right" == direction ? 39 : "left" == direction ? 37 : "up" == direction ? 38 : "down" == direction ? 40 : -1;
    }
    /**
     * @param {undefined} elem
     * @param {!Object} d
     * @param {!Object} options
     * @return {undefined}
     */
    function Da$jscomp$1(elem, d, options) {
        if (elem) {
            d = d.triggerHandler(E$jscomp$5("currentPosition", options));
            b$jscomp$1387.fn.carouFredSel.cookie.set(elem, d);
        }
    }
    /**
     * @param {string} val
     * @return {?}
     */
    function Ca$jscomp$3(val) {
        val = b$jscomp$1387.fn.carouFredSel.cookie.get(val);
        return "" == val ? 0 : val;
    }
    /**
     * @param {!Object} d
     * @param {!Object} b
     * @return {?}
     */
    function Ia$jscomp$1(d, b) {
        b = Y$jscomp$6(A$jscomp$16(b, d), d);
        d.padding[d.d[1]] = b[1];
        d.padding[d.d[3]] = b[0];
        return d;
    }
    /**
     * @param {!Object} data
     * @param {!Object} i
     * @param {!Object} value
     * @return {?}
     */
    function Oa$jscomp$2(data, i, value) {
        value = W$jscomp$4(Math.ceil(data[data.d.width] / data.items[data.d.width]), data.items.visibleConf);
        if (value > i.length) {
            value = i.length;
        }
        /** @type {number} */
        i = Math.floor(data[data.d.width] / value);
        /** @type {!Object} */
        data.items.visible = value;
        /** @type {!Object} */
        data.items[data.d.width] = i;
        /** @type {number} */
        data[data.d.width] = value * i;
        return data;
    }
    /**
     * @param {!Object} value
     * @return {?}
     */
    function Ga$jscomp$1(value) {
        if (ja$jscomp$1(value)) {
            /** @type {boolean} */
            var nvalue = -1 < value.indexOf("immediate") ? true : false;
            /** @type {boolean} */
            value = -1 < value.indexOf("resume") ? true : false;
        } else {
            /** @type {boolean} */
            nvalue = value = false;
        }
        return [nvalue, value];
    }
    /**
     * @param {!Object} value
     * @return {?}
     */
    function la$jscomp$1(value) {
        return null === value || "undefined" == typeof value || "" === value || "undefined" === value;
    }
    /**
     * @param {!Object} b
     * @return {?}
     */
    function va$jscomp$1(b) {
        return b instanceof Array;
    }
    /**
     * @param {!Object} val
     * @return {?}
     */
    function wa$jscomp$1(val) {
        return val instanceof jQuery;
    }
    /**
     * @param {!Object} d
     * @return {?}
     */
    function ra$jscomp$1(d) {
        return (d instanceof Object || "object" == typeof d) && null !== d && !wa$jscomp$1(d) && !va$jscomp$1(d) && !ea$jscomp$1(d);
    }
    /**
     * @param {!Object} value
     * @return {?}
     */
    function S$jscomp$1(value) {
        return (value instanceof Number || "number" == typeof value) && !isNaN(value);
    }
    /**
     * @param {!Object} value
     * @return {?}
     */
    function ja$jscomp$1(value) {
        return (value instanceof String || "string" == typeof value) && !la$jscomp$1(value) && !ma$jscomp$1(value) && !Ma$jscomp$1(value);
    }
    /**
     * @param {!Object} a
     * @return {?}
     */
    function ea$jscomp$1(a) {
        return a instanceof Function || "function" == typeof a;
    }
    /**
     * @param {?} x
     * @return {?}
     */
    function V$jscomp$1(x) {
        return x instanceof Boolean || "boolean" == typeof x || ma$jscomp$1(x) || Ma$jscomp$1(x);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function ma$jscomp$1(value) {
        return true === value || "true" === value;
    }
    /**
     * @param {!Object} value
     * @return {?}
     */
    function Ma$jscomp$1(value) {
        return false === value || "false" === value;
    }
    /**
     * @param {!Object} value
     * @return {?}
     */
    function Ja$jscomp$1(value) {
        return ja$jscomp$1(value) && "%" == value.slice(-1);
    }
    /**
     * @return {?}
     */
    function Aa$jscomp$1() {
        return (new Date).getTime();
    }
    /**
     * @param {string} dash_on
     * @param {string} dash_off
     * @return {undefined}
     */
    function La$jscomp$1(dash_on, dash_off) {
        fa$jscomp$1(true, dash_on + " is DEPRECATED, support for it will be removed. Use " + dash_off + " instead.");
    }
    /**
     * @param {string} r
     * @param {string} value
     * @return {?}
     */
    function fa$jscomp$1(r, value) {
        if (!la$jscomp$1(window.console) && !la$jscomp$1(window.console.log)) {
            if (ra$jscomp$1(r)) {
                /** @type {string} */
                var resizewidth = " (" + r.selector + ")";
                r = r.debug;
            } else {
                /** @type {string} */
                resizewidth = "";
            }
            if (!r) {
                return false;
            }
            /** @type {(Array|string)} */
            value = ja$jscomp$1(value) ? "carouFredSel" + resizewidth + ": " + value : ["carouFredSel" + resizewidth + ":", value];
            window.console.log(value);
        }
        return false;
    }
    if (!b$jscomp$1387.fn.carouFredSel) {
        /** @type {function(?, string): ?} */
        b$jscomp$1387.fn.caroufredsel = b$jscomp$1387.fn.carouFredSel = function(oa$jscomp$6, za$jscomp$1) {
            if (0 == this.length) {
                return fa$jscomp$1(true, 'No element found for "' + this.selector + '".'), this;
            }
            if (1 < this.length) {
                return this.each(function() {
                    b$jscomp$1387(this).carouFredSel(oa$jscomp$6, za$jscomp$1);
                });
            }
            var B$jscomp$0 = this;
            var aa$jscomp$0 = this[0];
            /** @type {boolean} */
            var na$jscomp$1 = false;
            if (B$jscomp$0.data("_cfs_isCarousel")) {
                na$jscomp$1 = B$jscomp$0.triggerHandler("_cfs_triggerEvent", "currentPosition");
                B$jscomp$0.trigger("_cfs_triggerEvent", ["destroy", true]);
            }
            var W$jscomp$5 = {
                _init: function(key, value, data) {
                    var s = key = y$jscomp$97(aa$jscomp$0, key);
                    var result = key.items;
                    result = y$jscomp$97(aa$jscomp$0, result);
                    if (S$jscomp$1(result)) {
                        result = {
                            visible: result
                        };
                    } else {
                        if ("variable" == result) {
                            result = {
                                visible: result,
                                width: result,
                                height: result
                            };
                        } else {
                            if (!ra$jscomp$1(result)) {
                                result = {};
                            }
                        }
                    }
                    s.items = result;
                    /** @type {!Object} */
                    s = key;
                    result = key.scroll;
                    result = y$jscomp$97(aa$jscomp$0, result);
                    if (S$jscomp$1(result)) {
                        /** @type {({duration: ?}|{items: ?})} */
                        result = 50 >= result ? {
                            items: result
                        } : {
                            duration: result
                        };
                    } else {
                        if (ja$jscomp$1(result)) {
                            result = {
                                easing: result
                            };
                        } else {
                            if (!ra$jscomp$1(result)) {
                                result = {};
                            }
                        }
                    }
                    s.scroll = result;
                    /** @type {!Object} */
                    s = key;
                    result = key.auto;
                    result = C$jscomp$34(aa$jscomp$0, result);
                    if (wa$jscomp$1(result)) {
                        result = {
                            button: result
                        };
                    } else {
                        if (V$jscomp$1(result)) {
                            result = {
                                play: result
                            };
                        } else {
                            if (S$jscomp$1(result)) {
                                result = {
                                    timeoutDuration: result
                                };
                            }
                        }
                    }
                    if (result.progress && (ja$jscomp$1(result.progress) || wa$jscomp$1(result.progress))) {
                        result.progress = {
                            bar: result.progress
                        };
                    }
                    s.auto = result;
                    key.prev = z$jscomp$43(aa$jscomp$0, key.prev);
                    key.next = z$jscomp$43(aa$jscomp$0, key.next);
                    /** @type {!Object} */
                    s = key;
                    result = key.pagination;
                    result = C$jscomp$34(aa$jscomp$0, result);
                    if (wa$jscomp$1(result)) {
                        result = {
                            container: result
                        };
                    } else {
                        if (V$jscomp$1(result)) {
                            result = {
                                keys: result
                            };
                        }
                    }
                    s.pagination = result;
                    /** @type {!Object} */
                    s = key;
                    result = key.swipe;
                    if (ea$jscomp$1(result)) {
                        result = result.call(aa$jscomp$0);
                    }
                    if (la$jscomp$1(result)) {
                        result = {
                            onTouch: false
                        };
                    }
                    if (ma$jscomp$1(result)) {
                        result = {
                            onTouch: result
                        };
                    } else {
                        if (S$jscomp$1(result)) {
                            result = {
                                items: result
                            };
                        }
                    }
                    s.swipe = result;
                    /** @type {!Object} */
                    s = key;
                    result = key.mousewheel;
                    if (ea$jscomp$1(result)) {
                        result = result.call(aa$jscomp$0);
                    }
                    if (ma$jscomp$1(result)) {
                        result = {};
                    } else {
                        if (S$jscomp$1(result)) {
                            result = {
                                items: result
                            };
                        } else {
                            if (la$jscomp$1(result)) {
                                /** @type {boolean} */
                                result = false;
                            }
                        }
                    }
                    s.mousewheel = result;
                    if (value) {
                        Pa$jscomp$0 = b$jscomp$1387.extend(true, {}, b$jscomp$1387.fn.carouFredSel.defaults, key);
                    }
                    key = t$jscomp$0 = b$jscomp$1387.extend(true, {}, b$jscomp$1387.fn.carouFredSel.defaults, key);
                    /** @type {!Array} */
                    value = [
                        ["width", "innerWidth", "outerWidth", "height", "innerHeight", "outerHeight", "left", "top", "marginRight", 0, 1, 2, 3],
                        ["height", "innerHeight", "outerHeight", "width", "innerWidth", "outerWidth", "top", "left", "marginBottom", 3, 2, 1, 0]
                    ];
                    s = value[0].length;
                    /** @type {number} */
                    result = "right" == t$jscomp$0.direction || "left" == t$jscomp$0.direction ? 0 : 1;
                    var item = {};
                    /** @type {number} */
                    var i = 0;
                    for (; i < s; i++) {
                        item[value[0][i]] = value[result][i];
                    }
                    key.d = item;
                    /** @type {string} */
                    ba$jscomp$1.direction = "up" == t$jscomp$0.direction || "left" == t$jscomp$0.direction ? "next" : "prev";
                    key = B$jscomp$0.children();
                    value = ca$jscomp$3(ta$jscomp$0, t$jscomp$0, "width");
                    if (ma$jscomp$1(t$jscomp$0.cookie)) {
                        /** @type {string} */
                        t$jscomp$0.cookie = "caroufredsel_cookie_" + D$jscomp$0.serialNumber;
                    }
                    t$jscomp$0.maxDimension = ia$jscomp$2(t$jscomp$0, value);
                    s = t$jscomp$0;
                    result = t$jscomp$0.items;
                    item = t$jscomp$0;
                    if (!ra$jscomp$1(result.visibleConf)) {
                        result.visibleConf = {};
                    }
                    if (!ra$jscomp$1(result.sizesConf)) {
                        result.sizesConf = {};
                    }
                    if (0 == result.start && S$jscomp$1(data)) {
                        /** @type {!Object} */
                        result.start = data;
                    }
                    if (ra$jscomp$1(result.visible)) {
                        result.visibleConf.min = result.visible.min;
                        result.visibleConf.max = result.visible.max;
                        /** @type {boolean} */
                        result.visible = false;
                    } else {
                        if (ja$jscomp$1(result.visible)) {
                            if ("variable" == result.visible) {
                                /** @type {boolean} */
                                result.visibleConf.variable = true;
                            } else {
                                result.visibleConf.adjust = result.visible;
                            }
                            /** @type {boolean} */
                            result.visible = false;
                        } else {
                            if (ea$jscomp$1(result.visible)) {
                                result.visibleConf.adjust = result.visible;
                                /** @type {boolean} */
                                result.visible = false;
                            }
                        }
                    }
                    if (!ja$jscomp$1(result.filter)) {
                        /** @type {string} */
                        result.filter = 0 < key.filter(":hidden").length ? ":visible" : "*";
                    }
                    if (!result[item.d.width]) {
                        if (item.responsive) {
                            fa$jscomp$1(true, "Set a " + item.d.width + " for the items!");
                            result[item.d.width] = sa$jscomp$4(key, item, "outerWidth");
                        } else {
                            result[item.d.width] = O$jscomp$3(key, item, "outerWidth") ? "variable" : key[item.d.outerWidth](true);
                        }
                    }
                    if (!result[item.d.height]) {
                        result[item.d.height] = O$jscomp$3(key, item, "outerHeight") ? "variable" : key[item.d.outerHeight](true);
                    }
                    result.sizesConf.width = result.width;
                    result.sizesConf.height = result.height;
                    s.items = result;
                    data = t$jscomp$0;
                    s = t$jscomp$0.d.width;
                    result = t$jscomp$0[t$jscomp$0.d.width];
                    if ("auto" == result) {
                        result = sa$jscomp$4(key, t$jscomp$0, "outerWidth");
                    }
                    data[s] = result;
                    data = t$jscomp$0;
                    s = t$jscomp$0.d.height;
                    result = t$jscomp$0[t$jscomp$0.d.height];
                    item = t$jscomp$0;
                    if ("auto" == result) {
                        result = sa$jscomp$4(key, item, "outerHeight");
                    }
                    if (!result) {
                        result = item.items[item.d.height];
                    }
                    data[s] = result;
                    if (t$jscomp$0.responsive) {
                        if (!Ja$jscomp$1(t$jscomp$0[t$jscomp$0.d.width])) {
                            /** @type {string} */
                            t$jscomp$0[t$jscomp$0.d.width] = "100%";
                        }
                    }
                    if (Ja$jscomp$1(t$jscomp$0[t$jscomp$0.d.width])) {
                        /** @type {boolean} */
                        ba$jscomp$1.upDateOnWindowResize = true;
                        ba$jscomp$1.primarySizePercentage = t$jscomp$0[t$jscomp$0.d.width];
                        t$jscomp$0[t$jscomp$0.d.width] = T$jscomp$4(value, ba$jscomp$1.primarySizePercentage);
                        if (!t$jscomp$0.items.visible) {
                            /** @type {boolean} */
                            t$jscomp$0.items.visibleConf.variable = true;
                        }
                    }
                    if (t$jscomp$0.responsive) {
                        /** @type {boolean} */
                        t$jscomp$0.usePadding = false;
                        /** @type {!Array} */
                        t$jscomp$0.padding = [0, 0, 0, 0];
                        /** @type {boolean} */
                        t$jscomp$0.align = false;
                        /** @type {boolean} */
                        t$jscomp$0.items.visibleConf.variable = false;
                    } else {
                        if (!t$jscomp$0.items.visible) {
                            data = t$jscomp$0;
                            if ("variable" == data.items[data.d.width]) {
                                /** @type {boolean} */
                                data.items.visibleConf.variable = true;
                            }
                            if (!data.items.visibleConf.variable && (S$jscomp$1(data[data.d.width]) ? data.items.visible = Math.floor(data[data.d.width] / data.items[data.d.width]) : (data.items.visible = Math.floor(value / data.items[data.d.width]), data[data.d.width] = data.items.visible * data.items[data.d.width], data.items.visibleConf.adjust || (data.align = false)), "Infinity" == data.items.visible || 1 > data.items.visible)) {
                                fa$jscomp$1(true, 'Not a valid number of visible items: Set to "variable".');
                                /** @type {boolean} */
                                data.items.visibleConf.variable = true;
                            }
                            /** @type {!Object} */
                            t$jscomp$0 = data;
                        }
                        if (!t$jscomp$0[t$jscomp$0.d.width]) {
                            if (!t$jscomp$0.items.visibleConf.variable && S$jscomp$1(t$jscomp$0.items[t$jscomp$0.d.width]) && "*" == t$jscomp$0.items.filter) {
                                /** @type {number} */
                                t$jscomp$0[t$jscomp$0.d.width] = t$jscomp$0.items.visible * t$jscomp$0.items[t$jscomp$0.d.width];
                                /** @type {boolean} */
                                t$jscomp$0.align = false;
                            } else {
                                /** @type {string} */
                                t$jscomp$0[t$jscomp$0.d.width] = "variable";
                            }
                        }
                        if (la$jscomp$1(t$jscomp$0.align)) {
                            /** @type {(boolean|string)} */
                            t$jscomp$0.align = S$jscomp$1(t$jscomp$0[t$jscomp$0.d.width]) ? "center" : false;
                        }
                        if (t$jscomp$0.items.visibleConf.variable) {
                            t$jscomp$0.items.visible = G$jscomp$19(key, t$jscomp$0, 0);
                        }
                    }
                    if (!("*" == t$jscomp$0.items.filter || t$jscomp$0.items.visibleConf.variable)) {
                        t$jscomp$0.items.visibleConf.org = t$jscomp$0.items.visible;
                        t$jscomp$0.items.visible = h$jscomp$200(key, t$jscomp$0, 0);
                    }
                    t$jscomp$0.items.visible = pa$jscomp$2(t$jscomp$0.items.visible, t$jscomp$0, t$jscomp$0.items.visibleConf.adjust, aa$jscomp$0);
                    t$jscomp$0.items.visibleConf.old = t$jscomp$0.items.visible;
                    if (t$jscomp$0.responsive) {
                        if (!t$jscomp$0.items.visibleConf.min) {
                            t$jscomp$0.items.visibleConf.min = t$jscomp$0.items.visible;
                        }
                        if (!t$jscomp$0.items.visibleConf.max) {
                            t$jscomp$0.items.visibleConf.max = t$jscomp$0.items.visible;
                        }
                        t$jscomp$0 = Oa$jscomp$2(t$jscomp$0, key, value);
                    } else {
                        switch (t$jscomp$0.padding = ya$jscomp$3(t$jscomp$0.padding), "top" == t$jscomp$0.align ? t$jscomp$0.align = "left" : "bottom" == t$jscomp$0.align && (t$jscomp$0.align = "right"), t$jscomp$0.align) {
                            case "center":
                            case "left":
                            case "right":
                                if ("variable" != t$jscomp$0[t$jscomp$0.d.width]) {
                                    t$jscomp$0 = Ia$jscomp$1(t$jscomp$0, key);
                                    /** @type {boolean} */
                                    t$jscomp$0.usePadding = true;
                                }
                                break;
                            default:
                                /** @type {boolean} */
                                t$jscomp$0.align = false;
                                /** @type {boolean} */
                                t$jscomp$0.usePadding = 0 == t$jscomp$0.padding[0] && 0 == t$jscomp$0.padding[1] && 0 == t$jscomp$0.padding[2] && 0 == t$jscomp$0.padding[3] ? false : true;
                        }
                    }
                    if (!S$jscomp$1(t$jscomp$0.scroll.duration)) {
                        /** @type {number} */
                        t$jscomp$0.scroll.duration = 500;
                    }
                    if (la$jscomp$1(t$jscomp$0.scroll.items)) {
                        t$jscomp$0.scroll.items = t$jscomp$0.responsive || t$jscomp$0.items.visibleConf.variable || "*" != t$jscomp$0.items.filter ? "visible" : t$jscomp$0.items.visible;
                    }
                    t$jscomp$0.auto = b$jscomp$1387.extend(true, {}, t$jscomp$0.scroll, t$jscomp$0.auto);
                    t$jscomp$0.prev = b$jscomp$1387.extend(true, {}, t$jscomp$0.scroll, t$jscomp$0.prev);
                    t$jscomp$0.next = b$jscomp$1387.extend(true, {}, t$jscomp$0.scroll, t$jscomp$0.next);
                    t$jscomp$0.pagination = b$jscomp$1387.extend(true, {}, t$jscomp$0.scroll, t$jscomp$0.pagination);
                    data = t$jscomp$0;
                    key = t$jscomp$0.auto;
                    if (ea$jscomp$1(key.button)) {
                        key.button = key.button.call(aa$jscomp$0);
                    }
                    if (ja$jscomp$1(key.button)) {
                        key.button = b$jscomp$1387(key.button);
                    }
                    if (!V$jscomp$1(key.play)) {
                        /** @type {boolean} */
                        key.play = true;
                    }
                    if (!S$jscomp$1(key.delay)) {
                        /** @type {number} */
                        key.delay = 0;
                    }
                    if (la$jscomp$1(key.pauseOnEvent)) {
                        /** @type {boolean} */
                        key.pauseOnEvent = true;
                    }
                    if (!V$jscomp$1(key.pauseOnResize)) {
                        /** @type {boolean} */
                        key.pauseOnResize = true;
                    }
                    if (!S$jscomp$1(key.timeoutDuration)) {
                        /** @type {number} */
                        key.timeoutDuration = 10 > key.duration ? 2500 : 5 * key.duration;
                    }
                    if (key.progress) {
                        if (ea$jscomp$1(key.progress.bar)) {
                            key.progress.bar = key.progress.bar.call(aa$jscomp$0);
                        }
                        if (ja$jscomp$1(key.progress.bar)) {
                            key.progress.bar = b$jscomp$1387(key.progress.bar);
                        }
                        if (key.progress.bar) {
                            if (!ea$jscomp$1(key.progress.updater)) {
                                /** @type {function(string): undefined} */
                                key.progress.updater = b$jscomp$1387.fn.carouFredSel.progressbarUpdater;
                            }
                            if (!S$jscomp$1(key.progress.interval)) {
                                /** @type {number} */
                                key.progress.interval = 50;
                            }
                        } else {
                            /** @type {boolean} */
                            key.progress = false;
                        }
                    }
                    /** @type {!Object} */
                    data.auto = key;
                    t$jscomp$0.prev = r$jscomp$40(aa$jscomp$0, t$jscomp$0.prev);
                    t$jscomp$0.next = r$jscomp$40(aa$jscomp$0, t$jscomp$0.next);
                    data = t$jscomp$0;
                    key = t$jscomp$0.pagination;
                    if (ea$jscomp$1(key.container)) {
                        key.container = key.container.call(aa$jscomp$0);
                    }
                    if (ja$jscomp$1(key.container)) {
                        key.container = b$jscomp$1387(key.container);
                    }
                    if (!S$jscomp$1(key.items)) {
                        /** @type {boolean} */
                        key.items = false;
                    }
                    if (!V$jscomp$1(key.keys)) {
                        /** @type {boolean} */
                        key.keys = false;
                    }
                    if (!(ea$jscomp$1(key.anchorBuilder) || Ma$jscomp$1(key.anchorBuilder))) {
                        /** @type {function(string): ?} */
                        key.anchorBuilder = b$jscomp$1387.fn.carouFredSel.pageAnchorBuilder;
                    }
                    if (!S$jscomp$1(key.deviation)) {
                        /** @type {number} */
                        key.deviation = 0;
                    }
                    /** @type {!Object} */
                    data.pagination = key;
                    data = t$jscomp$0;
                    key = t$jscomp$0.swipe;
                    if (!V$jscomp$1(key.onTouch)) {
                        /** @type {boolean} */
                        key.onTouch = true;
                    }
                    if (!V$jscomp$1(key.onMouse)) {
                        /** @type {boolean} */
                        key.onMouse = false;
                    }
                    if (!ra$jscomp$1(key.options)) {
                        key.options = {};
                    }
                    if (!V$jscomp$1(key.options.triggerOnTouchEnd)) {
                        /** @type {boolean} */
                        key.options.triggerOnTouchEnd = false;
                    }
                    /** @type {!Object} */
                    data.swipe = key;
                    t$jscomp$0.mousewheel = t$jscomp$0.mousewheel;
                    if (t$jscomp$0.synchronise) {
                        t$jscomp$0.synchronise = xa$jscomp$3(t$jscomp$0.synchronise);
                    }
                    if (t$jscomp$0.auto.onPauseStart) {
                        t$jscomp$0.auto.onTimeoutStart = t$jscomp$0.auto.onPauseStart;
                        La$jscomp$1("auto.onPauseStart", "auto.onTimeoutStart");
                    }
                    if (t$jscomp$0.auto.onPausePause) {
                        t$jscomp$0.auto.onTimeoutPause = t$jscomp$0.auto.onPausePause;
                        La$jscomp$1("auto.onPausePause", "auto.onTimeoutPause");
                    }
                    if (t$jscomp$0.auto.onPauseEnd) {
                        t$jscomp$0.auto.onTimeoutEnd = t$jscomp$0.auto.onPauseEnd;
                        La$jscomp$1("auto.onPauseEnd", "auto.onTimeoutEnd");
                    }
                    if (t$jscomp$0.auto.pauseDuration) {
                        t$jscomp$0.auto.timeoutDuration = t$jscomp$0.auto.pauseDuration;
                        La$jscomp$1("auto.pauseDuration", "auto.timeoutDuration");
                    }
                    if (t$jscomp$0.onInit && ea$jscomp$1(t$jscomp$0.onInit)) {
                        t$jscomp$0.onInit();
                    }
                },
                _build: function() {
                    B$jscomp$0.data("_cfs_isCarousel", true);
                    var S = B$jscomp$0.children();
                    /** @type {!Array<string>} */
                    var position = "textAlign float position top right bottom left zIndex width height marginTop marginRight marginBottom marginLeft".split(" ");
                    var options = {};
                    /** @type {number} */
                    var i = 0;
                    /** @type {number} */
                    var lng = position.length;
                    for (; i < lng; i++) {
                        options[position[i]] = B$jscomp$0.css(position[i]);
                    }
                    /** @type {string} */
                    position = "relative";
                    switch (options.position) {
                        case "absolute":
                        case "fixed":
                            position = options.position;
                    }
                    if ("parent" == D$jscomp$0.wrapper) {
                        K$jscomp$13(ta$jscomp$0);
                    } else {
                        ta$jscomp$0.css(options);
                    }
                    ta$jscomp$0.css({
                        overflow: "hidden",
                        position: position
                    });
                    K$jscomp$13(B$jscomp$0);
                    B$jscomp$0.data("_cfs_origCssZindex", options.zIndex);
                    B$jscomp$0.css({
                        textAlign: "left",
                        "float": "none",
                        position: "absolute",
                        top: 0,
                        right: "auto",
                        bottom: "auto",
                        left: 0,
                        marginTop: 0,
                        marginRight: 0,
                        marginBottom: 0,
                        marginLeft: 0
                    });
                    M$jscomp$13(S, t$jscomp$0);
                    K$jscomp$13(S);
                    if (t$jscomp$0.responsive) {
                        L$jscomp$16(t$jscomp$0, S);
                    }
                },
                _bind_events: function() {
                    W$jscomp$5._unbind_events();
                    B$jscomp$0.bind(E$jscomp$5("stop", D$jscomp$0), function(event, body) {
                        event.stopPropagation();
                        if (!ba$jscomp$1.isStopped) {
                            if (t$jscomp$0.auto.button) {
                                t$jscomp$0.auto.button.addClass(Q$jscomp$5("stopped", D$jscomp$0));
                            }
                        }
                        /** @type {boolean} */
                        ba$jscomp$1.isStopped = true;
                        if (t$jscomp$0.auto.play) {
                            /** @type {boolean} */
                            t$jscomp$0.auto.play = false;
                            B$jscomp$0.trigger(E$jscomp$5("pause", D$jscomp$0), body);
                        }
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("finish", D$jscomp$0), function(event) {
                        event.stopPropagation();
                        if (ba$jscomp$1.isScrolling) {
                            d$jscomp$1057(U$jscomp$0);
                        }
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("pause", D$jscomp$0), function(event, sp, refC) {
                        event.stopPropagation();
                        X$jscomp$3 = p$jscomp$114(X$jscomp$3);
                        if (sp && ba$jscomp$1.isScrolling) {
                            /** @type {boolean} */
                            U$jscomp$0.isStopped = true;
                            /** @type {number} */
                            event = Aa$jscomp$1() - U$jscomp$0.startTime;
                            U$jscomp$0.duration -= event;
                            if (U$jscomp$0.pre) {
                                U$jscomp$0.pre.duration -= event;
                            }
                            if (U$jscomp$0.post) {
                                U$jscomp$0.post.duration -= event;
                            }
                            d$jscomp$1057(U$jscomp$0, false);
                        }
                        if (!(ba$jscomp$1.isPaused || ba$jscomp$1.isScrolling || !refC)) {
                            X$jscomp$3.timePassed += Aa$jscomp$1() - X$jscomp$3.startTime;
                        }
                        if (!ba$jscomp$1.isPaused) {
                            if (t$jscomp$0.auto.button) {
                                t$jscomp$0.auto.button.addClass(Q$jscomp$5("paused", D$jscomp$0));
                            }
                        }
                        /** @type {boolean} */
                        ba$jscomp$1.isPaused = true;
                        if (t$jscomp$0.auto.onTimeoutPause) {
                            /** @type {number} */
                            refC = t$jscomp$0.auto.timeoutDuration - X$jscomp$3.timePassed;
                            t$jscomp$0.auto.onTimeoutPause.call(aa$jscomp$0, 100 - Math.ceil(100 * refC / t$jscomp$0.auto.timeoutDuration), refC);
                        }
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("play", D$jscomp$0), function(event, type, v, path) {
                        event.stopPropagation();
                        X$jscomp$3 = p$jscomp$114(X$jscomp$3);
                        path = da$jscomp$4([type, v, path], ["string", "number", "boolean"]);
                        type = path[0];
                        v = path[1];
                        path = path[2];
                        if ("prev" != type && "next" != type) {
                            /** @type {string} */
                            type = ba$jscomp$1.direction;
                        }
                        if (!S$jscomp$1(v)) {
                            /** @type {number} */
                            v = 0;
                        }
                        if (!V$jscomp$1(path)) {
                            /** @type {boolean} */
                            path = false;
                        }
                        if (path) {
                            /** @type {boolean} */
                            ba$jscomp$1.isStopped = false;
                            /** @type {boolean} */
                            t$jscomp$0.auto.play = true;
                        }
                        if (!t$jscomp$0.auto.play) {
                            return event.stopImmediatePropagation(), fa$jscomp$1(D$jscomp$0, "Carousel stopped: Not scrolling.");
                        }
                        if (ba$jscomp$1.isPaused && t$jscomp$0.auto.button) {
                            t$jscomp$0.auto.button.removeClass(Q$jscomp$5("stopped", D$jscomp$0));
                            t$jscomp$0.auto.button.removeClass(Q$jscomp$5("paused", D$jscomp$0));
                        }
                        /** @type {boolean} */
                        ba$jscomp$1.isPaused = false;
                        X$jscomp$3.startTime = Aa$jscomp$1();
                        var a = t$jscomp$0.auto.timeoutDuration + v;
                        /** @type {number} */
                        dur2 = a - X$jscomp$3.timePassed;
                        /** @type {number} */
                        perc = 100 - Math.ceil(100 * dur2 / a);
                        if (t$jscomp$0.auto.progress) {
                            /** @type {number} */
                            X$jscomp$3.progress = setInterval(function() {
                                var b = Aa$jscomp$1() - X$jscomp$3.startTime + X$jscomp$3.timePassed;
                                t$jscomp$0.auto.progress.updater.call(t$jscomp$0.auto.progress.bar[0], Math.ceil(100 * b / a));
                            }, t$jscomp$0.auto.progress.interval);
                        }
                        /** @type {number} */
                        X$jscomp$3.auto = setTimeout(function() {
                            if (t$jscomp$0.auto.progress) {
                                t$jscomp$0.auto.progress.updater.call(t$jscomp$0.auto.progress.bar[0], 100);
                            }
                            if (t$jscomp$0.auto.onTimeoutEnd) {
                                t$jscomp$0.auto.onTimeoutEnd.call(aa$jscomp$0, perc, dur2);
                            }
                            if (ba$jscomp$1.isScrolling) {
                                B$jscomp$0.trigger(E$jscomp$5("play", D$jscomp$0), type);
                            } else {
                                B$jscomp$0.trigger(E$jscomp$5(type, D$jscomp$0), t$jscomp$0.auto);
                            }
                        }, dur2);
                        if (t$jscomp$0.auto.onTimeoutStart) {
                            t$jscomp$0.auto.onTimeoutStart.call(aa$jscomp$0, perc, dur2);
                        }
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("resume", D$jscomp$0), function(event) {
                        event.stopPropagation();
                        if (U$jscomp$0.isStopped) {
                            /** @type {boolean} */
                            U$jscomp$0.isStopped = false;
                            /** @type {boolean} */
                            ba$jscomp$1.isPaused = false;
                            /** @type {boolean} */
                            ba$jscomp$1.isScrolling = true;
                            U$jscomp$0.startTime = Aa$jscomp$1();
                            k$jscomp$384(U$jscomp$0, D$jscomp$0);
                        } else {
                            B$jscomp$0.trigger(E$jscomp$5("play", D$jscomp$0));
                        }
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("prev", D$jscomp$0) + " " + E$jscomp$5("next", D$jscomp$0), function(e, options, value, val, end) {
                        e.stopPropagation();
                        if (ba$jscomp$1.isStopped || B$jscomp$0.is(":hidden")) {
                            return e.stopImmediatePropagation(), fa$jscomp$1(D$jscomp$0, "Carousel stopped or hidden: Not scrolling.");
                        }
                        var id = S$jscomp$1(t$jscomp$0.items.minimum) ? t$jscomp$0.items.minimum : t$jscomp$0.items.visible + 1;
                        if (id > J$jscomp$0.total) {
                            return e.stopImmediatePropagation(), fa$jscomp$1(D$jscomp$0, "Not enough items (" + J$jscomp$0.total + " total, " + id + " needed): Not scrolling.");
                        }
                        var data = da$jscomp$4([options, value, val, end], ["object", "number/string", "function", "boolean"]);
                        options = data[0];
                        value = data[1];
                        val = data[2];
                        end = data[3];
                        id = e.type.slice(D$jscomp$0.events.prefix.length);
                        if (!ra$jscomp$1(options)) {
                            options = {};
                        }
                        if (ea$jscomp$1(val)) {
                            options.onAfter = val;
                        }
                        if (V$jscomp$1(end)) {
                            /** @type {number} */
                            options.queue = end;
                        }
                        options = b$jscomp$1387.extend(true, {}, t$jscomp$0[id], options);
                        if (options.conditions && !options.conditions.call(aa$jscomp$0, id)) {
                            return e.stopImmediatePropagation(), fa$jscomp$1(D$jscomp$0, 'Callback "conditions" returned false.');
                        }
                        if (!S$jscomp$1(value)) {
                            if ("*" != t$jscomp$0.items.filter) {
                                /** @type {string} */
                                value = "visible";
                            } else {
                                /** @type {!Array} */
                                var arr = [value, options.items, t$jscomp$0[id].items];
                                /** @type {number} */
                                data = 0;
                                /** @type {number} */
                                end = arr.length;
                                for (; data < end; data++) {
                                    if (S$jscomp$1(arr[data]) || "page" == arr[data] || "visible" == arr[data]) {
                                        value = arr[data];
                                        break;
                                    }
                                }
                            }
                            switch (value) {
                                case "page":
                                    return e.stopImmediatePropagation(), B$jscomp$0.triggerHandler(E$jscomp$5(id + "Page", D$jscomp$0), [options, val]);
                                case "visible":
                                    if (!(t$jscomp$0.items.visibleConf.variable || "*" != t$jscomp$0.items.filter)) {
                                        value = t$jscomp$0.items.visible;
                                    }
                            }
                        }
                        if (U$jscomp$0.isStopped) {
                            return B$jscomp$0.trigger(E$jscomp$5("resume", D$jscomp$0)), B$jscomp$0.trigger(E$jscomp$5("queue", D$jscomp$0), [id, [options, value, val]]), e.stopImmediatePropagation(), fa$jscomp$1(D$jscomp$0, "Carousel resumed scrolling.");
                        }
                        if (0 < options.duration && ba$jscomp$1.isScrolling) {
                            return options.queue && ("last" == options.queue && (Ha$jscomp$0 = []), "first" == options.queue && 0 != Ha$jscomp$0.length || B$jscomp$0.trigger(E$jscomp$5("queue", D$jscomp$0), [id, [options, value, val]])), e.stopImmediatePropagation(), fa$jscomp$1(D$jscomp$0, "Carousel currently scrolling.");
                        }
                        /** @type {number} */
                        X$jscomp$3.timePassed = 0;
                        B$jscomp$0.trigger(E$jscomp$5("slide_" + id, D$jscomp$0), [options, value]);
                        if (t$jscomp$0.synchronise) {
                            e = t$jscomp$0.synchronise;
                            /** @type {!Array} */
                            options = [options, value];
                            /** @type {number} */
                            val = 0;
                            end = e.length;
                            for (; val < end; val++) {
                                data = id;
                                if (!e[val][2]) {
                                    /** @type {string} */
                                    data = "prev" == data ? "next" : "prev";
                                }
                                if (!e[val][1]) {
                                    options[0] = e[val][0].triggerHandler("_cfs_triggerEvent", ["configuration", data]);
                                }
                                options[1] = value + e[val][3];
                                e[val][0].trigger("_cfs_triggerEvent", ["slide_" + data, options]);
                            }
                        }
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("slide_prev", D$jscomp$0), function(data, opts, i) {
                        data.stopPropagation();
                        var d = B$jscomp$0.children();
                        if (!t$jscomp$0.circular && 0 == J$jscomp$0.first) {
                            return t$jscomp$0.infinite && B$jscomp$0.trigger(E$jscomp$5("next", D$jscomp$0), J$jscomp$0.total - 1), data.stopImmediatePropagation();
                        }
                        P$jscomp$13(d, t$jscomp$0);
                        if (!S$jscomp$1(i)) {
                            if (t$jscomp$0.items.visibleConf.variable) {
                                i = q$jscomp$45(d, t$jscomp$0, J$jscomp$0.total - 1);
                            } else {
                                if ("*" != t$jscomp$0.items.filter) {
                                    var v = S$jscomp$1(opts.items) ? opts.items : x$jscomp$99(B$jscomp$0, t$jscomp$0);
                                    i = H$jscomp$21(d, t$jscomp$0.items.filter, v, J$jscomp$0.total - 1);
                                } else {
                                    i = t$jscomp$0.items.visible;
                                }
                            }
                            i = ua$jscomp$2(i, t$jscomp$0, opts.items, aa$jscomp$0);
                        }
                        if (!t$jscomp$0.circular) {
                            if (J$jscomp$0.total - i < J$jscomp$0.first) {
                                /** @type {number} */
                                i = J$jscomp$0.total - J$jscomp$0.first;
                            }
                        }
                        t$jscomp$0.items.visibleConf.old = t$jscomp$0.items.visible;
                        if (t$jscomp$0.items.visibleConf.variable) {
                            v = pa$jscomp$2(G$jscomp$19(d, t$jscomp$0, J$jscomp$0.total - i), t$jscomp$0, t$jscomp$0.items.visibleConf.adjust, aa$jscomp$0);
                            if (t$jscomp$0.items.visible + i <= v && i < J$jscomp$0.total) {
                                i++;
                                v = pa$jscomp$2(G$jscomp$19(d, t$jscomp$0, J$jscomp$0.total - i), t$jscomp$0, t$jscomp$0.items.visibleConf.adjust, aa$jscomp$0);
                            }
                            t$jscomp$0.items.visible = v;
                        } else {
                            if ("*" != t$jscomp$0.items.filter) {
                                v = h$jscomp$200(d, t$jscomp$0, J$jscomp$0.total - i);
                                t$jscomp$0.items.visible = pa$jscomp$2(v, t$jscomp$0, t$jscomp$0.items.visibleConf.adjust, aa$jscomp$0);
                            }
                        }
                        P$jscomp$13(d, t$jscomp$0, true);
                        if (0 == i) {
                            return data.stopImmediatePropagation(), fa$jscomp$1(D$jscomp$0, "0 items to scroll: Not scrolling.");
                        }
                        fa$jscomp$1(D$jscomp$0, "Scrolling " + i + " items backward.");
                        J$jscomp$0.first += i;
                        for (; J$jscomp$0.first >= J$jscomp$0.total;) {
                            J$jscomp$0.first -= J$jscomp$0.total;
                        }
                        if (!t$jscomp$0.circular) {
                            if (0 == J$jscomp$0.first && opts.onEnd) {
                                opts.onEnd.call(aa$jscomp$0, "prev");
                            }
                            if (!t$jscomp$0.infinite) {
                                w$jscomp$53(t$jscomp$0, J$jscomp$0.first, D$jscomp$0);
                            }
                        }
                        if (t$jscomp$0.rendering) {
                            B$jscomp$0.children().slice(J$jscomp$0.total - i, J$jscomp$0.total).prependTo(B$jscomp$0);
                        }
                        if (J$jscomp$0.total < t$jscomp$0.items.visible + i) {
                            B$jscomp$0.children().slice(0, t$jscomp$0.items.visible + i - J$jscomp$0.total).clone(true).appendTo(B$jscomp$0);
                        }
                        d = B$jscomp$0.children();
                        var a = d.slice(i, t$jscomp$0.items.visibleConf.old + i);
                        data = d.slice(0, t$jscomp$0.items.visible);
                        var title = d.eq(i - 1);
                        var l = a.last();
                        var self = data.last();
                        P$jscomp$13(d, t$jscomp$0);
                        /** @type {number} */
                        var node = v = 0;
                        if (t$jscomp$0.align) {
                            node = Y$jscomp$6(data, t$jscomp$0);
                            v = node[0];
                            node = node[1];
                        }
                        var delta = 0 > v ? t$jscomp$0.padding[t$jscomp$0.d[3]] : 0;
                        /** @type {boolean} */
                        var I = false;
                        var value = b$jscomp$1387();
                        if (t$jscomp$0.items.visible < i && (value = d.slice(t$jscomp$0.items.visibleConf.old, i), "directscroll" == opts.fx)) {
                            var animate = t$jscomp$0.items[t$jscomp$0.d.width];
                            I = value;
                            title = self;
                            l$jscomp$163(I);
                            /** @type {string} */
                            t$jscomp$0.items[t$jscomp$0.d.width] = "variable";
                        }
                        /** @type {boolean} */
                        var s = false;
                        var r = qa$jscomp$4(d.slice(0, i), t$jscomp$0, "width");
                        var args = ha$jscomp$6(ka$jscomp$7(data, t$jscomp$0, true), t$jscomp$0, !t$jscomp$0.usePadding);
                        /** @type {number} */
                        var result = 0;
                        var style = {};
                        var params = {};
                        var propX = {};
                        var resource = {};
                        var buffer = {};
                        var C = {};
                        var items = {};
                        var x = u$jscomp$74(opts, t$jscomp$0, i, r);
                        switch (opts.fx) {
                            case "cover":
                            case "cover-fade":
                                result = qa$jscomp$4(d.slice(0, t$jscomp$0.items.visible), t$jscomp$0, "width");
                        }
                        if (I) {
                            t$jscomp$0.items[t$jscomp$0.d.width] = animate;
                        }
                        P$jscomp$13(d, t$jscomp$0, true);
                        if (0 <= node) {
                            P$jscomp$13(l, t$jscomp$0, t$jscomp$0.padding[t$jscomp$0.d[1]]);
                        }
                        if (0 <= v) {
                            P$jscomp$13(title, t$jscomp$0, t$jscomp$0.padding[t$jscomp$0.d[3]]);
                        }
                        if (t$jscomp$0.align) {
                            t$jscomp$0.padding[t$jscomp$0.d[1]] = node;
                            t$jscomp$0.padding[t$jscomp$0.d[3]] = v;
                        }
                        /** @type {number} */
                        C[t$jscomp$0.d.left] = -(r - delta);
                        /** @type {number} */
                        items[t$jscomp$0.d.left] = -(result - delta);
                        params[t$jscomp$0.d.left] = args[t$jscomp$0.d.width];
                        /**
                         * @return {undefined}
                         */
                        var setCircleSize = function() {};
                        /**
                         * @return {undefined}
                         */
                        d = function() {};
                        /**
                         * @return {undefined}
                         */
                        var uiCleanupFunc = function() {};
                        /**
                         * @return {undefined}
                         */
                        animate = function() {};
                        /**
                         * @return {undefined}
                         */
                        var transformCircle = function() {};
                        /**
                         * @return {undefined}
                         */
                        delta = function() {};
                        /**
                         * @return {undefined}
                         */
                        var updateHighlightColor = function() {};
                        /**
                         * @return {undefined}
                         */
                        result = function() {};
                        /**
                         * @return {undefined}
                         */
                        var init = function() {};
                        /**
                         * @return {undefined}
                         */
                        var clear = function() {};
                        /**
                         * @return {undefined}
                         */
                        var change_it = function() {};
                        switch (opts.fx) {
                            case "crossfade":
                            case "cover":
                            case "cover-fade":
                            case "uncover":
                            case "uncover-fade":
                                s = B$jscomp$0.clone(true).appendTo(ta$jscomp$0);
                        }
                        switch (opts.fx) {
                            case "crossfade":
                            case "uncover":
                            case "uncover-fade":
                                s.children().slice(0, i).remove();
                                s.children().slice(t$jscomp$0.items.visibleConf.old).remove();
                                break;
                            case "cover":
                            case "cover-fade":
                                s.children().slice(t$jscomp$0.items.visible).remove();
                                s.css(items);
                        }
                        if (t$jscomp$0.rendering) {
                            B$jscomp$0.css(C);
                        }
                        U$jscomp$0 = c$jscomp$1020(x, opts.easing, D$jscomp$0);
                        style[t$jscomp$0.d.left] = t$jscomp$0.usePadding ? t$jscomp$0.padding[t$jscomp$0.d[3]] : 0;
                        style[t$jscomp$0.d.left] = t$jscomp$0.rendering ? style[t$jscomp$0.d.left] : parseInt(B$jscomp$0.css("left")) + r;
                        if ("variable" == t$jscomp$0[t$jscomp$0.d.width] || "variable" == t$jscomp$0[t$jscomp$0.d.height]) {
                            /**
                             * @return {undefined}
                             */
                            setCircleSize = function() {
                                ta$jscomp$0.css(args);
                            };
                            /**
                             * @return {undefined}
                             */
                            d = function() {
                                U$jscomp$0.anims.push([ta$jscomp$0, args]);
                            };
                        }
                        if (t$jscomp$0.usePadding) {
                            if (self.not(title).length) {
                                propX[t$jscomp$0.d.marginRight] = title.data("_cfs_origCssMargin");
                                if (0 > v) {
                                    title.css(propX);
                                } else {
                                    /**
                                     * @return {undefined}
                                     */
                                    updateHighlightColor = function() {
                                        title.css(propX);
                                    };
                                    /**
                                     * @return {undefined}
                                     */
                                    result = function() {
                                        U$jscomp$0.anims.push([title, propX]);
                                    };
                                }
                            }
                            switch (opts.fx) {
                                case "cover":
                                case "cover-fade":
                                    s.children().eq(i - 1).css(propX);
                            }
                            if (self.not(l).length) {
                                resource[t$jscomp$0.d.marginRight] = l.data("_cfs_origCssMargin");
                                /**
                                 * @return {undefined}
                                 */
                                uiCleanupFunc = function() {
                                    l.css(resource);
                                };
                                /**
                                 * @return {undefined}
                                 */
                                animate = function() {
                                    U$jscomp$0.anims.push([l, resource]);
                                };
                            }
                            if (0 <= node) {
                                buffer[t$jscomp$0.d.marginRight] = self.data("_cfs_origCssMargin") + t$jscomp$0.padding[t$jscomp$0.d[1]];
                                /**
                                 * @return {undefined}
                                 */
                                transformCircle = function() {
                                    self.css(buffer);
                                };
                                /**
                                 * @return {undefined}
                                 */
                                delta = function() {
                                    U$jscomp$0.anims.push([self, buffer]);
                                };
                            }
                        }
                        /**
                         * @return {undefined}
                         */
                        change_it = function() {
                            B$jscomp$0.css(style);
                        };
                        /** @type {number} */
                        var nbCrumbs = t$jscomp$0.items.visible + i - J$jscomp$0.total;
                        /**
                         * @return {undefined}
                         */
                        clear = function() {
                            if (0 < nbCrumbs) {
                                B$jscomp$0.children().slice(J$jscomp$0.total).remove();
                                a = b$jscomp$1387(B$jscomp$0.children().slice(J$jscomp$0.total - (t$jscomp$0.items.visible - nbCrumbs)).get().concat(B$jscomp$0.children().slice(0, nbCrumbs).get()));
                            }
                            m$jscomp$125(I);
                            if (t$jscomp$0.usePadding) {
                                var Utils = B$jscomp$0.children().eq(t$jscomp$0.items.visible + i - 1);
                                Utils.css(t$jscomp$0.d.marginRight, Utils.data("_cfs_origCssMargin"));
                            }
                        };
                        var o = n$jscomp$90(a, value, data, i, "prev", x, args);
                        /**
                         * @return {undefined}
                         */
                        init = function() {
                            g$jscomp$404(B$jscomp$0, s, opts);
                            /** @type {boolean} */
                            ba$jscomp$1.isScrolling = false;
                            Ea$jscomp$0.onAfter = f$jscomp$499(aa$jscomp$0, opts, "onAfter", o, Ea$jscomp$0);
                            Ha$jscomp$0 = e$jscomp$603(B$jscomp$0, Ha$jscomp$0, D$jscomp$0);
                            if (!ba$jscomp$1.isPaused) {
                                B$jscomp$0.trigger(E$jscomp$5("play", D$jscomp$0));
                            }
                        };
                        /** @type {boolean} */
                        ba$jscomp$1.isScrolling = true;
                        X$jscomp$3 = p$jscomp$114(X$jscomp$3);
                        Ea$jscomp$0.onBefore = f$jscomp$499(aa$jscomp$0, opts, "onBefore", o, Ea$jscomp$0);
                        switch (opts.fx) {
                            case "none":
                                B$jscomp$0.css(style);
                                setCircleSize();
                                uiCleanupFunc();
                                transformCircle();
                                updateHighlightColor();
                                change_it();
                                clear();
                                init();
                                break;
                            case "fade":
                                U$jscomp$0.anims.push([B$jscomp$0, {
                                    opacity: 0
                                }, function() {
                                    setCircleSize();
                                    uiCleanupFunc();
                                    transformCircle();
                                    updateHighlightColor();
                                    change_it();
                                    clear();
                                    U$jscomp$0 = c$jscomp$1020(x, opts.easing, D$jscomp$0);
                                    U$jscomp$0.anims.push([B$jscomp$0, {
                                        opacity: 1
                                    }, init]);
                                    k$jscomp$384(U$jscomp$0, D$jscomp$0);
                                }]);
                                break;
                            case "crossfade":
                                B$jscomp$0.css({
                                    opacity: 0
                                });
                                U$jscomp$0.anims.push([s, {
                                    opacity: 0
                                }]);
                                U$jscomp$0.anims.push([B$jscomp$0, {
                                    opacity: 1
                                }, init]);
                                d();
                                uiCleanupFunc();
                                transformCircle();
                                updateHighlightColor();
                                change_it();
                                clear();
                                break;
                            case "cover":
                                U$jscomp$0.anims.push([s, style, function() {
                                    uiCleanupFunc();
                                    transformCircle();
                                    updateHighlightColor();
                                    change_it();
                                    clear();
                                    init();
                                }]);
                                d();
                                break;
                            case "cover-fade":
                                U$jscomp$0.anims.push([B$jscomp$0, {
                                    opacity: 0
                                }]);
                                U$jscomp$0.anims.push([s, style, function() {
                                    uiCleanupFunc();
                                    transformCircle();
                                    updateHighlightColor();
                                    change_it();
                                    clear();
                                    init();
                                }]);
                                d();
                                break;
                            case "uncover":
                                U$jscomp$0.anims.push([s, params, init]);
                                d();
                                uiCleanupFunc();
                                transformCircle();
                                updateHighlightColor();
                                change_it();
                                clear();
                                break;
                            case "uncover-fade":
                                B$jscomp$0.css({
                                    opacity: 0
                                });
                                U$jscomp$0.anims.push([B$jscomp$0, {
                                    opacity: 1
                                }]);
                                U$jscomp$0.anims.push([s, params, init]);
                                d();
                                uiCleanupFunc();
                                transformCircle();
                                updateHighlightColor();
                                change_it();
                                clear();
                                break;
                            default:
                                U$jscomp$0.anims.push([B$jscomp$0, style, function() {
                                    clear();
                                    init();
                                }]);
                                d();
                                animate();
                                delta();
                                result();
                        }
                        k$jscomp$384(U$jscomp$0, D$jscomp$0);
                        Da$jscomp$1(t$jscomp$0.cookie, B$jscomp$0, D$jscomp$0);
                        B$jscomp$0.trigger(E$jscomp$5("updatePageStatus", D$jscomp$0), [false, args]);
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("slide_next", D$jscomp$0), function(e, opts, i) {
                        e.stopPropagation();
                        var a = B$jscomp$0.children();
                        if (!t$jscomp$0.circular && J$jscomp$0.first == t$jscomp$0.items.visible) {
                            return t$jscomp$0.infinite && B$jscomp$0.trigger(E$jscomp$5("prev", D$jscomp$0), J$jscomp$0.total - 1), e.stopImmediatePropagation();
                        }
                        P$jscomp$13(a, t$jscomp$0);
                        if (!S$jscomp$1(i)) {
                            if ("*" != t$jscomp$0.items.filter) {
                                var index = S$jscomp$1(opts.items) ? opts.items : x$jscomp$99(B$jscomp$0, t$jscomp$0);
                                /** @type {number} */
                                i = N$jscomp$11(a, t$jscomp$0.items.filter, index + 1, 0, t$jscomp$0.circular) - 1;
                            } else {
                                i = t$jscomp$0.items.visible;
                            }
                            i = ua$jscomp$2(i, t$jscomp$0, opts.items, aa$jscomp$0);
                        }
                        var m = 0 == J$jscomp$0.first ? J$jscomp$0.total : J$jscomp$0.first;
                        if (!t$jscomp$0.circular) {
                            if (t$jscomp$0.items.visibleConf.variable) {
                                var v = G$jscomp$19(a, t$jscomp$0, i);
                                index = q$jscomp$45(a, t$jscomp$0, m - 1);
                            } else {
                                index = v = t$jscomp$0.items.visible;
                            }
                            if (i + v > m) {
                                /** @type {number} */
                                i = m - index;
                            }
                        }
                        t$jscomp$0.items.visibleConf.old = t$jscomp$0.items.visible;
                        if (t$jscomp$0.items.visibleConf.variable) {
                            v = pa$jscomp$2(F$jscomp$15(a, t$jscomp$0, i, m), t$jscomp$0, t$jscomp$0.items.visibleConf.adjust, aa$jscomp$0);
                            for (; t$jscomp$0.items.visible - i >= v && i < J$jscomp$0.total;) {
                                i++;
                                v = pa$jscomp$2(F$jscomp$15(a, t$jscomp$0, i, m), t$jscomp$0, t$jscomp$0.items.visibleConf.adjust, aa$jscomp$0);
                            }
                            t$jscomp$0.items.visible = v;
                        } else {
                            if ("*" != t$jscomp$0.items.filter) {
                                v = h$jscomp$200(a, t$jscomp$0, i);
                                t$jscomp$0.items.visible = pa$jscomp$2(v, t$jscomp$0, t$jscomp$0.items.visibleConf.adjust, aa$jscomp$0);
                            }
                        }
                        P$jscomp$13(a, t$jscomp$0, true);
                        if (0 == i) {
                            return e.stopImmediatePropagation(), fa$jscomp$1(D$jscomp$0, "0 items to scroll: Not scrolling.");
                        }
                        fa$jscomp$1(D$jscomp$0, "Scrolling " + i + " items forward.");
                        J$jscomp$0.first -= i;
                        for (; 0 > J$jscomp$0.first;) {
                            J$jscomp$0.first += J$jscomp$0.total;
                        }
                        if (!t$jscomp$0.circular) {
                            if (J$jscomp$0.first == t$jscomp$0.items.visible && opts.onEnd) {
                                opts.onEnd.call(aa$jscomp$0, "next");
                            }
                            if (!t$jscomp$0.infinite) {
                                w$jscomp$53(t$jscomp$0, J$jscomp$0.first, D$jscomp$0);
                            }
                        }
                        if (J$jscomp$0.total < t$jscomp$0.items.visible + i) {
                            B$jscomp$0.children().slice(0, t$jscomp$0.items.visible + i - J$jscomp$0.total).clone(true).appendTo(B$jscomp$0);
                        }
                        a = B$jscomp$0.children();
                        e = a.slice(0, t$jscomp$0.items.visibleConf.old);
                        var s = a.slice(i, t$jscomp$0.items.visible + i);
                        var content = a.eq(i - 1);
                        var code = e.last();
                        m = s.last();
                        P$jscomp$13(a, t$jscomp$0);
                        /** @type {number} */
                        var pvx = index = 0;
                        if (t$jscomp$0.align) {
                            v = Y$jscomp$6(s, t$jscomp$0);
                            index = v[0];
                            pvx = v[1];
                        }
                        /** @type {boolean} */
                        var g = false;
                        v = b$jscomp$1387();
                        if (t$jscomp$0.items.visibleConf.old < i && (v = a.slice(t$jscomp$0.items.visibleConf.old, i), "directscroll" == opts.fx)) {
                            var animate = t$jscomp$0.items[t$jscomp$0.d.width];
                            g = v;
                            content = code;
                            l$jscomp$163(g);
                            /** @type {string} */
                            t$jscomp$0.items[t$jscomp$0.d.width] = "variable";
                        }
                        /** @type {boolean} */
                        var container = false;
                        var x = qa$jscomp$4(a.slice(0, i), t$jscomp$0, "width");
                        var target = ha$jscomp$6(ka$jscomp$7(s, t$jscomp$0, true), t$jscomp$0, !t$jscomp$0.usePadding);
                        /** @type {number} */
                        var width = 0;
                        var style = {};
                        var offset = {};
                        var buffer = {};
                        var propX = {};
                        var self = {};
                        var d = u$jscomp$74(opts, t$jscomp$0, i, x);
                        switch (opts.fx) {
                            case "uncover":
                            case "uncover-fade":
                                width = qa$jscomp$4(a.slice(0, t$jscomp$0.items.visibleConf.old), t$jscomp$0, "width");
                        }
                        if (g) {
                            t$jscomp$0.items[t$jscomp$0.d.width] = animate;
                        }
                        if (t$jscomp$0.align && 0 > t$jscomp$0.padding[t$jscomp$0.d[1]]) {
                            /** @type {number} */
                            t$jscomp$0.padding[t$jscomp$0.d[1]] = 0;
                        }
                        P$jscomp$13(a, t$jscomp$0, true);
                        P$jscomp$13(code, t$jscomp$0, t$jscomp$0.padding[t$jscomp$0.d[1]]);
                        if (t$jscomp$0.align) {
                            t$jscomp$0.padding[t$jscomp$0.d[1]] = pvx;
                            t$jscomp$0.padding[t$jscomp$0.d[3]] = index;
                        }
                        /**
                         * @return {undefined}
                         */
                        var setCircleSize = function() {};
                        /**
                         * @return {undefined}
                         */
                        animate = function() {};
                        /**
                         * @return {undefined}
                         */
                        var uiCleanupFunc = function() {};
                        /**
                         * @return {undefined}
                         */
                        var triggerListeners_ = function() {};
                        /**
                         * @return {undefined}
                         */
                        var transformCircle = function() {};
                        /**
                         * @return {undefined}
                         */
                        var blendingSource = function() {};
                        /**
                         * @return {undefined}
                         */
                        var start = function() {};
                        /**
                         * @return {undefined}
                         */
                        var init = function() {};
                        /**
                         * @return {undefined}
                         */
                        var updateHighlightColor = function() {};
                        switch (opts.fx) {
                            case "crossfade":
                            case "cover":
                            case "cover-fade":
                            case "uncover":
                            case "uncover-fade":
                                container = B$jscomp$0.clone(true).appendTo(ta$jscomp$0);
                                container.children().slice(t$jscomp$0.items.visibleConf.old).remove();
                        }
                        switch (opts.fx) {
                            case "crossfade":
                            case "cover":
                            case "cover-fade":
                                B$jscomp$0.css("zIndex", 1);
                                container.css("zIndex", 0);
                        }
                        U$jscomp$0 = c$jscomp$1020(d, opts.easing, D$jscomp$0);
                        /** @type {number} */
                        style[t$jscomp$0.d.left] = t$jscomp$0.rendering ? -x : parseInt(B$jscomp$0.css("left")) - x;
                        /** @type {number} */
                        offset[t$jscomp$0.d.left] = -width;
                        if (0 > index) {
                            style[t$jscomp$0.d.left] += index;
                        }
                        self[t$jscomp$0.d.left] = t$jscomp$0.rendering ? t$jscomp$0.usePadding ? t$jscomp$0.padding[t$jscomp$0.d[3]] : 0 : style[t$jscomp$0.d.left];
                        if ("variable" == t$jscomp$0[t$jscomp$0.d.width] || "variable" == t$jscomp$0[t$jscomp$0.d.height]) {
                            /**
                             * @return {undefined}
                             */
                            setCircleSize = function() {
                                ta$jscomp$0.css(target);
                            };
                            /**
                             * @return {undefined}
                             */
                            animate = function() {
                                U$jscomp$0.anims.push([ta$jscomp$0, target]);
                            };
                        }
                        if (t$jscomp$0.usePadding) {
                            x = m.data("_cfs_origCssMargin");
                            if (0 <= pvx) {
                                x = x + t$jscomp$0.padding[t$jscomp$0.d[1]];
                            }
                            m.css(t$jscomp$0.d.marginRight, x);
                            if (content.not(code).length) {
                                propX[t$jscomp$0.d.marginRight] = code.data("_cfs_origCssMargin");
                            }
                            /**
                             * @return {undefined}
                             */
                            uiCleanupFunc = function() {
                                code.css(propX);
                            };
                            /**
                             * @return {undefined}
                             */
                            triggerListeners_ = function() {
                                U$jscomp$0.anims.push([code, propX]);
                            };
                            m = content.data("_cfs_origCssMargin");
                            if (0 < index) {
                                m = m + t$jscomp$0.padding[t$jscomp$0.d[3]];
                            }
                            buffer[t$jscomp$0.d.marginRight] = m;
                            /**
                             * @return {undefined}
                             */
                            transformCircle = function() {
                                content.css(buffer);
                            };
                            /**
                             * @return {undefined}
                             */
                            blendingSource = function() {
                                U$jscomp$0.anims.push([content, buffer]);
                            };
                        }
                        /**
                         * @return {undefined}
                         */
                        updateHighlightColor = function() {
                            B$jscomp$0.css(self);
                        };
                        /** @type {number} */
                        var la = t$jscomp$0.items.visible + i - J$jscomp$0.total;
                        /**
                         * @return {undefined}
                         */
                        init = function() {
                            if (0 < la) {
                                B$jscomp$0.children().slice(J$jscomp$0.total).remove();
                            }
                            var Utils = t$jscomp$0.circular || t$jscomp$0.infinite || t$jscomp$0.rendering ? B$jscomp$0.children().slice(0, i).appendTo(B$jscomp$0).last() : B$jscomp$0.children().last();
                            if (0 < la) {
                                s = A$jscomp$16(a, t$jscomp$0);
                            }
                            m$jscomp$125(g);
                            if (t$jscomp$0.usePadding) {
                                if (J$jscomp$0.total < t$jscomp$0.items.visible + i) {
                                    var Utils = B$jscomp$0.children().eq(t$jscomp$0.items.visible - 1);
                                    Utils.css(t$jscomp$0.d.marginRight, Utils.data("_cfs_origCssMargin") + t$jscomp$0.padding[t$jscomp$0.d[1]]);
                                }
                                Utils.css(t$jscomp$0.d.marginRight, Utils.data("_cfs_origCssMargin"));
                            }
                        };
                        var r = n$jscomp$90(e, v, s, i, "next", d, target);
                        /**
                         * @return {undefined}
                         */
                        start = function() {
                            B$jscomp$0.css("zIndex", B$jscomp$0.data("_cfs_origCssZindex"));
                            g$jscomp$404(B$jscomp$0, container, opts);
                            /** @type {boolean} */
                            ba$jscomp$1.isScrolling = false;
                            Ea$jscomp$0.onAfter = f$jscomp$499(aa$jscomp$0, opts, "onAfter", r, Ea$jscomp$0);
                            Ha$jscomp$0 = e$jscomp$603(B$jscomp$0, Ha$jscomp$0, D$jscomp$0);
                            if (!ba$jscomp$1.isPaused) {
                                B$jscomp$0.trigger(E$jscomp$5("play", D$jscomp$0));
                            }
                        };
                        /** @type {boolean} */
                        ba$jscomp$1.isScrolling = true;
                        X$jscomp$3 = p$jscomp$114(X$jscomp$3);
                        Ea$jscomp$0.onBefore = f$jscomp$499(aa$jscomp$0, opts, "onBefore", r, Ea$jscomp$0);
                        switch (opts.fx) {
                            case "none":
                                B$jscomp$0.css(style);
                                setCircleSize();
                                uiCleanupFunc();
                                transformCircle();
                                updateHighlightColor();
                                init();
                                start();
                                break;
                            case "fade":
                                U$jscomp$0.anims.push([B$jscomp$0, {
                                    opacity: 0
                                }, function() {
                                    setCircleSize();
                                    uiCleanupFunc();
                                    transformCircle();
                                    updateHighlightColor();
                                    init();
                                    U$jscomp$0 = c$jscomp$1020(d, opts.easing, D$jscomp$0);
                                    U$jscomp$0.anims.push([B$jscomp$0, {
                                        opacity: 1
                                    }, start]);
                                    k$jscomp$384(U$jscomp$0, D$jscomp$0);
                                }]);
                                break;
                            case "crossfade":
                                B$jscomp$0.css({
                                    opacity: 0
                                });
                                U$jscomp$0.anims.push([container, {
                                    opacity: 0
                                }]);
                                U$jscomp$0.anims.push([B$jscomp$0, {
                                    opacity: 1
                                }, start]);
                                animate();
                                uiCleanupFunc();
                                transformCircle();
                                updateHighlightColor();
                                init();
                                break;
                            case "cover":
                                B$jscomp$0.css(t$jscomp$0.d.left, ta$jscomp$0[t$jscomp$0.d.width]());
                                U$jscomp$0.anims.push([B$jscomp$0, self, start]);
                                animate();
                                uiCleanupFunc();
                                transformCircle();
                                init();
                                break;
                            case "cover-fade":
                                B$jscomp$0.css(t$jscomp$0.d.left, ta$jscomp$0[t$jscomp$0.d.width]());
                                U$jscomp$0.anims.push([container, {
                                    opacity: 0
                                }]);
                                U$jscomp$0.anims.push([B$jscomp$0, self, start]);
                                animate();
                                uiCleanupFunc();
                                transformCircle();
                                init();
                                break;
                            case "uncover":
                                U$jscomp$0.anims.push([container, offset, start]);
                                animate();
                                uiCleanupFunc();
                                transformCircle();
                                updateHighlightColor();
                                init();
                                break;
                            case "uncover-fade":
                                B$jscomp$0.css({
                                    opacity: 0
                                });
                                U$jscomp$0.anims.push([B$jscomp$0, {
                                    opacity: 1
                                }]);
                                U$jscomp$0.anims.push([container, offset, start]);
                                animate();
                                uiCleanupFunc();
                                transformCircle();
                                updateHighlightColor();
                                init();
                                break;
                            default:
                                U$jscomp$0.anims.push([B$jscomp$0, style, function() {
                                    updateHighlightColor();
                                    init();
                                    start();
                                }]);
                                animate();
                                triggerListeners_();
                                blendingSource();
                        }
                        k$jscomp$384(U$jscomp$0, D$jscomp$0);
                        Da$jscomp$1(t$jscomp$0.cookie, B$jscomp$0, D$jscomp$0);
                        B$jscomp$0.trigger(E$jscomp$5("updatePageStatus", D$jscomp$0), [false, target]);
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("slideTo", D$jscomp$0), function(e, i, canCreateDiscussions, isSlidingUp, d, n, h) {
                        e.stopPropagation();
                        e = da$jscomp$4([i, canCreateDiscussions, isSlidingUp, d, n, h], "string/number/object number boolean object string function".split(" "));
                        d = e[3];
                        n = e[4];
                        h = e[5];
                        i = I$jscomp$24(e[0], e[1], e[2], J$jscomp$0, B$jscomp$0);
                        if (0 == i) {
                            return false;
                        }
                        if (!ra$jscomp$1(d)) {
                            /** @type {boolean} */
                            d = false;
                        }
                        if ("prev" != n && "next" != n) {
                            /** @type {string} */
                            n = t$jscomp$0.circular ? i <= J$jscomp$0.total / 2 ? "next" : "prev" : 0 == J$jscomp$0.first || J$jscomp$0.first > i ? "next" : "prev";
                        }
                        if ("prev" == n) {
                            /** @type {number} */
                            i = J$jscomp$0.total - i;
                        }
                        B$jscomp$0.trigger(E$jscomp$5(n, D$jscomp$0), [d, i, h]);
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("prevPage", D$jscomp$0), function(event, isUndo, groupObjects) {
                        event.stopPropagation();
                        event = B$jscomp$0.triggerHandler(E$jscomp$5("currentPage", D$jscomp$0));
                        return B$jscomp$0.triggerHandler(E$jscomp$5("slideToPage", D$jscomp$0), [event - 1, isUndo, "prev", groupObjects]);
                    });
                    B$jscomp$0.bind(E$jscomp$5("nextPage", D$jscomp$0), function(event, isUndo, groupObjects) {
                        event.stopPropagation();
                        event = B$jscomp$0.triggerHandler(E$jscomp$5("currentPage", D$jscomp$0));
                        return B$jscomp$0.triggerHandler(E$jscomp$5("slideToPage", D$jscomp$0), [event + 1, isUndo, "next", groupObjects]);
                    });
                    B$jscomp$0.bind(E$jscomp$5("slideToPage", D$jscomp$0), function(limit, i, groupObjects, singleObjects, audiobeds) {
                        limit.stopPropagation();
                        if (!S$jscomp$1(i)) {
                            i = B$jscomp$0.triggerHandler(E$jscomp$5("currentPage", D$jscomp$0));
                        }
                        limit = t$jscomp$0.pagination.items || t$jscomp$0.items.visible;
                        /** @type {number} */
                        var startNo = Math.ceil(J$jscomp$0.total / limit) - 1;
                        if (0 > i) {
                            /** @type {number} */
                            i = startNo;
                        }
                        if (i > startNo) {
                            /** @type {number} */
                            i = 0;
                        }
                        return B$jscomp$0.triggerHandler(E$jscomp$5("slideTo", D$jscomp$0), [i * limit, 0, true, groupObjects, singleObjects, audiobeds]);
                    });
                    B$jscomp$0.bind(E$jscomp$5("jumpToStart", D$jscomp$0), function(event, value) {
                        event.stopPropagation();
                        value = value ? I$jscomp$24(value, 0, true, J$jscomp$0, B$jscomp$0) : 0;
                        value = value + J$jscomp$0.first;
                        if (0 != value) {
                            if (0 < J$jscomp$0.total) {
                                for (; value > J$jscomp$0.total;) {
                                    /** @type {number} */
                                    value = value - J$jscomp$0.total;
                                }
                            }
                            B$jscomp$0.prepend(B$jscomp$0.children().slice(value, J$jscomp$0.total));
                        }
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("synchronise", D$jscomp$0), function(event, m) {
                        event.stopPropagation();
                        if (m) {
                            m = xa$jscomp$3(m);
                        } else {
                            if (t$jscomp$0.synchronise) {
                                m = t$jscomp$0.synchronise;
                            } else {
                                return fa$jscomp$1(D$jscomp$0, "No carousel to synchronise.");
                            }
                        }
                        event = B$jscomp$0.triggerHandler(E$jscomp$5("currentPosition", D$jscomp$0));
                        /** @type {boolean} */
                        var d = true;
                        /** @type {number} */
                        var k = 0;
                        var f = m.length;
                        for (; k < f; k++) {
                            if (!m[k][0].triggerHandler(E$jscomp$5("slideTo", D$jscomp$0), [event, m[k][3], true])) {
                                /** @type {boolean} */
                                d = false;
                            }
                        }
                        return d;
                    });
                    B$jscomp$0.bind(E$jscomp$5("queue", D$jscomp$0), function(event, p, additionalResolves) {
                        event.stopPropagation();
                        if (ea$jscomp$1(p)) {
                            p.call(aa$jscomp$0, Ha$jscomp$0);
                        } else {
                            if (va$jscomp$1(p)) {
                                /** @type {!Object} */
                                Ha$jscomp$0 = p;
                            } else {
                                if (!la$jscomp$1(p)) {
                                    Ha$jscomp$0.push([p, additionalResolves]);
                                }
                            }
                        }
                        return Ha$jscomp$0;
                    });
                    B$jscomp$0.bind(E$jscomp$5("insertItem", D$jscomp$0), function(current, a, p, d, e) {
                        current.stopPropagation();
                        e = da$jscomp$4([a, p, d, e], ["string/object", "string/number/object", "boolean", "number"]);
                        a = e[0];
                        p = e[1];
                        d = e[2];
                        e = e[3];
                        if (ra$jscomp$1(a) && !wa$jscomp$1(a)) {
                            a = b$jscomp$1387(a);
                        } else {
                            if (ja$jscomp$1(a)) {
                                a = b$jscomp$1387(a);
                            }
                        }
                        if (!wa$jscomp$1(a) || 0 == a.length) {
                            return fa$jscomp$1(D$jscomp$0, "Not a valid object.");
                        }
                        if (la$jscomp$1(p)) {
                            /** @type {string} */
                            p = "end";
                        }
                        M$jscomp$13(a, t$jscomp$0);
                        K$jscomp$13(a);
                        /** @type {number} */
                        current = p;
                        /** @type {string} */
                        var fn = "before";
                        if ("end" == p) {
                            if (d) {
                                if (0 == J$jscomp$0.first) {
                                    /** @type {number} */
                                    p = J$jscomp$0.total - 1;
                                    /** @type {string} */
                                    fn = "after";
                                } else {
                                    p = J$jscomp$0.first;
                                    J$jscomp$0.first += a.length;
                                }
                                if (0 > p) {
                                    /** @type {number} */
                                    p = 0;
                                }
                            } else {
                                /** @type {number} */
                                p = J$jscomp$0.total - 1;
                                /** @type {string} */
                                fn = "after";
                            }
                        } else {
                            p = I$jscomp$24(p, e, d, J$jscomp$0, B$jscomp$0);
                        }
                        e = B$jscomp$0.children().eq(p);
                        if (e.length) {
                            e[fn](a);
                        } else {
                            fa$jscomp$1(D$jscomp$0, "Correct insert-position not found! Appending item to the end.");
                            B$jscomp$0.append(a);
                        }
                        if ("end" != current && !d && p < J$jscomp$0.first) {
                            J$jscomp$0.first += a.length;
                        }
                        J$jscomp$0.total = B$jscomp$0.children().length;
                        if (J$jscomp$0.first >= J$jscomp$0.total) {
                            J$jscomp$0.first -= J$jscomp$0.total;
                        }
                        B$jscomp$0.trigger(E$jscomp$5("updateSizes", D$jscomp$0));
                        B$jscomp$0.trigger(E$jscomp$5("linkAnchors", D$jscomp$0));
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("removeItem", D$jscomp$0), function(args, index, i, prev) {
                        args.stopPropagation();
                        args = da$jscomp$4([index, i, prev], ["string/number/object", "boolean", "number"]);
                        index = args[0];
                        i = args[1];
                        prev = args[2];
                        if (index instanceof b$jscomp$1387 && 1 < index.length) {
                            return c = b$jscomp$1387(), index.each(function(bar, canCreateDiscussions) {
                                if (bar = B$jscomp$0.trigger(E$jscomp$5("removeItem", D$jscomp$0), [b$jscomp$1387(this), i, prev])) {
                                    c = c.add(bar);
                                }
                            }), c;
                        }
                        if (la$jscomp$1(index) || "end" == index) {
                            c = B$jscomp$0.children().last();
                        } else {
                            index = I$jscomp$24(index, prev, i, J$jscomp$0, B$jscomp$0);
                            var c = B$jscomp$0.children().eq(index);
                            if (c.length && index < J$jscomp$0.first) {
                                J$jscomp$0.first -= c.length;
                            }
                        }
                        if (c && c.length) {
                            c.detach();
                            J$jscomp$0.total = B$jscomp$0.children().length;
                            B$jscomp$0.trigger(E$jscomp$5("updateSizes", D$jscomp$0));
                        }
                        return c;
                    });
                    B$jscomp$0.bind(E$jscomp$5("onBefore", D$jscomp$0) + " " + E$jscomp$5("onAfter", D$jscomp$0), function(e, d) {
                        e.stopPropagation();
                        e = e.type.slice(D$jscomp$0.events.prefix.length);
                        if (va$jscomp$1(d)) {
                            /** @type {!Object} */
                            Ea$jscomp$0[e] = d;
                        }
                        if (ea$jscomp$1(d)) {
                            Ea$jscomp$0[e].push(d);
                        }
                        return Ea$jscomp$0[e];
                    });
                    B$jscomp$0.bind(E$jscomp$5("currentPosition", D$jscomp$0), function(data, ct) {
                        data.stopPropagation();
                        /** @type {number} */
                        data = 0 == J$jscomp$0.first ? 0 : J$jscomp$0.total - J$jscomp$0.first;
                        if (ea$jscomp$1(ct)) {
                            ct.call(aa$jscomp$0, data);
                        }
                        return data;
                    });
                    B$jscomp$0.bind(E$jscomp$5("currentPage", D$jscomp$0), function(max_num, matches) {
                        max_num.stopPropagation();
                        var limit = t$jscomp$0.pagination.items || t$jscomp$0.items.visible;
                        /** @type {number} */
                        max_num = Math.ceil(J$jscomp$0.total / limit - 1);
                        /** @type {number} */
                        limit = 0 == J$jscomp$0.first ? 0 : J$jscomp$0.first < J$jscomp$0.total % limit ? 0 : J$jscomp$0.first != limit || t$jscomp$0.circular ? Math.round((J$jscomp$0.total - J$jscomp$0.first) / limit) : max_num;
                        if (0 > limit) {
                            /** @type {number} */
                            limit = 0;
                        }
                        if (limit > max_num) {
                            /** @type {!Object} */
                            limit = max_num;
                        }
                        if (ea$jscomp$1(matches)) {
                            matches.call(aa$jscomp$0, limit);
                        }
                        return limit;
                    });
                    B$jscomp$0.bind(E$jscomp$5("currentVisible", D$jscomp$0), function(a, q) {
                        a.stopPropagation();
                        a = A$jscomp$16(B$jscomp$0.children(), t$jscomp$0);
                        if (ea$jscomp$1(q)) {
                            q.call(aa$jscomp$0, a);
                        }
                        return a;
                    });
                    B$jscomp$0.bind(E$jscomp$5("slice", D$jscomp$0), function(that, value, index, ct) {
                        that.stopPropagation();
                        if (0 == J$jscomp$0.total) {
                            return false;
                        }
                        ct = da$jscomp$4([value, index, ct], ["number", "number", "function"]);
                        value = S$jscomp$1(ct[0]) ? ct[0] : 0;
                        index = S$jscomp$1(ct[1]) ? ct[1] : J$jscomp$0.total;
                        ct = ct[2];
                        value = value + J$jscomp$0.first;
                        index = index + J$jscomp$0.first;
                        if (0 < items.total) {
                            for (; value > J$jscomp$0.total;) {
                                /** @type {number} */
                                value = value - J$jscomp$0.total;
                            }
                            for (; index > J$jscomp$0.total;) {
                                /** @type {number} */
                                index = index - J$jscomp$0.total;
                            }
                            for (; 0 > value;) {
                                value = value + J$jscomp$0.total;
                            }
                            for (; 0 > index;) {
                                index = index + J$jscomp$0.total;
                            }
                        }
                        that = B$jscomp$0.children();
                        value = index > value ? that.slice(value, index) : b$jscomp$1387(that.slice(value, J$jscomp$0.total).get().concat(that.slice(0, index).get()));
                        if (ea$jscomp$1(ct)) {
                            ct.call(aa$jscomp$0, value);
                        }
                        return value;
                    });
                    B$jscomp$0.bind(E$jscomp$5("isPaused", D$jscomp$0) + " " + E$jscomp$5("isStopped", D$jscomp$0) + " " + E$jscomp$5("isScrolling", D$jscomp$0), function(value, ct) {
                        value.stopPropagation();
                        value = value.type.slice(D$jscomp$0.events.prefix.length);
                        value = ba$jscomp$1[value];
                        if (ea$jscomp$1(ct)) {
                            ct.call(aa$jscomp$0, value);
                        }
                        return value;
                    });
                    B$jscomp$0.bind(E$jscomp$5("configuration", D$jscomp$0), function(c$jscomp$1107, d$jscomp$1113, e$jscomp$644, f$jscomp$530) {
                        c$jscomp$1107.stopPropagation();
                        /** @type {boolean} */
                        c$jscomp$1107 = false;
                        if (ea$jscomp$1(d$jscomp$1113)) {
                            d$jscomp$1113.call(aa$jscomp$0, t$jscomp$0);
                        } else {
                            if (ra$jscomp$1(d$jscomp$1113)) {
                                Pa$jscomp$0 = b$jscomp$1387.extend(true, {}, Pa$jscomp$0, d$jscomp$1113);
                                if (false !== e$jscomp$644) {
                                    /** @type {boolean} */
                                    c$jscomp$1107 = true;
                                } else {
                                    t$jscomp$0 = b$jscomp$1387.extend(true, {}, t$jscomp$0, d$jscomp$1113);
                                }
                            } else {
                                if (!la$jscomp$1(d$jscomp$1113)) {
                                    if (ea$jscomp$1(e$jscomp$644)) {
                                        /** @type {*} */
                                        d$jscomp$1113 = eval("opts." + d$jscomp$1113);
                                        if (la$jscomp$1(d$jscomp$1113)) {
                                            /** @type {string} */
                                            d$jscomp$1113 = "";
                                        }
                                        e$jscomp$644.call(aa$jscomp$0, d$jscomp$1113);
                                    } else {
                                        if (la$jscomp$1(e$jscomp$644)) {
                                            return eval("opts." + d$jscomp$1113);
                                        }
                                        if ("boolean" !== typeof f$jscomp$530) {
                                            /** @type {boolean} */
                                            f$jscomp$530 = true;
                                        }
                                        eval("opts_orig." + d$jscomp$1113 + " = b");
                                        if (false !== f$jscomp$530) {
                                            /** @type {boolean} */
                                            c$jscomp$1107 = true;
                                        } else {
                                            eval("opts." + d$jscomp$1113 + " = b");
                                        }
                                    }
                                }
                            }
                        }
                        if (c$jscomp$1107) {
                            P$jscomp$13(B$jscomp$0.children(), t$jscomp$0);
                            W$jscomp$5._init(Pa$jscomp$0);
                            W$jscomp$5._bind_buttons();
                            e$jscomp$644 = Z$jscomp$8(B$jscomp$0, t$jscomp$0);
                            B$jscomp$0.trigger(E$jscomp$5("updatePageStatus", D$jscomp$0), [true, e$jscomp$644]);
                        }
                        return t$jscomp$0;
                    });
                    B$jscomp$0.bind(E$jscomp$5("linkAnchors", D$jscomp$0), function(event, a, value) {
                        event.stopPropagation();
                        if (la$jscomp$1(a)) {
                            a = b$jscomp$1387("body");
                        } else {
                            if (ja$jscomp$1(a)) {
                                a = b$jscomp$1387(a);
                            }
                        }
                        if (!wa$jscomp$1(a) || 0 == a.length) {
                            return fa$jscomp$1(D$jscomp$0, "Not a valid object.");
                        }
                        if (!ja$jscomp$1(value)) {
                            /** @type {string} */
                            value = "a.caroufredsel";
                        }
                        a.find(value).each(function() {
                            var next = this.hash || "";
                            if (0 < next.length && -1 != B$jscomp$0.children().index(b$jscomp$1387(next))) {
                                b$jscomp$1387(this).unbind("click").click(function(event) {
                                    event.preventDefault();
                                    B$jscomp$0.trigger(E$jscomp$5("slideTo", D$jscomp$0), next);
                                });
                            }
                        });
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("updatePageStatus", D$jscomp$0), function(event, canCreateDiscussions, isSlidingUp) {
                        event.stopPropagation();
                        if (t$jscomp$0.pagination.container) {
                            var size = t$jscomp$0.pagination.items || t$jscomp$0.items.visible;
                            /** @type {number} */
                            var b = Math.ceil(J$jscomp$0.total / size);
                            if (canCreateDiscussions) {
                                if (t$jscomp$0.pagination.anchorBuilder) {
                                    t$jscomp$0.pagination.container.children().remove();
                                    t$jscomp$0.pagination.container.each(function() {
                                        /** @type {number} */
                                        var a = 0;
                                        for (; a < b; a++) {
                                            var cmpEvents = B$jscomp$0.children().eq(I$jscomp$24(a * size, 0, true, J$jscomp$0, B$jscomp$0));
                                            b$jscomp$1387(this).append(t$jscomp$0.pagination.anchorBuilder.call(cmpEvents[0], a + 1));
                                        }
                                    });
                                }
                                t$jscomp$0.pagination.container.each(function() {
                                    b$jscomp$1387(this).children().unbind(t$jscomp$0.pagination.event).each(function(ry0) {
                                        b$jscomp$1387(this).bind(t$jscomp$0.pagination.event, function(event) {
                                            event.preventDefault();
                                            B$jscomp$0.trigger(E$jscomp$5("slideTo", D$jscomp$0), [ry0 * size, -t$jscomp$0.pagination.deviation, true, t$jscomp$0.pagination]);
                                        });
                                    });
                                });
                            }
                            var a = B$jscomp$0.triggerHandler(E$jscomp$5("currentPage", D$jscomp$0)) + t$jscomp$0.pagination.deviation;
                            if (a >= b) {
                                /** @type {number} */
                                a = 0;
                            }
                            if (0 > a) {
                                /** @type {number} */
                                a = b - 1;
                            }
                            t$jscomp$0.pagination.container.each(function() {
                                b$jscomp$1387(this).children().removeClass(Q$jscomp$5("selected", D$jscomp$0)).eq(a).addClass(Q$jscomp$5("selected", D$jscomp$0));
                            });
                            return true;
                        }
                    });
                    B$jscomp$0.bind(E$jscomp$5("updateSizes", D$jscomp$0), function(result) {
                        result = t$jscomp$0.items.visible;
                        var b = B$jscomp$0.children();
                        var text = ca$jscomp$3(ta$jscomp$0, t$jscomp$0, "width");
                        J$jscomp$0.total = b.length;
                        if (ba$jscomp$1.primarySizePercentage) {
                            t$jscomp$0.maxDimension = text;
                            t$jscomp$0[t$jscomp$0.d.width] = T$jscomp$4(text, ba$jscomp$1.primarySizePercentage);
                        } else {
                            t$jscomp$0.maxDimension = ia$jscomp$2(t$jscomp$0, text);
                        }
                        if (t$jscomp$0.responsive) {
                            t$jscomp$0.items.width = t$jscomp$0.items.sizesConf.width;
                            t$jscomp$0.items.height = t$jscomp$0.items.sizesConf.height;
                            t$jscomp$0 = Oa$jscomp$2(t$jscomp$0, b, text);
                            result = t$jscomp$0.items.visible;
                            L$jscomp$16(t$jscomp$0, b);
                        } else {
                            if (t$jscomp$0.items.visibleConf.variable) {
                                result = G$jscomp$19(b, t$jscomp$0, 0);
                            } else {
                                if ("*" != t$jscomp$0.items.filter) {
                                    result = h$jscomp$200(b, t$jscomp$0, 0);
                                }
                            }
                        }
                        if (!t$jscomp$0.circular && 0 != J$jscomp$0.first && result > J$jscomp$0.first) {
                            /** @type {number} */
                            text = t$jscomp$0.items.visibleConf.variable ? q$jscomp$45(b, t$jscomp$0, J$jscomp$0.first) - J$jscomp$0.first : "*" != t$jscomp$0.items.filter ? H$jscomp$21(b, t$jscomp$0.items.filter, t$jscomp$0.items.visibleConf.org, J$jscomp$0.first) - J$jscomp$0.first : t$jscomp$0.items.visible - J$jscomp$0.first;
                            fa$jscomp$1(D$jscomp$0, "Preventing non-circular: sliding " + text + " items backward.");
                            B$jscomp$0.trigger(E$jscomp$5("prev", D$jscomp$0), text);
                        }
                        t$jscomp$0.items.visible = pa$jscomp$2(result, t$jscomp$0, t$jscomp$0.items.visibleConf.adjust, aa$jscomp$0);
                        t$jscomp$0.items.visibleConf.old = t$jscomp$0.items.visible;
                        t$jscomp$0 = Ia$jscomp$1(t$jscomp$0, b);
                        result = Z$jscomp$8(B$jscomp$0, t$jscomp$0);
                        B$jscomp$0.trigger(E$jscomp$5("updatePageStatus", D$jscomp$0), [true, result]);
                        v$jscomp$60(t$jscomp$0, J$jscomp$0.total, D$jscomp$0);
                        w$jscomp$53(t$jscomp$0, J$jscomp$0.first, D$jscomp$0);
                        return result;
                    });
                    B$jscomp$0.bind(E$jscomp$5("destroy", D$jscomp$0), function(event, canCreateDiscussions) {
                        event.stopPropagation();
                        X$jscomp$3 = p$jscomp$114(X$jscomp$3);
                        B$jscomp$0.data("_cfs_isCarousel", false);
                        B$jscomp$0.trigger(E$jscomp$5("finish", D$jscomp$0));
                        if (canCreateDiscussions) {
                            B$jscomp$0.trigger(E$jscomp$5("jumpToStart", D$jscomp$0));
                        }
                        R$jscomp$10(B$jscomp$0.children());
                        R$jscomp$10(B$jscomp$0);
                        W$jscomp$5._unbind_events();
                        W$jscomp$5._unbind_buttons();
                        if ("parent" == D$jscomp$0.wrapper) {
                            R$jscomp$10(ta$jscomp$0);
                        } else {
                            ta$jscomp$0.replaceWith(B$jscomp$0);
                        }
                        return true;
                    });
                    B$jscomp$0.bind(E$jscomp$5("debug", D$jscomp$0), function(b) {
                        fa$jscomp$1(D$jscomp$0, "Carousel width: " + t$jscomp$0.width);
                        fa$jscomp$1(D$jscomp$0, "Carousel height: " + t$jscomp$0.height);
                        fa$jscomp$1(D$jscomp$0, "Item widths: " + t$jscomp$0.items.width);
                        fa$jscomp$1(D$jscomp$0, "Item heights: " + t$jscomp$0.items.height);
                        fa$jscomp$1(D$jscomp$0, "Number of items visible: " + t$jscomp$0.items.visible);
                        if (t$jscomp$0.auto.play) {
                            fa$jscomp$1(D$jscomp$0, "Number of items scrolled automatically: " + t$jscomp$0.auto.items);
                        }
                        if (t$jscomp$0.prev.button) {
                            fa$jscomp$1(D$jscomp$0, "Number of items scrolled backward: " + t$jscomp$0.prev.items);
                        }
                        if (t$jscomp$0.next.button) {
                            fa$jscomp$1(D$jscomp$0, "Number of items scrolled forward: " + t$jscomp$0.next.items);
                        }
                        return D$jscomp$0.debug;
                    });
                    B$jscomp$0.bind("_cfs_triggerEvent", function(event, a, message) {
                        event.stopPropagation();
                        return B$jscomp$0.triggerHandler(E$jscomp$5(a, D$jscomp$0), message);
                    });
                },
                _unbind_events: function() {
                    B$jscomp$0.unbind(E$jscomp$5("", D$jscomp$0));
                    B$jscomp$0.unbind(E$jscomp$5("", D$jscomp$0, false));
                    B$jscomp$0.unbind("_cfs_triggerEvent");
                },
                _bind_buttons: function() {
                    W$jscomp$5._unbind_buttons();
                    v$jscomp$60(t$jscomp$0, J$jscomp$0.total, D$jscomp$0);
                    w$jscomp$53(t$jscomp$0, J$jscomp$0.first, D$jscomp$0);
                    if (t$jscomp$0.auto.pauseOnHover) {
                        var related = Ga$jscomp$1(t$jscomp$0.auto.pauseOnHover);
                        ta$jscomp$0.bind(E$jscomp$5("mouseenter", D$jscomp$0, false), function() {
                            B$jscomp$0.trigger(E$jscomp$5("pause", D$jscomp$0), related);
                        }).bind(E$jscomp$5("mouseleave", D$jscomp$0, false), function() {
                            B$jscomp$0.trigger(E$jscomp$5("resume", D$jscomp$0));
                        });
                    }
                    if (t$jscomp$0.auto.button) {
                        t$jscomp$0.auto.button.bind(E$jscomp$5(t$jscomp$0.auto.event, D$jscomp$0, false), function(key) {
                            key.preventDefault();
                            /** @type {boolean} */
                            key = false;
                            /** @type {null} */
                            var related = null;
                            if (ba$jscomp$1.isPaused) {
                                /** @type {string} */
                                key = "play";
                            } else {
                                if (t$jscomp$0.auto.pauseOnEvent) {
                                    /** @type {string} */
                                    key = "pause";
                                    related = Ga$jscomp$1(t$jscomp$0.auto.pauseOnEvent);
                                }
                            }
                            if (key) {
                                B$jscomp$0.trigger(E$jscomp$5(key, D$jscomp$0), related);
                            }
                        });
                    }
                    if (t$jscomp$0.prev.button) {
                        t$jscomp$0.prev.button.bind(E$jscomp$5(t$jscomp$0.prev.event, D$jscomp$0, false), function(event) {
                            event.preventDefault();
                            B$jscomp$0.trigger(E$jscomp$5("prev", D$jscomp$0));
                        });
                        if (t$jscomp$0.prev.pauseOnHover) {
                            related = Ga$jscomp$1(t$jscomp$0.prev.pauseOnHover);
                            t$jscomp$0.prev.button.bind(E$jscomp$5("mouseenter", D$jscomp$0, false), function() {
                                B$jscomp$0.trigger(E$jscomp$5("pause", D$jscomp$0), related);
                            }).bind(E$jscomp$5("mouseleave", D$jscomp$0, false), function() {
                                B$jscomp$0.trigger(E$jscomp$5("resume", D$jscomp$0));
                            });
                        }
                    }
                    if (t$jscomp$0.next.button) {
                        t$jscomp$0.next.button.bind(E$jscomp$5(t$jscomp$0.next.event, D$jscomp$0, false), function(event) {
                            event.preventDefault();
                            B$jscomp$0.trigger(E$jscomp$5("next", D$jscomp$0));
                        });
                        if (t$jscomp$0.next.pauseOnHover) {
                            related = Ga$jscomp$1(t$jscomp$0.next.pauseOnHover);
                            t$jscomp$0.next.button.bind(E$jscomp$5("mouseenter", D$jscomp$0, false), function() {
                                B$jscomp$0.trigger(E$jscomp$5("pause", D$jscomp$0), related);
                            }).bind(E$jscomp$5("mouseleave", D$jscomp$0, false), function() {
                                B$jscomp$0.trigger(E$jscomp$5("resume", D$jscomp$0));
                            });
                        }
                    }
                    if (t$jscomp$0.pagination.container && t$jscomp$0.pagination.pauseOnHover) {
                        related = Ga$jscomp$1(t$jscomp$0.pagination.pauseOnHover);
                        t$jscomp$0.pagination.container.bind(E$jscomp$5("mouseenter", D$jscomp$0, false), function() {
                            B$jscomp$0.trigger(E$jscomp$5("pause", D$jscomp$0), related);
                        }).bind(E$jscomp$5("mouseleave", D$jscomp$0, false), function() {
                            B$jscomp$0.trigger(E$jscomp$5("resume", D$jscomp$0));
                        });
                    }
                    if (t$jscomp$0.prev.key || t$jscomp$0.next.key) {
                        b$jscomp$1387(document).bind(E$jscomp$5("keyup", D$jscomp$0, false, true, true), function(event) {
                            var keyCode = event.keyCode;
                            if (keyCode == t$jscomp$0.next.key) {
                                event.preventDefault();
                                B$jscomp$0.trigger(E$jscomp$5("next", D$jscomp$0));
                            }
                            if (keyCode == t$jscomp$0.prev.key) {
                                event.preventDefault();
                                B$jscomp$0.trigger(E$jscomp$5("prev", D$jscomp$0));
                            }
                        });
                    }
                    if (t$jscomp$0.pagination.keys) {
                        b$jscomp$1387(document).bind(E$jscomp$5("keyup", D$jscomp$0, false, true, true), function(event) {
                            var i = event.keyCode;
                            if (49 <= i && 58 > i) {
                                /** @type {number} */
                                i = (i - 49) * t$jscomp$0.items.visible;
                                if (i <= J$jscomp$0.total) {
                                    event.preventDefault();
                                    B$jscomp$0.trigger(E$jscomp$5("slideTo", D$jscomp$0), [i, 0, true, t$jscomp$0.pagination]);
                                }
                            }
                        });
                    }
                    if (b$jscomp$1387.fn.swipe) {
                        /** @type {boolean} */
                        var callback = "ontouchstart" in window;
                        if (callback && t$jscomp$0.swipe.onTouch || !callback && t$jscomp$0.swipe.onMouse) {
                            var positionsToSend = b$jscomp$1387.extend(true, {}, t$jscomp$0.prev, t$jscomp$0.swipe);
                            var htmlNewPost = b$jscomp$1387.extend(true, {}, t$jscomp$0.next, t$jscomp$0.swipe);
                            /**
                             * @return {undefined}
                             */
                            callback = function() {
                                B$jscomp$0.trigger(E$jscomp$5("prev", D$jscomp$0), [positionsToSend]);
                            };
                            /**
                             * @return {undefined}
                             */
                            var Slider = function() {
                                B$jscomp$0.trigger(E$jscomp$5("next", D$jscomp$0), [htmlNewPost]);
                            };
                            switch (t$jscomp$0.direction) {
                                case "up":
                                case "down":
                                    /** @type {function(): undefined} */
                                    t$jscomp$0.swipe.options.swipeUp = Slider;
                                    /** @type {function(): undefined} */
                                    t$jscomp$0.swipe.options.swipeDown = callback;
                                    break;
                                default:
                                    /** @type {function(): undefined} */
                                    t$jscomp$0.swipe.options.swipeLeft = Slider;
                                    /** @type {function(): undefined} */
                                    t$jscomp$0.swipe.options.swipeRight = callback;
                            }
                            if (ba$jscomp$1.swipe) {
                                B$jscomp$0.swipe("destroy");
                            }
                            ta$jscomp$0.swipe(t$jscomp$0.swipe.options);
                            ta$jscomp$0.css("cursor", "move");
                            /** @type {boolean} */
                            ba$jscomp$1.swipe = true;
                        }
                    }
                    if (b$jscomp$1387.fn.mousewheel && t$jscomp$0.mousewheel) {
                        var positionsToSend = b$jscomp$1387.extend(true, {}, t$jscomp$0.prev, t$jscomp$0.mousewheel);
                        var htmlNewPost = b$jscomp$1387.extend(true, {}, t$jscomp$0.next, t$jscomp$0.mousewheel);
                        if (ba$jscomp$1.mousewheel) {
                            ta$jscomp$0.unbind(E$jscomp$5("mousewheel", D$jscomp$0, false));
                        }
                        ta$jscomp$0.bind(E$jscomp$5("mousewheel", D$jscomp$0, false), function(event, canCreateDiscussions) {
                            event.preventDefault();
                            if (0 < canCreateDiscussions) {
                                B$jscomp$0.trigger(E$jscomp$5("prev", D$jscomp$0), [positionsToSend]);
                            } else {
                                B$jscomp$0.trigger(E$jscomp$5("next", D$jscomp$0), [htmlNewPost]);
                            }
                        });
                        /** @type {boolean} */
                        ba$jscomp$1.mousewheel = true;
                    }
                    if (t$jscomp$0.auto.play) {
                        B$jscomp$0.trigger(E$jscomp$5("play", D$jscomp$0), t$jscomp$0.auto.delay);
                    }
                    if (ba$jscomp$1.upDateOnWindowResize) {
                        /**
                         * @param {?} toggle_callback
                         * @return {undefined}
                         */
                        var init = function(toggle_callback) {
                            B$jscomp$0.trigger(E$jscomp$5("finish", D$jscomp$0));
                            if (t$jscomp$0.auto.pauseOnResize && !ba$jscomp$1.isPaused) {
                                B$jscomp$0.trigger(E$jscomp$5("play", D$jscomp$0));
                            }
                            P$jscomp$13(B$jscomp$0.children(), t$jscomp$0);
                            B$jscomp$0.trigger(E$jscomp$5("updateSizes", D$jscomp$0));
                        };
                        var $window = b$jscomp$1387(window);
                        /** @type {null} */
                        callback = null;
                        if (b$jscomp$1387.debounce && "debounce" == D$jscomp$0.onWindowResize) {
                            callback = b$jscomp$1387.debounce(200, init);
                        } else {
                            if (b$jscomp$1387.throttle && "throttle" == D$jscomp$0.onWindowResize) {
                                callback = b$jscomp$1387.throttle(300, init);
                            } else {
                                /** @type {number} */
                                var M = 0;
                                /** @type {number} */
                                var L = 0;
                                /**
                                 * @return {undefined}
                                 */
                                callback = function() {
                                    var prev = $window.width();
                                    var command = $window.height();
                                    if (prev != M || command != L) {
                                        init();
                                        M = prev;
                                        L = command;
                                    }
                                };
                            }
                        }
                        $window.bind(E$jscomp$5("resize", D$jscomp$0, false, true, true), callback);
                    }
                },
                _unbind_buttons: function() {
                    E$jscomp$5("", D$jscomp$0);
                    var form = E$jscomp$5("", D$jscomp$0, false);
                    ns3 = E$jscomp$5("", D$jscomp$0, false, true, true);
                    b$jscomp$1387(document).unbind(ns3);
                    b$jscomp$1387(window).unbind(ns3);
                    ta$jscomp$0.unbind(form);
                    if (t$jscomp$0.auto.button) {
                        t$jscomp$0.auto.button.unbind(form);
                    }
                    if (t$jscomp$0.prev.button) {
                        t$jscomp$0.prev.button.unbind(form);
                    }
                    if (t$jscomp$0.next.button) {
                        t$jscomp$0.next.button.unbind(form);
                    }
                    if (t$jscomp$0.pagination.container) {
                        t$jscomp$0.pagination.container.unbind(form);
                        if (t$jscomp$0.pagination.anchorBuilder) {
                            t$jscomp$0.pagination.container.children().remove();
                        }
                    }
                    if (ba$jscomp$1.swipe) {
                        B$jscomp$0.swipe("destroy");
                        ta$jscomp$0.css("cursor", "default");
                        /** @type {boolean} */
                        ba$jscomp$1.swipe = false;
                    }
                    if (ba$jscomp$1.mousewheel) {
                        /** @type {boolean} */
                        ba$jscomp$1.mousewheel = false;
                    }
                    v$jscomp$60(t$jscomp$0, "hide", D$jscomp$0);
                    w$jscomp$53(t$jscomp$0, "removeClass", D$jscomp$0);
                }
            };
            if (V$jscomp$1(za$jscomp$1)) {
                za$jscomp$1 = {
                    debug: za$jscomp$1
                };
            }
            var ba$jscomp$1 = {
                direction: "next",
                isPaused: true,
                isScrolling: false,
                isStopped: false,
                mousewheel: false,
                swipe: false
            };
            var J$jscomp$0 = {
                total: B$jscomp$0.children().length,
                first: 0
            };
            var X$jscomp$3 = {
                auto: null,
                progress: null,
                startTime: Aa$jscomp$1(),
                timePassed: 0
            };
            var U$jscomp$0 = {
                isStopped: false,
                duration: 0,
                startTime: 0,
                easing: "",
                anims: []
            };
            var Ea$jscomp$0 = {
                onBefore: [],
                onAfter: []
            };
            /** @type {!Array} */
            var Ha$jscomp$0 = [];
            var D$jscomp$0 = b$jscomp$1387.extend(true, {}, b$jscomp$1387.fn.carouFredSel.configs, za$jscomp$1);
            var t$jscomp$0 = {};
            var Pa$jscomp$0 = b$jscomp$1387.extend(true, {}, oa$jscomp$6);
            var ta$jscomp$0 = "parent" == D$jscomp$0.wrapper ? B$jscomp$0.parent() : B$jscomp$0.wrap("<" + D$jscomp$0.wrapper.element + ' class="' + D$jscomp$0.wrapper.classname + '" />').parent();
            D$jscomp$0.selector = B$jscomp$0.selector;
            /** @type {number} */
            D$jscomp$0.serialNumber = b$jscomp$1387.fn.carouFredSel.serialNumber++;
            /** @type {string} */
            D$jscomp$0.transition = D$jscomp$0.transition && b$jscomp$1387.fn.transition ? "transition" : "animate";
            W$jscomp$5._init(Pa$jscomp$0, true, na$jscomp$1);
            W$jscomp$5._build();
            W$jscomp$5._bind_events();
            W$jscomp$5._bind_buttons();
            if (va$jscomp$1(t$jscomp$0.items.start)) {
                na$jscomp$1 = t$jscomp$0.items.start;
            } else {
                /** @type {!Array} */
                na$jscomp$1 = [];
                if (0 != t$jscomp$0.items.start) {
                    na$jscomp$1.push(t$jscomp$0.items.start);
                }
            }
            if (t$jscomp$0.cookie) {
                na$jscomp$1.unshift(parseInt(Ca$jscomp$3(t$jscomp$0.cookie), 10));
            }
            if (0 < na$jscomp$1.length) {
                /** @type {number} */
                var Qa$jscomp$0 = 0;
                var Ra$jscomp$0 = na$jscomp$1.length;
                for (; Qa$jscomp$0 < Ra$jscomp$0; Qa$jscomp$0++) {
                    var Na$jscomp$0 = na$jscomp$1[Qa$jscomp$0];
                    if (0 != Na$jscomp$0) {
                        if (true === Na$jscomp$0) {
                            if (Na$jscomp$0 = window.location.hash, 1 > Na$jscomp$0.length) {
                                continue;
                            }
                        } else {
                            if ("random" === Na$jscomp$0) {
                                /** @type {number} */
                                Na$jscomp$0 = Math.floor(Math.random() * J$jscomp$0.total);
                            }
                        }
                        if (B$jscomp$0.triggerHandler(E$jscomp$5("slideTo", D$jscomp$0), [Na$jscomp$0, 0, true, {
                                fx: "none"
                            }])) {
                            break;
                        }
                    }
                }
            }
            na$jscomp$1 = Z$jscomp$8(B$jscomp$0, t$jscomp$0);
            Qa$jscomp$0 = A$jscomp$16(B$jscomp$0.children(), t$jscomp$0);
            if (t$jscomp$0.onCreate) {
                t$jscomp$0.onCreate.call(aa$jscomp$0, {
                    width: na$jscomp$1.width,
                    height: na$jscomp$1.height,
                    items: Qa$jscomp$0
                });
            }
            B$jscomp$0.trigger(E$jscomp$5("updatePageStatus", D$jscomp$0), [true, na$jscomp$1]);
            B$jscomp$0.trigger(E$jscomp$5("linkAnchors", D$jscomp$0));
            if (D$jscomp$0.debug) {
                B$jscomp$0.trigger(E$jscomp$5("debug", D$jscomp$0));
            }
            return B$jscomp$0;
        };
        /** @type {number} */
        b$jscomp$1387.fn.carouFredSel.serialNumber = 1;
        b$jscomp$1387.fn.carouFredSel.defaults = {
            synchronise: false,
            infinite: true,
            circular: true,
            responsive: false,
            rendering: true,
            direction: "left",
            items: {
                start: 0
            },
            scroll: {
                easing: "swing",
                duration: 500,
                pauseOnHover: false,
                event: "click",
                queue: false
            }
        };
        b$jscomp$1387.fn.carouFredSel.configs = {
            debug: false,
            transition: false,
            onWindowResize: "throttle",
            events: {
                prefix: "",
                namespace: "cfs"
            },
            wrapper: {
                element: "div",
                classname: "caroufredsel_wrapper"
            },
            classnames: {}
        };
        /**
         * @param {string} b
         * @return {?}
         */
        b$jscomp$1387.fn.carouFredSel.pageAnchorBuilder = function(b) {
            return '<a href="#"><span>' + b + "</span></a>";
        };
        /**
         * @param {string} newXpos
         * @return {undefined}
         */
        b$jscomp$1387.fn.carouFredSel.progressbarUpdater = function(newXpos) {
            b$jscomp$1387(this).css("width", newXpos + "%");
        };
        b$jscomp$1387.fn.carouFredSel.cookie = {
            get: function(v) {
                /** @type {string} */
                v = v + "=";
                /** @type {!Array<string>} */
                var rules = document.cookie.split(";");
                /** @type {number} */
                var i = 0;
                /** @type {number} */
                var rulesCount = rules.length;
                for (; i < rulesCount; i++) {
                    /** @type {string} */
                    var name = rules[i];
                    for (;
                        " " == name.charAt(0);) {
                        /** @type {string} */
                        name = name.slice(1);
                    }
                    if (0 == name.indexOf(v)) {
                        return name.slice(v.length);
                    }
                }
                return 0;
            },
            set: function(b, c, thresh) {
                /** @type {string} */
                var d = "";
                if (thresh) {
                    /** @type {!Date} */
                    d = new Date;
                    d.setTime(d.getTime() + 864E5 * thresh);
                    /** @type {string} */
                    d = "; expires=" + d.toGMTString();
                }
                /** @type {string} */
                document.cookie = b + "=" + c + d + "; path=/";
            },
            remove: function(c) {
                b$jscomp$1387.fn.carouFredSel.cookie.set(c, "", -1);
            }
        };
        b$jscomp$1387.extend(b$jscomp$1387.easing, {
            quadratic: function(centerY) {
                /** @type {number} */
                var iCenterY = centerY * centerY;
                return centerY * (-iCenterY * centerY + 4 * iCenterY - 6 * centerY + 4);
            },
            cubic: function(t) {
                return t * (4 * t * t - 9 * t + 6);
            },
            elastic: function(b) {
                /** @type {number} */
                var a = b * b;
                return b * (33 * a * a - 106 * a * b + 126 * a - 67 * b + 15);
            }
        });
    }
})(jQuery);
(function(data, _) {
    var b = {
        skipNamespace: []
    };
    data.components = data.components || {};
    data.components.global = data.components.global || {};
    data.components.global.recommendations = {
        init: function(name) {
            b = _.extend(b, name || {});
            name = data && "recommendations" in data && "init" in data.recommendations;
            var fnSrc = data && "page" in data && "ns" in data.page && -1 === b.skipNamespace.indexOf(data.page.ns);
            if (name && fnSrc) {
                data.recommendations.init({
                    makeCall: true
                });
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @param {!Object} obj
     * @param {!Object} t
     * @return {undefined}
     */
    function callback(obj, t) {
        switch (t.position) {
            case "middle":
                /** @type {number} */
                t = -obj.height() / 2;
                /** @type {number} */
                var mw = -obj.width() / 2;
                if (self.window.height() > obj.height() + 10) {
                    obj.css({
                        position: "fixed",
                        left: "50%",
                        top: "50%",
                        "margin-top": t,
                        "margin-left": mw
                    });
                } else {
                    obj.css({
                        position: "absolute",
                        left: "50%",
                        top: 10,
                        "margin-top": self.window.scrollTop(),
                        "margin-left": mw
                    });
                }
                break;
            case "fixed":
                obj.css({
                    position: "fixed"
                });
        }
        $(".js_modalpopup_fade").height(self.body.height());
    }
    /**
     * @param {!Object} options
     * @param {string} key
     * @return {undefined}
     */
    function set(options, key) {
        options = options.data("config");
        key = key ? key : "c";
        /** @type {number} */
        var a_second = "cookieLife" in options ? 86400 * parseInt(options.cookieLife, 10) : 2592E3;
        context.util.setCookie(options.id, key, {
            expires: a_second,
            path: "/"
        });
    }
    /**
     * @param {!Object} params
     * @param {boolean} t
     * @return {undefined}
     */
    function onComplete(params, t) {
        var settings = params.data("config");
        show(params);
        params.prev(".js_modalpopup_fade").hide();
        if (t && "n" !== $.cookie(settings.id)) {
            set(params, "c");
        }
        if ("n" === $.cookie(settings.id)) {
            $("head").find("style[popup='" + settings.id + "']").remove();
            params.remove();
            $(".js_modalpopup_sticker_" + settings.id).remove();
        }
    }
    /**
     * @param {!Object} parent
     * @return {undefined}
     */
    function show(parent) {
        var options = parent.data("config");
        parent.removeClass("open");
        if ("slide" in options) {
            switch (options.slide) {
                case "top":
                    parent.animate({
                        top: -parent.innerHeight()
                    }, 800);
                    break;
                case "bottom":
                    parent.animate({
                        bottom: -parent.innerHeight()
                    }, 800);
                    break;
                default:
                    parent.hide();
            }
        } else {
            parent.hide();
        }
    }
    /**
     * @param {!Object} $element
     * @return {undefined}
     */
    function initialize($element) {
        var options = $element.data("config");
        $element.addClass("open");
        if (void 0 != context.preferences.isUserEnrolled) {
            $element.find(".js_newsletter_loyalty_flag").removeClass("hidden");
        }
        if ("slide" in options) {
            switch (options.slide) {
                case "top":
                    $element.show().css("top", -$element.height());
                    $element.animate({
                        top: $element.data("top")
                    }, 800);
                    break;
                case "bottom":
                    $element.show().css("bottom", -$element.height());
                    $element.animate({
                        bottom: $element.data("bottom")
                    }, 800);
                    break;
                default:
                    $element.show();
            }
        } else {
            $element.show();
        }
        self.document.trigger("popup.show", {
            source: $element
        });
    }
    /**
     * @param {!Object} container
     * @return {undefined}
     */
    function init(container) {
        var options = container.data("config");
        var g = container.find(".js_modalpopup_sticker");
        var k = options.customClass;
        if (g.size()) {
            var parent = container.find("style");
            if (0 < parent.length) {
                parent.attr("popup", options.id);
                $("head").append(parent);
            }
            k = $.trim(k.replace("js_modalpopup_signup", "")) + "_sticker";
            k = $("<div/>").attr({
                "class": "js_modalpopup_sticker " + k + " js_modalpopup_sticker_" + options.id
            });
            k.append(g.html());
            self.body.append(k);
            g.remove();
            if ("n" === $.cookie(options.id)) {
                k.hide();
            }
            k.on("click", function() {
                if (container.hasClass("open")) {
                    show(container);
                } else {
                    initialize(container);
                }
            });
            k.find(".js_modal_sticky_close").on("click touchstart", function(event) {
                event.stopPropagation();
                $(this).parent().fadeOut();
                self.document.trigger("modalSticky.close", {
                    element: $(this)
                });
            });
        }
    }
    /**
     * @param {!Object} d
     * @return {undefined}
     */
    function render(d) {
        var opts = d.data("config");
        /** @type {boolean} */
        var j = "autopopup" in opts ? "true" == opts.autopopup : true;
        /** @type {boolean} */
        var i = "url" in opts && null === $.cookie(opts.id);
        /** @type {boolean} */
        var deleted = "url" in opts && "n" !== $.cookie(opts.id) && "sticker" in opts && "true" == opts.sticker;
        if ("pages" in opts && deleted) {
            /** @type {boolean} */
            deleted = -1 !== $.inArray(context.page.type, opts.pages);
        }
        if (deleted) {
            var container = $("<div/>").attr({
                id: opts.id,
                "class": "js_modalpopup_container " + opts.customClass,
                "data-config": d.attr("data-config")
            });
            d = "closeButtonText" in opts ? opts.closeButtonText : "";
            if ("fade" in opts && "true" == opts.fade) {
                self.body.append($("<div/>").attr({
                    "class": "js_modalpopup_fade"
                }));
                $(".js_modalpopup_fade").css("opacity", "0.8");
            }
            container.append($("<div/>").attr({
                "class": "js_modalpopup_content"
            }));
            container.append($("<span/>").attr({
                "class": "js_modal_popup_close"
            }).text(d));
            self.body.append(container);
            callback(container, opts);
            context.ajax.load({
                url: opts.url,
                target: container.find(".js_modalpopup_content"),
                callback: function() {
                    container.data("top", container.css("top")).data("bottom", container.css("bottom"));
                    init(container);
                    container.addClass("js_modalpopup_container_loaded");
                    callback(container, opts);
                    if (i && j) {
                        initialize(container);
                    } else {
                        container.hide();
                    }
                    if (container.hasClass("js_modalpopup_signup")) {
                        context.validator.initForm(container.find("form"));
                        container.data("isPopup", "false");
                        context.components.global.newsletter.initNewSubscriptionSections(container);
                    }
                }
            });
            self.window.resize(function() {
                callback(container, opts);
            });
        }
    }
    /**
     * @return {undefined}
     */
    function _init() {
        $(".js_modal_popup_close").click(function() {
            onComplete($(this).parent(), true);
        });
        $(".js_modalpopup_fade").click(function() {
            onComplete($(this).next(".js_modalpopup_container"), true);
        });
        self.document.on("modalpopup_signup_success", function(b, state) {
            state.container.find(".js_modalpopup_signup_form_conteiner").hide();
            state.container.find(".js_modalpopup_signup_success").show();
            state.container.find(".js_modalpopup_signup_email").text(state.email);
            set(state.container, "n");
        });
        self.document.on("signup_success_promocode", function(items, data) {
            items = data.source;
            var w;
            if (self.promo.length) {
                w = self.promo.data();
                data = w.promourl;
                w = w.source;
                if (-1 != w.indexOf(items)) {
                    context.ajax.load({
                        url: data
                    });
                }
            }
        });
    }
    var self = {};
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.modalpopups = {
        init: function() {
            /** @type {number} */
            var d = 0;
            /** @type {number} */
            var moveId = setInterval(function() {
                if ("" !== context.page.type) {
                    clearInterval(moveId);
                    self.window = $(window);
                    self.document = $(document);
                    self.body = $("body");
                    self.promo = $(".promocode");
                    $(".js_modalpopup").each(function() {
                        render($(this));
                    });
                    _init();
                }
                if (500 < d) {
                    clearInterval(moveId);
                }
                d++;
            }, 100);
        }
    };
})(window.app = window.app || {}, jQuery);
(function(that, $) {
    /**
     * @param {!Object} event
     * @return {undefined}
     */
    function rotate(event) {
        lastEventElement = $(this);
        if (window.allJsLoaded) {
            event = lastEventElement;
            $(document).off("click", ".js_addtocart", rotate);
            event.trigger("click");
        } else {
            event.preventDefault();
        }
    }
    /**
     * @return {undefined}
     */
    function init() {
        that.carousel.init($(".product_thumbnails .contentcarousel"));
        $("#pdpMain").off("click", "img.productthumbnail:not(.disabled)").on("click", "img.productthumbnail:not(.disabled)", function(event) {
            event.preventDefault();
            $(".product_primary_image .ysl_rotate_360").addClass("hidden");
            $(".product_primary_image .contentcarousel").removeClass("hidden");
            $(".product_primary_image .jcarousel-clip").jcarousel("scroll", $("#thumbnails ul li.thumb").index($(this).closest("li")));
        });
    }
    /**
     * @param {string} data
     * @return {undefined}
     */
    function save(data) {
        data = data || "";
        setTimeout(function() {
            if (that.isTabletUserAgent || that.isMobileUserAgent) {
                $(".panzoom").panzoom();
                $(".zoom_help_text").show();
                $(".zoom_help_text .zoom_help_text_rollover").hide();
            } else {
                if ("undefined" != that.preferences && that.preferences.pdpImagecarouselwithZoom && "undefined" != that.page && "product" == that.page.type && "Quickview" != data) {
                    that.components.product.image.loadZoom($(".product_primary_image li a.main_image"));
                    $(".zoom_help_text").show();
                    $(".zoom_help_text .zoom_help_text_pinch").hide();
                }
            }
        }, 5E3);
    }
    /**
     * @param {string} list
     * @return {undefined}
     */
    function success(list) {
        init();
        save(list);
        if ("Quickview" == list) {
            $("a.main_image").removeAttr("href");
        }
        if ("undefined" != that.preferences && that.preferences.coremetricsEnabled) {
            that.coremetrics.refreshEvents("product");
        }
    }
    /**
     * @param {string} id
     * @return {undefined}
     */
    function create(id) {
        if ($(id).hasClass("registerflow") || that.preferences.enableRegistrationModal) {
            /** @type {string} */
            id = that.urls.registrationPopupUrl + "?format=ajax";
            if (!$("body").find("#guestCheckoutPopup").length) {
                $("body").append('<div id="guestCheckoutPopup"></div>');
            }
            $("#guestCheckoutPopup").load(id, function() {
                that.dialog.create({
                    target: "#guestCheckoutPopup",
                    options: {
                        autoOpen: true,
                        bgiframe: true,
                        modal: true,
                        width: "500px",
                        emptyOnClose: true,
                        title: "",
                        dialogClass: "dialog-guest-checkout",
                        close: function(type, cmp) {}
                    }
                });
                that.validator.init();
                $("#guestCheckoutPopup #RegistrationForm").on("click touchstart", ".submit_button", function(obj) {
                    obj.preventDefault();
                    obj = $("#guestCheckoutPopup #RegistrationForm");
                    if (!obj.valid()) {
                        return false;
                    }
                    obj = {
                        url: that.urls.registrationSubmitUrl,
                        data: obj.serialize(),
                        type: "POST",
                        dataType: false,
                        callback: function() {}
                    };
                    that.ajax.load(obj).done(function(d) {
                        var jump = $("<div/>").append(d);
                        $(jump).find("input[name=error]").val();
                        var f = $(jump).find("input[name=registration-error-message]").val();
                        if ("true" === $(jump).find("input[name=success]").val()) {
                            $("#registration-error").hide();
                            that.dialog.close();
                            window.location.href = that.urls.cartShow;
                        } else {
                            $("#dialog-container").html(d);
                            $("#registration-error").html(f);
                            $("#registration-error").show();
                            that.tooltips.init();
                            that.validator.init();
                        }
                    });
                });
            });
        }
    }
    /**
     * @param {string} type
     * @param {undefined} error
     * @return {undefined}
     */
    function showError(type, error) {
        var e = $(".cart_coupon_code .status_message").removeClass("error success");
        var $allPanels = $(".cart_coupon_code .f_field").removeClass("f_state_valid f_state_error");
        e.addClass(type).html(error).show();
        if ("error" == type) {
            $allPanels.addClass("f_state_error");
        }
        setTimeout(function() {
            e.slideUp();
            $allPanels.removeClass("f_state_error");
        }, 8E3);
    }
    that.custom = that.custom || {};
    var bodyElem;
    var SKIN;
    var btnSlide;
    /** @type {boolean} */
    window.allJsLoaded = false;
    $("body").find(".pdp_main").on("click", ".video-thumb", function() {
        window.scrollTo(0, $("#howto").offset().top);
    });
    $(".holiday_video_section").on("click", function(b) {
        $(this).find(".holiday_video_cover").hide();
        $(".holiday-video").show();
        $(".holiday-video")[0].src += "?autoplay=1";
    });
    $("body").on("click", ".bv_button_buttonFull,.bv_main_container_row_flex,.bv_histogram_component_container", function() {
        var b = $('.review_section_tabs a[href="#reviews"]');
        if (b.length) {
            b.click();
            $("#reviews")[0].scrollIntoView(true);
        }
    });
    $(".show__pass").on("click", function(b, canCreateDiscussions) {
        b = $(this).siblings().find("input");
        if ("password" == b.attr("type")) {
            $(".show__pass__hide").css("display", "block");
            $(".show__pass__show").css("display", "none");
            b.attr("type", "text");
        } else {
            $(".show__pass__hide").css("display", "none");
            $(".show__pass__show").css("display", "block");
            $passInputs.attr("type", "password");
        }
    });
    $(document).on("click", ".banner-popup", function(options) {
        options.preventDefault();
        options = $(this).closest(".promo_banner").find(".popup-expanded");
        if (options.length) {
            options = that.dialog.create({
                target: options,
                options: {
                    cloneContainer: true,
                    dialogClass: "banner-popup"
                }
            });
            options.dialog("open");
        }
    });
    if ("undefined" != that.preferences && "imagecarousel" == that.preferences.pdpImageMode) {
        $("#pdpMain").off("click", "img.productthumbnail:not(.disabled)").on("click", "img.productthumbnail:not(.disabled)", function(event) {
            event.preventDefault();
            $(".product_primary_image .contentcarousel").removeClass("hidden");
            $(".product_primary_image .jcarousel-clip").jcarousel("scroll", $("#thumbnails ul li.thumb").index($(this).closest("li")));
        });
    }
    $(document).on("swapCarouselImage", function(context, url) {
        /** @type {string} */
        context = ".product_primary_image .active-list";
        /** @type {string} */
        var path = ".product_primary_image li:first-child";
        if ("cloudzoom" == that.preferences.pdpImageMode) {
            /** @type {string} */
            path = context = $("#QuickViewDialog").is(":visible") ? "#QuickViewDialog .product_primary_image .main_image" : ".product_primary_image .main_image";
        }
        if ($(context).hasClass("taaz-model-image")) {
            url = that.components.product.modelimages.fetchCachedImages($(url).data("pid"));
            path = $(context).data("index");
            url = url.modelImages["model_" + (path + 1)].large;
            $(context).find("img").attr("src", url);
        } else {
            context = $(url).data("lgimg");
            $(".product_primary_image .jcarousel-clip").jcarousel("scroll", 0);
            $(path).find("img").attr("src", context.url);
        }
    });
    $(document).off("afterJcarouselScroll").on("afterJcarouselScroll", function(canCreateDiscussions, input) {
        if ($(input).closest("#main-image-container").length) {
            $(input).siblings("li").removeClass("active-list");
            $(input).addClass("active-list");
            $(".product_thumbnails li").removeClass("selected");
            $(".product_thumbnails li").eq($(".product_primary_image li").index(input)).addClass("selected");
            if (4 >= $(".product_primary_image li").index(input)) {
                $(".product_thumbnails .jcarousel-clip").jcarousel("scroll", 0, false);
            } else {
                $(".product_thumbnails .jcarousel-clip").jcarousel("scroll", 5, false);
            }
            if (that.preferences.taaz.enable && $("#thumbnails ul li.thumb.selected").hasClass("taaz-models-list") && !that.preferences.taaz.variationChangedState) {
                $("body").trigger("taazModel.changed");
            } else {
                if ("variationChangedState" in that.preferences.taaz) {
                    /** @type {boolean} */
                    that.preferences.taaz.variationChangedState = false;
                }
            }
        }
    });
    $(document).on("AllJsInitialized", function() {
        /** @type {boolean} */
        window.allJsLoaded = true;
        $(".js_addtocart").removeClass("block-events");
        /** @type {boolean} */
        that.preferences.deferredScriptEnabled = false;
    }).on("click", ".cart_coupon_information .js_cart_tooltip", function() {
        var b = $(this);
        var $innerblock = b.closest(".learn_more_text").siblings(".tooltip_content");
        if (b.hasClass("active")) {
            $innerblock.hide();
        } else {
            $innerblock.show();
        }
        b.toggleClass("active");
    }).on("click", ".cart_coupon_information .close_tooltip", function(event) {
        var jField = $(this);
        event.preventDefault();
        $(".cart_coupon_information .js_cart_tooltip").removeClass("active");
        jField.closest(".tooltip_content").hide();
    }).on("click", function(jEvent) {
        var $video_capture = $(".cart_coupon_information .tooltip_content");
        if (!(!$video_capture.is(":visible") || $(jEvent.target).hasClass("js_cart_tooltip") || $(jEvent.target).closest(".tooltip_content").length && $(jEvent.target).hasClass("tooltip_content"))) {
            $(".cart_coupon_information .js_cart_tooltip").removeClass("active");
            $video_capture.hide();
        }
    }).on("click", ".autoreplen_signin", function() {
        location.href = that.urls.accountLanding;
    }).on("click", ".autoreplen_register", function() {
        location.href = that.urls.startRegister;
    }).on("click", ".thumbnail_link,.product_detail_image", function(event) {
        event.preventDefault();
    }).on("click", ".js_addtocart", rotate);
    if (!window.HTMLPictureElement) {
        $(document).on("quickview.opened", function() {
            picturefill({
                reevaluate: true,
                elements: $(".ui-dialog img").get()
            });
        });
    }
    $(document).on("click", "[data-toggle]", function() {
        var b = $(this).data("toggle").split(" ");
        $.each(b, function(parent, sCompId) {
            parent = $(document).find("#" + sCompId);
            parent.toggleClass(parent.data("toggler"));
        });
    });
    $(document).ready(function() {
        var element;
        var subs;
        var f;
        var g;
        var cropLockdim;
        var l;
        $(".captchaMainWrapper");
        element = $(document);
        subs = element.find("#gift-card-design-field");
        f = element.find(".card-design-selected");
        g = element.find(".card-thumbnail");
        element.find(".gift-card-designs");
        cropLockdim = element.find(".giftcert-amount select");
        l = element.find("#load-more-gift-cards");
        if (giftErrorMessage = element.find(".giftErrorMessage")) {
            element.find(".gift_message_box").focus(function() {
                giftErrorMessage.hide();
            });
        }
        g.on("click", function(a) {
            a.preventDefault();
            a = $(a.target);
            var d = a.attr("src");
            var token = a.attr("skuval");
            g.removeClass("active");
            a.addClass("active");
            subs.val(token);
            f.attr("src", d);
        });
        cropLockdim.on("change", function() {
            if ("" == subs.val()) {
                subs.val(g.first().attr("skuval"));
            }
        });
        l.on("click", function(j) {
            j.preventDefault();
            j = l.data("count");
            /** @type {number} */
            j = parseInt(j, 10);
            var bs = that.preferences.giftImagesCount;
            var i = that.preferences.giftImagesCount;
            i = i + bs <= j ? i + bs : j;
            $(".card-design-holder:lt(" + i + ")").show();
            if (i === j) {
                l.hide();
            }
        });
        element = $(".review_section_tabs");
        if (0 < element.length) {
            element.tabs({
                active: 0
            });
            if (600 > $(window).width()) {
                element.insertAfter("#olapic-container");
            }
        }
        $(document).off("click", ".quickview .notifyme_newsletter .f_field_checkbox .f_label_value").on("click", ".quickview .notifyme_newsletter .f_field_checkbox .f_label_value", function() {
            var b = $(this).closest(".f_field.f_field_checkbox");
            var checkedInput = b.find("input");
            checkedInput.prop("checked", !checkedInput.prop("checked"));
            b.toggleClass("f_checked");
        });
    });
    $("#CheckBalanceButton").on("click", function() {
        $(".formfield_gift_certificate_id input").blur();
    });
    $("body").on("product.variationChanged quickview.opened", function(canCreateDiscussions, isSlidingUp) {
        if (!(that.preferences.taaz.enable || "imagecarousel" != that.preferences.pdpImageMode)) {
            that.carousel.init($(".product_primary_image .contentcarousel"));
            init();
        }
    });
    $(document).on("modelImagesLoaded", function(b, tags) {
        success(tags);
    });
    $(document).on("noModelImages", function(canCreateDiscussions, tags) {
        success(tags);
        that.carousel.init($(".product_primary_image .contentcarousel"));
    });
    if (!that.preferences.taaz.enable) {
        init();
        save();
    }
    $(document).on("quickview.opened", "#QuickViewDialog", function() {
        var id = $(this).find("meta[itemprop=productId]").prop("content");
        if ("undefined" != typeof $BV) {
            $BV.ui("rr", "show_reviews", {
                productId: id,
                summaryContainerDiv: "QuickViewDialog #BVRRSummaryContainer"
            });
        }
    });
    /**
     * @return {undefined}
     */
    var render = function() {
        $("select").selectBoxIt();
        $(document).on("click", ".methodsection .editmethods a", function(b) {
            $("select").selectBoxIt();
        });
        $(document).on("click", ".savedaddresscontainer .editaddress a", function(b) {
            $("select").selectBoxIt();
        });
        $(document).off("click", ".checkout_guest_section .guestflow").on("click", ".checkout_guest_section .guestflow", function(b) {
            create(this);
        });
        $(document).off("click", ".form-samples .no-sample a, .checkout_guest_section .registerflow").on("click", ".form-samples .no-sample a, .checkout_guest_section .registerflow", function(event) {
            event.preventDefault();
            create(this);
        });
        $(document).off("change", ".giftcards_box input").on("change", ".giftcards_box input", function(b) {
            $(".giftcards_box .js_gcError").remove();
        });
        $(document).on("global.showMinicart.beforeOpen", that.components.global.responsive.getHandleImageSourceReplacement);
    };
    /** @type {boolean} */
    var v = false;
    $(document).on("click", "#dwfrm_billing_processrevieworder", function(event) {
        if (0 == v) {
            /** @type {boolean} */
            v = true;
        } else {
            if (v) {
                event.stopPropagation();
                event.preventDefault();
                $("#dwfrm_billing_processrevieworder").attr("disabled", true);
            }
        }
    });
    $(function() {
        that.custom = {};
        render();
    });
    $(window).load(function() {
        /** @type {boolean} */
        window.allJsLoaded = true;
        $(".js_addtocart").removeClass("block-events");
        $("body").on("keydown", ".header_promo_close", function(event) {
            if (13 === event.which) {
                event.preventDefault();
                $(this).click();
            }
        }).on("keydown", ".mini_cart_total .mini_cart_link", function(event) {
            var $newmsgLink = $(this);
            if (13 === event.which) {
                window.location = $newmsgLink.attr("href");
            }
        }).on("keydown", ".sticky_header .js_headerSection", function(event) {
            var $allPanels = $(".utility_navigation_list li, .account_navigation_list li");
            var $branch = $(".utility_navigation_list li a, .account_navigation_list li a");
            if (27 === event.which) {
                $(".js_headerSection").hide();
                $allPanels.removeClass("selected_tab");
                $branch.attr("aria-expanded", "false");
                if ($(this).closest(".js_headerSection").hasClass("js_countrySelector")) {
                    $(".country-selector").focus();
                }
                if ($(this).closest(".js_headerSection").hasClass("js_customerService")) {
                    $(".sticky_header #customer_service").focus();
                }
                if ($(this).closest(".js_headerSection").hasClass("js_newsletterSubscribe")) {
                    $(".account_navigation_list .newsletter_subscribe_link").focus();
                }
            }
        }).on("keydown", ".sticky_header .close_icon", function(event) {
            if (13 === event.which) {
                $(".js_headerSection").hide();
                $(".utility_navigation_list li a").attr("aria-expanded", "false").parent().removeClass("selected_tab");
            }
        }).on("keydown", ".account_navigation_list .account_navigation_link", function(event) {
            var $newmsgLink = $(this);
            if (32 === event.which || 13 === event.which) {
                event.preventDefault();
                window.location = $newmsgLink.attr("href");
            }
        }).on("focusout", ".customer_service_contacts .learnmorebutton", function() {
            $(".newsletter_subscribe_link").focus();
            $(".js_headerSection").hide();
            $(".header-top #customer_service").attr("aria-expanded", "false").parent().removeClass("selected_tab");
        }).on("focus", ".header-top .country-selector, .header-top #store_locator, .header-top #customer_service", function() {
            var $branch = $(this);
            var searchContactPanel = $(".sticky_header .js_headerSection");
            $branch.attr("aria-expanded", "false").parent().removeClass("selected_tab");
            searchContactPanel.hide();
        });
        $(".navigation_skippy, .refinement_skippy, .main_skippy").on("keypress", function(event) {
            var khover = $(this);
            if (13 === event.which || 32 === event.which) {
                return khover.hasClass("navigation_skippy") && that.adaTab.skipToNav(), khover.hasClass("refinement_skippy") && that.adaTab.skipToRefine(), khover.hasClass("main_skippy") && that.adaTab.skipToContent(), false;
            }
        });
        var control = $("#focus_retriever");
        if (0 < control.length) {
            control.attr("aria-label", "hidden-label-element").hide();
        }
        var $allPanels = $(".level_1_list_item");
        var $branch = $(".level_1_list_item_link");
        var current = $(".navigation_dropdown");
        var tableWrapper = $(".navigation");
        $(".level_1_list_item_link, .search_button, .carousel_button").on("focus", function() {
            $allPanels.removeClass("hover menu_focus");
            $branch.attr("aria-expanded", "false");
            current.attr("aria-hidden", "true");
        }).on("keydown", function(_this) {
            if (32 === _this.which && !$(this).parent("li").hasClass("menu_focus")) {
                return _this.preventDefault(), _this = $(this), current.find(".category_link").removeAttr("tabindex"), _this.parent("li").addClass("hover menu_focus"), "true" == _this.attr("aria-expanded") ? (_this.attr("aria-expanded", "false"), current.attr("aria-hidden", "true")) : (_this.attr("aria-expanded", "true"), current.attr("aria-hidden", "false")), false;
            }
        });
        $(document).on("global.showMinicart.opened", function() {
            $(window).trigger("resize");
        });
        tableWrapper.on("keydown", function(e) {
            if (27 === e.which) {
                e = tableWrapper.find(".menu_focus .level_1_list_item_link");
                $branch.attr("aria-expanded", "false");
                current.attr("aria-hidden", "true");
                e.focus();
            }
        });
        var tab = $(".minicart");
        var $wrapper = $(".mini_cart_link");
        var menuContainer = $(".mini_cart_content");
        $(".minicart, .b-headerMobile-search");
        $("#customer_service, .newsletter_subscribe_link").on("focus", function() {
            tab.removeClass("expanded");
            $wrapper.attr("aria-expanded", "false");
            menuContainer.attr("aria-hidden", "true").hide();
        });
        $wrapper.on("keydown", function(event) {
            var $this = $(this);
            if (32 === event.which) {
                return event.preventDefault(), $this.parents("div.minicart").addClass("expanded"), "true" == $this.attr("aria-expanded") ? ($this.attr("aria-expanded", "false"), menuContainer.attr("aria-hidden", "true").hide(), tab.removeClass("expanded")) : ($this.attr("aria-expanded", "true"), menuContainer.attr("aria-hidden", "false").show()), false;
            }
        });
        tab.on("keydown", function(e) {
            if (27 === e.which) {
                e = tab.find(".mini_cart_link");
                $wrapper.attr("aria-expanded", "false");
                menuContainer.attr("aria-hidden", "true").hide();
                tab.removeClass("expanded");
                e.focus();
            }
        });
        $("#country_selector, #customer_service, #newsletter_subscribe_link").on("keydown", function(event) {
            var $this = $(this);
            if (32 === event.which) {
                return event.preventDefault(), $this.trigger("sectionFocus"), $this.parent("li").addClass("selected_tab open"), "true" == $this.attr("aria-expanded") ? $this.attr("aria-expanded", "false") : ($this.attr("aria-expanded", "true"), $(".js_headerSection .close_icon").attr("tabindex", 0).focus()), false;
            }
        });
        control = $(document).find(".header_promo_slot .jcarousel-clip");
        if (control.length) {
            control.jcarousel({
                center: true
            });
        }
    });
    $(document).off("changeCouponsCallback").on("changeCouponsCallback", function(new_widget, link) {
        bodyElem = bodyElem || $(".cart_coupon_code");
        SKIN = SKIN || $(".coupons");
        btnSlide = btnSlide || $("div.redemption.coupon");
        $(".coupon_redeemed_item").hide();
        link = $($.trim(link));
        var r;
        bodyElem.find(".formfield_coupon_code input").val("");
        new_widget = link.find(".pdp-afterpay-message");
        try {
            /** @type {*} */
            r = JSON.parse(link.find("#statuses").html());
        } catch (r) {
            showError("error", that.resources.BAD_RESPONSE);
            return;
        }
        if (r && !r.success) {
            showError("error", r.message);
        } else {
            if ("add" == r.couponEvent) {
                if (r.isApplyCoupon) {
                    r.message.split(" ");
                    var message = r.message;
                    $("<div/>").addClass("coupon_redeemed_item").html(message).insertAfter("#error_message_emcosmetics");
                } else {
                    showError("error", that.resources.COUPON_NOT_APPLIED);
                }
            }
            if (r.success && r.hasBonusItems && !r.isGiftWithPurchase && that.preferences.enablebonuspopinaftercouponadd) {
                link = that.util.appendParamsToUrl(that.urls.getBonusProducts, {
                    bonusDiscountLineItemUUID: r.bonusItemId.length ? r.bonusItemId.join(",") : ""
                });
                that.bonusProductsView.show(link);
            } else {
                message = $("#update-cart");
                if (r.success && "remove" == r.couponEvent && 0 < message.size()) {
                    message.trigger("click");
                } else {
                    SKIN.html(link.find("#new_coupon_info").html());
                    if ($(".order_totals_table").length) {
                        r = link.find("#new_order_sum").find(".order_totals_table");
                        message = $(".js-cart-order-total");
                        if (r.find(".estimated_tax_result_box").hasClass("js_hide")) {
                            r.find(".js_order_total td:first").text(that.resources.ORDER_ESTIMATED_TOTAL);
                        }
                        $(".order_totals_table").html(r);
                        message.find(".subtotal_label").text(r.find(".js_order_total td:first").text());
                        message.find(".subtotal_value").text(r.find(".js_order_total td:last").text());
                        that.components.cart.estimatetax.reinit();
                        that.components.global.selectboxit.init();
                    }
                    if ($(".dymanic-cart-content").length) {
                        $(".dymanic-cart-content").html(link.find("#new_cart").html());
                        that.cart.reinit();
                        that.components.global.selectboxit.init();
                    }
                    if ($(".checkout_mini_cart").length) {
                        $(".checkout_mini_cart").html(link.find("#new_checkout_cart").html());
                    }
                    $(document).trigger("AjaxCartUpdate");
                }
            }
            if (new_widget.length) {
                $(".order_totals_block").find(".pdp-afterpay-message").replaceWith(new_widget);
            }
        }
    });
    if (800 >= $(window).width()) {
        $(document).on("click", ".mini_cart_total", function(b) {
            b = $(this).find("a");
            if (b.length) {
                window.location = b.attr("href");
            }
        });
    }
})(window.app = window.app || {}, jQuery);
(function(b, $) {
    b.adaTab = {
        skipToNav: function() {
            $("#navigation_skippy .level_1_list_item:first-child a").attr("tabindex", -1).on("blur focusout", function() {
                $(this).removeAttr("tabindex");
            }).focus();
            return false;
        },
        skipToRefine: function() {
            $(".refinement_filter_wrapper .refinement_header").focus();
        },
        skipToContent: function() {
            $("#pdpMain .section_scroll.section_about").attr("tabindex", -1).on("blur focusout", function() {
                $(this).removeAttr("tabindex");
            }).focus();
            return false;
        }
    };
})(window.app = window.app || {}, jQuery);
(function(app, $) {
    /**
     * @return {?}
     */
    function build() {
        var ret = {};
        var d = $("#minicart li.mini_cart_product select.quantity_select");
        $.each(d, function(index, id) {
            index = $(id).val();
            id = $(id).data("productid");
            ret[id] = index;
        });
        return ret;
    }
    /**
     * @param {!Object} data
     * @return {undefined}
     */
    function init(data) {
        var requestOrUrl = app.urls.addProductSet;
        var keys = {};
        var value;
        options.document.on("click", options.addAllToCart.selector, function(result) {
            result.preventDefault();
            var wrapper = $(this);
            if ("undefined" !== typeof data && "undefined" !== typeof data.config && "undefined" !== data.config.wrapper) {
                options.wrapper = wrapper.closest(data.config.wrapper);
                options.errorPlacement = wrapper.closest(data.config.wrapper).find(".js_ps_quantity_error");
            } else {
                options.pdpMain = wrapper.closest("#pdpMain");
            }
            if (wrapper.hasClass("js_enhanced_add_all")) {
                /** @type {string} */
                data.customQuantitySelector = ".js-enhanced-productset";
                options.wrapper = options.document.find("#product_set_list");
            }
            var json = {
                productSetProducts: []
            };
            result = options.wrapper.find("form").length ? options.wrapper.find("form") : options.wrapper.find(".item");
            /** @type {boolean} */
            options.isQtyValid = true;
            options.pdpMain.find(".js-productset-quantity-error").empty().addClass("hidden");
            if (result.length) {
                if (item.adjustProductSetQty) {
                    keys = build();
                }
                result.each(function() {
                    wrapper = $(this);
                    var i = wrapper.find("input[name='pid']").val();
                    var value;
                    value = "customQuantitySelector" in data && "undefined" !== typeof $(data.customQuantitySelector) && $(data.customQuantitySelector).length ? $(data.customQuantitySelector).find('[name="quantity"]:input').val() : wrapper.find("[name$='quantity']:input").val();
                    if (item.adjustProductSetQty && i in keys && keys[i] < app.preferences.purchaseLimit) {
                        /** @type {number} */
                        var DOC_SOUNDTRACKER_20 = app.preferences.purchaseLimit - keys[i];
                        if (value > DOC_SOUNDTRACKER_20) {
                            /** @type {number} */
                            value = DOC_SOUNDTRACKER_20;
                        }
                    }
                    json.productSetProducts.push({
                        pid: i,
                        qty: value
                    });
                    update(i, value);
                });
            } else {
                if (options.wrapper.length) {
                    result = options.wrapper.find("input[name='productsetpids']");
                } else {
                    wrapper = $(this);
                    result = wrapper.siblings("input[name='productsetpids']");
                }
                result = result.val();
                var inputel = options.wrapper.find("[name='quantity']");
                value = inputel.length ? inputel.val() : 1;
                /** @type {*} */
                json = JSON.parse(result);
                json.productSetProducts.forEach(function(state) {
                    update(state.pid, value);
                });
            }
            if (options.isQtyValid) {
                /** @type {string} */
                result = JSON.stringify(json);
                var data = {
                    products: result,
                    quantity: value,
                    productSetId: options.addAllToCart.data("pid")
                };
                if (wrapper.data("location")) {
                    data.location = wrapper.data("location");
                }
                inputel = $("#automaticReplenishmentFields");
                var num = $("#delivercustom").is(":checked");
                var $hashcashField = options.wrapper.find("input[name*='csrf_token']");
                if ($hashcashField.length) {
                    data.csrf_token = $hashcashField.val();
                }
                if (0 !== inputel.length) {
                    options.arData.interval = num ? $(".productset_content #arMounth").val() : "";
                    data.autoReplenishmentInterval = options.arData.interval;
                    data.hasAutoReplenishment = num.toString();
                }
                if (result) {
                    app.ajax.load({
                        url: requestOrUrl,
                        data: data,
                        type: "post",
                        callback: function(name) {
                            var e = {};
                            try {
                                /** @type {*} */
                                e = JSON.parse(name);
                            } catch (F) {
                                $(document).trigger("global.showMinicart", name);
                                app.page.setContexAfterAjaxCall();
                                e = app.page.ignoredProducts;
                            }
                            if (name = options.wrapper.find("js_ps_quantity_error")) {
                                name.empty().hide();
                            }
                            options.document.find(".quantity_error").empty().hide();
                            if (!$.isEmptyObject(e)) {
                                if (options.errorPlacement.length) {
                                    options.errorPlacement.text(app.resources.PRODUCTSET_REACHED_OUR_CHASE_LIMIT).show();
                                }
                                var i;
                                for (i in e) {
                                    name = e[i];
                                    options.wrapper.find("#item-" + i + " .quantity_error").html(name).show();
                                }
                            }
                            if (item.adjustProductSetQty) {
                                keys = build();
                                if (!$.isEmptyObject(keys)) {
                                    options.document.find(".quantity_error").empty().hide();
                                    _.each(keys, function(canCreateDiscussions, i) {
                                        if (canCreateDiscussions >= app.preferences.purchaseLimit) {
                                            options.wrapper.find("#item-" + i + " .quantity_error").html(app.resources.PRODUCT_REACHED_OUR_CHASE_LIMIT).show();
                                        }
                                    });
                                }
                            }
                            i = options.wrapper.find("input[name='uuid']");
                            if (0 < i.length && 0 < i.val().length || "cart" == app.page.params.source) {
                                if ($(".wishlist_page").length) {
                                    app.page.redirect(app.urls.wishlistShow);
                                } else {
                                    if (0 < i.length && 0 < i.val().length && "cart" == app.page.params.source) {
                                        window.location.href = app.urls.cartShow;
                                    } else {
                                        /** @type {string} */
                                        window.location.href = window.location.href.split("#")[0];
                                    }
                                }
                            }
                            /** @type {*} */
                            data.ignoredProducts = e;
                            options.document.trigger("product.addedProductSetToCart", data);
                            app.page.ignoredProducts = {};
                            app.quickView.close();
                        }
                    });
                }
                return false;
            }
        });
    }
    /**
     * @param {string} i
     * @param {!Object} x
     * @return {undefined}
     */
    function update(i, x) {
        var lower = "undefined" !== typeof options.pdpMain.find('[name="maxProductSpecificQuantity"]:input') ? options.pdpMain.find('[name="maxProductSpecificQuantity"]:input').val() : app.preferences.purchaseLimit;
        /** @type {number} */
        var padding = parseInt(app.page.getElement("PLIs")[i] || 0, 10);
        x = app.cart.qtyValidate(i, parseInt(x, 10) + padding, lower);
        if ("status" in x && "error" === x.status && 0 < padding) {
            /** @type {boolean} */
            options.isQtyValid = false;
            i = options.pdpMain.find("#item-" + i).data("product-information");
            i = app.resources.PRODUCTNAME_REACHED_OUR_CHASE_LIMIT.replace("%NAME%", i.name);
            options.pdpMain.find(".js-productset-quantity-error").not(".product_set_list .js-productset-quantity-error").append('<p class="error">' + i + "</p>").removeClass("hidden");
        }
    }
    /**
     * @return {undefined}
     */
    function initialize() {
        options.wrapper.on("click", "div.product_set_item a[href].swatchanchor", add);
        options.wrapper.on("change", app.preferences.productSetVariationSelector, add);
        var value = options.productSetPricePlace.data("calculateSetPrice");
        if (!item.customPriceCalculate && ("undefined" === typeof value || false !== value)) {
            $(document).on("product.productSetPriceCalculate", function() {
                /** @type {number} */
                var result = 0;
                /** @type {number} */
                var value = 0;
                options.wrapper.find(".product_set_item").each(function() {
                    var o = $(this);
                    var $n = (o.find(".variation-select , .selected") || o).find("option:selected , .product_price");
                    $n = $n.length ? $n : o.find(".product_price");
                    /** @type {number} */
                    var minimum = parseFloat($n.data("pricevalue")) || 0;
                    var b;
                    if (item.showSalePrice && 0 < minimum) {
                        /** @type {number} */
                        b = parseFloat(o.find(".price_sale").length ? o.find(".price_sale").data("pricevalue") : $n.data("pricevalue") || 0);
                        /** @type {number} */
                        b = b * +(o.find("select[name='quantity']").val() || 1);
                        value = value + parseFloat(b);
                    }
                    if (item.calculateSalePrice) {
                        /** @type {number} */
                        minimum = parseFloat(o.find(".price_sale").length ? o.find(".price_sale").data("pricevalue") : $n.data("pricevalue") || 0);
                    }
                    /** @type {number} */
                    o = minimum * +(o.find("select[name='quantity']").val() || 1);
                    result = result + parseFloat(o);
                });
                result = result.toFixed(app.preferences.productSetTotalPriceToFixedLength);
                options.productSetPricePlace.data("setprice", result);
                if (app.preferences.updateSetPriceBasedOnQuantity) {
                    /** @type {number} */
                    result = result * +$('.product_detail .quantity input[name="quantity"]').first().val();
                }
                if (app.urls && app.urls.formatPrice) {
                    app.util.formatMoneyAjax(result, options.productSetPricePlace);
                } else {
                    options.productSetPricePlace.html(app.util.formatMoney(result));
                    options.productSetPricePlace.append(app.preferences.productSetTotalPriceDisplaySuffix);
                    if (item.showSalePrice && parseFloat(result) !== value) {
                        value = value.toFixed(app.preferences.productSetTotalPriceToFixedLength);
                        options.productSetSalePricePlace.html(app.util.formatMoney(value));
                        options.productSetSalePricePlace.data("setprice", value);
                    }
                }
            });
        }
        $(document).on("product.productSetCheckAvailability", function() {
            /** @type {boolean} */
            var isExistingShown = true;
            var version;
            /** @type {number} */
            var freeze = 0;
            var newdifftype = options.wrapper.data("subproducts-count");
            var tickEventElem;
            if (0 == options.productSetPricePlace.data("setprice") && app.resources.DISABLE_PRICE_ZERO_ON_PRODUCTSET) {
                return false;
            }
            options.wrapper.find(".product_set_item").each(function() {
                tickEventElem = $(this).find(".product_set_details");
                version = tickEventElem.data("available");
                if (!isExistingShown) {
                    return false;
                }
                if (app.resources.ENABLE_ADDALLTOCART_PRE_BACKORDER_SET && ("PREORDER" === version || "BACKORDER" === version)) {
                    return isExistingShown = true;
                }
                if ("IN_STOCK" != version) {
                    return isExistingShown = false;
                }
                if ("true" == tickEventElem.attr("data-subproduct-allowed")) {
                    freeze++;
                }
            });
            if (options.addAllToCart.hasClass("js_enhanced_add_all")) {
                options.addAllToCart.prop("disabled", newdifftype != freeze);
                /** @type {null} */
                var a = null;
                a = options.addAllToCart.closest(".js-enhanced-productset").find(".availability .availability_value").html("");
                if (newdifftype != freeze) {
                    a = $("<span/>").addClass("not_available").appendTo(a);
                    a.html(app.resources.NOT_AVAILABLE);
                } else {
                    a = $("<span/>").addClass("in_stock").appendTo(a);
                    a.html(app.resources.IN_STOCK);
                }
            } else {
                options.addAllToCart.prop("disabled", !isExistingShown);
            }
        });
    }
    /**
     * @param {string} error
     * @return {?}
     */
    function add(error) {
        error.preventDefault();
        if (false === item.disalowDeselectVariation && $(this).parents("li.selected").length) {
            return false;
        }
        var msg = app.util.getQueryStringParams($(this).attr("href") ? $(this).attr("href") : $(this).val());
        if (!(error = $(this).children("option:selected").data("pid"))) {
            error = $(this).data("pid");
        }
        if (!msg.pid && error) {
            /** @type {string} */
            msg.pid = error;
        }
        var helper = $(this).closest(".product_set_item");
        if (0 != Object.keys(msg).length) {
            error = helper.find("form").find("[name='quantity']").first().val();
            msg.quantity = isNaN(error) ? "1" : error;
            var version = app.urls.getSetItem;
            Object.keys(msg).forEach(function(type) {
                version = app.util.appendParamToURL(version, type, msg[type]);
            });
            /**
             * @param {string} name
             * @return {undefined}
             */
            error = function(name) {
                app.progress.hide();
                name = $(name).find("[name='pid']").val();
                if (helper.length) {
                    helper.attr("id", "item-" + name);
                }
                $(document).trigger("product.productSetItemLoad", [name]);
                $(document).trigger("product.productSetPriceCalculate");
                $(document).trigger("product.productSetCheckAvailability");
                options.pdpMain.trigger("product.variationChanged", {
                    pid: name
                });
                app.tooltips.init();
            };
            if (item.useCustomLoad) {
                $(document).trigger("product.customSetItemLoad", {
                    element: this,
                    url: version,
                    container: helper,
                    callback: error
                });
            } else {
                helper.load(version, error);
            }
        }
    }
    var options = {};
    var item = {
        useCustomLoad: false,
        customPriceCalculate: false,
        adjustProductSetQty: false
    };
    app.components = app.components || {};
    app.components.product = app.components.product || {};
    app.components.product.productset = {
        init: function(name) {
            item = $.extend(true, item, name || {});
            options = {
                document: $(document),
                addAllToCart: $(".js_add_all_to_cart"),
                productSetPricePlace: $(".js_pdpMain .price_set"),
                productSetSalePricePlace: $(".js_pdpMain .price_sale_set"),
                errorPlacement: $(".js_ps_quantity_error"),
                pdpMain: $("#pdpMain"),
                arData: {},
                isQtyValid: true
            };
            options.wrapper = options.document.find("#product_set_list");
            options.productSetItems = options.wrapper.find(".product_set_item");
            if (options.wrapper.length) {
                initialize();
            }
            init(name);
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @param {?} preventRedraw
     * @return {undefined}
     */
    function show(preventRedraw) {
        if (context.util.isElementInViewport(self.wrapperElement.get(0))) {
            $(window).off("scroll", show);
            $.ajax({
                url: f.curalateScriptUrl,
                dataType: "script",
                cache: true
            }).done(function() {
                self.document.trigger("scriptLoaded." + f.deferredId);
            });
        }
    }
    /**
     * @return {undefined}
     */
    function success() {
        if (Curalate) {
            var d = {
                code: context.preferences.curalateCode
            };
            if ("product" == context.page.type) {
                d.productId = context.page.currentProduct.masterID;
            }
            Curalate.FanReels[self.curalatePageConfig.fanreeltype].init(d);
        }
    }
    var self = {};
    var f = {
        deferredId: "curalateScript",
        wrapperElementSelector: "#curalate-fan-reel-wrapper",
        curalateScriptUrl: ""
    };
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.curalate = {
        init: function() {
            if (context.preferences.curalateEnabled && (self.document = $(document), self.wrapperElement = self.document.find(f.wrapperElementSelector), self.isWrapperElementPresent = 0 < self.wrapperElement.length, self.curalatePageConfig = {}, context.page.type && "undefined" !== typeof context.preferences.curalatePagesConfig[context.page.type] && (self.curalatePageConfig = context.preferences.curalatePagesConfig[context.page.type], f.curalateScriptUrl = context.preferences.curalateBaseURL + "/" + self.curalatePageConfig.experience +
                    "/" + self.curalatePageConfig.layout + ".js"), context.preferences.deferredScriptEnabled && self.isWrapperElementPresent && !$.isEmptyObject(self.curalatePageConfig))) {
                if (context.util.isElementInViewport(self.wrapperElement.get(0))) {
                    window.loraDeferredScripts.push({
                        id: f.deferredId,
                        url: f.curalateScriptUrl
                    });
                } else {
                    $(window).on("scroll", show);
                }
                self.document.on("scriptLoaded." + f.deferredId, success);
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(b, $, canCreateDiscussions) {
    /**
     * @return {undefined}
     */
    function checkShutDown() {
        if (_options.srCartDiv.length) {
            setTimeout(function() {
                /** @type {boolean} */
                sr_pageRefreshes = true;
            }, 800);
        }
    }
    var _options;
    _options = {
        blockFrm: $("#dwfrm_ineligiblecart"),
        keepItemsBtn: $("button[name='dwfrm_ineligiblecart_keepitems']"),
        srCartDiv: $('div[name="sr_payRunnerCartDiv"]')
    };
    (function() {
        _options.keepItemsBtn.on("click", function(event) {
            event.preventDefault();
            sr_$.signOut();
            if (_options.blockFrm) {
                setTimeout(function() {
                    _options.blockFrm.submit();
                }, 900);
            }
        });
        checkShutDown();
    })();
})(window.srApp = window.srApp || {}, jQuery);
! function(window, $) {
    $ = $(window, window.document);
    window.lazySizes = $;
    if ("object" == typeof module && module.exports) {
        module.exports = $;
    }
}(window, function(window, document) {
    if (document.getElementsByClassName) {
        var lazySizesConfig;
        var docElem = document.documentElement;
        var Date = window.Date;
        var supportPicture = window.HTMLPictureElement;
        var addEventListener = window.addEventListener;
        var setTimeout = window.setTimeout;
        var requestAnimationFrame = window.requestAnimationFrame || setTimeout;
        var requestIdleCallback = window.requestIdleCallback;
        /** @type {!RegExp} */
        var opacityRe = /^picture$/i;
        /** @type {!Array} */
        var loadEvents = ["load", "error", "lazyincluded", "_lazyloaded"];
        var regClassCache = {};
        /** @type {function(this:(IArrayLike<T>|string), (function(this:S, T, number, !Array<T>): ?|null), S=): undefined} */
        var forEach = Array.prototype.forEach;
        /**
         * @param {!Element} ele
         * @param {string} cls
         * @return {?}
         */
        var hasClass = function(ele, cls) {
            return regClassCache[cls] || (regClassCache[cls] = new RegExp("(\\s|^)" + cls + "(\\s|$)")), regClassCache[cls].test(ele.getAttribute("class") || "") && regClassCache[cls];
        };
        /**
         * @param {!Element} elem
         * @param {string} name
         * @return {undefined}
         */
        var addClass = function(elem, name) {
            if (!hasClass(elem, name)) {
                elem.setAttribute("class", (elem.getAttribute("class") || "").trim() + " " + name);
            }
        };
        /**
         * @param {!Element} ele
         * @param {string} cls
         * @return {undefined}
         */
        var removeClass = function(ele, cls) {
            var reg;
            if (reg = hasClass(ele, cls)) {
                ele.setAttribute("class", (ele.getAttribute("class") || "").replace(reg, " "));
            }
        };
        /**
         * @param {!Element} obj
         * @param {!Function} fn
         * @param {boolean} bind
         * @return {undefined}
         */
        var remove = function(obj, fn, bind) {
            /** @type {string} */
            var method = bind ? "addEventListener" : "removeEventListener";
            if (bind) {
                remove(obj, fn);
            }
            loadEvents.forEach(function(resizeProperties) {
                obj[method](resizeProperties, fn);
            });
        };
        /**
         * @param {!Node} elem
         * @param {string} name
         * @param {number} detail
         * @param {?} noBubbles
         * @param {?} noCancelable
         * @return {?}
         */
        var triggerEvent = function(elem, name, detail, noBubbles, noCancelable) {
            var event = document.createEvent("CustomEvent");
            return event.initCustomEvent(name, !noBubbles, !noCancelable, detail || {}), elem.dispatchEvent(event), event;
        };
        /**
         * @param {!Node} el
         * @param {!Object} full
         * @return {undefined}
         */
        var updatePolyfill = function(el, full) {
            var polyfill;
            if (!supportPicture && (polyfill = window.picturefill || lazySizesConfig.pf)) {
                polyfill({
                    reevaluate: true,
                    elements: [el]
                });
            } else {
                if (full && full.src) {
                    el.src = full.src;
                }
            }
        };
        /**
         * @param {!Node} elem
         * @param {!Object} parent
         * @param {string} width
         * @return {?}
         */
        var getWidth = function(elem, parent, width) {
            width = width || elem.offsetWidth;
            for (; width < lazySizesConfig.minSize && parent && !elem._lazysizesWidth;) {
                width = parent.offsetWidth;
                parent = parent.parentNode;
            }
            return width;
        };
        var rAF = function() {
            var each;
            var d;
            /** @type {!Array} */
            var e = [];
            /** @type {!Array} */
            var f = [];
            /**
             * @return {undefined}
             */
            var run = function() {
                var results = e;
                /** @type {!Array} */
                e = f;
                /** @type {boolean} */
                each = true;
                /** @type {boolean} */
                d = false;
                for (; results.length;) {
                    results.shift()();
                }
                /** @type {boolean} */
                each = false;
            };
            /**
             * @param {!Object} f
             * @param {?} fn
             * @return {undefined}
             */
            var rafBatch = function(f, fn) {
                if (each && !fn) {
                    f.apply(this, arguments);
                } else {
                    e.push(f);
                    if (!d) {
                        /** @type {boolean} */
                        d = true;
                        (document.hidden ? setTimeout : requestAnimationFrame)(run);
                    }
                }
            };
            return rafBatch._lsFlush = run, rafBatch;
        }();
        /**
         * @param {!Function} fn
         * @param {boolean} simple
         * @return {?}
         */
        var rAFIt = function(fn, simple) {
            return simple ? function() {
                rAF(fn);
            } : function() {
                var elem = this;
                /** @type {!Arguments} */
                var originalArguments = arguments;
                rAF(function() {
                    fn.apply(elem, originalArguments);
                });
            };
        };
        /**
         * @param {!Function} fn
         * @return {?}
         */
        var throttle = function(fn) {
            var c;
            /** @type {number} */
            var d = 0;
            /** @type {number} */
            var longTimeout = 666;
            /**
             * @return {undefined}
             */
            var run = function() {
                /** @type {boolean} */
                c = false;
                d = Date.now();
                fn();
            };
            var runCallback = requestIdleCallback ? function() {
                requestIdleCallback(run, {
                    timeout: longTimeout
                });
                if (666 !== longTimeout) {
                    /** @type {number} */
                    longTimeout = 666;
                }
            } : rAFIt(function() {
                setTimeout(run);
            }, true);
            return function(isPriority) {
                var ajaxInterval;
                if (isPriority = true === isPriority) {
                    /** @type {number} */
                    longTimeout = 44;
                }
                if (!c) {
                    /** @type {boolean} */
                    c = true;
                    /** @type {number} */
                    ajaxInterval = 125 - (Date.now() - d);
                    if (0 > ajaxInterval) {
                        /** @type {number} */
                        ajaxInterval = 0;
                    }
                    if (isPriority || 9 > ajaxInterval && requestIdleCallback) {
                        runCallback();
                    } else {
                        setTimeout(runCallback, ajaxInterval);
                    }
                }
            };
        };
        /**
         * @param {!Function} cb
         * @return {?}
         */
        var debounce = function(cb) {
            var end;
            var loadTime;
            /**
             * @return {undefined}
             */
            var run = function() {
                /** @type {null} */
                end = null;
                cb();
            };
            /**
             * @return {undefined}
             */
            var stop = function() {
                /** @type {number} */
                var waited = Date.now() - loadTime;
                if (99 > waited) {
                    setTimeout(stop, 99 - waited);
                } else {
                    (requestIdleCallback || run)(run);
                }
            };
            return function() {
                loadTime = Date.now();
                if (!end) {
                    end = setTimeout(stop, 99);
                }
            };
        };
        var loader = function() {
            var lazyloadElems;
            var preloadElems;
            var isCompleted;
            var gKontikiTimeout;
            var loadMode;
            var H;
            var eLvW;
            var elvH;
            var eLtop;
            var eLleft;
            var eLright;
            var eLbottom;
            var defaultExpand;
            var currentChecksumFailCount;
            var hFac;
            /** @type {!RegExp} */
            var rnoType = /^img$/i;
            /** @type {!RegExp} */
            var rinputs = /^iframe$/i;
            /** @type {boolean} */
            var ya = "onscroll" in window && !/glebot/.test(navigator.userAgent);
            /** @type {number} */
            var lastChecksumFailCount = 0;
            /** @type {number} */
            var ua = 0;
            /** @type {number} */
            var pa = -1;
            /**
             * @param {!Object} event
             * @return {undefined}
             */
            var callback = function(event) {
                ua--;
                if (event && event.target) {
                    remove(event.target, callback);
                }
                if (!event || 0 > ua || !event.target) {
                    /** @type {number} */
                    ua = 0;
                }
            };
            /**
             * @return {undefined}
             */
            var checkElements = function() {
                var len;
                var i;
                var rect;
                var autoLoadElem;
                var loadedSomething;
                var track;
                var elemNegativeExpand;
                var elemExpandVal;
                var lastTrackTitle;
                if ((loadMode = lazySizesConfig.loadMode) && 8 > ua && (len = lazyloadElems.length)) {
                    /** @type {number} */
                    i = 0;
                    pa++;
                    if (null == currentChecksumFailCount) {
                        if (!("expand" in lazySizesConfig)) {
                            /** @type {number} */
                            lazySizesConfig.expand = 500 < docElem.clientHeight && 500 < docElem.clientWidth ? 500 : 370;
                        }
                        defaultExpand = lazySizesConfig.expand;
                        /** @type {number} */
                        currentChecksumFailCount = defaultExpand * lazySizesConfig.expFactor;
                    }
                    if (currentChecksumFailCount > lastChecksumFailCount && 1 > ua && 2 < pa && 2 < loadMode && !document.hidden) {
                        /** @type {number} */
                        lastChecksumFailCount = currentChecksumFailCount;
                        /** @type {number} */
                        pa = 0;
                    } else {
                        lastChecksumFailCount = 1 < loadMode && 1 < pa && 6 > ua ? defaultExpand : 0;
                    }
                    for (; len > i; i++) {
                        if (lazyloadElems[i] && !lazyloadElems[i]._lazyRace) {
                            if (ya) {
                                if (!((elemExpandVal = lazyloadElems[i].getAttribute("data-expand")) && (track = 1 * elemExpandVal))) {
                                    track = lastChecksumFailCount;
                                }
                                if (lastTrackTitle !== track) {
                                    eLvW = innerWidth + track * hFac;
                                    elvH = innerHeight + track;
                                    /** @type {number} */
                                    elemNegativeExpand = -1 * track;
                                    lastTrackTitle = track;
                                }
                                rect = lazyloadElems[i].getBoundingClientRect();
                                if ((rect = (eLbottom = rect.bottom) >= elemNegativeExpand && (eLtop = rect.top) <= elvH && (eLright = rect.right) >= elemNegativeExpand * hFac && (eLleft = rect.left) <= eLvW && (eLbottom || eLright || eLleft || eLtop)) && !(rect = isCompleted && 3 > ua && !elemExpandVal && (3 > loadMode || 4 > pa))) {
                                    rect = void 0;
                                    var element = lazyloadElems[i];
                                    var elemExpand = track;
                                    var parent = element;
                                    /** @type {boolean} */
                                    element = "hidden" == (getComputedStyle(document.body, null) || {}).visibility || "hidden" != (getComputedStyle(element, null) || {}).visibility;
                                    /** @type {number} */
                                    eLtop = eLtop - elemExpand;
                                    eLbottom = eLbottom + elemExpand;
                                    /** @type {number} */
                                    eLleft = eLleft - elemExpand;
                                    eLright = eLright + elemExpand;
                                    for (; element && (parent = parent.offsetParent) && parent != document.body && parent != docElem;) {
                                        if ((element = 0 < ((getComputedStyle(parent, null) || {}).opacity || 1)) && "visible" != (getComputedStyle(parent, null) || {}).overflow) {
                                            rect = parent.getBoundingClientRect();
                                            /** @type {boolean} */
                                            element = eLright > rect.left && eLleft < rect.right && eLbottom > rect.top - 1 && eLtop < rect.bottom + 1;
                                        }
                                    }
                                    /** @type {boolean} */
                                    rect = element;
                                }
                                if (rect) {
                                    if (unveilElement(lazyloadElems[i]), loadedSomething = true, 9 < ua) {
                                        break;
                                    }
                                } else {
                                    if (!loadedSomething && isCompleted && !autoLoadElem && 4 > ua && 4 > pa && 2 < loadMode && (preloadElems[0] || lazySizesConfig.preloadAfterLoad) && (preloadElems[0] || !elemExpandVal && (eLbottom || eLright || eLleft || eLtop || "auto" != lazyloadElems[i].getAttribute(lazySizesConfig.sizesAttr)))) {
                                        autoLoadElem = preloadElems[0] || lazyloadElems[i];
                                    }
                                }
                            } else {
                                unveilElement(lazyloadElems[i]);
                            }
                        }
                    }
                    if (autoLoadElem && !loadedSomething) {
                        unveilElement(autoLoadElem);
                    }
                }
            };
            var throttledCheckElements = throttle(checkElements);
            /**
             * @param {!Object} e
             * @return {undefined}
             */
            var switchLoadingClass = function(e) {
                addClass(e.target, lazySizesConfig.loadedClass);
                removeClass(e.target, lazySizesConfig.loadingClass);
                remove(e.target, rafSwitchLoadingClass);
            };
            var rafedSwitchLoadingClass = rAFIt(switchLoadingClass);
            /**
             * @param {!Event} e
             * @return {undefined}
             */
            var rafSwitchLoadingClass = function(e) {
                rafedSwitchLoadingClass({
                    target: e.target
                });
            };
            /**
             * @param {!Element} frame
             * @param {!Object} url
             * @return {undefined}
             */
            var loadFrameFromURL = function(frame, url) {
                try {
                    frame.contentWindow.location.replace(url);
                } catch (ja) {
                    /** @type {!Object} */
                    frame.src = url;
                }
            };
            /**
             * @param {!Node} element
             * @return {undefined}
             */
            var handleSources = function(element) {
                var imgSrcset;
                var d;
                var pathHint = element.getAttribute(lazySizesConfig.srcsetAttr);
                if (imgSrcset = lazySizesConfig.customMedia[element.getAttribute("data-media") || element.getAttribute("media")]) {
                    element.setAttribute("media", imgSrcset);
                }
                if (pathHint) {
                    element.setAttribute("srcset", pathHint);
                }
                if (imgSrcset) {
                    d = element.parentNode;
                    d.insertBefore(element.cloneNode(), element);
                    d.removeChild(element);
                }
            };
            var lazyUnveil = rAFIt(function(elem, detail, canCreateDiscussions, mainWnd, isSlidingUp) {
                var src;
                var srcset;
                var parent;
                var isPicture;
                var event;
                var y;
                if (!(event = triggerEvent(elem, "lazybeforeunveil", detail)).defaultPrevented) {
                    if (mainWnd) {
                        if (canCreateDiscussions) {
                            addClass(elem, lazySizesConfig.autosizesClass);
                        } else {
                            elem.setAttribute("sizes", mainWnd);
                        }
                    }
                    srcset = elem.getAttribute(lazySizesConfig.srcsetAttr);
                    src = elem.getAttribute(lazySizesConfig.srcAttr);
                    if (isSlidingUp) {
                        parent = elem.parentNode;
                        isPicture = parent && opacityRe.test(parent.nodeName || "");
                    }
                    y = detail.firesLoad || "src" in elem && (srcset || src || isPicture);
                    event = {
                        target: elem
                    };
                    if (y) {
                        remove(elem, callback, true);
                        clearTimeout(gKontikiTimeout);
                        gKontikiTimeout = setTimeout(callback, 2500);
                        addClass(elem, lazySizesConfig.loadingClass);
                        remove(elem, rafSwitchLoadingClass, true);
                    }
                    if (isPicture) {
                        forEach.call(parent.getElementsByTagName("source"), handleSources);
                    }
                    if (srcset) {
                        elem.setAttribute("srcset", srcset);
                    } else {
                        if (src && !isPicture) {
                            if (rinputs.test(elem.nodeName)) {
                                loadFrameFromURL(elem, src);
                            } else {
                                elem.src = src;
                            }
                        }
                    }
                    if (srcset || isPicture) {
                        updatePolyfill(elem, {
                            src: src
                        });
                    }
                }
                if (elem._lazyRace) {
                    delete elem._lazyRace;
                }
                removeClass(elem, lazySizesConfig.lazyClass);
                rAF(function() {
                    if (!(y && !elem.complete)) {
                        if (y) {
                            callback(event);
                        } else {
                            ua--;
                        }
                        switchLoadingClass(event);
                    }
                }, true);
            });
            /**
             * @param {!Element} elem
             * @return {undefined}
             */
            var unveilElement = function(elem) {
                var detail;
                /** @type {boolean} */
                var isImg = rnoType.test(elem.nodeName);
                var sizes = isImg && (elem.getAttribute(lazySizesConfig.sizesAttr) || elem.getAttribute("sizes"));
                /** @type {boolean} */
                var isAuto = "auto" == sizes;
                if (!isAuto && isCompleted || !isImg || !elem.src && !elem.srcset || elem.complete || hasClass(elem, lazySizesConfig.errorClass)) {
                    detail = triggerEvent(elem, "lazyunveilread").detail;
                    if (isAuto) {
                        autoSizer.updateElem(elem, true, elem.offsetWidth);
                    }
                    /** @type {boolean} */
                    elem._lazyRace = true;
                    ua++;
                    lazyUnveil(elem, detail, isAuto, sizes, isImg);
                }
            };
            /**
             * @return {?}
             */
            var onload = function() {
                if (!isCompleted) {
                    if (999 > Date.now() - H) {
                        return void setTimeout(onload, 999);
                    }
                    var afterScroll = debounce(function() {
                        /** @type {number} */
                        lazySizesConfig.loadMode = 3;
                        throttledCheckElements();
                    });
                    /** @type {boolean} */
                    isCompleted = true;
                    /** @type {number} */
                    lazySizesConfig.loadMode = 3;
                    throttledCheckElements();
                    addEventListener("scroll", function() {
                        if (3 == lazySizesConfig.loadMode) {
                            /** @type {number} */
                            lazySizesConfig.loadMode = 2;
                        }
                        afterScroll();
                    }, true);
                }
            };
            return {
                _: function() {
                    H = Date.now();
                    lazyloadElems = document.getElementsByClassName(lazySizesConfig.lazyClass);
                    preloadElems = document.getElementsByClassName(lazySizesConfig.lazyClass + " " + lazySizesConfig.preloadClass);
                    hFac = lazySizesConfig.hFac;
                    addEventListener("scroll", throttledCheckElements, true);
                    addEventListener("resize", throttledCheckElements, true);
                    if (window.MutationObserver) {
                        (new MutationObserver(throttledCheckElements)).observe(docElem, {
                            childList: true,
                            subtree: true,
                            attributes: true
                        });
                    } else {
                        docElem.addEventListener("DOMNodeInserted", throttledCheckElements, true);
                        docElem.addEventListener("DOMAttrModified", throttledCheckElements, true);
                        setInterval(throttledCheckElements, 999);
                    }
                    addEventListener("hashchange", throttledCheckElements, true);
                    "focus mouseover click load transitionend animationend webkitAnimationEnd".split(" ").forEach(function(b) {
                        document.addEventListener(b, throttledCheckElements, true);
                    });
                    if (/d$|^c/.test(document.readyState)) {
                        onload();
                    } else {
                        addEventListener("load", onload);
                        document.addEventListener("DOMContentLoaded", throttledCheckElements);
                        setTimeout(onload, 2E4);
                    }
                    if (lazyloadElems.length) {
                        checkElements();
                        rAF._lsFlush();
                    } else {
                        throttledCheckElements();
                    }
                },
                checkElems: throttledCheckElements,
                unveil: unveilElement
            };
        }();
        var autoSizer = function() {
            var autosizesElems;
            var sizeElement = rAFIt(function(elem, list, event, width) {
                var j;
                var length;
                if (elem._lazysizesWidth = width, width = width + "px", elem.setAttribute("sizes", width), opacityRe.test(list.nodeName || "")) {
                    list = list.getElementsByTagName("source");
                    /** @type {number} */
                    j = 0;
                    length = list.length;
                    for (; length > j; j++) {
                        list[j].setAttribute("sizes", width);
                    }
                }
                if (!event.detail.dataAttr) {
                    updatePolyfill(elem, event.detail);
                }
            });
            /**
             * @param {!Node} elem
             * @param {boolean} dataAttr
             * @param {string} width
             * @return {undefined}
             */
            var getSizeElement = function(elem, dataAttr, width) {
                var event;
                var parent = elem.parentNode;
                if (parent) {
                    width = getWidth(elem, parent, width);
                    event = triggerEvent(elem, "lazybeforesizes", {
                        width: width,
                        dataAttr: !!dataAttr
                    });
                    if (!event.defaultPrevented) {
                        width = event.detail.width;
                        if (width && width !== elem._lazysizesWidth) {
                            sizeElement(elem, parent, event, width);
                        }
                    }
                }
            };
            var debouncedUpdateElementsSizes = debounce(function() {
                var i;
                var len = autosizesElems.length;
                if (len) {
                    /** @type {number} */
                    i = 0;
                    for (; len > i; i++) {
                        getSizeElement(autosizesElems[i]);
                    }
                }
            });
            return {
                _: function() {
                    autosizesElems = document.getElementsByClassName(lazySizesConfig.autosizesClass);
                    addEventListener("resize", debouncedUpdateElementsSizes);
                },
                checkElems: debouncedUpdateElementsSizes,
                updateElem: getSizeElement
            };
        }();
        /**
         * @return {undefined}
         */
        var init = function() {
            if (!init.i) {
                /** @type {boolean} */
                init.i = true;
                autoSizer._();
                loader._();
            }
        };
        return function() {
            var prop;
            var lazySizesDefaults = {
                lazyClass: "lazyload",
                loadedClass: "lazyloaded",
                loadingClass: "lazyloading",
                preloadClass: "lazypreload",
                errorClass: "lazyerror",
                autosizesClass: "lazyautosizes",
                srcAttr: "data-src",
                srcsetAttr: "data-srcset",
                sizesAttr: "data-sizes",
                minSize: 40,
                customMedia: {},
                init: true,
                expFactor: 1.5,
                hFac: .8,
                loadMode: 2
            };
            lazySizesConfig = window.lazySizesConfig || window.lazysizesConfig || {};
            for (prop in lazySizesDefaults) {
                if (!(prop in lazySizesConfig)) {
                    lazySizesConfig[prop] = lazySizesDefaults[prop];
                }
            }
            window.lazySizesConfig = lazySizesConfig;
            setTimeout(function() {
                if (lazySizesConfig.init) {
                    init();
                }
            });
        }(), {
            cfg: lazySizesConfig,
            autoSizer: autoSizer,
            loader: loader,
            init: init,
            uP: updatePolyfill,
            aC: addClass,
            rC: removeClass,
            hC: hasClass,
            fire: triggerEvent,
            gW: getWidth,
            rAF: rAF
        };
    }
});
(function($window, $) {
    var data = {};
    /**
     * @param {string} value
     * @param {!Object} xhr
     * @param {?} ajaxOptions
     * @return {undefined}
     */
    var onSuccess = function(value, xhr, ajaxOptions) {
        value = $.parseHTML(xhr.responseText);
        xhr = $(value).closest(".js_checkout_section").data("section-id");
        moduleWrapperDiv = $(value).closest(".js_checkout_module").data("id");
        if (xhr || moduleWrapperDiv) {
            value = $(value).find(".recordingStatusPlaceholder").data("status");
            data.serviceCurrentState = "undefined" == typeof value ? "" : value;
            /** @type {string} */
            data.recordingStateMsg = "Recording has been " + data.serviceCurrentState;
            if ("paused" == value) {
                alert(data.recordingStateMsg);
            } else {
                if ("resumed" == value) {
                    alert(data.recordingStateMsg);
                } else {
                    if ("error" == value) {
                        alert(data.ErrorMsg);
                    } else {
                        if ("error_pause" == data.serviceCurrentState) {
                            alert(data.ErrorMsgPause);
                        } else {
                            if ("error_resume" == data.serviceCurrentState) {
                                alert(data.ErrorMsgResume);
                            }
                        }
                    }
                }
            }
        }
    };
    /**
     * @param {string} b
     * @return {undefined}
     */
    var save = function(b) {
        $.ajax({
            type: "GET",
            cache: false,
            url: b
        }).done(function(query) {
            query = $.parseHTML(query);
            query = $(query).closest(".recordingStatusPlaceholder").data("status");
            $(".close").removeClass("disabled").on("click", function() {
                $(".overlay").remove();
                data.body.removeClass("fixed");
            });
            if ("paused" == query || "nochange_paused" == query) {
                alert("Recording has been paused");
                if ($(".overlay").length) {
                    $(".overlay").remove();
                    data.body.removeClass("fixed");
                }
            } else {
                if ("resumed" == query) {
                    alert("Recording has been Resumed");
                } else {
                    if ("error" == query) {
                        alert(data.ErrorMsg);
                    }
                }
            }
        }).fail(function(b, canCreateDiscussions) {
            alert("There is an error, please take manual action for recording");
        });
    };
    /**
     * @return {undefined}
     */
    var init = function() {
        /**
         * @return {undefined}
         */
        function load() {
            if (data.serviceCurrentState) {
                if (data.serviceCurrentState = data.serviceCurrentState.replace("nochange_", ""), document[propertyName]) {
                    if ("paused" == data.serviceCurrentState && 0 == data.body.find(".overlay").length) {
                        data.body.append(data.overlayContainer);
                        $(".overlay").addClass("active");
                        $(".close").addClass("disabled");
                        data.body.addClass("fixed");
                    }
                } else {
                    if ("resumed" == data.serviceCurrentState) {
                        save(data.urlResumedRec);
                    } else {
                        if ("paused" == data.serviceCurrentState) {
                            $(".pauseRec").off("click").on("click", function(event) {
                                event.preventDefault();
                                event.stopPropagation();
                                data.serviceCurrentState = data.currentStateDiv.data("status");
                                save(data.urlPausedRec);
                            });
                        }
                    }
                }
            }
        }
        var propertyName;
        var visibilityChange;
        if ("undefined" !== typeof document.hidden) {
            /** @type {string} */
            propertyName = "hidden";
            /** @type {string} */
            visibilityChange = "visibilitychange";
        } else {
            if ("undefined" !== typeof document.msHidden) {
                /** @type {string} */
                propertyName = "msHidden";
                /** @type {string} */
                visibilityChange = "msvisibilitychange";
            } else {
                if ("undefined" !== typeof document.webkitHidden) {
                    /** @type {string} */
                    propertyName = "webkitHidden";
                    /** @type {string} */
                    visibilityChange = "webkitvisibilitychange";
                }
            }
        }
        if ("undefined" === typeof document.addEventListener || "undefined" === typeof document.hidden) {
            console.log("This demo requires a browser, such as Google Chrome or Firefox, that supports the Page Visibility API.");
        } else {
            document.addEventListener(visibilityChange, load, false);
        }
    };
    $window.calabrio = {
        init: function() {
            data = {
                currentStateDiv: $(".recordingStatusPlaceholder"),
                closeBtn: $(".close"),
                body: $("body"),
                pauseRecBtn: $(".pauseRec")
            };
            data.serviceCurrentState = data.currentStateDiv.data("status");
            data.recordingStateMsg = "Recording has been " + $(".recordingStatusPlaceholder").data("status");
            /** @type {string} */
            data.ErrorMsg = "There is an error, please take the action manually";
            /** @type {string} */
            data.ErrorMsgPause = "Pause recording service failed, please pause recording manually before continuing";
            /** @type {string} */
            data.ErrorMsgResume = "Resume recording service failed, please resume recording manually before continuing";
            data.urlPausedRec = $window.urls.pauseRec;
            data.urlResumedRec = $window.urls.resumeRec;
            data.overlayContainer = $window.resources.PAUSE_RECORDING_OVERLAY;
            if ("paused" == data.serviceCurrentState || "resumed" == data.serviceCurrentState) {
                alert(data.recordingStateMsg);
            } else {
                if ("error" == data.serviceCurrentState) {
                    alert(data.ErrorMsg);
                } else {
                    if ("error_pause" == data.serviceCurrentState) {
                        alert(data.ErrorMsgPause);
                    } else {
                        if ("error_resume" == data.serviceCurrentState) {
                            alert(data.ErrorMsgResume);
                        }
                    }
                }
            }
            init();
            $(document).ajaxComplete(onSuccess);
        },
        ajaxCompleteEvent: onSuccess
    };
    return $window.calabrio.init();
})(window.app = window.app || {}, jQuery);
! function(factory) {
    if ("function" == typeof define && define.amd) {
        define(["jquery"], factory);
    } else {
        if ("undefined" != typeof exports) {
            module.exports = factory(require("jquery"));
        } else {
            factory(jQuery);
        }
    }
}(function($) {
    var Slick = window.Slick || {};
    /**
     * @return {undefined}
     */
    (Slick = function() {
        /** @type {number} */
        var c = 0;
        return function(options, defaults) {
            this.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(options),
                appendDots: $(options),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
                nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3E3,
                centerMode: false,
                centerPadding: "50px",
                cssEase: "ease",
                customPaging: function(slider, i) {
                    return $('<button type="button" />').text(i + 1);
                },
                dots: false,
                dotsClass: "slick-dots",
                draggable: true,
                easing: "linear",
                edgeFriction: .35,
                fade: false,
                focusOnSelect: false,
                focusOnChange: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: "ondemand",
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: "window",
                responsive: null,
                rows: 1,
                rtl: false,
                slide: "",
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1E3
            };
            this.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                scrolling: false,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                swiping: false,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };
            $.extend(this, this.initials);
            /** @type {null} */
            this.animProp = this.animType = this.activeBreakpoint = null;
            /** @type {!Array} */
            this.breakpoints = [];
            /** @type {!Array} */
            this.breakpointSettings = [];
            /** @type {boolean} */
            this.interrupted = this.focussed = this.cssTransitions = false;
            /** @type {string} */
            this.hidden = "hidden";
            /** @type {boolean} */
            this.paused = true;
            /** @type {null} */
            this.respondTo = this.positionProp = null;
            /** @type {number} */
            this.rowCount = 1;
            /** @type {boolean} */
            this.shouldClick = true;
            this.$slider = $(options);
            /** @type {null} */
            this.transitionType = this.transformType = this.$slidesCache = null;
            /** @type {string} */
            this.visibilityChange = "visibilitychange";
            /** @type {number} */
            this.windowWidth = 0;
            /** @type {null} */
            this.windowTimer = null;
            options = $(options).data("slick") || {};
            this.options = $.extend({}, this.defaults, defaults, options);
            this.currentSlide = this.options.initialSlide;
            this.originalSettings = this.options;
            if (void 0 !== document.mozHidden) {
                /** @type {string} */
                this.hidden = "mozHidden";
                /** @type {string} */
                this.visibilityChange = "mozvisibilitychange";
            } else {
                if (void 0 !== document.webkitHidden) {
                    /** @type {string} */
                    this.hidden = "webkitHidden";
                    /** @type {string} */
                    this.visibilityChange = "webkitvisibilitychange";
                }
            }
            this.autoPlay = $.proxy(this.autoPlay, this);
            this.autoPlayClear = $.proxy(this.autoPlayClear, this);
            this.autoPlayIterator = $.proxy(this.autoPlayIterator, this);
            this.changeSlide = $.proxy(this.changeSlide, this);
            this.clickHandler = $.proxy(this.clickHandler, this);
            this.selectHandler = $.proxy(this.selectHandler, this);
            this.setPosition = $.proxy(this.setPosition, this);
            this.swipeHandler = $.proxy(this.swipeHandler, this);
            this.dragHandler = $.proxy(this.dragHandler, this);
            this.keyHandler = $.proxy(this.keyHandler, this);
            /** @type {number} */
            this.instanceUid = c++;
            /** @type {!RegExp} */
            this.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;
            this.registerBreakpoints();
            this.init(true);
        };
    }()).prototype.activateADA = function() {
        this.$slideTrack.find(".slick-active").attr({
            "aria-hidden": "false"
        }).find("a, input, button, select").attr({
            tabindex: "0"
        });
    };
    /** @type {function(?, number, number): ?} */
    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {
        if ("boolean" == typeof index) {
            /** @type {number} */
            addBefore = index;
            /** @type {null} */
            index = null;
        } else {
            if (0 > index || index >= this.slideCount) {
                return false;
            }
        }
        this.unload();
        if ("number" == typeof index) {
            if (0 === index && 0 === this.$slides.length) {
                $(markup).appendTo(this.$slideTrack);
            } else {
                if (addBefore) {
                    $(markup).insertBefore(this.$slides.eq(index));
                } else {
                    $(markup).insertAfter(this.$slides.eq(index));
                }
            }
        } else {
            if (true === addBefore) {
                $(markup).prependTo(this.$slideTrack);
            } else {
                $(markup).appendTo(this.$slideTrack);
            }
        }
        this.$slides = this.$slideTrack.children(this.options.slide);
        this.$slideTrack.children(this.options.slide).detach();
        this.$slideTrack.append(this.$slides);
        this.$slides.each(function(inSelectOnClick, clicked_el) {
            $(clicked_el).attr("data-slick-index", inSelectOnClick);
        });
        this.$slidesCache = this.$slides;
        this.reinit();
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.animateHeight = function() {
        if (1 === this.options.slidesToShow && true === this.options.adaptiveHeight && false === this.options.vertical) {
            var dxdydust = this.$slides.eq(this.currentSlide).outerHeight(true);
            this.$list.animate({
                height: dxdydust
            }, this.options.speed);
        }
    };
    /**
     * @param {number} targetLeft
     * @param {!Function} callback
     * @return {undefined}
     */
    Slick.prototype.animateSlide = function(targetLeft, callback) {
        var positionProps = {};
        var _ = this;
        _.animateHeight();
        if (true === _.options.rtl && false === _.options.vertical) {
            /** @type {number} */
            targetLeft = -targetLeft;
        }
        if (false === _.transformsEnabled) {
            if (false === _.options.vertical) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }
        } else {
            if (false === _.cssTransitions) {
                if (true === _.options.rtl) {
                    /** @type {number} */
                    _.currentLeft = -_.currentLeft;
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function(num) {
                        /** @type {number} */
                        num = Math.ceil(num);
                        if (false === _.options.vertical) {
                            /** @type {string} */
                            positionProps[_.animType] = "translate(" + num + "px, 0px)";
                            _.$slideTrack.css(positionProps);
                        } else {
                            /** @type {string} */
                            positionProps[_.animType] = "translate(0px," + num + "px)";
                            _.$slideTrack.css(positionProps);
                        }
                    },
                    complete: function() {
                        if (callback) {
                            callback.call();
                        }
                    }
                });
            } else {
                _.applyTransition();
                /** @type {number} */
                targetLeft = Math.ceil(targetLeft);
                if (false === _.options.vertical) {
                    /** @type {string} */
                    positionProps[_.animType] = "translate3d(" + targetLeft + "px, 0px, 0px)";
                } else {
                    /** @type {string} */
                    positionProps[_.animType] = "translate3d(0px," + targetLeft + "px, 0px)";
                }
                _.$slideTrack.css(positionProps);
                if (callback) {
                    setTimeout(function() {
                        _.disableTransition();
                        callback.call();
                    }, _.options.speed);
                }
            }
        }
    };
    /**
     * @return {?}
     */
    Slick.prototype.getNavTarget = function() {
        var c = this.options.asNavFor;
        return c && null !== c && (c = $(c).not(this.$slider)), c;
    };
    /**
     * @param {number} index
     * @return {undefined}
     */
    Slick.prototype.asNavFor = function(index) {
        var options = this.getNavTarget();
        if (null !== options && "object" == typeof options) {
            options.each(function() {
                var target = $(this).slick("getSlick");
                if (!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }
    };
    /**
     * @param {number} i
     * @return {undefined}
     */
    Slick.prototype.applyTransition = function(i) {
        var propX = {};
        if (false === this.options.fade) {
            /** @type {string} */
            propX[this.transitionType] = this.transformType + " " + this.options.speed + "ms " + this.options.cssEase;
        } else {
            /** @type {string} */
            propX[this.transitionType] = "opacity " + this.options.speed + "ms " + this.options.cssEase;
        }
        if (false === this.options.fade) {
            this.$slideTrack.css(propX);
        } else {
            this.$slides.eq(i).css(propX);
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.autoPlay = function() {
        this.autoPlayClear();
        if (this.slideCount > this.options.slidesToShow) {
            /** @type {number} */
            this.autoPlayTimer = setInterval(this.autoPlayIterator, this.options.autoplaySpeed);
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.autoPlayClear = function() {
        if (this.autoPlayTimer) {
            clearInterval(this.autoPlayTimer);
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.autoPlayIterator = function() {
        var slideCount = this.currentSlide + this.options.slidesToScroll;
        if (!(this.paused || this.interrupted || this.focussed)) {
            if (false === this.options.infinite) {
                if (1 === this.direction && this.currentSlide + 1 === this.slideCount - 1) {
                    /** @type {number} */
                    this.direction = 0;
                } else {
                    if (0 === this.direction) {
                        /** @type {number} */
                        slideCount = this.currentSlide - this.options.slidesToScroll;
                        if (0 == this.currentSlide - 1) {
                            /** @type {number} */
                            this.direction = 1;
                        }
                    }
                }
            }
            this.slideHandler(slideCount);
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.buildArrows = function() {
        if (true === this.options.arrows) {
            this.$prevArrow = $(this.options.prevArrow).addClass("slick-arrow");
            this.$nextArrow = $(this.options.nextArrow).addClass("slick-arrow");
            if (this.slideCount > this.options.slidesToShow) {
                this.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
                this.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
                if (this.htmlExpr.test(this.options.prevArrow)) {
                    this.$prevArrow.prependTo(this.options.appendArrows);
                }
                if (this.htmlExpr.test(this.options.nextArrow)) {
                    this.$nextArrow.appendTo(this.options.appendArrows);
                }
                if (true !== this.options.infinite) {
                    this.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                }
            } else {
                this.$prevArrow.add(this.$nextArrow).addClass("slick-hidden").attr({
                    "aria-disabled": "true",
                    tabindex: "-1"
                });
            }
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.buildDots = function() {
        var i;
        var dot;
        if (true === this.options.dots) {
            this.$slider.addClass("slick-dotted");
            dot = $("<ul />").addClass(this.options.dotsClass);
            /** @type {number} */
            i = 0;
            for (; i <= this.getDotCount(); i = i + 1) {
                dot.append($("<li />").append(this.options.customPaging.call(this, this, i)));
            }
            this.$dots = dot.appendTo(this.options.appendDots);
            this.$dots.find("li").first().addClass("slick-active");
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.buildOut = function() {
        this.$slides = this.$slider.children(this.options.slide + ":not(.slick-cloned)").addClass("slick-slide");
        this.slideCount = this.$slides.length;
        this.$slides.each(function(group_id, clicked_el) {
            $(clicked_el).attr("data-slick-index", group_id).data("originalStyling", $(clicked_el).attr("style") || "");
        });
        this.$slider.addClass("slick-slider");
        this.$slideTrack = 0 === this.slideCount ? $('<div class="slick-track"/>').appendTo(this.$slider) : this.$slides.wrapAll('<div class="slick-track"/>').parent();
        this.$list = this.$slideTrack.wrap('<div class="slick-list"/>').parent();
        this.$slideTrack.css("opacity", 0);
        if (!(true !== this.options.centerMode && true !== this.options.swipeToSlide)) {
            /** @type {number} */
            this.options.slidesToScroll = 1;
        }
        $("img[data-lazy]", this.$slider).not("[src]").addClass("slick-loading");
        this.setupInfinite();
        this.buildArrows();
        this.buildDots();
        this.updateDots();
        this.setSlideClasses("number" == typeof this.currentSlide ? this.currentSlide : 0);
        if (true === this.options.draggable) {
            this.$list.addClass("draggable");
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.buildRows = function() {
        var a;
        var i;
        var c;
        var e;
        var b;
        var r;
        var slidesPerSection;
        if (e = document.createDocumentFragment(), r = this.$slider.children(), 1 < this.options.rows) {
            /** @type {number} */
            slidesPerSection = this.options.slidesPerRow * this.options.rows;
            /** @type {number} */
            b = Math.ceil(r.length / slidesPerSection);
            /** @type {number} */
            a = 0;
            for (; a < b; a++) {
                /** @type {!Element} */
                var after = document.createElement("div");
                /** @type {number} */
                i = 0;
                for (; i < this.options.rows; i++) {
                    /** @type {!Element} */
                    var A = document.createElement("div");
                    /** @type {number} */
                    c = 0;
                    for (; c < this.options.slidesPerRow; c++) {
                        /** @type {number} */
                        var u = a * slidesPerSection + (i * this.options.slidesPerRow + c);
                        if (r.get(u)) {
                            A.appendChild(r.get(u));
                        }
                    }
                    after.appendChild(A);
                }
                e.appendChild(after);
            }
            this.$slider.empty().append(e);
            this.$slider.children().children().children().css({
                width: 100 / this.options.slidesPerRow + "%",
                display: "inline-block"
            });
        }
    };
    /**
     * @param {boolean} id
     * @param {boolean} forceUpdate
     * @return {undefined}
     */
    Slick.prototype.checkResponsive = function(id, forceUpdate) {
        var bp;
        var k;
        var i;
        /** @type {boolean} */
        var prev = false;
        k = this.$slider.width();
        var m = window.innerWidth || $(window).width();
        if ("window" === this.respondTo ? i = m : "slider" === this.respondTo ? i = k : "min" === this.respondTo && (i = Math.min(m, k)), this.options.responsive && this.options.responsive.length && null !== this.options.responsive) {
            /** @type {null} */
            k = null;
            for (bp in this.breakpoints) {
                if (this.breakpoints.hasOwnProperty(bp)) {
                    if (false === this.originalSettings.mobileFirst) {
                        if (i < this.breakpoints[bp]) {
                            k = this.breakpoints[bp];
                        }
                    } else {
                        if (i > this.breakpoints[bp]) {
                            k = this.breakpoints[bp];
                        }
                    }
                }
            }
            if (null !== k) {
                if (null !== this.activeBreakpoint) {
                    if (k !== this.activeBreakpoint || forceUpdate) {
                        this.activeBreakpoint = k;
                        if ("unslick" === this.breakpointSettings[k]) {
                            this.unslick(k);
                        } else {
                            this.options = $.extend({}, this.originalSettings, this.breakpointSettings[k]);
                            if (true === id) {
                                this.currentSlide = this.options.initialSlide;
                            }
                            this.refresh(id);
                        }
                        prev = k;
                    }
                } else {
                    /** @type {null} */
                    this.activeBreakpoint = k;
                    if ("unslick" === this.breakpointSettings[k]) {
                        this.unslick(k);
                    } else {
                        this.options = $.extend({}, this.originalSettings, this.breakpointSettings[k]);
                        if (true === id) {
                            this.currentSlide = this.options.initialSlide;
                        }
                        this.refresh(id);
                    }
                    /** @type {null} */
                    prev = k;
                }
            } else {
                if (null !== this.activeBreakpoint) {
                    /** @type {null} */
                    this.activeBreakpoint = null;
                    this.options = this.originalSettings;
                    if (true === id) {
                        this.currentSlide = this.options.initialSlide;
                    }
                    this.refresh(id);
                    /** @type {null} */
                    prev = k;
                }
            }
            if (!(id || false === prev)) {
                this.$slider.trigger("breakpoint", [this, prev]);
            }
        }
    };
    /**
     * @param {!Object} event
     * @param {boolean} dontAnimate
     * @return {undefined}
     */
    Slick.prototype.changeSlide = function(event, dontAnimate) {
        var b;
        var $lis;
        var isArray;
        $lis = $(event.currentTarget);
        switch ($lis.is("a") && event.preventDefault(), $lis.is("li") || ($lis = $lis.closest("li")), isArray = 0 != this.slideCount % this.options.slidesToScroll, b = isArray ? 0 : (this.slideCount - this.currentSlide) % this.options.slidesToScroll, event.data.message) {
            case "previous":
                $lis = 0 === b ? this.options.slidesToScroll : this.options.slidesToShow - b;
                if (this.slideCount > this.options.slidesToShow) {
                    this.slideHandler(this.currentSlide - $lis, false, dontAnimate);
                }
                break;
            case "next":
                $lis = 0 === b ? this.options.slidesToScroll : b;
                if (this.slideCount > this.options.slidesToShow) {
                    this.slideHandler(this.currentSlide + $lis, false, dontAnimate);
                }
                break;
            case "index":
                event = 0 === event.data.index ? 0 : event.data.index || $lis.index() * this.options.slidesToScroll;
                this.slideHandler(this.checkNavigable(event), false, dontAnimate);
                $lis.children().trigger("focus");
        }
    };
    /**
     * @param {!Object} index
     * @return {?}
     */
    Slick.prototype.checkNavigable = function(index) {
        var navigables;
        var prevNavigable;
        if (navigables = this.getNavigableIndexes(), prevNavigable = 0, index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            var n;
            for (n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }
        return index;
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.cleanUpEvents = function() {
        if (this.options.dots && null !== this.$dots) {
            $("li", this.$dots).off("click.slick", this.changeSlide).off("mouseenter.slick", $.proxy(this.interrupt, this, true)).off("mouseleave.slick", $.proxy(this.interrupt, this, false));
            if (true === this.options.accessibility) {
                this.$dots.off("keydown.slick", this.keyHandler);
            }
        }
        this.$slider.off("focus.slick blur.slick");
        if (true === this.options.arrows && this.slideCount > this.options.slidesToShow) {
            if (this.$prevArrow) {
                this.$prevArrow.off("click.slick", this.changeSlide);
            }
            if (this.$nextArrow) {
                this.$nextArrow.off("click.slick", this.changeSlide);
            }
            if (true === this.options.accessibility) {
                if (this.$prevArrow) {
                    this.$prevArrow.off("keydown.slick", this.keyHandler);
                }
                if (this.$nextArrow) {
                    this.$nextArrow.off("keydown.slick", this.keyHandler);
                }
            }
        }
        this.$list.off("touchstart.slick mousedown.slick", this.swipeHandler);
        this.$list.off("touchmove.slick mousemove.slick", this.swipeHandler);
        this.$list.off("touchend.slick mouseup.slick", this.swipeHandler);
        this.$list.off("touchcancel.slick mouseleave.slick", this.swipeHandler);
        this.$list.off("click.slick", this.clickHandler);
        $(document).off(this.visibilityChange, this.visibility);
        this.cleanUpSlideEvents();
        if (true === this.options.accessibility) {
            this.$list.off("keydown.slick", this.keyHandler);
        }
        if (true === this.options.focusOnSelect) {
            $(this.$slideTrack).children().off("click.slick", this.selectHandler);
        }
        $(window).off("orientationchange.slick.slick-" + this.instanceUid, this.orientationChange);
        $(window).off("resize.slick.slick-" + this.instanceUid, this.resize);
        $("[draggable!=true]", this.$slideTrack).off("dragstart", this.preventDefault);
        $(window).off("load.slick.slick-" + this.instanceUid, this.setPosition);
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.cleanUpSlideEvents = function() {
        this.$list.off("mouseenter.slick", $.proxy(this.interrupt, this, true));
        this.$list.off("mouseleave.slick", $.proxy(this.interrupt, this, false));
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.cleanUpRows = function() {
        var photoText;
        if (1 < this.options.rows) {
            (photoText = this.$slides.children().children()).removeAttr("style");
            this.$slider.empty().append(photoText);
        }
    };
    /**
     * @param {!Event} event
     * @return {undefined}
     */
    Slick.prototype.clickHandler = function(event) {
        if (false === this.shouldClick) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }
    };
    /**
     * @param {boolean} keepPosition
     * @return {undefined}
     */
    Slick.prototype.destroy = function(keepPosition) {
        this.autoPlayClear();
        this.touchObject = {};
        this.cleanUpEvents();
        $(".slick-cloned", this.$slider).detach();
        if (this.$dots) {
            this.$dots.remove();
        }
        if (this.$prevArrow && this.$prevArrow.length) {
            this.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");
            if (this.htmlExpr.test(this.options.prevArrow)) {
                this.$prevArrow.remove();
            }
        }
        if (this.$nextArrow && this.$nextArrow.length) {
            this.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");
            if (this.htmlExpr.test(this.options.nextArrow)) {
                this.$nextArrow.remove();
            }
        }
        if (this.$slides) {
            this.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function() {
                $(this).attr("style", $(this).data("originalStyling"));
            });
            this.$slideTrack.children(this.options.slide).detach();
            this.$slideTrack.detach();
            this.$list.detach();
            this.$slider.append(this.$slides);
        }
        this.cleanUpRows();
        this.$slider.removeClass("slick-slider");
        this.$slider.removeClass("slick-initialized");
        this.$slider.removeClass("slick-dotted");
        /** @type {boolean} */
        this.unslicked = true;
        if (!keepPosition) {
            this.$slider.trigger("destroy", [this]);
        }
    };
    /**
     * @param {number} i
     * @return {undefined}
     */
    Slick.prototype.disableTransition = function(i) {
        var c = {};
        /** @type {string} */
        c[this.transitionType] = "";
        if (false === this.options.fade) {
            this.$slideTrack.css(c);
        } else {
            this.$slides.eq(i).css(c);
        }
    };
    /**
     * @param {number} slideIndex
     * @param {!Function} callback
     * @return {undefined}
     */
    Slick.prototype.fadeSlide = function(slideIndex, callback) {
        var _ = this;
        if (false === _.cssTransitions) {
            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });
            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);
        } else {
            _.applyTransition(slideIndex);
            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });
            if (callback) {
                setTimeout(function() {
                    _.disableTransition(slideIndex);
                    callback.call();
                }, _.options.speed);
            }
        }
    };
    /**
     * @param {number} i
     * @return {undefined}
     */
    Slick.prototype.fadeSlideOut = function(i) {
        if (false === this.cssTransitions) {
            this.$slides.eq(i).animate({
                opacity: 0,
                zIndex: this.options.zIndex - 2
            }, this.options.speed, this.options.easing);
        } else {
            this.applyTransition(i);
            this.$slides.eq(i).css({
                opacity: 0,
                zIndex: this.options.zIndex - 2
            });
        }
    };
    /** @type {function(!Object): undefined} */
    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {
        if (null !== filter) {
            this.$slidesCache = this.$slides;
            this.unload();
            this.$slideTrack.children(this.options.slide).detach();
            this.$slidesCache.filter(filter).appendTo(this.$slideTrack);
            this.reinit();
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.focusHandler = function() {
        var _ = this;
        _.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*", function(event) {
            event.stopImmediatePropagation();
            var $passwordList = $(this);
            setTimeout(function() {
                if (_.options.pauseOnFocus) {
                    _.focussed = $passwordList.is(":focus");
                    _.autoPlay();
                }
            }, 0);
        });
    };
    /** @type {function(): ?} */
    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {
        return this.currentSlide;
    };
    /**
     * @return {?}
     */
    Slick.prototype.getDotCount = function() {
        /** @type {number} */
        var nextScrollTop = 0;
        /** @type {number} */
        var scrollTop = 0;
        /** @type {number} */
        var _ref1 = 0;
        if (true === this.options.infinite) {
            if (this.slideCount <= this.options.slidesToShow) {
                ++_ref1;
            } else {
                for (; nextScrollTop < this.slideCount;) {
                    ++_ref1;
                    nextScrollTop = scrollTop + this.options.slidesToScroll;
                    scrollTop = scrollTop + (this.options.slidesToScroll <= this.options.slidesToShow ? this.options.slidesToScroll : this.options.slidesToShow);
                }
            }
        } else {
            if (true === this.options.centerMode) {
                _ref1 = this.slideCount;
            } else {
                if (this.options.asNavFor) {
                    for (; nextScrollTop < this.slideCount;) {
                        ++_ref1;
                        nextScrollTop = scrollTop + this.options.slidesToScroll;
                        scrollTop = scrollTop + (this.options.slidesToScroll <= this.options.slidesToShow ? this.options.slidesToScroll : this.options.slidesToShow);
                    }
                } else {
                    /** @type {number} */
                    _ref1 = 1 + Math.ceil((this.slideCount - this.options.slidesToShow) / this.options.slidesToScroll);
                }
            }
        }
        return _ref1 - 1;
    };
    /**
     * @param {number} slideIndex
     * @return {?}
     */
    Slick.prototype.getLeft = function(slideIndex) {
        var i;
        var verticalHeight;
        var c;
        var HeaderContentBonusMultiplier;
        /** @type {number} */
        var headerScore = 0;
        return this.slideOffset = 0, verticalHeight = this.$slides.first().outerHeight(true), true === this.options.infinite ? (this.slideCount > this.options.slidesToShow && (this.slideOffset = this.slideWidth * this.options.slidesToShow * -1, HeaderContentBonusMultiplier = -1, true === this.options.vertical && true === this.options.centerMode && (2 === this.options.slidesToShow ? HeaderContentBonusMultiplier = -1.5 : 1 === this.options.slidesToShow && (HeaderContentBonusMultiplier = -2)), headerScore =
                verticalHeight * this.options.slidesToShow * HeaderContentBonusMultiplier), 0 != this.slideCount % this.options.slidesToScroll && slideIndex + this.options.slidesToScroll > this.slideCount && this.slideCount > this.options.slidesToShow && (slideIndex > this.slideCount ? (this.slideOffset = (this.options.slidesToShow - (slideIndex - this.slideCount)) * this.slideWidth * -1, headerScore = (this.options.slidesToShow - (slideIndex - this.slideCount)) * verticalHeight * -1) : (this.slideOffset = this.slideCount %
                this.options.slidesToScroll * this.slideWidth * -1, headerScore = this.slideCount % this.options.slidesToScroll * verticalHeight * -1))) : slideIndex + this.options.slidesToShow > this.slideCount && (this.slideOffset = (slideIndex + this.options.slidesToShow - this.slideCount) * this.slideWidth, headerScore = (slideIndex + this.options.slidesToShow - this.slideCount) * verticalHeight), this.slideCount <= this.options.slidesToShow && (this.slideOffset = 0, headerScore = 0), true === this.options.centerMode &&
            this.slideCount <= this.options.slidesToShow ? this.slideOffset = this.slideWidth * Math.floor(this.options.slidesToShow) / 2 - this.slideWidth * this.slideCount / 2 : true === this.options.centerMode && true === this.options.infinite ? this.slideOffset += this.slideWidth * Math.floor(this.options.slidesToShow / 2) - this.slideWidth : true === this.options.centerMode && (this.slideOffset = 0, this.slideOffset += this.slideWidth * Math.floor(this.options.slidesToShow / 2)), i = false === this.options.vertical ?
            slideIndex * this.slideWidth * -1 + this.slideOffset : slideIndex * verticalHeight * -1 + headerScore, true === this.options.variableWidth && (c = this.slideCount <= this.options.slidesToShow || false === this.options.infinite ? this.$slideTrack.children(".slick-slide").eq(slideIndex) : this.$slideTrack.children(".slick-slide").eq(slideIndex + this.options.slidesToShow), i = true === this.options.rtl ? c[0] ? -1 * (this.$slideTrack.width() - c[0].offsetLeft - c.width()) : 0 : c[0] ? -1 * c[0].offsetLeft :
                0, true === this.options.centerMode && (c = this.slideCount <= this.options.slidesToShow || false === this.options.infinite ? this.$slideTrack.children(".slick-slide").eq(slideIndex) : this.$slideTrack.children(".slick-slide").eq(slideIndex + this.options.slidesToShow + 1), i = true === this.options.rtl ? c[0] ? -1 * (this.$slideTrack.width() - c[0].offsetLeft - c.width()) : 0 : c[0] ? -1 * c[0].offsetLeft : 0, i = i + (this.$list.width() - c.outerWidth()) / 2)), i;
    };
    /** @type {function(?): ?} */
    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {
        return this.options[option];
    };
    /**
     * @return {?}
     */
    Slick.prototype.getNavigableIndexes = function() {
        var b;
        /** @type {number} */
        var a = 0;
        /** @type {number} */
        var i = 0;
        /** @type {!Array} */
        var indexes = [];
        if (false === this.options.infinite) {
            b = this.slideCount;
        } else {
            /** @type {number} */
            a = -1 * this.options.slidesToScroll;
            /** @type {number} */
            i = -1 * this.options.slidesToScroll;
            /** @type {number} */
            b = 2 * this.slideCount;
        }
        for (; a < b;) {
            indexes.push(a);
            a = i + this.options.slidesToScroll;
            i = i + (this.options.slidesToScroll <= this.options.slidesToShow ? this.options.slidesToScroll : this.options.slidesToShow);
        }
        return indexes;
    };
    /**
     * @return {?}
     */
    Slick.prototype.getSlick = function() {
        return this;
    };
    /**
     * @return {?}
     */
    Slick.prototype.getSlideCount = function() {
        var c;
        var left;
        var _ = this;
        return left = true === _.options.centerMode ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0, true === _.options.swipeToSlide ? (_.$slideTrack.find(".slick-slide").each(function(canCreateDiscussions, e) {
            if (e.offsetLeft - left + $(e).outerWidth() / 2 > -1 * _.swipeLeft) {
                return c = e, false;
            }
        }), Math.abs($(c).attr("data-slick-index") - _.currentSlide) || 1) : _.options.slidesToScroll;
    };
    /** @type {function(?, boolean): undefined} */
    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {
        this.changeSlide({
            data: {
                message: "index",
                index: parseInt(slide)
            }
        }, dontAnimate);
    };
    /**
     * @param {!Object} name
     * @return {undefined}
     */
    Slick.prototype.init = function(name) {
        if (!$(this.$slider).hasClass("slick-initialized")) {
            $(this.$slider).addClass("slick-initialized");
            this.buildRows();
            this.buildOut();
            this.setProps();
            this.startLoad();
            this.loadSlider();
            this.initializeEvents();
            this.updateArrows();
            this.updateDots();
            this.checkResponsive(true);
            this.focusHandler();
        }
        if (name) {
            this.$slider.trigger("init", [this]);
        }
        if (true === this.options.accessibility) {
            this.initADA();
        }
        if (this.options.autoplay) {
            /** @type {boolean} */
            this.paused = false;
            this.autoPlay();
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.initADA = function() {
        var _ = this;
        /** @type {number} */
        var userName = Math.ceil(_.slideCount / _.options.slidesToShow);
        var info = _.getNavigableIndexes().filter(function(i) {
            return 0 <= i && i < _.slideCount;
        });
        _.$slides.add(_.$slideTrack.find(".slick-cloned")).attr({
            "aria-hidden": "true",
            tabindex: "-1"
        }).find("a, input, button, select").attr({
            tabindex: "-1"
        });
        if (null !== _.$dots) {
            _.$slides.not(_.$slideTrack.find(".slick-cloned")).each(function(i) {
                var $sendIcon = info.indexOf(i);
                $(this).attr({
                    role: "tabpanel",
                    id: "slick-slide" + _.instanceUid + i,
                    tabindex: -1
                });
                if (-1 !== $sendIcon) {
                    $(this).attr({
                        "aria-describedby": "slick-slide-control" + _.instanceUid + $sendIcon
                    });
                }
            });
            _.$dots.attr("role", "tablist").find("li").each(function(hash) {
                var i = info[hash];
                $(this).attr({
                    role: "presentation"
                });
                $(this).find("button").first().attr({
                    role: "tab",
                    id: "slick-slide-control" + _.instanceUid + hash,
                    "aria-controls": "slick-slide" + _.instanceUid + i,
                    "aria-label": hash + 1 + " of " + userName,
                    "aria-selected": null,
                    tabindex: "-1"
                });
            }).eq(_.currentSlide).find("button").attr({
                "aria-selected": "true",
                tabindex: "0"
            }).end();
        }
        var index = _.currentSlide;
        var listIndex = index + _.options.slidesToShow;
        for (; index < listIndex; index++) {
            _.$slides.eq(index).attr("tabindex", 0);
        }
        _.activateADA();
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.initArrowEvents = function() {
        if (true === this.options.arrows && this.slideCount > this.options.slidesToShow) {
            this.$prevArrow.off("click.slick").on("click.slick", {
                message: "previous"
            }, this.changeSlide);
            this.$nextArrow.off("click.slick").on("click.slick", {
                message: "next"
            }, this.changeSlide);
            if (true === this.options.accessibility) {
                this.$prevArrow.on("keydown.slick", this.keyHandler);
                this.$nextArrow.on("keydown.slick", this.keyHandler);
            }
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.initDotEvents = function() {
        if (true === this.options.dots) {
            $("li", this.$dots).on("click.slick", {
                message: "index"
            }, this.changeSlide);
            if (true === this.options.accessibility) {
                this.$dots.on("keydown.slick", this.keyHandler);
            }
        }
        if (true === this.options.dots && true === this.options.pauseOnDotsHover) {
            $("li", this.$dots).on("mouseenter.slick", $.proxy(this.interrupt, this, true)).on("mouseleave.slick", $.proxy(this.interrupt, this, false));
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.initSlideEvents = function() {
        if (this.options.pauseOnHover) {
            this.$list.on("mouseenter.slick", $.proxy(this.interrupt, this, true));
            this.$list.on("mouseleave.slick", $.proxy(this.interrupt, this, false));
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.initializeEvents = function() {
        this.initArrowEvents();
        this.initDotEvents();
        this.initSlideEvents();
        this.$list.on("touchstart.slick mousedown.slick", {
            action: "start"
        }, this.swipeHandler);
        this.$list.on("touchmove.slick mousemove.slick", {
            action: "move"
        }, this.swipeHandler);
        this.$list.on("touchend.slick mouseup.slick", {
            action: "end"
        }, this.swipeHandler);
        this.$list.on("touchcancel.slick mouseleave.slick", {
            action: "end"
        }, this.swipeHandler);
        this.$list.on("click.slick", this.clickHandler);
        $(document).on(this.visibilityChange, $.proxy(this.visibility, this));
        if (true === this.options.accessibility) {
            this.$list.on("keydown.slick", this.keyHandler);
        }
        if (true === this.options.focusOnSelect) {
            $(this.$slideTrack).children().on("click.slick", this.selectHandler);
        }
        $(window).on("orientationchange.slick.slick-" + this.instanceUid, $.proxy(this.orientationChange, this));
        $(window).on("resize.slick.slick-" + this.instanceUid, $.proxy(this.resize, this));
        $("[draggable!=true]", this.$slideTrack).on("dragstart", this.preventDefault);
        $(window).on("load.slick.slick-" + this.instanceUid, this.setPosition);
        $(this.setPosition);
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.initUI = function() {
        if (true === this.options.arrows && this.slideCount > this.options.slidesToShow) {
            this.$prevArrow.show();
            this.$nextArrow.show();
        }
        if (true === this.options.dots && this.slideCount > this.options.slidesToShow) {
            this.$dots.show();
        }
    };
    /**
     * @param {!Event} event
     * @return {undefined}
     */
    Slick.prototype.keyHandler = function(event) {
        if (!event.target.tagName.match("TEXTAREA|INPUT|SELECT")) {
            if (37 === event.keyCode && true === this.options.accessibility) {
                this.changeSlide({
                    data: {
                        message: true === this.options.rtl ? "next" : "previous"
                    }
                });
            } else {
                if (39 === event.keyCode && true === this.options.accessibility) {
                    this.changeSlide({
                        data: {
                            message: true === this.options.rtl ? "previous" : "next"
                        }
                    });
                }
            }
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.lazyLoad = function() {
        /**
         * @param {!Object} obj
         * @return {undefined}
         */
        function loadImages(obj) {
            $("img[data-lazy]", obj).each(function() {
                var image = $(this);
                var imageSource = $(this).attr("data-lazy");
                var imageSrcSet = $(this).attr("data-srcset");
                var toggleImageSource = $(this).attr("data-sizes") || _.$slider.attr("data-sizes");
                /** @type {!Element} */
                var imageToLoad = document.createElement("img");
                /**
                 * @return {undefined}
                 */
                imageToLoad.onload = function() {
                    image.animate({
                        opacity: 0
                    }, 100, function() {
                        if (imageSrcSet) {
                            image.attr("srcset", imageSrcSet);
                            if (toggleImageSource) {
                                image.attr("sizes", toggleImageSource);
                            }
                        }
                        image.attr("src", imageSource).animate({
                            opacity: 1
                        }, 200, function() {
                            image.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading");
                        });
                        _.$slider.trigger("lazyLoaded", [_, image, imageSource]);
                    });
                };
                /**
                 * @return {undefined}
                 */
                imageToLoad.onerror = function() {
                    image.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error");
                    _.$slider.trigger("lazyLoadError", [_, image, imageSource]);
                };
                imageToLoad.src = imageSource;
            });
        }
        var container;
        var i;
        var index;
        var _ = this;
        if (true === _.options.centerMode ? true === _.options.infinite ? index = (i = _.currentSlide + (_.options.slidesToShow / 2 + 1)) + _.options.slidesToShow + 2 : (i = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1)), index = _.options.slidesToShow / 2 + 3 + _.currentSlide) : (i = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide, index = Math.ceil(i + _.options.slidesToShow), true === _.options.fade && (0 < i && i--, index <= _.slideCount && index++)),
            container = _.$slider.find(".slick-slide").slice(i, index), "anticipated" === _.options.lazyLoad) {
            --i;
            var l = _.$slider.find(".slick-slide");
            /** @type {number} */
            var m = 0;
            for (; m < _.options.slidesToScroll; m++) {
                if (0 > i) {
                    /** @type {number} */
                    i = _.slideCount - 1;
                }
                container = (container = container.add(l.eq(i))).add(l.eq(index));
                i--;
                index++;
            }
        }
        loadImages(container);
        if (_.slideCount <= _.options.slidesToShow) {
            loadImages(_.$slider.find(".slick-slide"));
        } else {
            if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
                loadImages(_.$slider.find(".slick-cloned").slice(0, _.options.slidesToShow));
            } else {
                if (0 === _.currentSlide) {
                    loadImages(_.$slider.find(".slick-cloned").slice(-1 * _.options.slidesToShow));
                }
            }
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.loadSlider = function() {
        this.setPosition();
        this.$slideTrack.css({
            opacity: 1
        });
        this.$slider.removeClass("slick-loading");
        this.initUI();
        if ("progressive" === this.options.lazyLoad) {
            this.progressiveLazyLoad();
        }
    };
    /** @type {function(): undefined} */
    Slick.prototype.next = Slick.prototype.slickNext = function() {
        this.changeSlide({
            data: {
                message: "next"
            }
        });
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.orientationChange = function() {
        this.checkResponsive();
        this.setPosition();
    };
    /** @type {function(): undefined} */
    Slick.prototype.pause = Slick.prototype.slickPause = function() {
        this.autoPlayClear();
        /** @type {boolean} */
        this.paused = true;
    };
    /** @type {function(): undefined} */
    Slick.prototype.play = Slick.prototype.slickPlay = function() {
        this.autoPlay();
        /** @type {boolean} */
        this.options.autoplay = true;
        /** @type {boolean} */
        this.interrupted = this.focussed = this.paused = false;
    };
    /**
     * @param {!Object} index
     * @return {undefined}
     */
    Slick.prototype.postSlide = function(index) {
        if (!this.unslicked) {
            this.$slider.trigger("afterChange", [this, index]);
            /** @type {boolean} */
            this.animating = false;
            if (this.slideCount > this.options.slidesToShow) {
                this.setPosition();
            }
            /** @type {null} */
            this.swipeLeft = null;
            if (this.options.autoplay) {
                this.autoPlay();
            }
            if (true === this.options.accessibility) {
                this.initADA();
                if (this.options.focusOnChange) {
                    $(this.$slides.get(this.currentSlide)).attr("tabindex", 0).focus();
                }
            }
        }
    };
    /** @type {function(): undefined} */
    Slick.prototype.prev = Slick.prototype.slickPrev = function() {
        this.changeSlide({
            data: {
                message: "previous"
            }
        });
    };
    /**
     * @param {!Event} event
     * @return {undefined}
     */
    Slick.prototype.preventDefault = function(event) {
        event.preventDefault();
    };
    /**
     * @param {number} tryCount
     * @return {undefined}
     */
    Slick.prototype.progressiveLazyLoad = function(tryCount) {
        tryCount = tryCount || 1;
        var image;
        var imageSource;
        var imageSrcSet;
        var toggleImageSource;
        var imageToLoad;
        var _ = this;
        var waitingIssues = $("img[data-lazy]", _.$slider);
        if (waitingIssues.length) {
            image = waitingIssues.first();
            imageSource = image.attr("data-lazy");
            imageSrcSet = image.attr("data-srcset");
            toggleImageSource = image.attr("data-sizes") || _.$slider.attr("data-sizes");
            /**
             * @return {undefined}
             */
            (imageToLoad = document.createElement("img")).onload = function() {
                if (imageSrcSet) {
                    image.attr("srcset", imageSrcSet);
                    if (toggleImageSource) {
                        image.attr("sizes", toggleImageSource);
                    }
                }
                image.attr("src", imageSource).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading");
                if (true === _.options.adaptiveHeight) {
                    _.setPosition();
                }
                _.$slider.trigger("lazyLoaded", [_, image, imageSource]);
                _.progressiveLazyLoad();
            };
            /**
             * @return {undefined}
             */
            imageToLoad.onerror = function() {
                if (3 > tryCount) {
                    setTimeout(function() {
                        _.progressiveLazyLoad(tryCount + 1);
                    }, 500);
                } else {
                    image.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error");
                    _.$slider.trigger("lazyLoadError", [_, image, imageSource]);
                    _.progressiveLazyLoad();
                }
            };
            imageToLoad.src = imageSource;
        } else {
            _.$slider.trigger("allImagesLoaded", [_]);
        }
    };
    /**
     * @param {!Function} height
     * @return {undefined}
     */
    Slick.prototype.refresh = function(height) {
        var currentSlide;
        /** @type {number} */
        currentSlide = this.slideCount - this.options.slidesToShow;
        if (!this.options.infinite && this.currentSlide > currentSlide) {
            /** @type {number} */
            this.currentSlide = currentSlide;
        }
        if (this.slideCount <= this.options.slidesToShow) {
            /** @type {number} */
            this.currentSlide = 0;
        }
        currentSlide = this.currentSlide;
        this.destroy(true);
        $.extend(this, this.initials, {
            currentSlide: currentSlide
        });
        this.init();
        if (!height) {
            this.changeSlide({
                data: {
                    message: "index",
                    index: currentSlide
                }
            }, false);
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.registerBreakpoints = function() {
        var i;
        var currentBreakpoint;
        var l;
        var _ = this;
        var value = _.options.responsive || null;
        if ("array" === $.type(value) && value.length) {
            _.respondTo = _.options.respondTo || "window";
            for (i in value) {
                if (l = _.breakpoints.length - 1, value.hasOwnProperty(i)) {
                    currentBreakpoint = value[i].breakpoint;
                    for (; 0 <= l;) {
                        if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
                            _.breakpoints.splice(l, 1);
                        }
                        l--;
                    }
                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = value[i].settings;
                }
            }
            _.breakpoints.sort(function(a, b) {
                return _.options.mobileFirst ? a - b : b - a;
            });
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.reinit = function() {
        this.$slides = this.$slideTrack.children(this.options.slide).addClass("slick-slide");
        this.slideCount = this.$slides.length;
        if (this.currentSlide >= this.slideCount && 0 !== this.currentSlide) {
            this.currentSlide -= this.options.slidesToScroll;
        }
        if (this.slideCount <= this.options.slidesToShow) {
            /** @type {number} */
            this.currentSlide = 0;
        }
        this.registerBreakpoints();
        this.setProps();
        this.setupInfinite();
        this.buildArrows();
        this.updateArrows();
        this.initArrowEvents();
        this.buildDots();
        this.updateDots();
        this.initDotEvents();
        this.cleanUpSlideEvents();
        this.initSlideEvents();
        this.checkResponsive(false, true);
        if (true === this.options.focusOnSelect) {
            $(this.$slideTrack).children().on("click.slick", this.selectHandler);
        }
        this.setSlideClasses("number" == typeof this.currentSlide ? this.currentSlide : 0);
        this.setPosition();
        this.focusHandler();
        /** @type {boolean} */
        this.paused = !this.options.autoplay;
        this.autoPlay();
        this.$slider.trigger("reInit", [this]);
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.resize = function() {
        var _ = this;
        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function() {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if (!_.unslicked) {
                    _.setPosition();
                }
            }, 50);
        }
    };
    /** @type {function(number, (number|string), (number|string)): ?} */
    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(val, index, removeBefore) {
        if (val = "boolean" == typeof val ? true === val ? 0 : this.slideCount - 1 : true === index ? --val : val, 1 > this.slideCount || 0 > val || val > this.slideCount - 1) {
            return false;
        }
        this.unload();
        if (true === removeBefore) {
            this.$slideTrack.children().remove();
        } else {
            this.$slideTrack.children(this.options.slide).eq(val).remove();
        }
        this.$slides = this.$slideTrack.children(this.options.slide);
        this.$slideTrack.children(this.options.slide).detach();
        this.$slideTrack.append(this.$slides);
        this.$slidesCache = this.$slides;
        this.reinit();
    };
    /**
     * @param {number} position
     * @return {undefined}
     */
    Slick.prototype.setCSS = function(position) {
        var c;
        var g;
        var toggle = {};
        if (true === this.options.rtl) {
            /** @type {number} */
            position = -position;
        }
        /** @type {string} */
        c = "left" == this.positionProp ? Math.ceil(position) + "px" : "0px";
        /** @type {string} */
        g = "top" == this.positionProp ? Math.ceil(position) + "px" : "0px";
        /** @type {number} */
        toggle[this.positionProp] = position;
        if (false === this.transformsEnabled) {
            this.$slideTrack.css(toggle);
        } else {
            toggle = {};
            if (false === this.cssTransitions) {
                /** @type {string} */
                toggle[this.animType] = "translate(" + c + ", " + g + ")";
                this.$slideTrack.css(toggle);
            } else {
                /** @type {string} */
                toggle[this.animType] = "translate3d(" + c + ", " + g + ", 0px)";
                this.$slideTrack.css(toggle);
            }
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.setDimensions = function() {
        if (false === this.options.vertical) {
            if (true === this.options.centerMode) {
                this.$list.css({
                    padding: "0px " + this.options.centerPadding
                });
            }
        } else {
            this.$list.height(this.$slides.first().outerHeight(true) * this.options.slidesToShow);
            if (true === this.options.centerMode) {
                this.$list.css({
                    padding: this.options.centerPadding + " 0px"
                });
            }
        }
        this.listWidth = this.$list.width();
        this.listHeight = this.$list.height();
        if (false === this.options.vertical && false === this.options.variableWidth) {
            /** @type {number} */
            this.slideWidth = Math.ceil(this.listWidth / this.options.slidesToShow);
            this.$slideTrack.width(Math.ceil(this.slideWidth * this.$slideTrack.children(".slick-slide").length));
        } else {
            if (true === this.options.variableWidth) {
                this.$slideTrack.width(5E3 * this.slideCount);
            } else {
                /** @type {number} */
                this.slideWidth = Math.ceil(this.listWidth);
                this.$slideTrack.height(Math.ceil(this.$slides.first().outerHeight(true) * this.$slideTrack.children(".slick-slide").length));
            }
        }
        /** @type {number} */
        var othersWidth = this.$slides.first().outerWidth(true) - this.$slides.first().width();
        if (false === this.options.variableWidth) {
            this.$slideTrack.children(".slick-slide").width(this.slideWidth - othersWidth);
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.setFade = function() {
        var stringOrNumberPropType;
        var _ = this;
        _.$slides.each(function(index, entryEl) {
            /** @type {number} */
            stringOrNumberPropType = _.slideWidth * index * -1;
            if (true === _.options.rtl) {
                $(entryEl).css({
                    position: "relative",
                    right: stringOrNumberPropType,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(entryEl).css({
                    position: "relative",
                    left: stringOrNumberPropType,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });
        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.setHeight = function() {
        if (1 === this.options.slidesToShow && true === this.options.adaptiveHeight && false === this.options.vertical) {
            var data = this.$slides.eq(this.currentSlide).outerHeight(true);
            this.$list.css("height", data);
        }
    };
    /** @type {function(string, ?, string): undefined} */
    Slick.prototype.setOption = Slick.prototype.slickSetOption = function(key, value, text) {
        var i;
        var name;
        var result;
        var type;
        var _ = this;
        /** @type {boolean} */
        var children = false;
        if ("object" === $.type(key) ? (name = key, children = value, type = "multiple") : "string" === $.type(key) && (name = key, result = value, children = text, "responsive" === key && "array" === $.type(value) ? type = "responsive" : void 0 !== value && (type = "single")), "single" === type) {
            _.options[name] = result;
        } else {
            if ("multiple" === type) {
                $.each(name, function(name, loadedPlugin) {
                    _.options[name] = loadedPlugin;
                });
            } else {
                if ("responsive" === type) {
                    for (i in result) {
                        if ("array" !== $.type(_.options.responsive)) {
                            /** @type {!Array} */
                            _.options.responsive = [result[i]];
                        } else {
                            /** @type {number} */
                            key = _.options.responsive.length - 1;
                            for (; 0 <= key;) {
                                if (_.options.responsive[key].breakpoint === result[i].breakpoint) {
                                    _.options.responsive.splice(key, 1);
                                }
                                key--;
                            }
                            _.options.responsive.push(result[i]);
                        }
                    }
                }
            }
        }
        if (children) {
            _.unload();
            _.reinit();
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.setPosition = function() {
        this.setDimensions();
        this.setHeight();
        if (false === this.options.fade) {
            this.setCSS(this.getLeft(this.currentSlide));
        } else {
            this.setFade();
        }
        this.$slider.trigger("setPosition", [this]);
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.setProps = function() {
        /** @type {!CSSStyleDeclaration} */
        var bodyStyle = document.body.style;
        /** @type {string} */
        this.positionProp = true === this.options.vertical ? "top" : "left";
        if ("top" === this.positionProp) {
            this.$slider.addClass("slick-vertical");
        } else {
            this.$slider.removeClass("slick-vertical");
        }
        if (!(void 0 === bodyStyle.WebkitTransition && void 0 === bodyStyle.MozTransition && void 0 === bodyStyle.msTransition)) {
            if (true === this.options.useCSS) {
                /** @type {boolean} */
                this.cssTransitions = true;
            }
        }
        if (this.options.fade) {
            if ("number" == typeof this.options.zIndex) {
                if (3 > this.options.zIndex) {
                    /** @type {number} */
                    this.options.zIndex = 3;
                }
            } else {
                this.options.zIndex = this.defaults.zIndex;
            }
        }
        if (void 0 !== bodyStyle.OTransform) {
            /** @type {string} */
            this.animType = "OTransform";
            /** @type {string} */
            this.transformType = "-o-transform";
            /** @type {string} */
            this.transitionType = "OTransition";
            if (void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.webkitPerspective) {
                /** @type {boolean} */
                this.animType = false;
            }
        }
        if (void 0 !== bodyStyle.MozTransform) {
            /** @type {string} */
            this.animType = "MozTransform";
            /** @type {string} */
            this.transformType = "-moz-transform";
            /** @type {string} */
            this.transitionType = "MozTransition";
            if (void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.MozPerspective) {
                /** @type {boolean} */
                this.animType = false;
            }
        }
        if (void 0 !== bodyStyle.webkitTransform) {
            /** @type {string} */
            this.animType = "webkitTransform";
            /** @type {string} */
            this.transformType = "-webkit-transform";
            /** @type {string} */
            this.transitionType = "webkitTransition";
            if (void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.webkitPerspective) {
                /** @type {boolean} */
                this.animType = false;
            }
        }
        if (void 0 !== bodyStyle.msTransform) {
            /** @type {string} */
            this.animType = "msTransform";
            /** @type {string} */
            this.transformType = "-ms-transform";
            /** @type {string} */
            this.transitionType = "msTransition";
            if (void 0 === bodyStyle.msTransform) {
                /** @type {boolean} */
                this.animType = false;
            }
        }
        if (void 0 !== bodyStyle.transform && false !== this.animType) {
            /** @type {string} */
            this.animType = "transform";
            /** @type {string} */
            this.transformType = "transform";
            /** @type {string} */
            this.transitionType = "transition";
        }
        this.transformsEnabled = this.options.useTransform && null !== this.animType && false !== this.animType;
    };
    /**
     * @param {number} index
     * @return {undefined}
     */
    Slick.prototype.setSlideClasses = function(index) {
        var centerOffset;
        var allSlides;
        var indexOffset;
        if (allSlides = this.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), this.$slides.eq(index).addClass("slick-current"), true === this.options.centerMode) {
            /** @type {number} */
            var x1 = 0 == this.options.slidesToShow % 2 ? 1 : 0;
            /** @type {number} */
            centerOffset = Math.floor(this.options.slidesToShow / 2);
            if (true === this.options.infinite) {
                if (index >= centerOffset && index <= this.slideCount - 1 - centerOffset) {
                    this.$slides.slice(index - centerOffset + x1, index + centerOffset + 1).addClass("slick-active").attr("aria-hidden", "false");
                } else {
                    indexOffset = this.options.slidesToShow + index;
                    allSlides.slice(indexOffset - centerOffset + 1 + x1, indexOffset + centerOffset + 2).addClass("slick-active").attr("aria-hidden", "false");
                }
                if (0 === index) {
                    allSlides.eq(allSlides.length - 1 - this.options.slidesToShow).addClass("slick-center");
                } else {
                    if (index === this.slideCount - 1) {
                        allSlides.eq(this.options.slidesToShow).addClass("slick-center");
                    }
                }
            }
            this.$slides.eq(index).addClass("slick-center");
        } else {
            if (0 <= index && index <= this.slideCount - this.options.slidesToShow) {
                this.$slides.slice(index, index + this.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false");
            } else {
                if (allSlides.length <= this.options.slidesToShow) {
                    allSlides.addClass("slick-active").attr("aria-hidden", "false");
                } else {
                    /** @type {number} */
                    centerOffset = this.slideCount % this.options.slidesToShow;
                    indexOffset = true === this.options.infinite ? this.options.slidesToShow + index : index;
                    if (this.options.slidesToShow == this.options.slidesToScroll && this.slideCount - index < this.options.slidesToShow) {
                        allSlides.slice(indexOffset - (this.options.slidesToShow - centerOffset), indexOffset + centerOffset).addClass("slick-active").attr("aria-hidden", "false");
                    } else {
                        allSlides.slice(indexOffset, indexOffset + this.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false");
                    }
                }
            }
        }
        if (!("ondemand" !== this.options.lazyLoad && "anticipated" !== this.options.lazyLoad)) {
            this.lazyLoad();
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.setupInfinite = function() {
        var i;
        var slideIndex;
        var limit;
        if (true === this.options.fade && (this.options.centerMode = false), true === this.options.infinite && false === this.options.fade && (slideIndex = null, this.slideCount > this.options.slidesToShow)) {
            limit = true === this.options.centerMode ? this.options.slidesToShow + 1 : this.options.slidesToShow;
            i = this.slideCount;
            for (; i > this.slideCount - limit; --i) {
                /** @type {number} */
                slideIndex = i - 1;
                $(this.$slides[slideIndex]).clone(true).attr("id", "").attr("data-slick-index", slideIndex - this.slideCount).prependTo(this.$slideTrack).addClass("slick-cloned");
            }
            /** @type {number} */
            i = 0;
            for (; i < limit + this.slideCount; i = i + 1) {
                /** @type {number} */
                slideIndex = i;
                $(this.$slides[slideIndex]).clone(true).attr("id", "").attr("data-slick-index", slideIndex + this.slideCount).appendTo(this.$slideTrack).addClass("slick-cloned");
            }
            this.$slideTrack.find(".slick-cloned").find("[id]").each(function() {
                $(this).attr("id", "");
            });
        }
    };
    /**
     * @param {boolean} n
     * @return {undefined}
     */
    Slick.prototype.interrupt = function(n) {
        if (!n) {
            this.autoPlay();
        }
        /** @type {boolean} */
        this.interrupted = n;
    };
    /**
     * @param {!Object} args
     * @return {undefined}
     */
    Slick.prototype.selectHandler = function(args) {
        args = $(args.target).is(".slick-slide") ? $(args.target) : $(args.target).parents(".slick-slide");
        if (!(args = parseInt(args.attr("data-slick-index")))) {
            /** @type {number} */
            args = 0;
        }
        if (this.slideCount <= this.options.slidesToShow) {
            this.slideHandler(args, false, true);
        } else {
            this.slideHandler(args);
        }
    };
    /**
     * @param {number} index
     * @param {boolean} sync
     * @param {boolean} dontAnimate
     * @return {?}
     */
    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {
        var targetSlide;
        var animSlide;
        var slideLeft;
        var navTarget;
        /** @type {null} */
        var targetLeft = null;
        var _ = this;
        if (sync = sync || false, !(true === _.animating && true === _.options.waitForAnimate || true === _.options.fade && _.currentSlide === index)) {
            if (false === sync && _.asNavFor(index), targetSlide = index, targetLeft = _.getLeft(targetSlide), slideLeft = _.getLeft(_.currentSlide), _.currentLeft = null === _.swipeLeft ? slideLeft : _.swipeLeft, false === _.options.infinite && false === _.options.centerMode && (0 > index || index > _.getDotCount() * _.options.slidesToScroll)) {
                if (false === _.options.fade) {
                    targetSlide = _.currentSlide;
                    if (true !== dontAnimate) {
                        _.animateSlide(slideLeft, function() {
                            _.postSlide(targetSlide);
                        });
                    } else {
                        _.postSlide(targetSlide);
                    }
                }
            } else {
                if (false === _.options.infinite && true === _.options.centerMode && (0 > index || index > _.slideCount - _.options.slidesToScroll)) {
                    if (false === _.options.fade) {
                        targetSlide = _.currentSlide;
                        if (true !== dontAnimate) {
                            _.animateSlide(slideLeft, function() {
                                _.postSlide(targetSlide);
                            });
                        } else {
                            _.postSlide(targetSlide);
                        }
                    }
                } else {
                    if (_.options.autoplay && clearInterval(_.autoPlayTimer), animSlide = 0 > targetSlide ? 0 != _.slideCount % _.options.slidesToScroll ? _.slideCount - _.slideCount % _.options.slidesToScroll : _.slideCount + targetSlide : targetSlide >= _.slideCount ? 0 != _.slideCount % _.options.slidesToScroll ? 0 : targetSlide - _.slideCount : targetSlide, _.animating = true, _.$slider.trigger("beforeChange", [_, _.currentSlide, animSlide]), index = _.currentSlide, _.currentSlide = animSlide, _.setSlideClasses(_.currentSlide),
                        _.options.asNavFor && (navTarget = (navTarget = _.getNavTarget()).slick("getSlick")).slideCount <= navTarget.options.slidesToShow && navTarget.setSlideClasses(_.currentSlide), _.updateDots(), _.updateArrows(), true === _.options.fade) {
                        return true !== dontAnimate ? (_.fadeSlideOut(index), _.fadeSlide(animSlide, function() {
                            _.postSlide(animSlide);
                        })) : _.postSlide(animSlide), void _.animateHeight();
                    }
                    if (true !== dontAnimate) {
                        _.animateSlide(targetLeft, function() {
                            _.postSlide(animSlide);
                        });
                    } else {
                        _.postSlide(animSlide);
                    }
                }
            }
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.startLoad = function() {
        if (true === this.options.arrows && this.slideCount > this.options.slidesToShow) {
            this.$prevArrow.hide();
            this.$nextArrow.hide();
        }
        if (true === this.options.dots && this.slideCount > this.options.slidesToShow) {
            this.$dots.hide();
        }
        this.$slider.addClass("slick-loading");
    };
    /**
     * @return {?}
     */
    Slick.prototype.swipeDirection = function() {
        var d;
        var c;
        var val;
        var f;
        return d = this.touchObject.startX - this.touchObject.curX, c = this.touchObject.startY - this.touchObject.curY, val = Math.atan2(c, d), 0 > (f = Math.round(180 * val / Math.PI)) && (f = 360 - Math.abs(f)), 45 >= f && 0 <= f ? false === this.options.rtl ? "left" : "right" : 360 >= f && 315 <= f ? false === this.options.rtl ? "left" : "right" : 135 <= f && 225 >= f ? false === this.options.rtl ? "right" : "left" : true === this.options.verticalSwiping ? 35 <= f && 135 >= f ? "down" : "up" : "vertical";
    };
    /**
     * @param {string} event
     * @return {?}
     */
    Slick.prototype.swipeEnd = function(event) {
        var slideCount;
        if (this.dragging = false, this.swiping = false, this.scrolling) {
            return this.scrolling = false, false;
        }
        if (this.interrupted = false, this.shouldClick = !(10 < this.touchObject.swipeLength), void 0 === this.touchObject.curX) {
            return false;
        }
        if (true === this.touchObject.edgeHit && this.$slider.trigger("edge", [this, this.swipeDirection()]), this.touchObject.swipeLength >= this.touchObject.minSwipe) {
            switch (event = this.swipeDirection()) {
                case "left":
                case "down":
                    slideCount = this.options.swipeToSlide ? this.checkNavigable(this.currentSlide + this.getSlideCount()) : this.currentSlide + this.getSlideCount();
                    /** @type {number} */
                    this.currentDirection = 0;
                    break;
                case "right":
                case "up":
                    slideCount = this.options.swipeToSlide ? this.checkNavigable(this.currentSlide - this.getSlideCount()) : this.currentSlide - this.getSlideCount();
                    /** @type {number} */
                    this.currentDirection = 1;
            }
            if ("vertical" != event) {
                this.slideHandler(slideCount);
                this.touchObject = {};
                this.$slider.trigger("swipe", [this, event]);
            }
        } else {
            if (this.touchObject.startX !== this.touchObject.curX) {
                this.slideHandler(this.currentSlide);
                this.touchObject = {};
            }
        }
    };
    /**
     * @param {!Event} event
     * @return {undefined}
     */
    Slick.prototype.swipeHandler = function(event) {
        if (!(false === this.options.swipe || "ontouchend" in document && false === this.options.swipe || false === this.options.draggable && -1 !== event.type.indexOf("mouse"))) {
            switch (this.touchObject.fingerCount = event.originalEvent && void 0 !== event.originalEvent.touches ? event.originalEvent.touches.length : 1, this.touchObject.minSwipe = this.listWidth / this.options.touchThreshold, true === this.options.verticalSwiping && (this.touchObject.minSwipe = this.listHeight / this.options.touchThreshold), event.data.action) {
                case "start":
                    this.swipeStart(event);
                    break;
                case "move":
                    this.swipeMove(event);
                    break;
                case "end":
                    this.swipeEnd(event);
            }
        }
    };
    /**
     * @param {!Event} event
     * @return {?}
     */
    Slick.prototype.swipeMove = function(event) {
        var curLeft;
        var anchorX;
        var swipeLength;
        var positionOffset;
        var undefined;
        var verticalSwipeLength;
        return undefined = void 0 !== event.originalEvent ? event.originalEvent.touches : null, !(!this.dragging || this.scrolling || undefined && 1 !== undefined.length) && (curLeft = this.getLeft(this.currentSlide), this.touchObject.curX = void 0 !== undefined ? undefined[0].pageX : event.clientX, this.touchObject.curY = void 0 !== undefined ? undefined[0].pageY : event.clientY, this.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(this.touchObject.curX - this.touchObject.startX, 2))), verticalSwipeLength =
            Math.round(Math.sqrt(Math.pow(this.touchObject.curY - this.touchObject.startY, 2))), !this.options.verticalSwiping && !this.swiping && 4 < verticalSwipeLength ? (this.scrolling = true, false) : (true === this.options.verticalSwiping && (this.touchObject.swipeLength = verticalSwipeLength), anchorX = this.swipeDirection(), void 0 !== event.originalEvent && 4 < this.touchObject.swipeLength && (this.swiping = true, event.preventDefault()), positionOffset = (false === this.options.rtl ? 1 : -1) *
                (this.touchObject.curX > this.touchObject.startX ? 1 : -1), true === this.options.verticalSwiping && (positionOffset = this.touchObject.curY > this.touchObject.startY ? 1 : -1), swipeLength = this.touchObject.swipeLength, this.touchObject.edgeHit = false, false === this.options.infinite && (0 === this.currentSlide && "right" === anchorX || this.currentSlide >= this.getDotCount() && "left" === anchorX) && (swipeLength = this.touchObject.swipeLength * this.options.edgeFriction, this.touchObject.edgeHit =
                    true), false === this.options.vertical ? this.swipeLeft = curLeft + swipeLength * positionOffset : this.swipeLeft = curLeft + swipeLength * (this.$list.height() / this.listWidth) * positionOffset, true === this.options.verticalSwiping && (this.swipeLeft = curLeft + swipeLength * positionOffset), true !== this.options.fade && false !== this.options.touchMove && (true === this.animating ? (this.swipeLeft = null, false) : void this.setCSS(this.swipeLeft))));
    };
    /**
     * @param {!Event} event
     * @return {?}
     */
    Slick.prototype.swipeStart = function(event) {
        var undefined;
        if (this.interrupted = true, 1 !== this.touchObject.fingerCount || this.slideCount <= this.options.slidesToShow) {
            return this.touchObject = {}, false;
        }
        if (void 0 !== event.originalEvent && void 0 !== event.originalEvent.touches) {
            undefined = event.originalEvent.touches[0];
        }
        this.touchObject.startX = this.touchObject.curX = void 0 !== undefined ? undefined.pageX : event.clientX;
        this.touchObject.startY = this.touchObject.curY = void 0 !== undefined ? undefined.pageY : event.clientY;
        /** @type {boolean} */
        this.dragging = true;
    };
    /** @type {function(): undefined} */
    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {
        if (null !== this.$slidesCache) {
            this.unload();
            this.$slideTrack.children(this.options.slide).detach();
            this.$slidesCache.appendTo(this.$slideTrack);
            this.reinit();
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.unload = function() {
        $(".slick-cloned", this.$slider).remove();
        if (this.$dots) {
            this.$dots.remove();
        }
        if (this.$prevArrow && this.htmlExpr.test(this.options.prevArrow)) {
            this.$prevArrow.remove();
        }
        if (this.$nextArrow && this.htmlExpr.test(this.options.nextArrow)) {
            this.$nextArrow.remove();
        }
        this.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");
    };
    /**
     * @param {!Object} paramName
     * @return {undefined}
     */
    Slick.prototype.unslick = function(paramName) {
        this.$slider.trigger("unslick", [this, paramName]);
        this.destroy();
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.updateArrows = function() {
        Math.floor(this.options.slidesToShow / 2);
        if (true === this.options.arrows && this.slideCount > this.options.slidesToShow && !this.options.infinite) {
            this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            this.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            if (0 === this.currentSlide) {
                this.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                this.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            } else {
                if (this.currentSlide >= this.slideCount - this.options.slidesToShow && false === this.options.centerMode) {
                    this.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                    this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
                } else {
                    if (this.currentSlide >= this.slideCount - 1 && true === this.options.centerMode) {
                        this.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                        this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
                    }
                }
            }
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.updateDots = function() {
        if (null !== this.$dots) {
            this.$dots.find("li").removeClass("slick-active").end();
            this.$dots.find("li").eq(Math.floor(this.currentSlide / this.options.slidesToScroll)).addClass("slick-active");
        }
    };
    /**
     * @return {undefined}
     */
    Slick.prototype.visibility = function() {
        if (this.options.autoplay) {
            if (document[this.hidden]) {
                /** @type {boolean} */
                this.interrupted = true;
            } else {
                /** @type {boolean} */
                this.interrupted = false;
            }
        }
    };
    /**
     * @return {?}
     */
    $.fn.slick = function() {
        var i;
        var _;
        var opt = arguments[0];
        /** @type {!Array<?>} */
        var handler = Array.prototype.slice.call(arguments, 1);
        var l = this.length;
        /** @type {number} */
        i = 0;
        for (; i < l; i++) {
            if ("object" == typeof opt || void 0 === opt ? this[i].slick = new Slick(this[i], opt) : _ = this[i].slick[opt].apply(this[i].slick, handler), void 0 !== _) {
                return _;
            }
        }
        return this;
    };
});
(function(context, $) {
    /**
     * @return {undefined}
     */
    function init() {
        self.initContainer.each(function() {
            if (!$(this).hasClass("slick-initialized") && 0 < $(this).children().length) {
                $(this).slick(data);
            }
        });
        self.initContainer.on("afterChange", function() {
            self.window.trigger("resize");
        });
        if (!(!self.initContainer.data("unslick-for-desktop") || context.isTabletUserAgent || context.isMobileUserAgent)) {
            self.initContainer.slick("unslick");
        }
    }
    var self = {};
    var data = {
        enabled: true
    };
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.slick = {
        init: function(name) {
            name = name || {};
            data = $.extend(true, {}, data, name);
            if (data.enabled) {
                self.initContainer = data.container ? $(data.container) : $(".slick-slider");
                self.window = $(window);
                init();
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @param {?} element
     * @param {!Object} options
     * @return {undefined}
     */
    function Plugin(element, options) {
        /** @type {!Object} */
        this.options = options;
        this.$element = $(element);
        this.initCarousel();
    }
    var defaults = {
        prefix: "c-carousel",
        autoplay: false,
        autoplaySpeed: 3E3,
        arrows: true,
        prevArrow: '<button type="button" class="c-carousel__arrow c-carousel__arrow--left icon-arrow-left"></button>',
        nextArrow: '<button type="button" class="c-carousel__arrow c-carousel__arrow--right icon-arrow-right"></button>',
        customPaging: function() {
            return '<button class="c-carousel-dots__item" type="button" data-role="none" role="button" tabindex="0" />';
        },
        cssEase: "ease",
        dots: true,
        dotsClass: "c-carousel__dots",
        draggable: false,
        infinite: true,
        initialSlide: 0,
        lazyLoad: "ondemand",
        mobileFirst: true,
        slidesPerRow: 1,
        slidesToScroll: 1
    };
    Plugin.prototype = {
        initCarousel: function() {
            this.$element.slick(this.options);
        }
    };
    context.components = context.components || {};
    context.components.global = context.components.global || {};
    context.components.global.slickpureshots = {
        init: function(name, value) {
            name = $.extend({}, name, defaults);
            $(value || document).find(".c-carousel").each(function() {
                var data = $(this).data("carousel");
                if (!data) {
                    $(this).data("carousel", new Plugin(this, name));
                }
                return data;
            });
        }
    };
})(window.app = window.app || {}, jQuery);
(function(config, $) {
    /**
     * @return {undefined}
     */
    function _bindEvents() {
        self = {
            missmatchError: $("#missmatch"),
            registrationMismatch: $("#registration_missmatch"),
            loginPopup: $(".login_popup"),
            loginSubmit: $(".block_login .submit_button"),
            registrationSubmit: $(".block_registration .submit_button"),
            registrationButton: $(".login_popup .create_account_button"),
            blockLogin: $(".login_popup .block_login"),
            blockLoginGeneral: $(".block_login"),
            blockRegistration: $(".block_registration"),
            blockCreate: $(".block_create"),
            blockConfirmation: $(".block_confirm"),
            blockPromoLogin: $(".block_promo_login"),
            registrationForm: $("#RegistrationForm"),
            signInButton: $(".block_registration a.button"),
            continueShoppingButton: $(".block_confirm .promo_continue"),
            acoountShowButton: $(".block_confirm .promo_account"),
            resetPasswordLink: $(".password_reset"),
            accountCreateButton: $(".block_create .create_account_modal_btn")
        };
        self.privacyPolicyLink = self.loginPopup.find(".privacy_policy_link");
    }
    /**
     * @return {undefined}
     */
    function _render() {
        self.registrationForm.find(".formfield_mobile_number .textinput:not(:last-child)").on("keypress keyup change", function() {
            var $this = $(this);
            if ($this.val().length >= $this.attr("maxlength")) {
                $this.next().focus();
            }
        });
        if (recognizeResponse.observeLoginPopupDOM && self.loginPopup.length) {
            config.util.observeDOMModification(self.loginPopup, {
                attributes: true,
                attributeFilter: ["height", "style"],
                childList: true,
                subtree: true
            }, refresh);
        }
        $(document).on("password_reset.reopened", function(qr) {
            render(qr);
        });
    }
    /**
     * @return {undefined}
     */
    function refresh() {
        pm({
            target: window.parent,
            type: "loginpopup.resized",
            data: {
                isModal: config.util.getParameterValueFromUrl("modal"),
                height: $(this).outerHeight(true)
            }
        });
    }
    /**
     * @return {undefined}
     */
    function initFileList() {
        if ("promologin" in options.customParams && "true" === options.customParams.promologin) {
            if ("customerExists" in options.customParams && "true" === options.customParams.customerExists) {
                $(".promo_user_exists").show();
                $(".promo_user_register, .promo_content").hide();
                reset();
            } else {
                callback();
                self.continueShoppingButton.on("click", function(event) {
                    event.preventDefault();
                    pm({
                        target: window.parent,
                        type: "promoregisterpopup.close",
                        data: {}
                    });
                });
            }
        }
    }
    /**
     * @param {!Object} result
     * @return {undefined}
     */
    function success(result) {
        self.blockPromoLogin.hide();
        self.blockConfirmation.show();
        pm({
            target: window.parent,
            type: "promoregisterpopup.confirm"
        });
        self.acoountShowButton.on("click", function(event) {
            event.preventDefault();
            pm({
                target: window.parent,
                type: "accountLogin.authenticationSuccess",
                data: result
            });
        });
    }
    /**
     * @param {!Event} candidate
     * @return {undefined}
     */
    function callback(candidate) {
        if (candidate) {
            candidate.preventDefault();
        }
        if ("customParams" in config.page && "redirectToRegister" in config.page.customParams) {
            /** @type {boolean} */
            options.pmEventData.redirectToRegister = "true" == config.page.customParams.redirectToRegister;
        }
        if (!("redirectToRegister" in options.pmEventData && ("boolean" != typeof options.pmEventData.redirectToRegister || false !== options.pmEventData.redirectToRegister))) {
            self.blockLogin.hide();
            self.registrationButton.hide();
            self.blockCreate.hide();
            self.blockRegistration.show();
        }
        self.blockRegistration.find("form").validate().resetForm();
        pm({
            target: window.parent,
            type: "registrationform.shown",
            data: options.pmEventData
        });
        $(window).trigger("resize");
    }
    /**
     * @param {!Event} raw
     * @return {undefined}
     */
    function reset(raw) {
        if (raw) {
            raw.preventDefault();
        }
        self.blockRegistration.hide();
        self.blockLogin.show();
        self.registrationButton.show();
        self.blockCreate.show();
        self.blockLogin.find("form").validate().resetForm();
        $(window).trigger("resize");
    }
    /**
     * @return {undefined}
     */
    function init() {
        var type = config.util.getParameterValueFromUrl("_iframetype");
        if ("registration" === type || "login" === type) {
            self.blockRegistration.hide();
            self.blockLogin.hide();
        }
        if ("prepopulateEmailWith" in options.customParams && "" != options.customParams.prepopulateEmailWith) {
            var encodedPW = options.customParams.prepopulateEmailWith;
            self.loginPopup.find("input[id*='_email_']").val(encodedPW);
            self.loginPopup.find("input[id*='_login_username_']").val(encodedPW);
        }
        if ("https:" == window.location.protocol) {
            self.loginSubmit.on("click", submitForm);
            self.registrationSubmit.on("click", update);
        }
        self.signInButton.on("click", reset);
        self.privacyPolicyLink.on("click", function(event) {
            event.preventDefault();
            event = $(this).data();
            pm({
                target: window.parent,
                type: "global.openLink",
                data: {
                    url: {
                        http: event.httpHref || "",
                        https: event.httpsHref || ""
                    },
                    type: "modal",
                    parentDialogEventId: config.util.getParameterValueFromUrl("_event") || null,
                    cacheDisable: true
                }
            });
        });
        if (!options.isForgotPasswordModalDisabled) {
            $(document).on("click", ".password_reset", load);
        }
        $(document).on("accountLogin.refresh", start);
        $(document).on("resetPasswordPopup", initialize);
        pm.bind("resetPasswordPopup", function(connectionOptions) {
            initialize(connectionOptions);
        });
        pm.bind("dwSocialLogin.clicked", function(sourceDest) {
            window.location.href = config.util.getParameterValueFromUrl("referrerPage", sourceDest.href) ? sourceDest.href : config.util.appendParamToURL(sourceDest.href, "referrerPage", window.location.href);
        });
        $(document).on("click", ".dw-social-login", function(url) {
            url.preventDefault();
            url = $(this).attr("href");
            if ("loginpopup" == config.page.ns) {
                pm({
                    target: window.parent,
                    type: "dwSocialLogin.clicked",
                    data: {
                        href: url
                    }
                });
            } else {
                var index = config.util.getParameterValueFromUrl("returnURL", window.location.href);
                if (index) {
                    index = config.util.getParameterValueFromUrl("dwrrlogin", window.location.href) ? config.util.appendParamToURL(index, "dwrrlogin", config.util.getParameterValueFromUrl("dwrrlogin", window.location.href)) : index;
                    index = config.util.getParameterValueFromUrl("review_tab", window.location.href) ? config.util.appendParamToURL(index, "review_tab", config.util.getParameterValueFromUrl("review_tab", window.location.href)) : index;
                    window.location.href = config.util.appendParamToURL(url, "referrerPage", index);
                } else {
                    window.location.href = config.util.getParameterValueFromUrl("referrerPage", url) ? url : config.util.appendParamToURL(url, "referrerPage", window.location.href);
                }
            }
        });
        pm({
            target: window.parent,
            type: "loginpopup.loaded",
            data: {
                isModal: config.util.getParameterValueFromUrl("modal"),
                isWellcomeBack: config.util.getParameterValueFromUrl("welcomeback"),
                _event: "customParams" in options && "object" === typeof options.customParams && "_event" in options.customParams ? options.customParams._event : null
            }
        });
        self.loginPopup.on("focus", "input", function() {
            pm({
                target: window.parent,
                type: "loginpopup.lock",
                data: {}
            });
        });
        self.loginPopup.on("blur", "input", function() {
            pm({
                target: window.parent,
                type: "loginpopup.unlock",
                data: {}
            });
        });
        self.accountCreateButton.on("click", function(event) {
            /** @type {string} */
            var originalPath = window.parent.location.pathname;
            if (0 < originalPath.indexOf("lip-wardrobe-steps") || 0 < originalPath.indexOf("EngravingEnhanced")) {
                event.preventDefault();
                event.stopPropagation();
                window.parent.postMessage({
                    event_id: "create_account_clicked"
                }, window.parent.location.origin);
            }
        });
        if ("registration" === type) {
            setTimeout(callback, 500);
        } else {
            if ("login" === type) {
                reset();
            } else {
                if ("loginRegistration" === type) {
                    if (!("redirectToRegister" in options.pmEventData && false !== options.pmEventData.redirectToRegister)) {
                        self.blockLogin.show();
                        self.registrationButton.show();
                        self.blockCreate.show();
                        self.blockRegistration.show();
                    }
                    pm({
                        target: window.parent,
                        type: "registrationform.shown",
                        data: options.pmEventData
                    });
                    $(window).trigger("resize");
                }
            }
        }
    }
    /**
     * @return {?}
     */
    function submitForm() {
        var form = $("#" + options.loginFormId);
        config.validator.initForm(form);
        self.missmatchError.hide();
        if (form.validate().form()) {
            form = form.serializeArray();
            var selected;
            form.push({
                name: this.name,
                value: this.value
            });
            $.ajax({
                type: "POST",
                url: options.processLoginUrl,
                data: form,
                success: function(name, value, x) {
                    name = name || {};
                    var s;
                    try {
                        /** @type {*} */
                        s = JSON.parse(name);
                    } catch (N) {}
                    /** @type {*} */
                    selected = s;
                    if (void 0 !== selected) {
                        /** @type {*} */
                        name = selected;
                        /** @type {boolean} */
                        value = "bvappcode" in config.page.params && -1 < ["qa", "rr"].indexOf(config.page.params.bvappcode);
                        if (-1 !== location.href.indexOf("returnRawResponse")) {
                            pm({
                                target: window.parent,
                                type: "accountlogin.authenticationraw",
                                data: name
                            });
                        } else {
                            if (name.authenticated) {
                                if ("customParams" in config.page && "redirectAfterLogin" in config.page.customParams) {
                                    options.pmEventData.redirectAfterLogin = config.page.customParams.redirectAfterLogin;
                                }
                                if ("customLoginParams" in config.page && "desableRefreshPage" in config.page.customLoginParams) {
                                    options.pmEventData.desableRefreshPage = config.page.customLoginParams.desableRefreshPage;
                                }
                                if ("params" in config.page && "writereview" in config.page.params) {
                                    /** @type {boolean} */
                                    options.pmEventData.writereview = true;
                                }
                                if (value) {
                                    location.reload(true);
                                } else {
                                    if ("customredirect" in name && name.customredirect) {
                                        options.pmEventData.customredirect = name.customredirect;
                                    }
                                    if ("forcecustomredirect" in name && name.forcecustomredirect && "customredirect" in name && name.customredirect) {
                                        options.pmEventData.redirectAfterLogin = name.customredirect;
                                    }
                                    pm({
                                        target: window.parent,
                                        type: "accountLogin.authenticationSuccess",
                                        data: options.pmEventData
                                    });
                                }
                            } else {
                                self.missmatchError.html(name.errorMessage || config.resources.LOGIN_FAIL);
                                self.missmatchError.show();
                                pm({
                                    target: window.parent,
                                    type: "loginprocess.error",
                                    data: name
                                });
                                if ("resources" in config && "errorclassonloginfail" in config.resources && "true" === config.resources.errorclassonloginfail) {
                                    self.blockLoginGeneral.find(".f_field_email, .f_field_password").addClass("f_state_error");
                                }
                            }
                        }
                    } else {
                        if (config.ajax.isHtmlResponse(x)) {
                            pm({
                                target: window.parent,
                                type: "accountLogin.botDetectionVerification",
                                data: name
                            });
                        }
                    }
                }
            });
        }
        return false;
    }
    /**
     * @return {?}
     */
    function load() {
        if (options.pm) {
            pm({
                target: window.parent,
                type: "resetPasswordPopup",
                data: {
                    url: options.passwordResetDialog
                }
            });
        } else {
            initialize();
        }
        return false;
    }
    /**
     * @param {!Object} options
     * @return {undefined}
     */
    function initialize(options) {
        /** @type {string} */
        var url = "";
        if ("undefined" !== typeof options) {
            url = options.url;
            var protocol = config.util.getURLData(url).protocol;
            if ("http:" === window.location.protocol && "https:" === protocol) {
                window.location = options.url;
                return;
            }
        } else {
            url = options.passwordResetDialog;
        }
        self.createdDialog = config.dialog.open({
            target: "#password_reset_dialog",
            url: url,
            options: {
                dialogClass: "ui_resetpassword_dialog",
                bgiframe: true,
                autoOpen: false,
                modal: true,
                title: config.resources.RESET_PASSWORD_DIALOG_TITLE,
                overlay: {
                    opacity: .5,
                    background: "black"
                },
                resizable: false,
                close: function() {},
                open: function() {
                    render();
                }
            },
            callback: $.noop
        });
        $(document).on("parentDialog.close", function() {
            if (self.createdDialog.dialog("isOpen")) {
                self.createdDialog.dialog("close");
            }
        });
        $(document).on("dialog.opened", function() {
            var b = $(this).find("div.password_reset_page[data-reset-password-success]");
            if (b.length && b.data("reset-password-success")) {
                b = b.closest("div.ui-dialog");
                if (b.length) {
                    b.addClass("ui_resetpassword_confirm_dialog").removeClass("ui_resetpassword_dialog");
                }
            }
        });
    }
    /**
     * @param {!Object} options
     * @return {undefined}
     */
    function render(options) {
        var $modal = options && options.dialog || self.createdDialog;
        options = $(".ui-dialog-titlebar-close");
        $(document).trigger("password_reset.opened", {
            modal: $modal
        });
        $modal.on("click", ".submit_button", function() {
            var form = $modal.find("#PasswordResetForm");
            config.validator.initForm(form);
            return form.validate().form();
        });
        $modal.on("click", ".cancel_button", function() {
            $modal.dialog("close");
            return false;
        });
        options.on("touchstart", function() {
            if ($modal.dialog("isOpen")) {
                $modal.dialog("close");
            }
        });
    }
    /**
     * @return {?}
     */
    function update() {
        pm({
            target: window.parent,
            type: "registrationform.submit",
            data: {}
        });
        var repo = self.registrationForm;
        var warpPipe = "http" == options.parentProtocol ? options.loginCallbackUrl : options.secureLoginCallbackUrl;
        config.validator.initForm(repo);
        if (self.registrationMismatch.is(":visible")) {
            self.registrationMismatch.hide();
        }
        var res = {};
        if (options.noredirect) {
            res = {
                registrationSuccess: true,
                redirect: false
            };
            if ("bv" in options && "writereview" === options.bv) {
                res = $.extend(true, res, options.pmEventData);
            }
        } else {
            res = {
                registrationSuccess: true,
                redirect: {
                    path: options.loginRedirectUrl,
                    query: {
                        registerSuccess: true
                    }
                }
            };
        }
        if (repo.validate().form()) {
            repo = repo.serialize();
            /** @type {boolean} */
            var isNonTeamServiceOrApp = "promologin" in options.customParams && "true" === options.customParams.promologin;
            /** @type {boolean} */
            var l = "bvappcode" in config.page.params && -1 < ["qa", "rr"].indexOf(config.page.params.bvappcode);
            $.ajax({
                type: "POST",
                url: options.processRegistrationUrl,
                data: isNonTeamServiceOrApp ? repo + "&isPromoLogin=true" : repo,
                dataType: "json",
                success: function(name) {
                    name = name || {};
                    if (name.authenticated) {
                        if (l) {
                            location.reload(true);
                        } else {
                            if (isNonTeamServiceOrApp) {
                                success(res);
                            } else {
                                pm({
                                    target: window.parent,
                                    type: "accountLogin.authenticationSuccess",
                                    data: res
                                });
                            }
                        }
                    } else {
                        self.registrationMismatch.text(name.error).show();
                    }
                },
                error: function() {
                    location.href = warpPipe;
                }
            });
        }
        return false;
    }
    /**
     * @return {undefined}
     */
    function start() {
        _bindEvents();
        init();
    }
    var options = {};
    var self = {};
    var recognizeResponse = {
        observeLoginPopupDOM: true
    };
    config.components = config.components || {};
    config.components.account = config.components.account || {};
    config.components.account.login = {
        init: function(name) {
            options = {
                loginFormId: config.page.loginFormId || "",
                processLoginUrl: config.urls.processLoginUrl,
                processRegistrationUrl: config.urls.processRegistrationUrl,
                parentProtocol: config.page.parentProtocol || "",
                customParams: config.page.customParams || {},
                loginCallbackUrl: config.urls.loginCallbackUrl,
                secureLoginCallbackUrl: config.urls.secureLoginCallbackUrl,
                loginRedirectUrl: config.urls.loginRedirectUrl,
                passwordResetDialog: config.urls.passwordResetDialog,
                serverError: config.resources.LOGIN_POPUP_SERVER_ERROR,
                bv: config.page.bv || null,
                noredirect: config.util.getParameterValueFromUrl("noredirect"),
                pmEventData: {
                    _event: config.util.getParameterValueFromUrl("_event"),
                    redirect: false
                },
                isForgotPasswordModalDisabled: config.preferences.isForgotPasswordModalDisabled
            };
            if ("customLoginParams" in config.page) {
                options = $.extend(true, options, config.page.customLoginParams);
            }
            _bindEvents(name);
            _render(name);
            init();
            initFileList();
            if (name.pm) {
                options.pm = name.pm;
                pm({
                    target: window.parent,
                    type: "loginPopupWelcomeBack",
                    data: {
                        welcomeBack: $(".welcomeback_asset").length
                    }
                });
            }
        },
        setLoginParams: function(addtions) {
            if (addtions) {
                options = $.extend(true, options, addtions);
            }
        },
        loginCallback: function() {
            if (!("loyaltypresentation" != config.pageContextObject.ns && "loyalty" != config.pageContextObject.ns && "product" != config.pageContextObject.ns)) {
                window.location.reload();
            }
        },
        registrationCallback: function() {}
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @param {!Object} options
     * @return {?}
     */
    function login(options) {
        options.preventDefault();
        var p = $(this).closest("form");
        if (!p.valid()) {
            return false;
        }
        options = {
            url: self.util.ajaxUrl(p.attr("action")),
            method: "POST",
            cache: false,
            dataType: "json",
            data: p.serialize()
        };
        $.ajax(options).done(function(data) {
            if (data.success) {
                var pid = data.result.lineItemId;
                self.ajax.load({
                    url: self.urls.minicartGC,
                    data: {
                        lineItemId: pid
                    },
                    callback: function(name) {
                        if (win.egiftingSvs.length) {
                            var filter = $(win.giftcardAmountField.filter(":checked")[0]).attr("value");
                            var k = self.preferences.defaultGiftAmount;
                            if (p.length) {
                                p.find("input,textarea,select").not("[type='radio']").val("");
                                $("input[type='radio'][name='dwfrm_giftcert_purchase_amount']").parent().removeClass("f_checked");
                                $($("input[type='radio'][value='" + k + "']")[0]).attr("checked", true).parent().addClass("f_checked");
                                $(document).trigger("giftcert.addedToCart", {
                                    pid: pid,
                                    amount: filter
                                });
                                $(document).trigger("global.showMinicart", name);
                            }
                        } else {
                            filter = $("select[name*=giftcert_purchase_amount] option:selected").html();
                            if (p.length) {
                                p.find("input,textarea,select").val("");
                                p.find("select").trigger("util.selectOptionsUpdate");
                                $(document).trigger("giftcert.addedToCart", {
                                    pid: pid,
                                    amount: filter
                                });
                                $(document).trigger("global.showMinicart", name);
                            }
                        }
                    }
                });
            } else {
                update(data, p);
            }
        }).fail(function(b, value) {
            cb(value);
        });
    }
    /**
     * @param {!Object} options
     * @return {?}
     */
    function create(options) {
        options.preventDefault();
        var p = $(this).closest("form");
        if (!p.valid()) {
            return false;
        }
        options = {
            url: self.util.ajaxUrl(p.attr("action")),
            method: "POST",
            cache: false,
            dataType: "json",
            data: p.serialize()
        };
        var event = {
            giftCertForm: p,
            handled: false
        };
        $.ajax(options).done(function(initialState) {
            if (initialState.success) {
                self.dialog.close();
                $(document).trigger("giftcert.handleCartUpdate", event);
                if (!event.handled) {
                    self.page.refresh();
                }
            } else {
                update(initialState, p);
            }
        }).fail(function(b, value) {
            cb(value);
        });
    }
    /**
     * @param {!Object} options
     * @param {?} container
     * @return {?}
     */
    function register(options, container) {
        options.preventDefault();
        options = $(container).closest("form");
        if (options.find("#dwfrm_giftcert_balance_giftCertPin").length && (!options.find("#dwfrm_giftcert_balance_giftCertPin").valid() || !options.find("#dwfrm_giftcert_balance_giftCertID").valid()) || !options.find("#dwfrm_giftcert_balance_giftCertID").valid()) {
            return false;
        }
        if (self.preferences.enableInvisibleRecaptcha && options.find(".g-recaptcha").length) {
            win.checkbalancebutton.prop("disabled", true);
            options.find(".g-recaptcha").trigger("invisibleRecaptcha.validate", {
                callback: init.bind(this, options)
            });
        } else {
            win.checkbalancebutton.prop("disabled", true);
            init(options);
        }
    }
    /**
     * @param {!Object} $trigger
     * @param {?} options
     * @return {?}
     */
    function init($trigger, options) {
        if (!self.preferences.enableInvisibleRecaptcha && window.grecaptcha && "" == window.grecaptcha.getResponse() && ($trigger.find(".recaptchaerror").show(), "false" === self.resources.GIFT_CERT_CAPTCHA_EMPTY_ERROR_MSG)) {
            return false;
        }
        var options = {
            url: self.util.ajaxUrl($trigger.attr("action")),
            method: "POST",
            cache: false,
            data: $trigger.serialize()
        };
        $.ajax(options).done(function(obj, destBox, opt_cssFile) {
            if (self.preferences.isPXBotDetectionEnabled && self.ajax.isHtmlResponse(opt_cssFile)) {
                self.dialog.create({
                    target: $("<div/>").html(obj),
                    options: {
                        dialogClass: self.resources.giftCertificateDialogClass
                    }
                }).dialog("open");
            } else {
                win.checkbalancebutton.prop("disabled", false);
                destBox = $trigger.find(".balance");
                if (window.grecaptcha) {
                    if (self.preferences.enableInvisibleRecaptcha && "function" === typeof options) {
                        options();
                    } else {
                        window.grecaptcha.reset();
                    }
                }
                if (obj && obj.giftCertificate) {
                    $trigger.find(".js_gcError").remove();
                    if (win.egiftingSvs.length) {
                        $trigger.find(".balance-section .balance-field").html(obj.giftCertificate.balance);
                        win.checkBalanceForm.find(".gift-check-balance, .checkbalance__form, .balance-section").toggle();
                    } else {
                        destBox.html(self.resources.GIFT_CERT_BALANCE + " " + obj.giftCertificate.balance);
                    }
                } else {
                    obj = obj.error && "string" == typeof obj.error ? obj.error : self.resources.GIFT_CERT_INVALID;
                    obj = $("<span>").addClass("error_message js_gcError").html(obj);
                    destBox.html(obj);
                }
            }
        }).fail(function(b, value) {
            cb(value);
        });
    }
    /**
     * @param {!Object} data
     * @param {!Object} parent
     * @return {undefined}
     */
    function update(data, parent) {
        parent.find("span.error").remove();
        if (!data.success) {
            var i;
            for (i in data.errors.FormErrors) {
                var f = $("#" + i, parent).addClass("error").removeClass("valid").next(".error");
                if (!(f && 0 !== f.length)) {
                    f = $('<span data-for="' + i + '" data-generated="true" class="error" style=""></span>');
                    $("#" + i, parent).after(f);
                }
                f.text(data.errors.FormErrors[i].replace(/\\'/g, "'")).show();
            }
        }
    }
    /**
     * @param {string} value
     * @return {undefined}
     */
    function cb(value) {
        if ("parsererror" === value) {
            window.alert(self.resources.BAD_RESPONSE);
        } else {
            window.alert(self.resources.SERVER_CONNECTION_ERROR);
        }
    }
    /**
     * @return {undefined}
     */
    function new_indicator_dialog() {
        win.checkBalanceForm.find(".gift-check-balance, .checkbalance__form, .balance-section").toggle();
        win.checkBalanceForm.find("form")[0].reset();
    }
    /**
     * @return {undefined}
     */
    function processReview() {
        if ("" == win.giftcardField.val()) {
            win.giftcardField.val(win.giftcardThumbnail.first().attr("skuval"));
        }
    }
    var win;
    self.giftcert = {
        init: function() {
            var e = self.preferences.defaultGiftAmount;
            if (e) {
                $($("input[type='radio'][value='" + e + "']")[0]).attr("checked", true).parent().addClass("f_checked");
            }
            win = {
                document: $(document),
                addToCart: $("#AddToBasketButton"),
                updateInCart: $("#UpdateInBasketButton"),
                checkBalance: $("#CheckBalanceButton, .js-giftcert-check-balance"),
                checkbalancebutton: $("#CheckBalanceButton")
            };
            win.giftcardField = win.document.find("#gift-card-design-field");
            win.giftcardThumbnail = win.document.find(".card-thumbnail");
            win.giftcardAmountField = win.document.find("[name='dwfrm_giftcert_purchase_amount']");
            win.checkAnotherCard = win.document.find(".check-another-card");
            win.checkBalanceForm = win.document.find(".checkbalance__form_outer, .gift_cert_check_balance");
            win.egiftingSvs = win.document.find(".egifting-wrapper.svs");
            win.addToCart.on("click", login);
            win.updateInCart.on("click", create);
            win.checkBalance.on("click", self.giftcert.checkBalance);
            win.checkAnotherCard.on("click", new_indicator_dialog);
            win.giftcardAmountField.on("change", processReview);
            $(".recaptchaerror").hide();
        },
        checkBalance: function(callback) {
            register(callback, this);
        }
    };
})(window.app = window.app || {}, jQuery);
(function(app, $) {
    /**
     * @return {undefined}
     */
    function load() {
        self.trackerData = app.page.quickViewTrackerData || app.page.trackerData || null;
        self.currentPage = app.page.currentPage || app.page.type || null;
        self.tagConfigs = {};
        self.ns = app.page.ns;
        self.tagsOnPage = {};
        self.conversionConfig = {};
        self.mappings = {};
        if (window.location.hash && "trackerData" in self && self.trackerData && "categoryID" in self.trackerData && !self.trackerData.disableVirtualCategory) {
            /** @type {string} */
            var json = window.location.hash.substring(1);
            json = app.util.getQueryStringParams(json);
            if ("q" in json) {
                /** @type {string} */
                self.trackerData.categoryID = "Search";
            }
            if ("cm_vc" in json) {
                self.trackerData.categoryID = json.cm_vc;
            }
        }
        if (self.trackerData && "pageID" in self.trackerData) {
            if (app.isTabletUserAgent) {
                /** @type {string} */
                self.trackerData.pageID = "Tablet: " + self.trackerData.pageID;
            } else {
                if (app.isMobileUserAgent) {
                    /** @type {string} */
                    self.trackerData.pageID = "Mobile: " + self.trackerData.pageID;
                }
            }
        }
        if ("customconfig" in app.coremetrics) {
            self.mappings = "getMappings" in app.coremetrics.customconfig ? app.coremetrics.customconfig.getMappings() : {};
            self.tagConfigs = app.coremetrics.customconfig.getCustomTagConfigs();
            self.tagsOnPage = app.coremetrics.customconfig.getCustomPageTags()[self.currentPage] || app.coremetrics.customconfig.getCustomPageTags()[self.ns];
            self.tagsOnPage = $.merge($(app.coremetrics.customconfig.getCustomPageTags().global).slice() || [], self.tagsOnPage || []);
            self.conversionConfig = app.coremetrics.customconfig.getConversionConfig();
        } else {
            self.tagConfigs = app.coremetrics.globalconfig.getCustomTagConfigs();
            self.tagsOnPage = app.coremetrics.globalconfig.getCustomPageTags()[self.currentPage];
            if (!(self.tagsOnPage && self.tagsOnPage.length)) {
                self.tagsOnPage = app.coremetrics.globalconfig.getCustomPageTags()[app.page.type];
            }
            self.tagsOnPage = $.merge($(app.coremetrics.globalconfig.getCustomPageTags().global).slice() || [], self.tagsOnPage || []);
            self.conversionConfig = app.coremetrics.globalconfig.getConversionConfig();
        }
    }
    /**
     * @param {number} value
     * @return {undefined}
     */
    function find(value) {
        var options = value in data.eventsConfig ? data.eventsConfig[value] : [];
        value = "customEventsConfig" in data ? data.customEventsConfig[value] : {};
        if (options.length && value) {
            options = $.merge($(options).slice(), value);
        } else {
            if (!options.length && value && value.length) {
                /** @type {number} */
                options = value;
            }
        }
        if (data.customEventsConfig) {
            options = $.merge($(data.customEventsConfig.global).slice() || [], options || []);
        }
        options = $.merge($(data.eventsConfig.global).slice() || [], options || []);
        /** @type {number} */
        value = 0;
        for (; value < options.length; value++) {
            var k = options[value];
            if (k && k in data.eventsLib) {
                data.eventsLib[k](self.trackerData, self.mappings);
            }
        }
    }
    /**
     * @param {string} id
     * @param {number} data
     * @return {undefined}
     */
    function g(id, data) {
        if (id && data) {
            if (data.componentInited) {
                self.conversionConfig[id](data);
            }
        } else {
            if (self.tagsOnPage) {
                data = self.tagsOnPage;
                /** @type {number} */
                var i = 0;
                for (; i < data.length; i++) {
                    if (id = data[i], self.hasDataToTrack = false, "ShopAction5Tag" == id || "ShopAction9Tag" == id) {
                        if (self.trackerData && null != self.trackerData[id]) {
                            /** @type {number} */
                            var p = 0;
                            for (; p < self.trackerData[id].length; p++) {
                                var result = fn(id, self.trackerData[id][p]);
                                self.conversionConfig[id](result);
                            }
                        }
                    } else {
                        if (p = fn(id), self.hasDataToTrack) {
                            self.conversionConfig[id](p);
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {string} key
     * @param {boolean} a
     * @return {?}
     */
    function fn(key, a) {
        key = self.tagConfigs[key];
        if (!a && !self.trackerData && !key) {
            return null;
        }
        /** @type {!Array} */
        var result = [];
        /** @type {number} */
        var j = 0;
        for (; j < key.length; j++) {
            var h;
            if ("object" == typeof key[j]) {
                /** @type {boolean} */
                h = a;
                /** @type {!Array} */
                var t = [];
                var id = key[j];
                /** @type {number} */
                var i = 0;
                for (; i < id.length; i++) {
                    var a = h ? h[id[i]] : self.trackerData ? self.trackerData[id[i]] : null;
                    if ("object" === typeof a && null !== a) {
                        t = a;
                    } else {
                        t.push(a || null);
                    }
                }
                /** @type {(null|string)} */
                h = t ? t.join("-_-") : null;
            } else {
                if ((h = a ? a[key[j]] : self.trackerData ? self.trackerData[key[j]] : null) && self.mappings && self.mappings[key[j]] && self.mappings[key[j]][h.toLowerCase().replace(/[^a-z0-9]/g, "")]) {
                    h = self.mappings[key[j]][h.toLowerCase().replace(/[^a-z0-9]/g, "")];
                }
            }
            if ("object" != typeof key[j] && h) {
                /** @type {boolean} */
                self.hasDataToTrack = true;
            }
            result.push(h);
        }
        return result;
    }
    var self = {};
    var data = {
        eventsConfig: {},
        eventsLib: {},
        tagConfig: {},
        pageTagConfig: {},
        componentInited: false
    };
    app.coremetrics = {
        init: function() {
            if (!data.componentInited && (app.preferences.coremetricsEnabled || "trackerData" in app.page) && "function" == typeof cmMakeTag) {
                load();
                g();
                if ("globalconfig" in app.coremetrics) {
                    data.eventsConfig = app.coremetrics.globalconfig.getEventsConfig();
                    data.eventsLib = app.coremetrics.globalconfig.getEventsLib();
                    app.coremetrics.globalconfig.initListeners(self.currentPage, self.trackerData);
                }
                if ("customconfig" in app.coremetrics) {
                    data.customEventsConfig = app.coremetrics.customconfig.getEventsConfig();
                    data.eventsLib = $.extend(true, data.eventsLib, app.coremetrics.customconfig.getEventsLib() || {});
                    app.coremetrics.customconfig.initListeners(self.currentPage, self.trackerData);
                }
                find(self.currentPage);
                /** @type {boolean} */
                data.componentInited = true;
            }
        },
        initCache: function() {
            load();
        },
        sendTrackData: function(b, c) {
            g(b, c);
        },
        initEvents: function(callback, detach) {
            find(detach || self.trackerData.ns || self.trackerData.productViewType || self.currentPage || callback);
        },
        refreshEvents: function(item) {
            item = $.merge($(data.eventsConfig[item]).slice() || [], "customEventsConfig" in data && data.customEventsConfig[item] ? data.customEventsConfig[item] : []);
            /** @type {number} */
            var i = 0;
            for (; i < item.length; i++) {
                var name = item[i];
                if (name && name in data.eventsLib) {
                    data.eventsLib[name](self.trackerData);
                }
            }
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @return {undefined}
     */
    function init() {
        $(document).on("product.added", function(item, options) {
            item = options.recommendationBlock && options.recommendationTrackingInfo || self.page.quickViewTrackerData || self.page.trackerData;
            if ("object" == typeof options.trackingInfoExtention) {
                $.extend(item, options.trackingInfoExtention);
            }
            if (item && "UPC" in item) {
                $scope.addToCart(item);
            }
        });
        $(document).on("product.colorVariationChanged, product.variationChanged", function() {
            self.coremetrics.refreshEvents("variationChanged");
        });
        self.ui.main.on("search.update", function() {
            self.coremetrics.initCache();
            self.coremetrics.sendTrackData();
        });
        $(document).on("coremetrics.eventtracking", function(canCreateDiscussions, settings) {
            if (settings) {
                self.coremetrics.sendTrackData("ElementTag", [settings.eventID || "", settings.categoryID || ""]);
            }
        });
    }
    var query = {
        contentpage: ["contentPages"],
        global: ["PageviewTag", "RegistrationTag"],
        product: ["ProductviewTag"],
        homepage: ["ConversionEventTag"],
        search: [],
        MyAccount: ["ConversionEventTag"],
        Wishlist: ["ConversionEventTag"],
        order_details: ["ShopAction9Tag", "OrderTag"],
        customerservice: [],
        cart: ["ShopAction5Tag"],
        quickview: ["ProductviewTag"],
        checkout: [],
        orderconfirmation: ["ShopAction9Tag", "OrderTag"],
        contactusform: [],
        customclp: [],
        error: [],
        account: []
    };
    var data = {
        global: ["socialIconsClick", "logoClick", "registrationSubmitStart"],
        product: "newsletterSubscribtion productActions navigationClick minicartCheckoutClick socialLinks variationChange altImageWatched clickTabs lifeChatClick addthisLikeButtons".split(" "),
        homepage: ["newsletterSubscribtion", "navigationClick", "minicartCheckoutClick", "lifeChatClick"],
        search: ["newsletterSubscribtion", "navigationClick", "minicartCheckoutClick", "lifeChatClick"],
        MyAccount: ["newsletterSubscribtion", "navigationClick", "minicartCheckoutClick", "lifeChatClick", "accountProductActions"],
        Wishlist: ["newsletterSubscribtion", "navigationClick", "minicartCheckoutClick", "lifeChatClick", "accountProductActions"],
        OrderHistory: ["newsletterSubscribtion", "navigationClick", "minicartCheckoutClick", "lifeChatClick"],
        customerservice: ["newsletterSubscribtion", "navigationClick", "minicartCheckoutClick", "lifeChatClick"],
        cart: "newsletterSubscribtion giftWrapSelected removeProduct productActions navigationClick lifeChatClick".split(" "),
        quickview: ["productActions", "variationChange", "altImageWatched", "clickTabs", "lifeChatClick"],
        checkout: [],
        orderconfirmation: ["newsletterSubscribtion", "navigationClick", "lifeChatClick"],
        editProduct: ["productActions", "socialLinks", "variationChange", "altImageWatched", "clickTabs"],
        variationChanged: ["variationChange", "altImageWatched"],
        PDP: ["productActions", "variationChange", "altImageWatched", "clickTabs", "lifeChatClick"],
        loginpopup: []
    };
    var f = {
        contentPages: function(audiodevice) {
            cmCreatePageviewTag.apply(this, audiodevice);
            console.info("PageviewTag : ", audiodevice);
        },
        PageviewTag: function(audiodevice) {
            cmCreatePageviewTag.apply(this, audiodevice);
            console.info("PageviewTag : ", audiodevice);
        },
        ProductviewTag: function(audiodevice) {
            cmCreateProductviewTag.apply(this, audiodevice);
            console.info("ProductviewTag : ", audiodevice);
        },
        ShopAction5Tag: function(audiodevice) {
            cmCreateShopAction5Tag.apply(this, audiodevice);
            console.info("ShopAction5Tag : ", audiodevice);
            cmDisplayShops();
        },
        ShopAction9Tag: function(audiodevice) {
            cmCreateShopAction9Tag.apply(this, audiodevice);
            console.info("ShopAction9Tag : ", audiodevice);
            cmDisplayShops();
        },
        OrderTag: function(audiodevice) {
            cmCreateOrderTag.apply(this, audiodevice);
            console.info("OrderTag : ", audiodevice);
        },
        RegistrationTag: function(audiodevice) {
            cmCreateRegistrationTag.apply(this, audiodevice);
            console.info("RegistrationTag : ", audiodevice);
        },
        ElementTag: function(audiodevice) {
            cmCreateElementTag.apply(this, audiodevice);
            console.info("ElementTag : ", audiodevice);
        },
        PageElementTag: function(audiodevice) {
            cmCreatePageElementTag.apply(this, audiodevice);
            console.info("ElementTag : ", audiodevice);
        },
        ConversionEventTag: function(audiodevice) {
            cmCreateConversionEventTag.apply(this, audiodevice);
            console.info("ConversionEventTag : ", audiodevice);
        }
    };
    var e = {
        contentPages: ["content", "folder"],
        ProductviewTag: ["masterProductID", "productName", "categoryID", ["productViewType", "bvAverageRating", "bvReviewCount", "cm_vc", "color"]],
        PageviewTag: ["pageID", "categoryID", "searchString", "searchResults", ["refinements"]],
        RegistrationTag: "email email customerCity customerState customerPostalCode customerCountryCode".split(" "),
        ShopAction5Tag: ["masterProductID", "productName", "quantity", "unitPrice", "categoryID", ["UPC", "bvAverageRating", "bvReviewCount", "color", "SAPsize"]],
        ShopAction9Tag: ["masterProductID", "productName", "quantity", "unitPrice", "customerID", "orderID", "orderSubtotal", "categoryID", "UPC bvAverageRating bvReviewCount engraved color SAPsize".split(" ")],
        ConversionEventTag: ["eventID", "actionType", "eventCategoryID", "points", []],
        OrderTag: ["orderID", "orderSubtotal", "orderShipping", "customerID", "customerCity", "customerState", "customerPostalCode", ["couponCode", "shipMethod", "paymentMethod", "giftWrap", "checkoutType"]]
    };
    var $scope = {
        addToCart: function(item) {
            var value;
            var cookieName;
            if (item && item.setVCCookie && "trackerData" in self.page && "categoryID" in self.page.trackerData) {
                value = item.categoryID || self.page.trackerData.categoryID;
                cookieName = item.masterProductID || item.productID;
                self.util.setCookie(cookieName, value, {
                    expires: 1E6,
                    path: "/"
                });
            }
            if (null != item) {
                cookieName = item.masterProductID || item.productID;
                value = item.categoryID || "";
                var getdate = item.productName || "";
                var k = $("select[name=quantity]").val() || 1;
                var aInitP = item.unitPrice || "";
                /** @type {string} */
                item = [item.UPC, item.bvAverageRating, item.bvReviewCount, item.color, item.SAPsize].join("-_-");
                self.coremetrics.sendTrackData("ShopAction5Tag", [cookieName, getdate, k, aInitP, value, item]);
            }
        },
        variationChange: function() {
            $(".swatchanchor").on("click", function() {
                var r = $(this).data("id");
                self.coremetrics.sendTrackData("ElementTag", [r ? "Variation Changed: " + r : "Variation Changed", "Product Detail"]);
            });
        },
        altImageWatched: function(res) {
            $("#thumbnails li").on("click", function() {
                /** @type {string} */
                var e = "Alternate Product View " + (1 + $(this).index());
                /** @type {string} */
                var edge_ids = [res.masterProductID, res.productName].join("-_-");
                self.coremetrics.sendTrackData("PageElementTag", [e, "PDP Elements", edge_ids]);
            });
        },
        addthisLikeButtons: function() {
            if ("object" == typeof addthis) {
                addthis.addEventListener("addthis.menu.share", function(data) {
                    data = data.data.service;
                    /** @type {string} */
                    var th_field = "";
                    if ("facebook_like" == data) {
                        /** @type {string} */
                        th_field = "Facebook Share";
                    }
                    if ("tweet" == data) {
                        /** @type {string} */
                        th_field = "Twitter Share";
                    }
                    if ("google_plusone" == data) {
                        /** @type {string} */
                        th_field = "Google Share";
                    }
                    if (th_field) {
                        self.coremetrics.sendTrackData("ElementTag", [th_field, "Content Sharing"]);
                    }
                });
            }
        },
        clickTabs: function(res) {
            $(".product_detail").on("click", ".product_tabs li", function() {
                var e = $(this).find("a").text();
                /** @type {string} */
                var edge_ids = [res.masterProductID, res.productName].join("-_-");
                self.coremetrics.sendTrackData("PageElementTag", [e + " Tab", "Product Tabs", edge_ids]);
            });
        },
        lifeChatClick: function() {
            $("#lpchatheader, #lpchatmisc").on("click", function() {
                if (self.preferences.livePersonEnabled) {
                    self.coremetrics.sendTrackData("ElementTag", ["BUTTON - " + self.page.type, "LIVECHAT"]);
                }
            });
        },
        socialLinks: function(res) {
            if (null !== res) {
                self.ui.main.on("sociallinks.click", function(canCreateDiscussions, data) {
                    canCreateDiscussions = $(data.container).attr("title") || data.text;
                    /** @type {string} */
                    data = [res.masterProductID, res.productName].join("-_-");
                    if (canCreateDiscussions) {
                        self.coremetrics.sendTrackData("PageElementTag", [canCreateDiscussions, "Product Sharing", data]);
                    }
                });
            }
        },
        socialIconsClick: function() {
            $(".cm_social").on("click", function() {
                var d = $(this).data("trackingtext");
                if (d) {
                    self.coremetrics.sendTrackData("ElementTag", [d, "Social"]);
                }
            });
        },
        minicartCheckoutClick: function() {
            $(".mini_cart_link_cart, .mini_cart_link").on("click", function() {
                var d = $(this).find("span").text() || "Mini Shopping Cart";
                self.coremetrics.sendTrackData("ElementTag", [d, "Checkout"]);
            });
        },
        navigationClick: function() {
            $(document).on("click", ".category_link, .cta_link, .navigation_link, .utility_navigation_list a, .profile_list a", function() {
                var d = $(this).text();
                self.coremetrics.sendTrackData("ElementTag", [d, "Navigation"]);
            });
        },
        logoClick: function() {
            $(".logo").on("click", function() {
                self.coremetrics.sendTrackData("ElementTag", ["logo", "Universal Navigation"]);
            });
        },
        productActions: function(res) {
            $(".product_actions a, .send_to_friend").on("click", function() {
                var e = $(this).data("cm_elementid");
                var f = $(this).data("cm_categoryid");
                /** @type {string} */
                var edge_ids = [res.masterProductID, res.productName].join("-_-");
                self.coremetrics.sendTrackData("PageElementTag", [e, f, edge_ids]);
            });
            $(document).on("sendtofriend.loaded", function() {
                /** @type {string} */
                var edge_ids = [res.masterProductID, res.productName].join("-_-");
                self.coremetrics.sendTrackData("ConversionEventTag", ["Send Product to Friend", 1, "Email", 0, edge_ids]);
            });
            $(document).on("sendtofriend.sent", function() {
                /** @type {string} */
                var edge_ids = [res.masterProductID, res.productName].join("-_-");
                self.coremetrics.sendTrackData("ConversionEventTag", ["Send Product to Friend", 2, "Email", 0, edge_ids]);
            });
        },
        accountProductActions: function(array) {
            if (array && array.actionEventID) {
                /** @type {string} */
                var edge_ids = [array.actionEventProdictID, array.actionEventProdictName].join("-_-");
                self.coremetrics.sendTrackData("ConversionEventTag", [array.actionEventID, 2, array.actionEventCategoryID, 0, edge_ids]);
            }
        },
        removeProduct: function(id) {
            /** @type {!Array} */
            var message = id;
            if (message && message.productRemoved) {
                /** @type {!Array} */
                id = ["Remove", "Shopping Bag Tools", [message.removedProductID, message.removedProductName].join("-_-")];
                self.coremetrics.sendTrackData("ElementTag", id);
                self.util.setCookie(message.removedProductID, "", {
                    expires: -1
                });
            }
        },
        giftWrapSelected: function() {
            $(".js_isGift").find("input").on("change", function() {
                self.coremetrics.sendTrackData("ElementTag", ["Free Gift Wrap", "Shopping Bag Tools"]);
            });
        },
        newsletterSubscribtion: function(exhbs, source) {
            $(document).on("newsletter.submitted", function(animate, options) {
                animate = options && options.email;
                /** @type {(null|string)} */
                options = options ? "Email Sign Up " + options.source : null;
                /** @type {string} */
                var currentNick = "Email Sign Up";
                if (source && source.eventID && source.eventID[options.toLowerCase().replace(/[^a-z0-9]/g, "")]) {
                    options = source.eventID[options.toLowerCase().replace(/[^a-z0-9]/g, "")];
                }
                if (source && source.categoryID && source.categoryID[currentNick.toLowerCase().replace(/[^a-z0-9]/g, "")]) {
                    currentNick = source.categoryID[currentNick.toLowerCase().replace(/[^a-z0-9]/g, "")];
                }
                self.coremetrics.sendTrackData("RegistrationTag", [animate, animate]);
                self.coremetrics.sendTrackData("ConversionEventTag", [options, "1", currentNick, "0"]);
            });
            $(document).on("newsletter.success", function(a, n) {
                /** @type {(null|string)} */
                a = n ? "Email Sign Up " + n.source : null;
                /** @type {string} */
                n = "Email Sign Up";
                if (source && source.eventID && source.eventID[a.toLowerCase().replace(/[^a-z0-9]/g, "")]) {
                    a = source.eventID[a.toLowerCase().replace(/[^a-z0-9]/g, "")];
                }
                if (source && source.categoryID && source.categoryID[n.toLowerCase().replace(/[^a-z0-9]/g, "")]) {
                    n = source.categoryID[n.toLowerCase().replace(/[^a-z0-9]/g, "")];
                }
                self.coremetrics.sendTrackData("ConversionEventTag", [a, "2", n, "0"]);
            });
        },
        registrationSubmitStart: function(_wid_attr, data) {
            $("#RegistrationForm").on("submit", function() {
                /** @type {string} */
                var currentNick = "Create an Account";
                if (data && data.eventID && data.eventID[currentNick.toLowerCase().replace(/[^a-z0-9]/g, "")]) {
                    currentNick = data.eventID[currentNick.toLowerCase().replace(/[^a-z0-9]/g, "")];
                }
                self.coremetrics.sendTrackData("ConversionEventTag", [currentNick, 1, "My Account", 0]);
            });
        }
    };
    self.coremetrics = self.coremetrics || {};
    self.coremetrics.globalconfig = {
        getCustomPageTags: function() {
            return query;
        },
        getCustomTagConfigs: function() {
            return e;
        },
        getConversionConfig: function() {
            return f;
        },
        getEventsConfig: function() {
            return data;
        },
        getEventsLib: function() {
            return $scope;
        },
        initListeners: function() {
            init();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(self, $) {
    /**
     * @param {!Object} d
     * @param {string} args
     * @return {undefined}
     */
    function test(d, args) {
        if (args) {
            d.find("a").each(function() {
                var id = $(this).attr("href");
                if (id) {
                    var result = self.util.getUri(id);
                    if (result.queryParams.ct) {
                        /** @type {string} */
                        var path = encodeURIComponent(self.util.appendParamToURL(result.queryParams.ct, "cm_vc", args));
                        id = id.replace(encodeURIComponent(result.queryParams.ct), path);
                    } else {
                        id = self.util.appendParamToURL(id, "cm_vc", args);
                    }
                    $(this).attr("href", id);
                }
            });
            d.find("div.product_tile").each(function() {
                var d = $(this).attr("data-producturl");
                if (d) {
                    $(this).attr("data-producturl", self.util.appendParamToURL(d, "cm_vc", args));
                }
            });
        }
    }
    /**
     * @return {undefined}
     */
    function init() {
        $(document).on("coremetrics.eventtracking", function(canCreateDiscussions, settings) {
            if (settings) {
                self.coremetrics.sendTrackData("ElementTag", [settings.eventID || "", settings.categoryID || ""]);
            }
        });
        self.ui.main.on("dialog.opened", function(canCreateDiscussions, isSlidingUp) {
            self.coremetrics.initCache();
            self.coremetrics.sendTrackData();
            self.coremetrics.initEvents();
        });
        $("div.main").on("update", function() {
            self.page.setContexAfterAjaxCall();
        });
    }
    /** @type {string} */
    var type = "";
    var cache = {
        global: ["allPages", "PageviewTag", "RegistrationTag"],
        product: ["ProductviewTag"],
        storefront: ["ConversionEventTag"],
        search: [],
        MyAccount: ["ConversionEventTag"],
        Wishlist: ["ConversionEventTag"],
        order_details: ["ShopAction9Tag", "OrderTag"],
        customerservice: [],
        cart: ["ShopAction5Tag"],
        quickview: ["ProductviewTag"],
        checkout: [],
        orderconfirmation: ["ShopAction9Tag", "OrderTag"],
        register: ["ConversionEventTag"],
        account_show: ["ConversionEventTag"],
        shadefinder: ["ConversionEventTag"]
    };
    var data = {
        global: "footerShareLink countrySelect emailSignUp virtualCategory loginPopup likeButtons".split(" "),
        product: ["addToWishlistPDP", "notifyMe", "pdpVideoPopup"],
        storefront: [],
        search: [],
        MyAccount: [],
        Wishlist: [],
        OrderHistory: [],
        customerservice: [],
        cart: ["loginCheckout"],
        quickview: [],
        checkout: [],
        orderconfirmation: [],
        editProduct: [],
        variationChanged: [],
        PDP: [],
        loginpopup: [],
        colormirror: ["colorMirror"],
        moodboards: ["moodboard"],
        homepage: ["moodboard"],
        shadefinder: ["shadefinder"]
    };
    var l = {
        allPages: function(audiodevice) {
            cmCreatePageviewTag.apply(this, audiodevice);
            console.info("PageviewTag : ", audiodevice);
        },
        PageviewTag: function(b) {
            var track = b.join("_");
            if (type !== track) {
                type = track;
                cmCreatePageviewTag.apply(this, b);
                console.info("PageviewTag : ", b);
            }
        },
        ProductviewTag: function(audiodevice) {
            cmCreateProductviewTag.apply(this, audiodevice);
            console.info("ProductviewTag : ", audiodevice);
        },
        ShopAction5Tag: function(audiodevice) {
            cmCreateShopAction5Tag.apply(this, audiodevice);
            console.info("ShopAction5Tag : ", audiodevice);
            cmDisplayShops();
        },
        ShopAction9Tag: function(audiodevice) {
            cmCreateShopAction9Tag.apply(this, audiodevice);
            console.info("ShopAction9Tag : ", audiodevice);
            cmDisplayShops();
        },
        OrderTag: function(audiodevice) {
            cmCreateOrderTag.apply(this, audiodevice);
            console.info("OrderTag : ", audiodevice);
        },
        RegistrationTag: function(audiodevice) {
            cmCreateRegistrationTag.apply(this, audiodevice);
            console.info("RegistrationTag : ", audiodevice);
        },
        ElementTag: function(audiodevice) {
            cmCreateElementTag.apply(this, audiodevice);
            console.info("ElementTag : ", audiodevice);
        },
        PageElementTag: function(audiodevice) {
            cmCreatePageElementTag.apply(this, audiodevice);
            console.info("ElementTag : ", audiodevice);
        },
        ConversionEventTag: function(audiodevice) {
            cmCreateConversionEventTag.apply(this, audiodevice);
            console.info("ConversionEventTag : ", audiodevice);
        }
    };
    var m = {
        allPages: ["content", "folder"],
        ProductviewTag: ["masterProductID", "productName", "categoryID", ["productViewType", "bvAverageRating", "bvReviewCount", "color", "SAPsize"]],
        PageviewTag: ["pageID", "categoryID", "searchString", "searchResults", ["refinements"]],
        RegistrationTag: "email email customerCity customerState customerPostalCode customerCountryCode".split(" "),
        ShopAction5Tag: ["masterProductID", "productName", "quantity", "unitPrice", "categoryID", ["UPC", "bvAverageRating", "bvReviewCount", "color", "SAPsize"]],
        ShopAction9Tag: ["masterProductID", "productName", "quantity", "unitPrice", "email", "orderID", "orderSubtotal", "categoryID", ["UPC", "bvAverageRating", "bvReviewCount", "color", "SAPsize"]],
        ConversionEventTag: ["eventID", "actionType", "eventCategoryID", "points", "attributes"],
        OrderTag: ["orderID", "orderSubtotal", "orderShipping", "customerID", "customerCity", "customerState", "customerPostalCode", "couponCode shipMethod paymentMethod giftWrap giftCardUsed checkoutType".split(" ")]
    };
    var p = {
        addToCart: function(item) {
            if (item && item.setVCCookie && "categoryID" in item) {
                var value = item.categoryID || self.page.trackerData.categoryID;
                var cookieName = item.masterProductID || item.productID;
                self.util.setCookie(cookieName, value, {
                    expires: 1E6,
                    path: "/"
                });
            }
            if (null != item) {
                cookieName = item.masterProductID || item.productID;
                var getdate = item.productName || "";
                if ($("#QuickViewDialog:visible").size()) {
                    var k = $("#QuickViewDialog select[name=quantity]").val() || 1;
                    var inImageSize = $("#QuickViewDialog select.color-select option[value='" + $("#QuickViewDialog select.color-select").val() + "']").text() || item.color;
                    var topicUri6 = $("#QuickViewDialog select#va-size option[value='" + $("#QuickViewDialog select#va-size").val() + "']").text() || item.SAPsize;
                } else {
                    k = $("select[name=quantity]").val() || 1;
                    inImageSize = $("select.color-select option[value='" + $("select.color-select").val() + "']").text() || item.color;
                    topicUri6 = $("select#va-size option[value='" + $("select#va-size").val() + "']").text() || item.SAPsize;
                }
                var aInitP = item.unitPrice || "";
                value = item.categoryID || "";
                /** @type {string} */
                item = [item.UPC, item.bvAverageRating, item.bvReviewCount, inImageSize, topicUri6].join("-_-");
                self.coremetrics.sendTrackData("ShopAction5Tag", [cookieName, getdate, k, aInitP, value, item]);
            }
        },
        productActions: function(res) {
            $(".product_actions a").on("click", function(canCreateDiscussions) {
                canCreateDiscussions = $(this).data("cm_elementid");
                var f = $(this).data("cm_categoryid");
                if (canCreateDiscussions) {
                    /** @type {string} */
                    var edge_ids = [res.masterProductID, res.productName].join("-_-");
                    self.coremetrics.sendTrackData("PageElementTag", [canCreateDiscussions, f, edge_ids]);
                }
            });
            $(document).on("sendtofriend.loaded", function() {
                /** @type {string} */
                var edge_ids = [res.masterProductID, res.productName].join("-_-");
                self.coremetrics.sendTrackData("ConversionEventTag", ["Send Product to Friend", 1, "Email", 0, edge_ids]);
            });
            $(document).on("sendtofriend.sent", function() {
                /** @type {string} */
                var edge_ids = [res.masterProductID, res.productName].join("-_-");
                self.coremetrics.sendTrackData("ConversionEventTag", ["Send Product to Friend", 2, "Email", 0, edge_ids]);
            });
        },
        footerShareLink: function() {
            $(".cm_share-link").on("click", function(canCreateDiscussions) {
                if (canCreateDiscussions = $(this).data("trackingtext")) {
                    self.coremetrics.sendTrackData("ElementTag", [canCreateDiscussions, "Social"]);
                }
            });
        },
        countrySelect: function() {
            $(".header").on("click", ".customer_service_countries a", function(canCreateDiscussions) {
                if (canCreateDiscussions = $(this).text()) {
                    self.coremetrics.sendTrackData("ElementTag", [canCreateDiscussions + " Selected", "Country Selector"]);
                }
            });
        },
        addthisLikeButtons: function() {},
        socialLinks: function(b) {},
        likeButtons: function(res) {
            if ("object" == typeof addthis) {
                addthis.addEventListener("addthis.ready", function(b) {
                    /** @type {boolean} */
                    var d = true;
                    setInterval(function() {
                        if ($("#at3winshare-iframe:visible").size()) {
                            if (-1 != $("#at3winshare-iframe:visible").attr("src").indexOf("pinterest_share") && d) {
                                /** @type {boolean} */
                                d = false;
                                $(document).trigger("addthis.pinterestpopup.showed");
                            }
                        } else {
                            /** @type {boolean} */
                            d = true;
                        }
                    }, 3E3);
                });
                addthis.addEventListener("addthis.menu.share", function(data) {
                    /** @type {string} */
                    var e = "Content Share";
                    if ("product" == self.page.ns) {
                        /** @type {string} */
                        e = "Product Share";
                    }
                    data = data.data.service;
                    /** @type {string} */
                    var th_field = "";
                    if ("facebook_like" == data) {
                        /** @type {string} */
                        th_field = "Facebook Share";
                    }
                    if ("tweet" == data) {
                        /** @type {string} */
                        th_field = "Twitter Share";
                    }
                    if ("google_plusone" == data) {
                        /** @type {string} */
                        th_field = "Google Share";
                    }
                    if (th_field) {
                        self.coremetrics.sendTrackData("ElementTag", [th_field, e, [res.masterProductID, res.productName]]);
                    }
                });
                $(document).on("addthis.pinterestpopup.showed", function() {
                    /** @type {string} */
                    var c = "Content Share";
                    if ("product" == self.page.ns) {
                        /** @type {string} */
                        c = "Product Share";
                    }
                    self.coremetrics.sendTrackData("ElementTag", ["Pinterest Share", c, [res.masterProductID, res.productName]]);
                });
            }
        },
        pdpVideoPopup: function(res) {
            $(document).on("product.videopopup.loaded", function() {
                self.coremetrics.sendTrackData("ElementTag", [self.page.pdpvideopopup.pageID, self.page.pdpvideopopup.categoryID, [res.masterProductID, res.productName]]);
            });
        },
        altImageWatched: function(res) {
            $("#thumbnails li").on("click", function() {
                var e;
                var f;
                var alias;
                if ($(this).hasClass("taaz-models-list")) {
                    e = "Alternate Product View " + $(this).data("index");
                    /** @type {string} */
                    f = "INFINITE BY TAAZ";
                    /** @type {string} */
                    alias = [self.components.product.taaz.currentProduct().productLineName, self.components.product.taaz.currentProduct().productId, self.components.product.taaz.currentProduct().productName].join("-_-");
                } else {
                    /** @type {string} */
                    e = "Alternate Product View " + (1 + $(this).index());
                    /** @type {string} */
                    f = "PDP Elements";
                    /** @type {string} */
                    alias = [res.masterProductID, res.productName].join("-_-");
                }
                self.coremetrics.sendTrackData("ElementTag", [e, f, alias]);
            });
        },
        addToWishlistPDP: function(res) {
            $("#pdpMain .wishlist_action").on("click", function() {
                /** @type {string} */
                var edge_ids = [res.masterProductID, res.productName].join("-_-");
                self.coremetrics.sendTrackData("ConversionEventTag", ["Add to Wishlist", 1, "Wishlist", 0, edge_ids]);
            });
        },
        notifyMe: function(data) {
            $(document).on("notifyme_showdialog", function() {
                /** @type {string} */
                var edge_ids = [data.masterProductID, data.productName].join("-_-");
                self.coremetrics.sendTrackData("ConversionEventTag", ["Notify Me", 1, "Notify Me", 0, edge_ids]);
            });
            $(document).on("notifyme_done", function() {
                /** @type {string} */
                var edge_ids = [data.masterProductID, data.productName].join("-_-");
                self.coremetrics.sendTrackData("ConversionEventTag", ["Notify Me", 2, "Notify Me", 0, edge_ids]);
            });
        },
        newsletterSubscribtion: function() {},
        emailSignUp: function(body) {
            $(".sticky_header").on("click", "#newsletter_subscribe_link", function() {
                self.coremetrics.sendTrackData("ConversionEventTag", ["Email Sign Up Header", "1", "Email Sign Up", "0"]);
            });
            $(document).on("emailsignup_succes", function(canCreateDiscussions, pOne) {
                self.coremetrics.sendTrackData("ConversionEventTag", [pOne ? "Email Sign Up " + pOne.source : null, "2", "Email Sign Up", "0"]);
            });
            $(document).on("popup.show", function(canCreateDiscussions, e) {
                if ("modal-popup-2" === $(e.source).attr("id")) {
                    self.coremetrics.sendTrackData("ConversionEventTag", ["Email Sign Up Slot Open", "3", "Email Sign Up", "0"]);
                }
            });
        },
        colorMirror: function() {
            $(document).on("colormirror_save", function(canCreateDiscussions) {
                self.coremetrics.sendTrackData("ConversionEventTag", ["Save Color Mirror", "1", "Color Mirror", "0"]);
            });
            $(document).on("colormirror_save_done", function(canCreateDiscussions) {
                self.coremetrics.sendTrackData("ConversionEventTag", ["Save Color Mirror", "2", "Color Mirror", "0"]);
            });
            $(document).on("colormirror_addedtocart", function(canCreateDiscussions, item_obj) {
                /** @type {null} */
                var product = null;
                var data = $("#colormirror-tracking").data("tracking");
                $.each(item_obj.eans, function(data, id) {
                    product = data[id];
                    if (null != product) {
                        self.util.setCookie(product.masterProductID, product.categoryID, {
                            expires: 1E6,
                            path: "/"
                        });
                        /** @type {string} */
                        data = [product.UPC, product.bvAverageRating, product.bvReviewCount, product.color, product.size].join("-_-");
                        self.coremetrics.sendTrackData("ShopAction5Tag", [product.masterProductID, product.productName, 1, product.unitPrice, product.categoryID, data]);
                    }
                });
            });
            $(document).on("colormirror_carouselrendered", function(b) {
                test($("#colormirrir_carousel"), "colormirror");
            });
        },
        virtualCategory: function() {
            if ($(".you_may_also_like_minicart").size()) {
                test($(".you_may_also_like_minicart"), "xsellcartmwr");
            }
            $(document).on("callbackUpdateCartDone", function() {
                test($(".you_may_also_like_minicart"), "xsellcartmwr");
            });
            $(document).on("recommendations_loaded", function(b, name) {
                b = name.block;
                /** @type {string} */
                name = "";
                if (b.parents(".empty_search_recommendations").size()) {
                    /** @type {string} */
                    name = "xsellnosearch";
                }
                if (b.parents("#section_youmayalsolike").size()) {
                    /** @type {string} */
                    name = "xsellpdpymal";
                }
                if (b.parents("#section_yourroutine").size()) {
                    /** @type {string} */
                    name = "xsellpdpcyr";
                }
                test(b, name);
            });
            $(".sf_product .js_addtocart").click(function() {
                self.page.trackerData = $(this).parents(".product_actions").data("trackinginfo");
            });
        },
        loginPopup: function() {
            $(".login_popup button.submit_button").click(function() {
                var status = $(".login_popup input.f_email").val();
                self.util.setCookie("loginEmail", status, {
                    expires: 120,
                    path: "/"
                });
            });
            pm.bind("accountLogin.authenticationSuccess", function(canCreateDiscussions) {
                canCreateDiscussions = self.util.getCookie("loginEmail");
                self.util.deleteCookie("loginEmail");
                self.coremetrics.sendTrackData("RegistrationTag", [canCreateDiscussions, canCreateDiscussions]);
            });
        },
        loginCheckout: function() {
            /**
             * @param {?} formatters
             * @param {?} customFormatters
             * @return {undefined}
             */
            self.components.cart.logincheckout.hookFinishedLogin = function(formatters, customFormatters) {
                self.coremetrics.sendTrackData("RegistrationTag", [formatters, formatters]);
            };
        },
        moodboard: function() {
            $(document).on("moodboard.popupcontent.loaded", function() {
                self.coremetrics.sendTrackData("ElementTag", [self.page.moodpopup.pageID, self.page.moodpopup.categoryID]);
            });
        }
    };
    self.coremetrics = self.coremetrics || {};
    self.coremetrics.customconfig = {
        getCustomPageTags: function() {
            return cache;
        },
        getCustomTagConfigs: function() {
            return m;
        },
        getConversionConfig: function() {
            return l;
        },
        getEventsConfig: function() {
            return data;
        },
        getEventsLib: function() {
            return p;
        },
        initListeners: function() {
            init();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(app, $) {
    /**
     * @return {undefined}
     */
    function render() {
        self.trackerData = app.page.quickViewTrackerData || app.page.trackerData || null;
        self.currentPage = app.page.currentPage || app.page.type || null;
        self.tagConfigs = {};
        self.tagsOnPage = {};
        self.conversionConfig = {};
        if (window.location.hash && "trackerData" in self && self.trackerData && "categoryID" in self.trackerData && !self.trackerData.disableVirtualCategory) {
            /** @type {string} */
            var QueryLanguageComponent = window.location.hash.substring(1);
            if ("q" in app.util.getQueryStringParams(QueryLanguageComponent)) {
                /** @type {string} */
                self.trackerData.categoryID = "Search";
            }
        }
        if (self.trackerData && "pageID" in self.trackerData) {
            if (app.isTabletUserAgent) {
                /** @type {string} */
                self.trackerData.pageID = "Tablet: " + self.trackerData.pageID;
            } else {
                if (app.isMobileUserAgent) {
                    /** @type {string} */
                    self.trackerData.pageID = "Mobile: " + self.trackerData.pageID;
                }
            }
        }
        if ("customconfig" in app.mercenttracker) {
            self.tagConfigs = app.mercenttracker.customconfig.getCustomTagConfigs();
            self.tagsOnPage = app.mercenttracker.customconfig.getCustomPageTags()[self.currentPage];
            self.tagsOnPage = $.merge($(app.mercenttracker.customconfig.getCustomPageTags().global).slice() || [], self.tagsOnPage || []);
            self.conversionConfig = app.mercenttracker.customconfig.getConversionConfig();
        } else {
            self.tagConfigs = app.mercenttracker.globalconfig.getCustomTagConfigs();
            self.tagsOnPage = app.mercenttracker.globalconfig.getCustomPageTags()[self.currentPage];
            self.tagsOnPage = $.merge($(app.mercenttracker.globalconfig.getCustomPageTags().global).slice() || [], self.tagsOnPage || []);
            self.conversionConfig = app.mercenttracker.globalconfig.getConversionConfig();
        }
    }
    /**
     * @param {number} c
     * @return {undefined}
     */
    function bind(c) {
        var data = c in req.eventsConfig ? req.eventsConfig[c] : [];
        c = "customEventsConfig" in req ? req.customEventsConfig[c] : {};
        if (data.length && c) {
            data = $.merge($(data).slice(), c);
        } else {
            if (!data.length && c && c.length) {
                /** @type {number} */
                data = c;
            }
        }
        if (req.customEventsConfig) {
            data = $.merge($(req.customEventsConfig.global).slice() || [], data || []);
        }
        data = $.merge($(req.eventsConfig.global).slice() || [], data || []);
        /** @type {number} */
        c = 0;
        for (; c < data.length; c++) {
            var name = data[c];
            if (name && name in req.eventsLib) {
                req.eventsLib[name](self.trackerData);
            }
        }
    }
    /**
     * @param {!Object} a
     * @param {!Object} b
     * @return {undefined}
     */
    function g(a, b) {
        if (a && b) {
            self.conversionConfig[a](b);
        } else {
            if (self.tagsOnPage) {
                b = self.tagsOnPage;
                /** @type {number} */
                var i = 0;
                for (; i < b.length; i++) {
                    a = b[i];
                    var v = walk(a);
                    if (!$.isEmptyObject(v) && a in self.conversionConfig) {
                        self.conversionConfig[a](v);
                    }
                }
            }
        }
    }
    /**
     * @param {!Object} key
     * @param {string} obj
     * @return {?}
     */
    function walk(key, obj) {
        key = self.tagConfigs[key];
        if (!obj && !self.trackerData && !key) {
            return "null";
        }
        var container = {};
        $.each(key, function(name, value) {
            if ("object" == typeof value) {
                /** @type {!Array} */
                var row = [];
                /** @type {number} */
                var i = 0;
                for (; i < value.length; i++) {
                    var val = obj ? obj[value[i]] : self.trackerData ? self.trackerData[value[i]] : "null";
                    if ("object" == typeof val) {
                        row = val;
                    } else {
                        row.push(val || "null");
                    }
                }
                /** @type {string} */
                value = row ? row.join("-_-") : "null";
            } else {
                if (value = obj ? obj[value] : self.trackerData && null !== self.trackerData[value] ? self.trackerData[value] : "null") {
                    /** @type {boolean} */
                    self.hasDataToTrack = true;
                }
            }
            /** @type {string} */
            container[name] = value;
        });
        return container;
    }
    var self = {};
    var req = {
        componentInited: false,
        eventsConfig: {},
        eventsLib: {},
        tagConfig: {},
        pageTagConfig: {}
    };
    app.mercenttracker = {
        init: function() {
            if (!req.componentInited && (app.preferences.mercentEnabled || "trackerData" in app.page) && "function" == typeof mr_sendConversion) {
                render();
                g();
                if ("globalconfig" in app.mercenttracker) {
                    req.eventsConfig = app.mercenttracker.globalconfig.getEventsConfig();
                    req.eventsLib = app.mercenttracker.globalconfig.getEventsLib();
                    app.mercenttracker.globalconfig.initListeners(self.currentPage, self.trackerData);
                }
                if ("customconfig" in app.mercenttracker) {
                    req.customEventsConfig = app.mercenttracker.customconfig.getEventsConfig();
                    req.eventsLib = $.extend(true, req.eventsLib, app.mercenttracker.customconfig.getEventsLib() || {});
                    app.mercenttracker.customconfig.initListeners(self.currentPage, self.trackerData);
                }
                bind(self.currentPage);
                /** @type {boolean} */
                req.componentInited = true;
            }
        },
        initializeCache: function() {
            render();
        },
        initializeEvents: function(value, xhr) {
            bind(xhr || self.trackerData.ns || self.trackerData.productViewType || self.currentPage || value);
        },
        sendTrackData: function(b, c) {
            g(b, c);
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @return {undefined}
     */
    function initialize() {
        $(document).on("product.added", function(item, child) {
            item = child.recommendationBlock && child.recommendationTrackingInfo || context.page.quickViewTrackerData || context.page.trackerData;
            if ("object" == typeof child.trackingInfoExtention) {
                $.extend(item, child.trackingInfoExtention);
            }
            if (item && "UPC" in item) {
                $scope.addToCart(item);
            }
        });
        context.ui.main.on("dialog.opened", function() {
            context.mercenttracker.initializeCache();
            context.mercenttracker.sendTrackData();
            context.mercenttracker.initializeEvents();
        });
    }
    var cache = {
        global: [],
        product: ["Product"],
        Favorites: ["Default"],
        MySamples: ["Default"],
        homepage: [],
        search: [],
        MyAccount: [],
        Wishlist: [],
        order_details: ["Order"],
        customerservice: [],
        cart: ["Cart"],
        quickview: ["Product"],
        checkout: [],
        orderconfirmation: ["Order"]
    };
    var data = {
        global: [],
        product: [],
        homepage: [],
        search: [],
        MyAccount: [],
        Wishlist: [],
        OrderHistory: [],
        customerservice: [],
        cart: [],
        quickview: [],
        checkout: [],
        orderconfirmation: [],
        editProduct: [],
        variationChanged: [],
        PDP: [],
        loginpopup: []
    };
    var testData = {
        Default: function(value) {
            /** @type {string} */
            value.type = "shopper";
            console.info("Mercent, Default : ", value);
            /** @type {!Object} */
            mr_conv = value;
            mr_sendConversion();
        },
        Cart: function(name) {
            /** @type {string} */
            name.type = "shopper";
            console.info("Mercent, Cart : ", name);
            /** @type {!Object} */
            mr_conv = name;
            mr_sendConversion();
        },
        Product: function(data) {
            /** @type {string} */
            data.type = "shopper";
            console.info("Mercent, Product : ", data);
            /** @type {!Object} */
            mr_conv = data;
            mr_sendConversion();
        },
        AddProductToCart: function(contextReference) {
            /** @type {string} */
            contextReference.type = "shopper";
            console.info("Mercent, AddProductToCart : ", contextReference);
            /** @type {!Object} */
            mr_conv = contextReference;
            mr_sendConversion();
        },
        Order: function(data) {
            /** @type {string} */
            data.type = "order";
            console.info("Mercent, Order: ", data);
            /** @type {!Object} */
            mr_conv = data;
            if ("function" == typeof mr_addConvOrderItem) {
                $.each(context.page.trackerArrayData, function(canCreateDiscussions, e) {
                    $.each(e, function(data, product) {
                        data = {
                            sku: product.productID,
                            title: product.productName,
                            url: context.preferences.mrcntOrderItemURL + "?id=" + product.productID,
                            qty: product.quantityValue,
                            extPrice: product.adjustedPrice
                        };
                        console.info("Mercent, Order, OrderItem : ", data);
                        mr_addConvOrderItem(data);
                    });
                });
            }
            mr_sendConversion();
        }
    };
    var model = {
        Default: {
            id: "basketID",
            customerId: "customerID"
        },
        Product: {
            id: "basketID",
            customerId: "customerID"
        },
        Order: {
            id: "orderID",
            customerId: "customerID",
            amount: "amount",
            shipping: "orderShipping",
            tax: "tax",
            discount: "discount",
            postalCode: "customerPostalCode",
            countryCode: "customerCountryCode"
        },
        Cart: {
            id: "basketID",
            customerId: "customerID"
        }
    };
    var $scope = {
        addToCart: function(item) {
            var value;
            if (item && "trackerData" in context.page && "categoryID" in context.page.trackerData) {
                var data = item.categoryID || context.page.trackerData.categoryID;
                value = item.masterProductID || item.productID;
                context.util.setCookie(value, data, {
                    expires: 1E6,
                    path: "/"
                });
            }
            if (null != item) {
                value = item.masterProductID || item.productID;
                /** @type {string} */
                data = [item.UPC, item.bvAverageRating, item.bvReviewCount, item.color, item.SAPsize].join("-_-");
                item = {
                    sku: value,
                    title: item.productName || "",
                    qty: $("select[name=quantity]").val() || 1,
                    url: context.preferences.mrcntOrderItemURL + "?id=" + value,
                    extPrice: item.unitPrice || "",
                    categoryID: item.categoryID || "",
                    attributes: data
                };
                context.mercenttracker.sendTrackData("AddProductToCart", item);
            }
        }
    };
    context.mercenttracker = context.mercenttracker || {};
    context.mercenttracker.globalconfig = {
        getCustomPageTags: function() {
            return cache;
        },
        getCustomTagConfigs: function() {
            return model;
        },
        getConversionConfig: function() {
            return testData;
        },
        getEventsConfig: function() {
            return data;
        },
        getEventsLib: function() {
            return $scope;
        },
        initListeners: function() {
            initialize();
        }
    };
})(window.app = window.app || {}, jQuery);
(function(context, $) {
    /**
     * @return {undefined}
     */
    function initialize() {
        $(document).on("product.added", function(item, child) {
            item = child.recommendationBlock && child.recommendationTrackingInfo || context.page.quickViewTrackerData || context.page.trackerData;
            if ("object" == typeof child.trackingInfoExtention) {
                $.extend(item, child.trackingInfoExtention);
            }
            if (item && "UPC" in item) {
                $scope.addToCart(item);
            }
        });
        context.ui.main.on("dialog.opened", function(canCreateDiscussions, isSlidingUp) {
            context.mercenttracker.initializeCache();
            context.mercenttracker.sendTrackData();
            context.mercenttracker.initializeEvents();
        });
    }
    var cache = {
        global: [],
        product: ["Product"],
        Favorites: ["Default"],
        MySamples: ["Default"],
        homepage: [],
        search: [],
        MyAccount: [],
        Wishlist: [],
        order_details: ["Order"],
        customerservice: [],
        cart: ["Cart"],
        quickview: ["Product"],
        checkout: [],
        orderconfirmation: ["Order"]
    };
    var data = {
        global: [],
        product: [],
        homepage: [],
        search: [],
        MyAccount: [],
        Wishlist: [],
        OrderHistory: [],
        customerservice: [],
        cart: [],
        quickview: [],
        checkout: [],
        orderconfirmation: [],
        editProduct: [],
        variationChanged: [],
        PDP: [],
        loginpopup: []
    };
    var testData = {
        Default: function(value) {
            /** @type {string} */
            value.type = "shopper";
            console.info("Mercent, Default : ", value);
            /** @type {!Object} */
            mr_conv = value;
            mr_sendConversion();
        },
        Cart: function(name) {
            /** @type {string} */
            name.type = "shopper";
            console.info("Mercent, Cart : ", name);
            /** @type {!Object} */
            mr_conv = name;
            mr_sendConversion();
        },
        Product: function(data) {
            /** @type {string} */
            data.type = "shopper";
            console.info("Mercent, Product : ", data);
            /** @type {!Object} */
            mr_conv = data;
            mr_sendConversion();
        },
        AddProductToCart: function(contextReference) {
            /** @type {string} */
            contextReference.type = "shopper";
            console.info("Mercent, AddProductToCart : ", contextReference);
            /** @type {!Object} */
            mr_conv = contextReference;
            mr_sendConversion();
        },
        Order: function(data) {
            /** @type {string} */
            data.type = "order";
            console.info("Mercent, Order: ", data);
            /** @type {!Object} */
            mr_conv = data;
            if ("function" == typeof mr_addConvOrderItem) {
                $.each(context.page.trackerArrayData, function(canCreateDiscussions, e) {
                    $.each(e, function(data, product) {
                        data = {
                            sku: product.productID,
                            title: product.productName,
                            url: context.preferences.mrcntOrderItemURL + "?id=" + product.productID,
                            qty: product.quantityValue,
                            extPrice: product.adjustedPrice
                        };
                        console.info("Mercent, Order, OrderItem : ", data);
                        mr_addConvOrderItem(data);
                    });
                });
            }
            mr_sendConversion();
        }
    };
    var model = {
        Default: {
            id: "basketID",
            customerId: "customerID"
        },
        Product: {
            id: "basketID",
            customerId: "customerID"
        },
        Order: {
            id: "orderID",
            customerId: "customerId",
            amount: "amount",
            shipping: "orderShipping",
            tax: "tax",
            discount: "discount",
            postalCode: "customerPostalCode",
            countryCode: "customerCountryCode"
        },
        Cart: {
            id: "basketID",
            customerId: "customerID"
        }
    };
    var $scope = {
        addToCart: function(item) {
            if (item && "trackerData" in context.page && "categoryID" in context.page.trackerData) {
                var value = item.masterProductID || item.productID;
                context.util.setCookie(value, item.categoryID || context.page.trackerData.categoryID, {
                    expires: 1E6,
                    path: "/"
                });
            }
            if (null != item) {
                value = item.masterProductID || item.productID;
                /** @type {string} */
                var arr = [item.UPC, item.bvAverageRating, item.bvReviewCount, item.color, item.SAPsize].join("-_-");
                item = {
                    sku: value,
                    title: item.productName || "",
                    qty: $("select[name=quantity]").val() || 1,
                    url: context.preferences.mrcntOrderItemURL + "?id=" + value,
                    extPrice: item.unitPrice || "",
                    categoryID: item.categoryID || "",
                    attributes: arr
                };
                context.mercenttracker.sendTrackData("AddProductToCart", item);
            }
        }
    };
    context.mercenttracker = context.mercenttracker || {};
    context.mercenttracker.globalconfig = {
        getCustomPageTags: function() {
            return cache;
        },
        getCustomTagConfigs: function() {
            return model;
        },
        getConversionConfig: function() {
            return testData;
        },
        getEventsConfig: function() {
            return data;
        },
        getEventsLib: function() {
            return $scope;
        },
        initListeners: function() {
            initialize();
        }
    };
})(window.app = window.app || {}, jQuery);
if (!window.jQuery) {
    /** @type {!Element} */
    var s = document.createElement("script");
    s.setAttribute("src", "https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js");
    s.setAttribute("type", "text/javascript");
    document.getElementsByTagName("head")[0].appendChild(s);
}
var app = function(_this, $) {
    /**
     * @return {undefined}
     */
    function init() {
        _this.util.limitCharacters();
        /** @type {!Array<string>} */
        var related_node_ids = "8 13 46 45 36 35 38 37 40 39".split(" ");
        $("body").on("click", ".dialogify, [data-dlg-options], [data-dlg-action]", _this.util.setDialogify).on("keydown", "[data-character-limit]", function(event) {
            var route_lon = $.trim($(this).val());
            var posIndex = $(this).data("character-limit");
            if (route_lon.length >= posIndex && 0 > related_node_ids.indexOf(event.which.toString()) && 9 != event.which) {
                event.preventDefault();
            }
        }).on("change keyup mouseup", "[data-character-limit]", function() {
            var src = $.trim($(this).val());
            var start = $(this).data("character-limit");
            var lb = ($(this).data("skipLineBreak") ? src.replace(/(\r\n|\n|\r)/gm, "") : src).length;
            /** @type {number} */
            start = start - lb;
            if (0 > start) {
                $(this).val(src.slice(0, start));
                /** @type {number} */
                start = 0;
            }
            if ($(this).parent().hasClass("f_placeholder_wrapper")) {
                $(this).parent().siblings("div.char-count").find(".char-remain-count").html(start);
            } else {
                if ($(this).siblings("div.char-count").find(".char-remain-count").length) {
                    $(this).siblings("div.char-count").find(".char-remain-count").html(start);
                } else {
                    $(".char-remain-count").html(start);
                }
            }
        });
        $(document).on("keyup keydown", function(event) {
            if (event.ctrlKey && 80 == event.keyCode) {
                return printPage(), false;
            }
        });
        _this.ui.printPage.on("click", function() {
            printPage();
            return false;
        });
        $("body").on("click", ".toggle", function() {
            $(this).toggleClass("expanded").nextAll(".toggle_content:first").slideToggle("500");
        });
        $("body").on("copy cut paste drag drop", ".password_confirm, .email_equal_confirm, .password_equal_confirm, #dwfrm_profile_login_passwordconfirm, #dwfrm_resetpassword_passwordconfirm", function() {
            return false;
        });
        if (0 < _this.ui.slots.subscribeEmail.length) {
            _this.ui.slots.subscribeEmail.focus(function() {
                var $existing_results = $(this.val());
                if (!(0 < $existing_results.length && $existing_results !== _this.resources.SUBSCRIBE_EMAIL_DEFAULT)) {
                    $(this).animate({
                        color: "#999999"
                    }, 500, "linear", function() {
                        $(this).val("").css("color", "#333333");
                    });
                }
            }).blur(function() {
                if (!(0 < $.trim($(this.val())).length)) {
                    $(this).val(_this.resources.SUBSCRIBE_EMAIL_DEFAULT).css("color", "#999999").animate({
                        color: "#333333"
                    }, 500, "linear");
                }
            });
        }
    }
    /**
     * @return {undefined}
     */
    function initialize() {
        var el = $("html");
        el.addClass("js");
        if (el.hasClass("touch")) {
            /** @type {!Element} */
            var script = document.createElement("script");
            /** @type {string} */
            script.type = "text/javascript";
            script.src = _this.urls.mobileTouchPlugin;
            $(document).ready(function() {
                $("head").append(script);
            });
        }
    }
    /** @type {string} */
    document.cookie = "dw=1";
    return $.extend(_this, {
        containerId: "content",
        ProductCache: null,
        ProductDetail: null,
        currencyCodes: _this.currencyCodes || {},
        init: function() {
            if (0 === document.cookie.length) {
                $("<div/>").addClass("browser_compatibility_alert").html(_this.resources.COOKIES_DISABLED).appendTo(".browser_compatibility_alert_wrapper");
            }
            _this.ui = {
                searchContainer: $(".search_suggestions_container"),
                printPage: $("a.print_page"),
                main: $(".main"),
                header: $(".header"),
                footer: $(".footer"),
                primary: $(".primary"),
                secondary: $(".secondary"),
                slots: {
                    subscribeEmail: $(".subscribe-email")
                }
            };
            initialize();
            init();
            var name = _this.page.ns;
            if (name && _this[name] && _this[name].init) {
                _this[name].init();
            }
            if (name) {
                _this.componentsMgr.load(name);
            }
        }
    });
}(window.app = window.app || {}, jQuery);
(function($) {
    /**
     * @param {!Object} opts
     * @return {?}
     */
    $.fn.toggledList = function(opts) {
        return opts.toggleClass ? this.on(opts.eventName || "click", opts.triggerSelector || this.children(), function(event) {
            event.preventDefault();
            (opts.triggerSelector ? $(this).parent() : $(this)).toggleClass(opts.toggleClass);
            if (opts.callback) {
                opts.callback();
            }
        }) : this;
    };
    /**
     * @return {?}
     */
    $.fn.syncHeight = function() {
        var parentRows = $.makeArray(this);
        parentRows.sort(function(renderedSnippet, blockedObj) {
            return $(renderedSnippet).height() - $(blockedObj).height();
        });
        return this.height($(parentRows[parentRows.length - 1]).height());
    };
})(jQuery);
(function() {
    /**
     * @return {?}
     */
    String.format = function() {
        var s = arguments[0];
        if (void 0 === s || null === s) {
            return false;
        }
        var index;
        /** @type {number} */
        var ncells = arguments.length - 1;
        /** @type {number} */
        index = 0;
        for (; index < ncells; index++) {
            s = s.replace(new RegExp("\\{" + index + "\\}", "gm"), arguments[index + 1]);
        }
        return s;
    };
    if ("function" !== typeof String.prototype.trim) {
        /**
         * @return {string}
         * @this {!String}
         */
        String.prototype.trim = function() {
            return this.replace(/^\s+|\s+$/g, "");
        };
    }
})();
if (!Array.prototype.indexOf) {
    /**
     * @param {string} key
     * @param {number=} l
     * @return {number}
     * @template T
     */
    Array.prototype.indexOf = function(key, l) {
        /** @type {number} */
        l = l || 0;
        /** @type {number} */
        var i = this.length;
        for (; l < i; l++) {
            if (this[l] === key) {
                return l;
            }
        }
        return -1;
    };
}
if (!Array.isArray) {
    /**
     * @param {*} array
     * @return {boolean}
     */
    Array.isArray = function(array) {
        return "[object Array]" === Object.prototype.toString.call(array);
    };
}
if (!Object.isObject) {
    /**
     * @param {!Function} obj
     * @return {?}
     */
    Object.isObject = function(obj) {
        return "[object Object]" !== Object.prototype.toString.call(obj);
    };
}
(function() {
    /** @type {!Array} */
    var methods = ["log", "info", "warn", "debug", "error"];
    /** @type {!Array} */
    var types = [];
    if (app.debugMode === app.constants.STAGING_SYSTEM) {
        /** @type {!Array} */
        types = ["log", "debug"];
    } else {
        if (app.debugMode === app.constants.PRODUCTION_SYSTEM) {
            /** @type {!Array} */
            types = ["log", "info", "warn", "debug", "error"];
        }
    }
    /**
     * @return {undefined}
     */
    var noop = function() {};
    if (!("console" in window)) {
        window.console = {};
    }
    /** @type {number} */
    var i = 0;
    for (; i < methods.length; i++) {
        var method = methods[i];
        if (0 <= types.indexOf(methods[i]) || !(method in console)) {
            /** @type {function(): undefined} */
            console[method] = noop;
        }
    }
})();
/**
 * @return {undefined}
 */
function printPage() {
    app.ui.header.hide();
    app.ui.footer.hide();
    window.print();
    app.ui.header.show();
    app.ui.footer.show();
}
jQuery(document).ready(function() {
    app.init();
});
(function(app, $) {
    /**
     * @return {undefined}
     */
    function install() {
        self.pdpMain.on("product.variationChanged product.colorVariationChanged", function() {
            handle();
            init();
        });
    }
    /**
     * @param {!Event} event
     * @return {undefined}
     */
    function label_dblClickHandler(event) {
        if (app.preferences.engravingPreferencesDialogRequired && $("input[name='personalEngravingValue']").val()) {
            event.preventDefault();
            if (app.preferences.engravingSubmitAddToBagDialogRequired) {
                parse(self.pdpProductImageSrc);
            } else {
                create();
            }
        } else {
            $(event.target).closest("form").submit();
        }
    }
    /**
     * @return {undefined}
     */
    function create() {
        $.ajax({
            url: app.urls.addEngravingItemToBag,
            type: "POST",
            data: self.jsAddToCartForm.serialize(),
            success: callback()
        });
    }
    /**
     * @return {undefined}
     */
    function callback() {
        window.location.href = app.urls.cartShow;
    }
    /**
     * @param {string} params
     * @return {undefined}
     */
    function parse(params) {
        if (app.preferences.engravingShowAddedToCartPopup) {
            params = "currentProduct" in app.pageContextObject && "pid" in app.pageContextObject.currentProduct ? app.pageContextObject.currentProduct.pid : false;
            if ("addedtocart" in app.components && "popup" in app.components.addedtocart && params) {
                app.components.addedtocart.popup.showAddedToCartPopup({
                    pid: params,
                    qty: 1
                });
            }
        } else {
            params = {
                url: app.util.appendParamToURL(app.urls.pageInclude, "cid", "engraving-confirmation"),
                callback: prepareDownscaledImages.call(this, params),
                options: {
                    dialogClass: "engraving-confirmation"
                }
            };
            app.dialog.open(params);
        }
    }
    /**
     * @param {?} inSelectOnClick
     * @return {?}
     */
    function prepareDownscaledImages(inSelectOnClick) {
        return function() {
            $(".confirm_engraving img").attr("src", inSelectOnClick);
            $("a.engraving_button").attr("href", $("a.goback_link").attr("href"));
            $(".personal_engraving_preview").clone().appendTo(".confirm_engraving .image_container");
        };
    }
    /**
     * @param {!Object} name
     * @return {undefined}
     */
    function handle_animIn_COMPLETE(name) {
        $(document).trigger("global.showMinicart", name);
    }
    /**
     * @param {!Object} input
     * @return {undefined}
     */
    function update(input) {
        input = $(input.target);
        var len;
        /** @type {number} */
        len = 0;
        var f = input.parent().find("select.personal_engraving_pictogram_select");
        if (0 < f.length) {
            f = f.find(":selected");
            if (f.val().length) {
                len = f.data("engravingPictogram").charLimit || 0;
            }
        }
        /** @type {number} */
        len = input.attr("maxlength") - len;
        if (0 > len) {
            /** @type {number} */
            len = 0;
        }
        if (0 < $("#message_char_limit").length) {
            $("#message_char_limit").text(len);
        }
        if (input.val().length <= len) {
            /** @type {number} */
            f = Number(len - input.val().length);
            input.parents(".product_engraving_edit_cont").find(".product_engraving_meassage_label .msg_chars_left").html(f);
            if (app.preferences.engravingDisplayRemainingAndMaxCharNumbers) {
                input.parents(".product_engraving_edit_cont").find(".product_engraving_meassage_label .max_char_count").html(len);
            }
        } else {
            input.val(input.val().substr(0, len));
        }
        remove(input);
    }
    /**
     * @return {undefined}
     */
    function addOrEditWatchExpression() {
        $(this).closest(".product_engraving_edit_cont").find("input.personal_engraving_value").trigger("keyup");
    }
    /**
     * @param {!Object} c
     * @return {undefined}
     */
    function remove(c) {
        var filteredView = c.closest(".product_engraving_edit_cont");
        /** @type {null} */
        var e = null;
        c = filteredView.find("select.personal_engraving_pictogram_select");
        if (0 < c.length) {
            c = c.find(":selected");
            if (c.val().length) {
                e = c.data("icon-preview");
            }
        }
        c = filteredView.find("input.personal_engraving_value").val();
        /** @type {boolean} */
        filteredView = "monogram" == filteredView.find("input[type='radio']:checked").val();
        var content = c || "";
        if (filteredView && 3 <= c.length) {
            content = c[0] + '<span class="middle-letter">' + c[1] + "</span>" + c[2];
            if (G.monogramSameSize) {
                /** @type {string} */
                content = '<span class="middle-letter">' + c[0] + c[1] + c[2] + "</span>";
            }
        }
        if (e) {
            if (app.preferences.engravingPreviewPictoContainer) {
                self.personalEngraving.preview.html('<div class="engraving-preview-container"><i class="engraving-preview-pictogram" style="background-image: url(' + e + ');"></i></div>' + content);
            } else {
                self.personalEngraving.preview.html('<img src="' + e + '" class="engraving-preview-pictogram"/>' + content);
            }
        } else {
            self.personalEngraving.preview.html(content);
        }
    }
    /**
     * @return {undefined}
     */
    function init() {
        /** @type {null} */
        var url = null;
        var readersLength = jQuery(".js_add_all_to_cart").length;
        /** @type {null} */
        var jmpress = null;
        if (readersLength) {
            jmpress = jQuery(".js_add_all_to_cart").parents(".product_add_to_cart").wrap($("<form>", {
                action: "#",
                method: "post"
            })).parent();
        }
        /** @type {number} */
        var dfY1 = parseFloat(app.resources.ENGRAVING_MINIMUM_SIZE);
        if (void 0 != $(".product_detail .product-variations").attr("data-current")) {
            /** @type {*} */
            var stat = JSON.parse($(".product_detail .product-variations").attr("data-current"));
            if ("size" in stat) {
                vData = stat.size.value.split(" ");
                /** @type {number} */
                variantSize = parseFloat(vData[0]) || 0;
                if (variantSize >= dfY1) {
                    self.personalEngravingCbx.prop("disabled", false);
                } else {
                    self.personalEngravingCbx.css("z-index", "-1");
                }
            } else {
                self.personalEngravingCbx.prop("disabled", false);
            }
        }
        self.personalEngravingContainer.click(function() {
            if (1 == self.personalEngravingCbx.prop("disabled")) {
                var params = {
                    url: app.util.appendParamToURL(app.urls.pageInclude, "cid", "upgrade-to-engraving"),
                    callback: function() {
                        $(".upgrade-to-engraving img").attr("src", $(".product_primary_image img").attr("src"));
                    },
                    options: {
                        width: "390px",
                        dialogClass: "dialog-engraving-size-warning"
                    }
                };
                app.dialog.open(params);
            }
        });
        $(document).on("click", ".dialog-engraving-size-warning .upgrade_engraving .button", function() {
            app.dialog.close();
        });
        self.personalEngravingCbx.change(function() {
            var h = self.personalEngravingCbx.is(":checked");
            var a = $(this).parents(".js_addtocartform");
            var $specialCharNode = a.find(".add_to_cart");
            var mElmOrSub = a.find(".add_personal_engraving_cbx_label");
            var $innerblock = a.find(".engraving_confirm_comment_cont");
            var p = a.find(".add_personal_engraving_cbx_msg");
            if (h) {
                url = a.attr("action");
                a.attr("action", a.data("engravingAction"));
                $specialCharNode.data("forceStopExecution", true);
                $specialCharNode.off("click").on("click", label_dblClickHandler);
                mElmOrSub.text(mElmOrSub.data("checkecLabel"));
                $innerblock.show();
                self.personalEngravingContainer.addClass("checked");
                if (app.preferences.engravingPreferencesDialogRequired) {
                    enableElementSettingsField();
                    $("div.quickview").hide();
                }
            } else {
                $specialCharNode.data("forceStopExecution", false);
                $specialCharNode.off("click");
                mElmOrSub.text(mElmOrSub.data("uncheckedLabel"));
                if (url) {
                    a.attr("action", url);
                }
                $innerblock.hide();
                self.personalEngravingContainer.removeClass("checked");
                if (app.preferences.engravingPreferencesDialogRequired) {
                    $("input[name='personalEngravingValue']").remove();
                    $("input[name='personalEngravingStyle']").remove();
                    $("input[name='personalEngravingPictogramValue']").remove();
                    $("input[name='personalEngravingColorValue']").remove();
                }
            }
            if (readersLength) {
                if (jmpress.attr("action", a.data("engravingAction")), a = jmpress.find(".js_add_all_to_cart"), h) {
                    a.on("click", function(e) {
                        e.stopPropagation();
                        e = $("form.js_addtocartform");
                        /** @type {!Array} */
                        var model = [];
                        /** @type {!Array} */
                        var arr = [];
                        /** @type {number} */
                        var i = 0;
                        for (; i < e.length; i++) {
                            if ($(e[i]).has(".add_personal_engraving_cbx:checked").length) {
                                arr.push({
                                    pid: $(e[i]).find("[name='pid']").val(),
                                    qty: $(e[i]).find("[name='quantity']").val()
                                });
                            } else {
                                model.push({
                                    pid: $(e[i]).find("[name='pid']").val(),
                                    qty: $(e[i]).find("[name='quantity']").val()
                                });
                            }
                        }
                        $("#personalEngravingID").val(JSON.stringify(arr));
                        $("#clearProductsID").val(JSON.stringify(model));
                        $(this).parents("form").submit();
                    });
                } else {
                    a.off("click");
                }
            }
            if (G.showCheckedMessage) {
                if (h) {
                    p.text(app.resources.ENGRAVING_CBX_CHECKED_MESSAGE);
                } else {
                    p.text(self.cbxUncheckedText);
                }
            }
        });
    }
    /**
     * @return {undefined}
     */
    function enableElementSettingsField() {
        var params = {
            url: app.urls.engravingPopup,
            data: {
                pid: self.jsAddToCartForm.find("[name='pid']").val()
            },
            callback: function() {
                app.components.product.engraving.init();
                $(".personal_engraving_value").trigger("keyup");
            }
        };
        app.dialog.open(params);
    }
    /**
     * @return {undefined}
     */
    function onLoad() {
        if (0 < $(".edit_engraving").length) {
            $(document).on("click", ".edit_engraving", function(params) {
                params.preventDefault();
                params = {
                    url: $(this).attr("href"),
                    callback: function() {
                        app.components.product.engraving.init();
                        $(".personal_engraving_value").trigger("keyup");
                    },
                    options: {
                        dialogClass: "edit_engraving_dialog"
                    }
                };
                app.dialog.open(params);
            });
        }
    }
    /**
     * @return {undefined}
     */
    function initFileList() {
        $(document).off("click", ".confirm_engraving__checkout-button").on("click", ".confirm_engraving__checkout-button", function(event) {
            event.preventDefault();
            create();
        });
    }
    /**
     * @return {undefined}
     */
    function _render() {
        $(document).on("dialogclose", function() {
            if (!$("input[name='personalEngravingValue']").val()) {
                var b = self.jsAddToCartForm.find(".add_to_cart");
                b.data("forceStopExecution", false);
                b.off("click");
                self.jsAddToCartForm.attr("action", self.jsAddToCartForm.data("addtocart"));
                self.jsAddToCartForm.find(".engraving_confirm_comment_cont").hide();
                self.personalEngravingCbxLabel.text(self.personalEngravingCbxLabel.data("uncheckedLabel"));
                self.jsAddToCartForm.find('input[name="addPersonalEngraving"]').attr("checked", false);
                self.personalEngravingContainer.removeClass("checked");
            }
        });
    }
    /**
     * @return {undefined}
     */
    function register() {
        $(document).on("click", ".popupbutton", function(event) {
            event.preventDefault();
            if ($(".personal_engraving_value").val()) {
                app.ajax.getJson({
                    url: self.personalEngraving.addProductForm.attr("action"),
                    method: "POST",
                    data: self.personalEngraving.addProductForm.serialize(),
                    callback: function(name) {
                        if (name.isValid) {
                            login();
                            app.dialog.close();
                            $("div.quickview").show();
                        } else {
                            self.personalEngraving.engravingError.html(app.resources.ENGRAVING_INAPPROPIATE_MESSAGE);
                        }
                    }
                });
            } else {
                self.personalEngraving.engravingError.html(app.resources.ENGRAVING_MISSING_MESSAGE);
            }
        });
    }
    /**
     * @return {undefined}
     */
    function login() {
        var thisState = $(".personal_engraving_value").val();
        /** @type {!Array} */
        var listShared = [];
        var entity;
        self.personalEngravingCbxLabel.text(self.personalEngravingCbxLabel.data("checkecLabel") + " - " + thisState);
        $(".product_engraving_edit_cont").each(function(temp, modified) {
            temp = $(modified);
            if ((app.preferences.engravingMessageFont || app.preferences.engravingMonogramFont) && temp.find(".efont-wrapper .f_checked input[type='radio']").length) {
                listShared.push(temp.find(".efont-wrapper .f_checked input[type='radio']").attr("data-customizationtype"));
            } else {
                listShared.push(temp.find(".engraving_type_controls.checked input[type='radio']").val());
            }
        });
        entity = {
            data: listShared
        };
        self.jsAddToCartForm.append($("<input>", {
            name: "personalEngravingValue",
            value: thisState,
            type: "hidden"
        })).append($("<input>", {
            name: "personalEngravingStyle",
            value: JSON.stringify(entity),
            type: "hidden"
        })).append($("<input>", {
            name: "personalEngravingPictogramValue",
            value: $("select.personal_engraving_pictogram_select").val(),
            type: "hidden"
        })).append($("<input>", {
            name: "personalEngravingColorValue",
            value: $("[name='personalEngravingColorValue']").val(),
            type: "hidden"
        }));
    }
    /**
     * @return {undefined}
     */
    function initialize() {
        if (1 < $(".engraving_edit_cont .product_engraving_edit_cont").length) {
            $(".persengrav_main").addClass("engraving_multiple_qty");
        }
        self.engravingMain.find('input[name="personalEngravingValue"]').attr("placeholder", app.resources.ENGRAVING_MOBILE_TEXTBOX_MESSAGE);
        $(".preview_engraving_button").click(function() {
            $("html, body").animate({
                scrollTop: 87
            }, 250);
        });
        self.engravingMain.find(".engraving_disclaimer_text").hide();
        $('<div class="engraving_mobile_moreinfo"><u>' + app.resources.ENGRAVING_MOBILE_MORE_INFORMATION + "</u></div>").insertAfter($(".engraving_confirm_controls_cont")).click(function() {
            self.engravingMain.find(".engraving_disclaimer_text").slideDown();
            $(this).hide();
        });
        $(".confirm_button_cont button").text(app.resources.ENGRAVING_MOBILE_BUTTON_CONFIRMLABEL).prependTo($(".confirm_button_cont"));
        $(".confirm_button_cont .go_back_link").text(app.resources.ENGRAVING_MOBILE_GO_BACK);
    }
    /**
     * @return {undefined}
     */
    function handle() {
        self.pdpMain = $("#pdpMain");
        if (0 < $("#QuickViewDialog").length) {
            self.pdpMain = $("#QuickViewDialog").find(".js_pdpMain");
        }
        self.addToCartForm = self.pdpMain.find("#add_to_cart_form");
        self.jsAddToCartForm = self.pdpMain.find(".js_addtocartform");
        self.productImageContainer = self.pdpMain.find(".product_image_container");
        self.altVariationSwitchers = self.pdpMain.find(".second_product_selectors>div");
        self.personalEngravingContainer = self.pdpMain.find(".engraving_checkbox");
        self.personalEngravingCbx = self.pdpMain.find(".add_personal_engraving_cbx");
        self.personalEngravingCbxComment = self.pdpMain.find(".engraving_confirm_comment_cont");
        self.addToCartButton = self.pdpMain.find(".add_to_cart");
        self.personalEngravingCbxLabel = self.pdpMain.find(".add_personal_engraving_cbx_label");
        self.pdpProductImageSrc = self.pdpMain.find(".product_image").attr("src");
        self.engravingMain = $(".persengrav_main");
        self.isEnforced = !!app.preferences.enforcePicAndTextSelection && app.preferences.enforcePicAndTextSelection;
        self.personalEngraving = {
            preview: self.engravingMain.find("#personal_engraving_preview"),
            editors: self.engravingMain.find(".personal_engraving_value"),
            pictograms: self.engravingMain.find("select.personal_engraving_pictogram_select"),
            showPreviewButtons: self.engravingMain.find(".preview_engraving_button"),
            submitCont: self.engravingMain.find(".confirm_button_cont"),
            confirmedCbx: self.engravingMain.find("#personal_engraving_agreement"),
            addProductForm: $("#add_product_form"),
            engravingStyleButtons: self.engravingMain.find('.checkbox-Container input[type="radio"]'),
            colors: self.engravingMain.find("a.personalEngravingColor"),
            goBackLink: $(document).find(".edit_engraving_dialog .go_back_link"),
            regularFontWrapper: $(".emessagefont-section"),
            monogramFontWrapper: $(".emonogramfont-section"),
            engravingError: self.engravingMain.find("#personal_engraving_error")
        };
        self.personalEngraving.submitButton = self.personalEngraving.submitCont.find("button[type=submit]");
        self.cbxUncheckedText = self.pdpMain.find(".add_personal_engraving_cbx_msg").text();
    }
    var self = {};
    var G = {
        btnBehavior: "show",
        monogramSameSize: false,
        showCheckedMessage: false
    };
    var BDA = function() {
        /**
         * @param {!Object} options
         * @return {?}
         */
        function form_submit(options) {
            var form = options.closest("form");
            var hrefaction = form.attr("action");
            var cb = form.find(".product_image").attr("src");
            options = options.closest(".persengrav_main").parent().hasClass("dialog_content");
            $.ajax({
                url: hrefaction,
                type: "POST",
                data: form.serialize(),
                success: init.call(this, cb, options)
            });
            return false;
        }
        /**
         * @param {string} socket
         * @param {?} state
         * @return {?}
         */
        function init(socket, state) {
            return function() {
                app.ajax.load({
                    url: app.urls.getMiniCart,
                    callback: handle_animIn_COMPLETE
                });
                if (state) {
                    app.dialog.close();
                    window.location.reload();
                } else {
                    parse(socket);
                }
            };
        }
        /**
         * @return {?}
         */
        function initialize() {
            /** @type {number} */
            var shtStart = 0;
            that.editors.each(function(canCreateDiscussions, txtNameId) {
                shtStart = shtStart + $(txtNameId).val().length;
            });
            return 0 < shtStart && "" != $(that.editors).val().trim();
        }
        /**
         * @return {?}
         */
        function Set() {
            return that.confirmedCbx.prop("checked");
        }
        /**
         * @param {!Object} e
         * @param {!Object} input
         * @return {undefined}
         */
        function l(e, input) {
            if (input) {
                if (app.preferences.engravingPreviewPictoContainer) {
                    that.preview.html('<div class="engraving-preview-container"><img src="' + input + '" class="engraving-preview-pictogram"/></div>' + e);
                } else {
                    that.preview.html('<img src="' + input + '" class="engraving-preview-pictogram"/>' + e);
                }
            } else {
                that.preview.text(e);
            }
            if ($(".personal_engraving_preview").hasClass("monogram_font_style") && 3 <= $(".personal_engraving_preview").text().length) {
                input = e[0] + '<span class="middle-letter">' + e[1] + "</span>" + e[2];
                if (G.monogramSameSize) {
                    /** @type {string} */
                    input = '<span class="middle-letter">' + e[0] + e[1] + e[2] + "</span>";
                }
                $(".personal_engraving_preview").html(input);
            }
        }
        /**
         * @return {undefined}
         */
        function postLink() {
            that.addProductForm.submit(function() {
                that.addProductForm.append('<input type="hidden" name="' + that.submitButton.attr("name") + '" value="on">');
                that.submitButton.prop("disabled", true);
            });
            that.submitButton.prop("disabled", true);
        }
        /** @type {null} */
        var that = null;
        /** @type {!RegExp} */
        var v = new RegExp(app.resources.REGEXP_ENGRAVING_REGULAR_VALIDCHARS);
        /** @type {!RegExp} */
        var negativeRegex = new RegExp(app.resources.REGEXP_ENGRAVING_MONOGRAM_VALIDCHARS);
        return {
            init: function(name) {
                /**
                 * @return {undefined}
                 */
                function init() {
                    if (y) {
                        /** @type {boolean} */
                        y = false;
                    } else {
                        var $field = $(this);
                        self.currentMessageEditor = $field;
                        var str;
                        str = $field.val();
                        /** @type {string} */
                        var s = "";
                        /** @type {number} */
                        var i = 0;
                        for (; i < str.length; i++) {
                            var value = str.charAt(i);
                            var val = value;
                            if (self.currentMessageEditor.parents(".product_engraving_edit_cont").find("input[type='radio']:checked").val() == app.resources.ENGRAVING_CUSTOMIZATION_TYPE ? v.test(val) : negativeRegex.test(val)) {
                                /** @type {string} */
                                s = s + value;
                            }
                        }
                        /** @type {string} */
                        str = s;
                        /** @type {number} */
                        i = 0;
                        /** @type {null} */
                        s = null;
                        num = $field.attr("maxlength");
                        if (0 < $field.parent().find("select.personal_engraving_pictogram_select").length) {
                            value = $field.parent().find("select.personal_engraving_pictogram_select").find(":selected");
                            if (value.val().length) {
                                i = value.data("engravingPictogram").charLimit || 0;
                            }
                        }
                        if (str.length != $field.val().length) {
                            $field.val(str);
                        }
                        /** @type {number} */
                        num = num - i;
                        i = $(this).parents(".product_engraving_edit_cont");
                        value = i.find(".product_engraving_edit_controls_cont input");
                        if (i.find("input[type='radio']:checked").val() != m) {
                            /** @type {string} */
                            str = str.length == num ? str.charAt(0).toLowerCase() + str.charAt(1).toUpperCase() + str.charAt(2).toLowerCase() : str.toUpperCase();
                            value.val(str);
                        }
                        if (str.length > num) {
                            /** @type {string} */
                            str = str.substr(0, num);
                            /** @type {boolean} */
                            y = true;
                            $field.val(str);
                        }
                        /** @type {number} */
                        value = Number(num - str.length);
                        $field.parents(".product_engraving_edit_cont").find(".msg_chars_left").text(value);
                        if (app.preferences.engravingDisplayRemainingAndMaxCharNumbers) {
                            $field.parents(".product_engraving_edit_cont").find(".max_char_count").html(num);
                        }
                        if (value = i.find("input[type='radio']:checked").data("comment")) {
                            $field.parents(".product_engraving_edit_cont").find(".engraving_comments").html(app.resources["ENGRAVING_" + value.toUpperCase() + "_MESSAGE_COMMENT"]);
                        }
                        if (!app.preferences.engravingPictoPreviewRequired) {
                            value = $field.parents(".engraving_edit_and_preview_cont").find("select.personal_engraving_pictogram_select");
                            if (0 < value.length) {
                                value = value.find(":selected");
                                if (1 == value.length && void 0 !== value.data("icon-preview")) {
                                    s = value.data("icon-preview");
                                }
                            }
                            $field = $field.parents(".engraving_edit_and_preview_cont").find("a.personalEngravingColor.selected");
                            if (0 < $field.length) {
                                $(".personal_engraving_preview").css("color", $field.data("engraving-color").id);
                            }
                            l(str, s);
                        }
                        $("div.personal_engraving_preview").removeClass("monogram_font_style").removeClass("regular_font_style");
                        if (i.find("input[type='radio']:checked").val() == m) {
                            $("div.personal_engraving_preview").addClass("regular_font_style");
                        } else {
                            $("div.personal_engraving_preview").addClass("monogram_font_style");
                        }
                        if ((initialize() || that.pictograms.val()) && Set() && !self.isEnforced) {
                            that.submitButton.prop("disabled", false);
                            that.submitButton.addClass("button_enabled");
                        } else {
                            if (self.isEnforced && (initialize() && that.pictograms.val() || initialize()) && Set()) {
                                that.submitButton.prop("disabled", false);
                                that.submitButton.addClass("button_enabled");
                                that.engravingError.html("");
                            } else {
                                that.submitButton.prop("disabled", true);
                                that.submitButton.removeClass("button_enabled");
                            }
                        }
                    }
                }
                /** @type {!Object} */
                that = name;
                var num = app.resources.ENGRAVING_REGULAR_MAXLEN && 14;
                var m = app.resources.ENGRAVING_CUSTOMIZATION_TYPE;
                that.editors.keyup(init).blur(init).prop("disabled", false);
                if (app.preferences.engravingPictoPreviewRequired) {
                    $(document).find("select.personal_engraving_pictogram_select").on("change", addOrEditWatchExpression);
                    $(document).find(".product_engraving_edit_cont").on("keyup", ".personal_engraving_value", update);
                } else {
                    that.pictograms.on("change", function() {
                        $(this).parents(".engraving_edit_and_preview_cont").find(".personal_engraving_value").keyup();
                    });
                }
                that.editors.on("keypress keydown keyup", function(event) {
                    if (13 == event.keyCode) {
                        return event.preventDefault(), false;
                    }
                });
                if (initialize() && Set()) {
                    that.submitButton.prop("disabled", false);
                }
                /** @type {boolean} */
                var y = false;
                that.submitButton.click(function() {
                    if (app.preferences.engravingAddtoBagTracking) {
                        $(document).trigger("product.addToCartEngravingTracking", {
                            productID: $(".engraving_preview_cont").attr("data-productid"),
                            quantity: $(".product_engraving_edit_cont").length,
                            trackingJSON: {}
                        });
                    }
                    /** @type {boolean} */
                    var appProfile = true;
                    that.editors.each(function(input, mei) {
                        input = $(mei);
                        input = (input.is("input") ? input : input.find("input")).val();
                        if (!(/\S/.test(input) || that.pictograms.val())) {
                            self.personalEngraving.engravingError.html(app.resources.ENGRAVING_MISSING_MESSAGE);
                            $(mei).find("input").addClass("missing_engraving_text");
                            /** @type {boolean} */
                            appProfile = false;
                        }
                    });
                    return appProfile;
                });
                that.editors.focus(function() {
                    self.personalEngraving.engravingError.html("");
                    $(".product_engraving_edit_controls_cont").find("input").css("border-color", "#898989");
                });
                that.editors.focusout(function() {
                    var boxInput = self.isEnforced;
                    if (!that.pictograms.val() && !initialize() || boxInput) {
                        if (boxInput) {
                            if (that.pictograms.val() && initialize() || initialize()) {
                                that.engravingError.html("");
                                that.submitButton.prop("disabled", false);
                                that.submitButton.addClass("button_enabled");
                                that.engravingError.html("");
                            } else {
                                that.submitButton.prop("disabled", true);
                                that.submitButton.removeClass("button_enabled");
                                self.personalEngraving.engravingError.html(app.resources.ENGRAVING_MISSING_MESSAGE);
                            }
                        } else {
                            self.personalEngraving.engravingError.html(app.resources.ENGRAVING_MISSING_MESSAGE);
                        }
                    } else {
                        that.engravingError.html("");
                    }
                });
                that.showPreviewButtons.click(function() {
                    var input = $(this);
                    var filteredView = input.parents(".product_engraving_edit_cont");
                    if (app.preferences.engravingPictoPreviewRequired) {
                        remove(input);
                    } else {
                        input = $(this).data("productNum");
                        l($("#personal_engraving_value_" + input).val());
                    }
                    $("div.personal_engraving_preview").removeClass("monogram_font_style").removeClass("regular_font_style");
                    if (filteredView.find("input[type='radio']:checked").val() == m) {
                        $("div.personal_engraving_preview").addClass("regular_font_style");
                    } else {
                        $("div.personal_engraving_preview").addClass("monogram_font_style");
                    }
                });
                that.engravingStyleButtons.change(function() {
                    var _ = $(this).parents(".product_engraving_edit_cont");
                    var fakeCheckable = _.find(".engraving_type_controls");
                    _.find(".disabledSection").removeClass("disabledSection").find("input").attr("disabled", false);
                    if (_.find("input[type='radio']:checked").val() == m) {
                        if (self.personalEngraving.monogramFontWrapper.length || self.personalEngraving.monogramFontWrapper.length) {
                            _.find(self.personalEngraving.monogramFontWrapper).addClass("disabledSection").find('input[type="radio"]').attr("disabled", "disabled").prop("checked", false).closest(".f_checked").removeClass("f_checked");
                            _.find(self.personalEngraving.regularFontWrapper).find('input[type="radio"]:first').prop("checked", true).closest("div").addClass("f_checked");
                        } else {
                            _.find('input[type="radio"]').prop("checked", false).closest(".f_checked").removeClass("f_checked");
                            _.find('input[type="radio"]:first').prop("checked", true).closest("div").addClass("f_checked");
                        }
                        _.find(that.editors).attr("maxlength", $(this).attr("data-attr-id")).keyup();
                        $("div.personal_engraving_preview").removeClass("monogram_font_style").addClass("regular_font_style");
                    } else {
                        if (self.personalEngraving.monogramFontWrapper.length || self.personalEngraving.monogramFontWrapper.length) {
                            _.find(self.personalEngraving.regularFontWrapper).addClass("disabledSection").find('input[type="radio"]').attr("disabled", "disabled").prop("checked", false).closest(".f_checked").removeClass("f_checked");
                            _.find(self.personalEngraving.monogramFontWrapper).find('input[type="radio"]:first').prop("checked", true).closest("div").addClass("f_checked");
                        } else {
                            _.find('input[type="radio"]').prop("checked", false).closest(".f_checked").removeClass("f_checked");
                            _.find('input[type="radio"]:last').prop("checked", true).closest("div").addClass("f_checked");
                        }
                        _.find(that.editors).attr("maxlength", $(this).attr("data-attr-id"));
                        _.find(that.editors).val(_.find(that.editors).val().substring(0, $(this).attr("data-attr-id"))).keyup();
                        $("div.personal_engraving_preview").removeClass("regular_font_style").addClass("monogram_font_style");
                    }
                    fakeCheckable.toggleClass("checked");
                    if (that.pictograms.val()) {
                        that.submitButton.prop("disabled", false);
                        that.submitButton.addClass("button_enabled");
                        that.engravingError.html("");
                    } else {
                        that.submitButton.prop("disabled", true);
                        that.submitButton.removeClass("button_enabled");
                        if (!that.confirmedCbx.is(":checked")) {
                            self.personalEngraving.engravingError.html(app.resources.ENGRAVING_MISSING_MESSAGE);
                        }
                    }
                });
                that.pictograms.change(function() {
                    var $conditionsRuleMajor = $(this);
                    var boxInput = self.isEnforced;
                    if ($conditionsRuleMajor.val() && !boxInput) {
                        that.engravingError.html("");
                        if (that.confirmedCbx.is(":checked")) {
                            that.submitButton.prop("disabled", false);
                            that.submitButton.addClass("button_enabled");
                        }
                    } else {
                        if (boxInput && initialize()) {
                            that.submitButton.prop("disabled", false);
                            that.submitButton.addClass("button_enabled");
                            that.engravingError.html("");
                        } else {
                            that.submitButton.prop("disabled", true);
                            that.submitButton.removeClass("button_enabled");
                            self.personalEngraving.engravingError.html(app.resources.ENGRAVING_MISSING_MESSAGE);
                        }
                    }
                });
                that.confirmedCbx.change(function() {
                    $(".engraving_confirm_controls_cont").toggleClass("checked");
                    var boxInput = self.isEnforced;
                    if (this.checked && !boxInput) {
                        if (that.pictograms.val()) {
                            that.submitButton.prop("disabled", false);
                            that.submitButton.addClass("button_enabled");
                            that.engravingError.html("");
                        } else {
                            if (initialize()) {
                                that.submitButton.prop("disabled", false);
                                that.submitButton.addClass("button_enabled");
                            } else {
                                self.personalEngraving.engravingError.html(app.resources.ENGRAVING_MISSING_MESSAGE);
                            }
                        }
                        if ("show" == G.btnBehavior) {
                            that.submitButton.show();
                        }
                    } else {
                        if (this.checked && boxInput) {
                            that.submitButton.show();
                            if (that.pictograms.val() && initialize() || initialize()) {
                                that.submitButton.prop("disabled", false);
                                that.submitButton.addClass("button_enabled");
                                that.engravingError.html("");
                            } else {
                                self.personalEngraving.engravingError.html(app.resources.ENGRAVING_MISSING_MESSAGE);
                                that.submitButton.prop("disabled", true);
                                that.submitButton.removeClass("button_enabled");
                            }
                        } else {
                            that.submitButton.prop("disabled", true);
                            that.submitButton.removeClass("button_enabled");
                            if ("show" == G.btnBehavior) {
                                that.submitButton.hide();
                            }
                        }
                    }
                });
                that.colors.click(function(e) {
                    e.preventDefault();
                    e = $(this);
                    $("[name='personalEngravingColorValue']").val(e.data("engraving-color").id);
                    $("a.personalEngravingColor").removeClass("selected");
                    e.addClass("selected");
                    $(".personal_engraving_preview").css("color", e.data("engraving-color").id);
                });
                that.goBackLink.click(function(event) {
                    event.preventDefault();
                    app.dialog.close();
                });
                postLink();
                if (app.preferences.engravingMessageFont) {
                    self.personalEngraving.regularFontWrapper.find('input[type="radio"]:first').prop("checked", true).closest("div").addClass("f_checked");
                } else {
                    if (app.preferences.engravingMonogramFont) {
                        self.personalEngraving.monogramFontWrapper.find('input[type="radio"]:first').prop("checked", true).closest("div").addClass("f_checked");
                    }
                }
                $("#add_product_form").submit(function(event) {
                    /** @type {!Array} */
                    var listShared = [];
                    $(".product_engraving_edit_cont").each(function(canCreateDiscussions, mei) {
                        if ((app.preferences.engravingMessageFont || app.preferences.engravingMonogramFont) && $(mei).find(".efont-wrapper .f_checked input[type='radio']").length) {
                            listShared.push($(mei).find(".efont-wrapper .f_checked input[type='radio']").attr("data-customizationtype"));
                        } else {
                            listShared.push($(mei).find(".engraving_type_controls.checked input[type='radio']").val());
                        }
                    });
                    data = {
                        data: listShared
                    };
                    $("#personalEngravingStyle").val(JSON.stringify(data));
                    if (!app.preferences.engravingConfirmationDialogRequired) {
                        return true;
                    }
                    event.preventDefault();
                    form_submit($(this));
                });
            }
        };
    }();
    app.components = app.components || {};
    app.components.product = app.components.product || {};
    app.components.product.engraving = {
        init: function() {
            if (!(app.components.product.PersonalizationEngraving && app.components.product.PersonalizationEngraving.initialized)) {
                handle();
                install();
                init();
                BDA.init(self.personalEngraving);
                if (app.isMobileUserAgent) {
                    initialize();
                }
                onLoad();
                initFileList();
                if (app.preferences.engravingPreferencesDialogRequired) {
                    register();
                    _render();
                }
                app.urls.addProduct = self.pdpMain.find("#add_to_cart_form").attr("action") || app.urls.addProduct;
            }
        },
        changeSettings: function(payload) {
            $.extend(G, payload);
        }
    };
})(window.app = window.app || {}, jQuery);